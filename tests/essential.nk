describe 'quote?' [
  it should 'leave false for block' [ [ ] quote? not ]
  it should 'leave false for true' [ true quote? not ]
  it should 'leave false for false' [ false quote? not ]
  it should 'leave false for decimal' [ 1234 quote? not ]
  it should 'leave false for word' [ #foobar quote? not ]
  it should 'leave false for quoted word' [ ##foobar quote? not ]
  it should 'leave true for quote' [ 'hello world' quote? ]
  it should 'leave false for block implementing *asQuote' [
    [   'foo'   $: *asQuote this ] $: x
    [ [ 'foo' ] @: *asQuote this ] $: y
    x quote? false assert=
    y quote? false assert=
  ]
]

describe 'enquote' [
  "TODO: enquote block. It needs a pretty large set of tests
   for itself."
  it should 'enquote boolean true' [ true enquote 'true' assert= ]
  it should 'enquote boolean false' [ false enquote 'false' assert= ]
  it should 'enquote builtin' [ #+ here enquote '[native code]' assert= ]
  it should 'enquote decimal' [ 100 enquote '100' assert= ]
  it should 'enquote -decimal' [ -100 enquote '-100' assert= ]
  it should 'enquote +decimal' [ +100 enquote '100' assert= ]
  it should 'enquote quote' [ 'hello world' enquote 'hello world' assert= ]
  it should 'enquote word' [ #hello enquote 'hello' assert= ]
  it should 'enquote quoted word' [ ##hello enquote '#hello' assert= ]
]

describe 'stitch' [
  it should 'stitch two empty quotes' [
    '' '' stitch '' assert=
  ]

  it should 'stitch char + empty quotes' [
    'f' '' stitch 'f' assert=
  ]

  it should 'stitch char/multichar + empty quotes' [
    '' 'f' stitch 'f' assert=
    'f' '' stitch 'f' assert=
    'hello' '' stitch 'hello' assert=
    '' 'hello' stitch 'hello' assert=
  ]

  it should 'stitch single character quotes' [
    'x' 'y' stitch 'xy' assert=
    'ä' '🤖' stitch 'ä🤖' assert=
    '👽' '😡' stitch '👽😡' assert=
  ]

  it should 'stitch single-char + multi-char quote' [
    'x' 'yzzy' stitch 'xyzzy' assert=
    'xyzz' 'y' stitch 'xyzzy' assert=
    '😡' '😈ああax💩🤡' stitch '😡😈ああax💩🤡' assert=
    '😡😈ああax💩' '🤡' stitch '😡😈ああax💩🤡' assert=
  ]

  it should 'stitch multi-char + multi-char quote' [
    'xy' 'zzy' stitch 'xyzzy' assert=
    '😈ああax💩' '👽😡fubar' stitch '😈ああax💩👽😡fubar' assert=
  ]
]

describe 'count' [
  it should 'leave 0 for empty block' [
    [ ] count 0 assert=
  ]

  it should 'leave 0 for empty quote' [
    '' count 0 assert=
  ]

  it should 'count the amount of elements in blocks' [
    [ 1 2 3 4 ] count 4 assert=
  ]

  it should 'count one grapheme' [
    '👨‍👩‍👧' count 1 assert=
  ]

  it should 'count one character' [
    'f' count 1 assert=
  ]

  it should 'count one unicode character' [
    'å' count 1 assert=
  ]

  it should 'count Unicode extended grapheme clusters correctly' [
    '🍎👨‍👩‍👧' count 2 assert= "apple followed by family"
    '😡😈ああax💩🤡' count 8 assert=
  ]

  it should 'count the amount of characters (graphemes) in quotes' [
    'Ⓐs°Ämanчеловек' count 14 assert=
  ]
]

describe 'fromLeft' [
  it dies 'when block is empty' [
    [ ] 0 fromLeft
  ]

  it dies 'when quote is empty' [
    '' 0 fromLeft
  ]

  it dies 'when index is negative for block' [
    [ 1 2 3 ] -1 fromLeft
  ]

  it dies 'when index is negative for quote' [
    'hello world' -1 fromLeft
  ]

  it should 'leave block element when index is in bounds' [
    [ 1 2 3 ] 0 fromLeft 1 assert=
    [ 1 2 3 ] 1 fromLeft 2 assert=
    [ 1 2 3 ] 2 fromLeft 3 assert=
  ]

  it should 'leave quote grapheme when index is in bounds' [
    '👨‍👩‍👧🍎' 0 fromLeft '👨‍👩‍👧' assert= "family followed by apple"
    '👨‍👩‍👧🍎' 1 fromLeft   '🍎' assert=

    'Ⓐs°Ämanчел' 0 fromLeft 'Ⓐ' assert=
    'Ⓐs°Ämanчел' 1 fromLeft 's' assert=
    'Ⓐs°Ämanчел' 2 fromLeft '°' assert=
    'Ⓐs°Ämanчел' 3 fromLeft 'Ä' assert=
    'Ⓐs°Ämanчел' 6 fromLeft 'n' assert=
    'Ⓐs°Ämanчел' 9 fromLeft 'л' assert=
  ]

  it dies 'when block index is out of bounds' [
    [ 1 2 3 ] 4 fromLeft
  ]

  it dies 'when quote index is out of bounds' [
    'hœllö' 5 fromLeft
  ]
]

describe 'toWord' [
  it should 'noop if already word' [
    #hello toWord #hello assert=
  ]

  it should 'convert quote to word' [
    'hello' toWord #hello assert=
  ]

  it should 'peel off all quoting' [
    ########hello toWord #hello assert=
  ]

  it should 'convert when quote has grapheme clusters' [
    'x👻👺🤖' toWord #x👻👺🤖 assert=
  ]

  it dies 'when quote is empty' [
    '' toWord
  ]

  it dies 'when quote is whitespace' [
    ' ' toWord
  ]

  it dies 'when quote is newline + whitespace' [
    '


    ' toWord
  ]

  it dies 'when quote contains whitespace' [
    'hello world' toWord
  ]
]

describe 'uppercase?' [
  it should 'leave false for empty quote' [
    '' uppercase? false assert=
  ]

  it should 'leave false for whitespace quote' [
    [ ] [
      ' ' uppercase? false assert=
      '     ' uppercase? false assert=
      '
      ' uppercase? false assert=
    ] there [ ] all?
  ]

  it should 'work for single-letter quotes' [
    [ ] [
      'H' uppercase?  true assert=
      'Á' uppercase?  true assert=
      'c' uppercase? false assert=
      '.' uppercase? false assert=
    ] there [ ] all?
  ]

  it should 'work for multi-letter quotes' [
    [ ] [
      'HELLO' uppercase?  true assert=
        'HÁË' uppercase?  true assert=
      'HeLLO' uppercase? false assert=
      'HÁËå'  uppercase? false assert=
    ] there [ ] all?
  ]
]

describe 'toUppercase' [
  it dies 'when not given a quote #1' [
    0 toUppercase
  ]

  it dies 'when not given a quote #2' [
    #foo toUppercase
  ]

  it should 'leave empty quote unchanged' [
    '' toUppercase '' assert=
  ]

  it should 'leave whitespace/single-uppercase-character quote unchanged' [
    [ ] [
      ' ' toUppercase ' ' assert=
      'C' toUppercase 'C' assert=
      'Ä' toUppercase 'Ä' assert=
      '.' toUppercase '.' assert=
      '0' toUppercase '0' assert=
      '°' toUppercase '°' assert=
      '€' toUppercase '€' assert=
    ] there [ ] all?
  ]


  it should 'uppercase single lowercase character' [
    [ ] [
      'c' toUppercase 'C' assert=
      'ä' toUppercase 'Ä' assert=
      'ā' toUppercase 'Ā' assert=
    ] there [ ] all?
  ]

  it should 'uppercase multi-character quotes' [
    [ ] [
      'HI' toUppercase 'HI' assert=
      'Hi' toUppercase 'HI' assert=
      'hI' toUppercase 'HI' assert=
      'Ḧï' toUppercase 'ḦÏ' assert=
      'Ãuxi£åÅ' toUppercase 'ÃUXI£ÅÅ' assert=
    ] there [ ] all?
  ]
]

describe 'sliceQuoteAt' [
  it dies 'when given non-quote #1' [
    0 1 sliceQuoteAt
  ]

  it dies 'when given non-quote #2' [
    #foobar 1 sliceQuoteAt
  ]

  it dies 'when given non-quote #3' [
    ##foobar 1 sliceQuoteAt
  ]

  it dies 'when given non-quote #4' [
    [ 1 2 3 ] 1 sliceQuoteAt
  ]

  it dies 'when given empty quote' [
    '' 0 sliceQuoteAt
  ]

  it dies 'when slicepoint is negative' [
    'foobar' -1 sliceQuoteAt
  ]

  it dies 'when slicepoint > quote count' [
    'foobar' 7 sliceQuoteAt
  ]

  it should 'handle slicepoint 0 = case' [
    [ ] [ 'foobar' 0 sliceQuoteAt ] there [ '' 'foobar' ] assert=
  ]

  it should 'handle slicepoint quote count = case' [
    [ ] [ 'foobar' 6 sliceQuoteAt ] there [ 'foobar' '' ] assert=
  ]

  it should 'properly slice in bounds' [
    [ ] [ 'foo|bar' 3 sliceQuoteAt ] there [ 'foo' '|bar' ] assert=
  ]

  it should 'properly slice when Unicode characters present' [
    [ ] [ 'Ⓐs°Ämanчел' 4 sliceQuoteAt ] there [ 'Ⓐs°Ä' 'manчел' ] assert=
  ]

  it should 'properly slice single grapheme cluster' [
    [ ] [ '👨‍👩‍👧' 0 sliceQuoteAt ] there [ '' '👨‍👩‍👧' ] assert=
    [ ] [ '👨‍👩‍👧' 1 sliceQuoteAt ] there [ '👨‍👩‍👧' '' ] assert=
  ]

  it should 'properly slice multiple grapheme clusters + characters' [
    [ ] [ '©oobaz👨‍👩‍👧🍎föobar' 7 sliceQuoteAt ] there [ '©oobaz👨‍👩‍👧' '🍎föobar' ] assert=
  ]
]

describe '|slice' [
  it dies 'when given non-block #1' [
    #foobar |slice
  ]

  it dies 'when given non-block #2' [
    true |slice
  ]

  it dies 'when given non-block #4' [
    'foobar' |slice
  ]

  it dies 'when given non-block #5' [
    100 |slice
  ]

  it should 'slice when |at 0' [
    [ ] [ [ ] |slice ] there [ [ ] [ ] ] assert=
    [ ] [ [ 1 2 3 ] dup 0 |to |slice ] there [ [ ] [ 1 2 3 ] ] assert=
  ]

  it should 'slice when |at count' [
    [ ] [ [ 1 2 3 ] |slice ] there [ [ 1 2 3 ] [ ] ] assert=
  ]

  it should 'slice when |at in first half' [
    [ ] [ [ 1 2 3 4 ] dup 1 |to |slice ] there [ [ 1 ] [ 2 3 4 ] ]
  ]

  it should 'slice when |at in second half' [
    [ ] [ [ 1 2 3 4 ] dup 3 |to |slice ] there [ [ 1 2 3 ] [ 4 ] ]
  ]
]
