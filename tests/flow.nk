describe 'obj' [
  in lang

  it should 'leave object immediately' [
    [ [ 100 $: x 200 $: y ] obj bi: [ .x ] [ .y ] ] vals [ 100 200 ] assert=
  ]
]


describe '~>' [
  in lang

  it should 'preserve stack if determiner is a block' [
    [ 100 [ 100 = ] ~> [ ] ] vals [ 100 ] assert=
    [ 100 [ 200 = ] ~> [ ] ] vals [ 100 ] assert=
    [ 2 4 [ + even? ] ~> *
      2 5 [ + even? ] ~> * ] vals [ 8 2 5 ] assert=

    [ 100 $: tmp
      2 5 ([ + dup =: tmp even? ] ~> /) tmp + ] vals [ 2 12 ] assert=

    [ 100 $: tmp
      2 4 ([ + dup =: tmp even? ] ~> /) tmp + ] vals [ 6.5 ] assert=
  ]
]


describe 'thruWord:' [
  in lang

  [ ahead thruVal $: begin
    ahead thruWord: to:
    ahead thruVal $: end

    begin to: end
  ] @: from:

  it should 'check for word match' [
    [ from: 1 to: 10 ] vals [ [ 1 2 3 4 5 6 7 8 9 10 ] ] assert=
    [ from: 1 foo ] 'expected ⸢to:⸥, but got: ⸢foo⸥' assertDies
    [ from: 1 ] 'thru out of bounds' assertDies
  ]
]


describe 'compiledTimes' [
  in lang

  it should 'execute body N times, passing it index' [
    0 $: n
    5000 compiledTimes: [
      dup n + =: n
    ]
    n 12497500 assert=
  ]
]
