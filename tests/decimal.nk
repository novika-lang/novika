"Note: a bunch of tests have been stolen from Roast (the Raku test suite),
 because I really lack imagination for writing this kind of stuff."

describe 'Decimal parsing' [
  it should 'parse simple decimals' [
    1 12 123 1234567812345678
  ]

  it should 'parse negative decimals' [
    -123 -1 -0 -1234567812345678
  ]

  it should 'parse explicit positive decimals' [
    +123 +1 +0 +1234567812345678
  ]

  it should 'parse floats' [
    "TODO"
    false
  ]

  it should 'parse negative floats' [
    "TODO"
    false
  ]

  it should 'parse explicit positive floats' [
    "TODO"
    false
  ]
]

describe 'Package math: inter-domain decimal math' [
  "--- Addition: primitive word + ------------------------"

  it should 'add two small decimals' [
    1 2 + 3 assert=
  ]

  it should 'subtract when either addend is negative' [
    100 -3 + 100 3 - assert=
    -100 3 + 3 100 - assert=
    and
  ]

  it should 'add when both addends are negative' [
    -100 -300 + -400 assert=
  ]

  itDies 'when a non-decimal is added to decimal' [
    1 '2' +
  ]

  it should 'try to convert type block arguments to decimals via *asDecimal' [
    [ $: *asDecimal this ] @: foos
    100 foos 200 foos + 300 assert=
  ]

  "--- Subtraction: primitive word - ---------------------"

  it should 'subtract two small decimals' [
    1 2 - -1 assert=
  ]

  it should 'add when subtrahend is negative' [
    1 -2 - 1 2 + assert=
  ]

  it should 'subtract when minuend is negative' [
    -1 3 - -4 assert=
  ]

  it should 'subtract when both terms are negative' [
    -100 -400 - 400 100 - assert=
  ]

  "--- Multiplication: primitive word * ------------------"

  it should 'multiply two small decimals' [
    100 2 * 200 assert=
  ]

  "--- Division: primitive word / ------------------------"

  it should 'divide when divident is negative' [
    -100 2 / -50 assert=
  ]

  itDies 'when divisor is zero' [
    100 0 /
  ]

  "--- Modulo: primitive word % --------------------------"

  it should 'compute modulo for two small decimals' [
    13 3 rem 1 assert=
  ]

  it should 'compute modulo with negative divident' [
    -13 4 rem 3 assert=
  ]

  it should 'compute modulo with negative divisor' [
    13 -4 rem -3 assert=
    -13 -4 rem -1 assert=
    and
  ]

  itDies 'when modulo divisor is zero' [
    13 0 rem
  ]
]

describe 'Package math: cross-domain decimal math' [

]

describe 'Package math: floating point (precise) math' [
  it should 'pass 0.1 + 0.2 assert= 0.3 test' [
    1 10 / 2 10 / +
    3 10 / assert=
  ]

  it should 'compute modulo with fp divisor' [
    5 25 10 / rem 0 assert=
  ]

  it should 'compute modulo with fp divident' [
    25 10 / 5 rem 1 2 / assert=
  ]
]

describe '*asDecimal hook for implicit conversion of blocks to decimals' [
  itDies 'when block does not implement *asDecimal' [
    1 [ ] +
  ]

  it should 'support blocks which implement *asDecimal literally' [
    [ $: *asDecimal this ] @: wrap
    1 2 wrap + 3 assert=
  ]

  it should 'support blocks which implement *asDecimal computationally' [
    [ $: value [ value dup * ] @: *asDecimal this ] @: squareWrap
    1 2 squareWrap + 5 assert=
  ]

  itDies 'when block does not return a decimal in *asDecimal' [
    [ enquote $: *asDecimal this ] @: wrap
    1 2 wrap +
  ]

  it should 'support blocks whose *asDecimal leaves block which implements *asDecimal' [
    [ $: n [ n ] @: *asDecimal this ] @: foos
    [ $: *asDecimal this ] @: wrap
    100 foos wrap 0 + 100 assert=
  ]

  it should 'support blocks whose *asDecimal computes & leaves block which implements *asDecimal' [
    [ $: n [ n ] @: *asDecimal this ] @: foos
    [ $: n [ n foos ] @: *asDecimal this ] @: wrap
    100 foos 0 + 100 assert=
  ]

  it should 'die when same type left in *asDecimal' [
    "TODO: change this to itDiesWith (TODO) later. It does die here, but for
     a different reason."

    "
    [ $: n [ n foos ] @: *asDecimal this ] @: foos
    100 foos 200 foos + 300 foos assert=
    "

    false
  ]
]
