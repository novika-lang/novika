describe 'examples from README' [
  in lang

  it should 'run the sieve example' [
    2 to: 120 ||-> [ $: n stack without: [ n /? ] asStack n ]

    [ 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61
      67 71 73 79 83 89 97 101 103 107 109 113 ] assert=
  ]

  it should 'generate fizzbuzz rounds' [
    1 to: 100 map: [
      [ [ 15 /? ] 'FizzBuzz'
        [  5 /? ] 'Buzz'
        [  3 /? ] 'Fizz'
      ] choose
    ]

    [ 1 2 'Fizz' 4 'Buzz' 'Fizz' 7 8 'Fizz' 'Buzz' 11 'Fizz'
      13 14 'FizzBuzz' 16 17 'Fizz' 19 'Buzz' 'Fizz' 22 23
      'Fizz' 'Buzz' 26 'Fizz' 28 29 'FizzBuzz' 31 32 'Fizz'
      34 'Buzz' 'Fizz' 37 38 'Fizz' 'Buzz' 41 'Fizz' 43 44
      'FizzBuzz' 46 47 'Fizz' 49 'Buzz' 'Fizz' 52 53 'Fizz'
      'Buzz' 56 'Fizz' 58 59 'FizzBuzz' 61 62 'Fizz' 64 'Buzz'
      'Fizz' 67 68 'Fizz' 'Buzz' 71 'Fizz' 73 74 'FizzBuzz' 76
      77 'Fizz' 79 'Buzz' 'Fizz' 82 83 'Fizz' 'Buzz' 86 'Fizz' 88
      89 'FizzBuzz' 91 92 'Fizz' 94 'Buzz' 'Fizz' 97 98 'Fizz'
      'Buzz' ] assert=
  ]

  it should 'run avg count example' [
    "This actually doesn't work inside blocks. Demonic shit."

    [ ahead |beforeOrToEnd: [ decimal? not ] bi: sum count / ] @: avg:

    [ ] @: stopper

    avg: 1 2 3     stopper 2 assert=
    avg: 100 4 6 5 stopper 28.75 assert=
  ]
]

describe 'definfix example' [
  in lang

  [ $: ctx @: code asDecimal $: prec asWord $: name
    ctx name this pushes
    ahead name [
      ahead $: caller
      caller [ ctx swap entry:flatFetch? [ .prec prec <= ] and ] |beforeOrToEnd
      caller reparent vals last code
    ] opens
  ] @: definfix

  [ $: block

    0 $: _SUM
    1 $: _FACTOR
    2 $: _POWER

    [ ] $: _ctx

    #+ here @: _+
    #- here @: _-
    #* here @: _*
    #/ here @: _/
    #** here @: _**

    #+     _SUM [ 2val _+  ] _ctx definfix
    #-     _SUM [ 2val _-  ] _ctx definfix
    #*  _FACTOR [ 2val _*  ] _ctx definfix
    #/  _FACTOR [ 2val _/  ] _ctx definfix
    #**  _POWER [ 2val _** ] _ctx definfix

    this block parent befriend
    block this reparent
  ] @: withInfixMath

  it should 'compute examples from README' [
    [ [ 3 * 8 + 5 ] + 2 + 3 ] withInfixMath val 34 assert=
    [ [ 3 * 8 + 5 ] + 2 + 3 ] withInfixMath val 34 assert=
    [ 100 * [ 1 / 4 ] ] withInfixMath val 25 assert=
    [ 2 + 3 ** 8 + 6 * 3 ] withInfixMath val 6581 assert=

    [ "Leaves a 2D point object." $: x ahead thruVal $: y this ] @: @
    100 @ 200 $: A
    300 @ 50  $: B

    "Euclidean distance between A and B:"
    [ [B.x - A.x] ** 2 + [B.y - A.y] ** 2 ] withInfixMath val sqrt 250 assert=
  ]

  it should 'support basic +' [
     [ 1 + 2 ] withInfixMath vals [ 3 ] assert=
     [ 100 + 123.45 ] withInfixMath vals [ 223.45 ] assert=
     [ 100 + 123.45 + 5 ] withInfixMath vals [ 228.45 ] assert=
     [ 1 + 2 + 3 + 4 ] withInfixMath vals [ 10 ] assert=
     [ 1 + -2 + 3 + 4 ] withInfixMath vals [ 6 ] assert=
  ]

  it should 'support basic -' [
     [ 1 - 2 ] withInfixMath vals [ -1 ] assert=
     [ 100 - 123.45 ] withInfixMath vals [ -23.45 ] assert=
     [ 100 - 123.45 - 5 ] withInfixMath vals [ -28.45 ] assert=
     [ 1 - 2 - 3 - 4 ] withInfixMath vals [ -8 ] assert=
     [ 1 - -2 - 3 - 4 ] withInfixMath vals [ -4 ] assert=
     [ 5 - 6 - 7 ] withInfixMath vals [ -8 ] assert=
     [ 5 - [ 6 - 7 ] ] withInfixMath vals [ 6 ] assert=
  ]

  it should 'support mixed + and -, run them in correct order' [
    [ 2 + 8 - 4 ] withInfixMath vals [ 6 ]
    [ 2 + 8 - 4 + 100 ] withInfixMath vals [ 106 ]
    [ 2 + 8 - [ 4 + 100 ] ] withInfixMath vals [ -94 ]
  ]

  it should 'support basic *' [
    [ 2 * 2 ] withInfixMath vals [ 4 ] assert=
    [ 100 * 0.3 ] withInfixMath vals [ 30 ] assert=
    [ 100 * 0.3 * 5 ] withInfixMath vals [ 150 ] assert=
    [ 100 * 0.3 * -5 ] withInfixMath vals [ -150 ] assert=
  ]

  it should 'support basic /' [
    [ 2 / 1 ] withInfixMath vals [ 2 ] assert=
    [ 1 / 2 ] withInfixMath vals [ 0.5 ] assert=
    [ 1 / 4 ] withInfixMath vals [ 0.25 ] assert=
    [ 100 / 10 ] withInfixMath vals [ 10 ] assert=
    [ 100 / 10 / 5 ] withInfixMath vals [ 2 ] assert=
    [ [ 100 / 0 ] withInfixMath do ] 'division by zero' assertDies
  ]

  it should 'support mixed * and /, run them in correct order' [
    [ 100 * [ 1 / 4 ] ] withInfixMath vals [ 25 ] assert=
    [ 100 * 1 / 4 ] withInfixMath vals [ 25 ] assert=
    [ 1 / 2 * 100 * 1 / 4 ] withInfixMath vals [ 12.5 ] assert=
    [ [ 2 * 4 ] / [ 5 * 20 / 4 ] ] withInfixMath vals [ 0.32 ] assert=
    [ 2 * 4 / 5 * 20 / 4 ] withInfixMath vals [ 8 ] assert=
  ]

  it should 'support **' [
    [ 2 ** 3 ] withInfixMath vals [ 8 ] assert=
  ]

  it should 'support complex expressions' [
    [ 2 + 3 ** 8 + 6 * 3 ] withInfixMath vals [ 6581 ] assert=
    [ 2 + 3 ** 8 * 5 ] withInfixMath vals [ 32807 ] assert=
    [ 2 + 3 ** [ 8 * 5 ] ] withInfixMath vals [ 12157665459056928803 ] assert=
    [ 3 ** 8 * 5 ] withInfixMath vals [ 32805 ] assert=
    [ -3 ** 8 * 5 ] withInfixMath vals [ 32805 ] assert=
    [ -3 ** -8 * 5 ] withInfixMath val 0.00076208 assertApprox=

    [ 1 + 2 * 3 ] withInfixMath vals [ 7 ] assert=
    [ 1 * 2 + 3 ] withInfixMath vals [ 5 ] assert=
    [ [ [ 5 ] + 2 ] + 3 ] withInfixMath vals [ 10 ] assert=
    [ [ [ 5 ] + 2 ] + 3 ] withInfixMath vals [ 10 ] assert=
    [ [ [ 5 + 3 ] * 8 ] + 2 + 3 ] withInfixMath vals [ 69 ] assert=
    [ [ 5 + 3 * 8 ] + 2 + 3 ] withInfixMath vals [ 34 ] assert=
    [ [ 3 * 8 + 5 ] + 2 + 3 ] withInfixMath vals [ 34 ] assert=
    [ -3 - 5 ] withInfixMath vals [ -8 ] assert=
    [ [ -3 + [ 5 * 3 ] ] open ] withInfixMath vals [ 12 ] assert=
    [ -3 * 2 + [ -5 + [ 8 - 4 ] * 3 ] ] withInfixMath vals [ 1 ] assert=

    [ 100 + [ 1 + 250 / 100 ] ** 3 ] withInfixMath vals [ 142.875 ] assert=
    [ 1 + 2 * 3 / [ 6 * 6 + 5 * 44 ] ** 0.25 ] withInfixMath vals [ 2.5 ] assert=
  ]
]


describe 'zigzag example' [
  in lang

  it should 'run the example' [
    [ dup 1 = => [ drop ^ ]

      collect: '' dup 1 |to $: grid

      0 $: col

      [ grid |: |> |atRightBound? asc desc sel ] $: desc
      [ grid |: <| |afterFirst? desc asc sel (col 1 + =: col) ] $: asc
      desc @: action

      [ $: char grid |: [ char ~ ] ] @: put

      each: [ put action =: action ]

      grid join
    ] @: convert

    'A' 1 convert 'A' assert=
    'A' 3 convert 'A' assert=
    'HELLOWORLD' 1 convert 'HELLOWORLD' assert=
    'PAYPALISHIRING' 3 convert 'PAHNAPLSIIGYIR' assert=
    'PAYPALISHIRING' 4 convert 'PINALSIGYAHRPI' assert=

    stack count 0 assert=
  ]
]
