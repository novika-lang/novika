describe 'Handle infinite block instantiation #22' [
  in lang

  "Note: needs more tests, this is a particularly nasty one."

  it should 'instantiate block with reflections' [
    [ ] $: a
    a a <<
    a new >> same? true assert=
  ]

  it should 'instantiate block with deep reflections' [
    [ ] $: x
    [ [ [ [ [ x ] ] ] ] ] here $: y
    x y shove
    x new
  ]

  it should 'instantiate stack' [
    conts 0 fromRight dup new
  ]

  it should 'compare reflections' [
    [ ] $: a
    a a enclose <<
    a first a = not true assert=
  ]

  it should 'compare deep reflections' [
    [ ] $: x
    [ [ [ [ [ [ [ x ] ] ] ] ] ] ] here $: y
    x y enclose shove
    y y = x first y = not true assert=
  ]
]


describe 'Conversion words should not be inherited #25' [
  in lang

  [
    [ ] $: x

    'hello' $: __asQuote__
    [ 100 1 + ] @: __asDecimal__
    false $: __asBoolean__
    [ ##fubar ] @: __asQuotedWord__
    [ [ #baz $: __asWord__ this ] open ] @: __asWord__

    this
  ] @: b

  it dies 'because child doesn\'t inherit __asQuote__' [ b.x asQuote ]
  it dies 'because child doesn\'t inherit __asDecimal__' [ b.x asDecimal ]
  it dies 'because child doesn\'t inherit __asBoolean__' [ b.x asBoolean ]
  it dies 'because child doesn\'t inherit __asQuotedWord__' [ b.x asQuotedWord ]
  it dies 'because child doesn\'t inherit __asWord__' [ b.x asWord ]

  [ [ ] $: x 'hello' $: __asQuote__ this ] @: issueEg1
  [ [ ] $: x [ 100 1 + ] @: __asDecimal__ this ] @: issueEg2

  it should 'pass issue example #1' [ issueEg1 dup asQuote assert= ]
  it dies 'as expected in issue example #1' [ issueEg1.x asQuote ]

  it should 'pass issue example #2' [ issueEg2 1 + 102 assert= ]
  it dies 'as expected in issue example #2' [ issueEg2.x 1 +  ]
]


describe 'Infinite recursion when word undefined inside word trap #8' [
  in lang

  it dies 'because definition for this-word-is-undefined not found in the enclosing block(s)' [
    [ this-word-is-undefined ] @: __trap__
    this-word-is-undefined-and-will-trigger-the-trap
  ]

  it should 'climb traps' [
    [ 100 ] @: __trap__
    [
      [ 200 trigger-upper-trap2 ] @: __trap__
      [
        [ 300 trigger-upper-trap ] @: __trap__
        trigger-my-own-trap
      ] open
    ] vals [ trigger-my-own-trap 300 trigger-upper-trap 200 trigger-upper-trap2 100 ] assert=
  ]
]


describe 'Invalid typedesc for abstract types/modules #30' [
  in lang

  it should 'die with proper typedescs' [
    [ 'foo' asWord ] 'bad type: quote, expected: a word' assertDies
    [ true asQuote ] 'bad type: boolean, expected: a quote' assertDies
    [ false asQuote ] 'bad type: boolean, expected: a quote' assertDies
  ]
]


describe 'Hydrate functioning as a stack push (#20) and related (#27)' [
  in lang

  it should 'just push the majority of value forms with hydrate and friends' [
    [ ] $: list
    list 1 hydrate "decimal"
    list #foo hydrate "word"
    list true hydrate "bool"
    list 'hello' hydrate "quote"
    list [ 1 #foo true 'hello' ] here assert=
  ]

  it should 'peel off a layer of quoting from quoted words when hydrating' [
    ##foobar vals [ foobar ] assert=
    ###foobar vals [ #foobar ] assert=
  ]

  it should 'evaluate blocks when hydrating' [
    [ 1 2 + ] vals [ 3 ] assert=
  ]

  it should 'evaluate builtins when hydrating' [
    [ 1 2 ] #+ here there [ 3 ] assert=
  ]
]


describe 'Correct precedence with assertDies #52' [
  in lang

  [ 'boo' die ] @: dieBoo

  it should 'have correct assertDies/it should *dies precedence' [
    [ + ] @: add
    [ add - ] @: sub
    [ 1 '2' add ] 'bad type: quote, expected: a decimal' assertDies
    [ 1 2 sub  ] 'no top for block' assertDies
    [ dieBoo ] 'boo' assertDies
  ]

  it dies 'foobar' [
    'foobar' die
  ]
]


describe 'Death nesting, handle death inside __died__ handler #58' [
  in lang


  it should 'handle death handler nesting zero' [
    false $: gotPastError?
    false $: died?

    [
      [ true =: died? ] @: __died__
      ">>>" swap "<<< ERROR"

      true =: gotPastError?
    ] do

    died? true assert=
    gotPastError? false assert=
  ]

  it should 'handle death handler nesting' [
    0 $: nesting
    0 $: afterError

    [
      [ nesting 1 + =: nesting ] $: nesting++
      [ afterError 1 + =: afterError ] @: afterError++

      nesting++ @: __died__

      [
        nesting++ @: __died__

        [
          nesting++ @: __died__

          swap
          afterError++
        ] do

        '1+' 2 +
        afterError++
      ] do

      'bamba' die
      afterError++
    ] do

    nesting 3 assert=
    afterError 0 assert=
  ]

  it should 'handle nested death in proper order' [
    [ ] $: details

    [
      [ getErrorDetails details gulp 'PERIOD' details gulp ] @: __died__

      [
        [ getErrorDetails details gulp 'Boomba! 4th' die ] @: __died__
        [
          [ getErrorDetails details gulp 'Kaboom! 3rd' die ] @: __died__

          [
            [ getErrorDetails details gulp 'Bang! 2nd' die ] @: __died__

            'Boom! 1st' die
          ] do
        ] do
      ] do
    ] do

    details [ 'Boom! 1st' 'Bang! 2nd' 'Kaboom! 3rd' 'Boomba! 4th' 'PERIOD' ] assert=
  ]

  [ I am a liar! ] @: _probe

  it should 'handle re-die' [
    #nil $: error
    0 $: nesting

    [ =: error nesting 1 + =: nesting ] @: __died__

    [
      #die here @: __died__

      [
        [ nesting 1 + =: nesting die ] @: __died__

        [
          [ die "]] make sure that this is unreachable:" nesting 1 + =: nesting ] @: __died__

          _probe enclose [ open ] hydrate
        ] do
      ] do
    ] do

    error getErrorDetails 'definition for I not found in the enclosing block(s)' assert=
    nesting 2 assert=
  ]

  it should 'handle env death handler shallow' [
    false $: didGetPastVals

    [
      [
        100 $: foo
        200 $: bar
        [ foo bar + ] @: baz
      ] obj shallowCopy toOrphan "TODO: make toOrphan immutable?" $: _env

      [
        [ getErrorDetails ] @: __died__

        new _env reparent vals

        true =: didGetPastVals
      ] @: openInEnv

      openInEnv
    ] @: errer


    [ ] errer [ ] assert=
    [ foo bar baz ] errer [ 100 200 300 ] assert=
    [ foo foo bar baz ] errer [ 100 100 200 300 ] assert=

    [ foo bar boom baz ] errer 'definition for boom not found in the enclosing block(s)' assert=
    didGetPastVals true assert=
  ]


  it should 'handle env death handler deep' [
    false $: didGetPastVals

    [
      [
        100 $: foo
        200 $: bar
        [ foo bar + ] @: baz
        [ getErrorDetails ] @: __died__
      ] obj shallowCopy toOrphan "TODO: make toOrphan immutable?" $: _env

      new _env reparent vals

      true =: didGetPastVals
    ] @: errer


    [ ] errer [ ] assert=
    [ foo bar baz ] errer [ 100 200 300 ] assert=
    [ foo foo bar baz ] errer [ 100 100 200 300 ] assert=

    [ foo bar boom baz ] errer 'definition for boom not found in the enclosing block(s)' assert=
    didGetPastVals true assert=
  ]

  it should 'support nested __died__' [
    [
      [
        [ getErrorDetails
          [ getErrorDetails ] @: __died__
          bar
        ] @: __died__

        1 baz
      ] vals
    ] vals [ [ 1 ] 'definition for baz not found in the enclosing block(s)' 'definition for bar not found in the enclosing block(s)' ] assert=
  ]
]

"
describe 'Bug: unhandled nested death infinite loop #68 ' [
  in lang

  it should 'handle nested death rather than looping indefinitely' [
    [ [ [ p die ] open ] @: __died__ foo ] '' assertDies
    [
      [ die ] @: __died__
      [
        [
          [ causes-this-to-evaluate-and-die ] @: __died__
          undefined-word--^
        ] @: __died__
        boo
      ] do
    ] '' assertDies
  ]
]
"

describe 'Block.with and friends properly instantiating' [
  in lang

  it should 'have Block.with and friends properly instantiating' [
    [ ] $: xyzzy
    [ ] $: foozy
    xyzzy foozy befriend
    xyzzy friends new $: newFriends
    newFriends first foozy same? false assert=
  ]
]
