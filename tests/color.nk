describe 'rgb' [
  it should 'create a color from decimals in range, get them back' [
    28 236 100 rgb $: color
    color desc color toQuote assert=
    color toQuote 'rgb(28, 236, 100)' assert=
    [ ] [ color getRGB ] there [ 28 236 100 ] assert=
  ]

  it should 'allow to set & get alpha' [
    28 236 100 rgb $: color
    color getAlpha 255 assert=

    color 100 withAlpha
    color getAlpha 255 assert= drop "assert that withAlpha doesn't mutate"
      =: color

    color getAlpha 100 assert=
    color desc color toQuote assert=
    color toQuote 'rgba(28, 236, 100, 100)' assert=
  ]

  it should 'die when channel values are out of range' [
    [ -1 0 0 rgb ] 'decimal out of range: expected 0 to: 255, got: -1' assertDies
    [ 0 -1 0 rgb ] 'decimal out of range: expected 0 to: 255, got: -1' assertDies
    [ 0 0 -1 rgb ] 'decimal out of range: expected 0 to: 255, got: -1' assertDies
    [ 0 0 0 rgb -1 withAlpha ] 'decimal out of range: expected 0 to: 255, got: -1' assertDies

    [ 256 0 0 rgb ] 'decimal out of range: expected 0 to: 255, got: 256' assertDies
    [ 0 256 0 rgb ] 'decimal out of range: expected 0 to: 255, got: 256' assertDies
    [ 0 0 256 rgb ] 'decimal out of range: expected 0 to: 255, got: 256' assertDies
    [ 0 0 0 rgb 256 withAlpha ] 'decimal out of range: expected 0 to: 255, got: 256' assertDies

    [ 0.123 0 0 rgb ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0.123 0 rgb ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0 0.123 rgb ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0 0 rgb 0.123 withAlpha ] 'decimal is not a positive integer: 0.123' assertDies
  ]
]

describe 'hsl' [
  it should 'create a color from decimals in range, get them back' [
    0 0 0 hsl $: color
    [ ] [ color getRGB ] there [ 0 0 0 ] assert=
    [ ] [ color getHSL ] there [ 0 0 0 ] assert=

    0 0 0 hsl $: color
    [ ] [ color getRGB ] there [ 0 0 0 ] assert=
    [ ] [ color getHSL ] there [ 0 0 0 ] assert=

  	0 0 100 hsl $: color
    [ ] [ color getRGB ] there [ 255 255 255 ] assert=
    [ ] [ color getHSL ] there [ 0 0 100 ] assert=

  	0 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 255 0 0 ] assert=
    [ ] [ color getHSL ] there [ 0 100 50 ] assert=

  	120 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 0 255 0 ] assert=
    [ ] [ color getHSL ] there [ 120 100 50 ] assert=

  	240 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 0 0 255 ] assert=
    [ ] [ color getHSL ] there [ 240 100 50 ] assert=

  	60 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 255 255 0 ] assert=
    [ ] [ color getHSL ] there [ 60 100 50 ] assert=

  	180 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 0 255 255 ] assert=
    [ ] [ color getHSL ] there [ 180 100 50 ] assert=

  	300 100 50 hsl $: color
    [ ] [ color getRGB ] there [ 255 0 255 ] assert=
    [ ] [ color getHSL ] there [ 300 100 50 ] assert=

  	0 0 75 hsl $: color
    [ ] [ color getRGB ] there [ 191 191 191 ] assert=
    [ ] [ color getHSL ] there [ 0 0 75 ] assert=

  	0 0 50 hsl $: color
    [ ] [ color getRGB ] there [ 128 128 128 ] assert=
    [ ] [ color getHSL ] there [ 0 0 50 ] assert=

  	0 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 128 0 0 ] assert=
    [ ] [ color getHSL ] there [ 0 100 25 ] assert=

  	60 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 128 128 0 ] assert=
    [ ] [ color getHSL ] there [ 60 100 25 ] assert=

  	120 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 0 128 0 ] assert=
    [ ] [ color getHSL ] there [ 120 100 25 ] assert=

  	300 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 128 0 128 ] assert=
    [ ] [ color getHSL ] there [ 300 100 25 ] assert=

  	180 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 0 128 128 ] assert=
    [ ] [ color getHSL ] there [ 180 100 25 ] assert=

  	240 100 25 hsl $: color
    [ ] [ color getRGB ] there [ 0 0 128 ] assert=
    [ ] [ color getHSL ] there [ 240 100 25 ] assert=
  ]

  it should 'die when values are out of range' [
    [ -1 0 0 hsl ] 'decimal out of range: expected 0 to: 360, got: -1' assertDies
    [ 0 -1 0 hsl ] 'decimal out of range: expected 0 to: 100, got: -1' assertDies
    [ 0 0 -1 hsl ] 'decimal out of range: expected 0 to: 100, got: -1' assertDies

    [ 361 0 0 hsl ] 'decimal out of range: expected 0 to: 360, got: 361' assertDies
    [ 0 361 0 hsl ] 'decimal out of range: expected 0 to: 100, got: 361' assertDies
    [ 0 0 361 hsl ] 'decimal out of range: expected 0 to: 100, got: 361' assertDies

    [ 0.123 0 0 hsl ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0.123 0 hsl ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0 0.123 hsl ] 'decimal is not a positive integer: 0.123' assertDies
  ]
]

describe 'hsv/hsb' [
  it should 'create a color from decimals in range, get them back' [
    0 0 0 hsv $: color
    [ ] [ color getRGB ] there [ 0 0 0 ] assert=
    [ ] [ color getHSV ] there [ 0 0 0 ] assert=

  	0 0 100 hsv $: color
    [ ] [ color getRGB ] there [ 255 255 255 ] assert=
    [ ] [ color getHSV ] there [ 0 0 100 ] assert=

  	0 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 255 0 0 ] assert=
    [ ] [ color getHSV ] there [ 0 100 100 ] assert=

  	120 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 0 255 0 ] assert=
    [ ] [ color getHSV ] there [ 120 100 100 ] assert=

  	240 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 0 0 255 ] assert=
    [ ] [ color getHSV ] there [ 240 100 100 ] assert=

  	60 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 255 255 0 ] assert=
    [ ] [ color getHSV ] there [ 60 100 100 ] assert=

  	180 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 0 255 255 ] assert=
    [ ] [ color getHSV ] there [ 180 100 100 ] assert=

  	300 100 100 hsv $: color
    [ ] [ color getRGB ] there [ 255 0 255 ] assert=
    [ ] [ color getHSV ] there [ 300 100 100 ] assert=

  	0 0 75 hsv $: color
    [ ] [ color getRGB ] there [ 191 191 191 ] assert=
    [ ] [ color getHSV ] there [ 0 0 75 ] assert=

  	0 0 50 hsv $: color
    [ ] [ color getRGB ] there [ 128 128 128 ] assert=
    [ ] [ color getHSV ] there [ 0 0 50 ] assert=

  	0 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 128 0 0 ] assert=
    [ ] [ color getHSV ] there [ 0 100 50 ] assert=

  	60 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 128 128 0 ] assert=
    [ ] [ color getHSV ] there [ 60 100 50 ] assert=

  	120 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 0 128 0 ] assert=
    [ ] [ color getHSV ] there [ 120 100 50 ] assert=

  	300 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 128 0 128 ] assert=
    [ ] [ color getHSV ] there [ 300 100 50 ] assert=

  	180 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 0 128 128 ] assert=
    [ ] [ color getHSV ] there [ 180 100 50 ] assert=

  	240 100 50 hsv $: color
    [ ] [ color getRGB ] there [ 0 0 128 ] assert=
    [ ] [ color getHSV ] there [ 240 100 50 ] assert=
  ]

  it should 'die when values are out of range' [
    [ -1 0 0 hsv ] 'decimal out of range: expected 0 to: 360, got: -1' assertDies
    [ 0 -1 0 hsv ] 'decimal out of range: expected 0 to: 100, got: -1' assertDies
    [ 0 0 -1 hsv ] 'decimal out of range: expected 0 to: 100, got: -1' assertDies

    [ 361 0 0 hsv ] 'decimal out of range: expected 0 to: 360, got: 361' assertDies
    [ 0 361 0 hsv ] 'decimal out of range: expected 0 to: 100, got: 361' assertDies
    [ 0 0 361 hsv ] 'decimal out of range: expected 0 to: 100, got: 361' assertDies

    [ 0.123 0 0 hsv ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0.123 0 hsv ] 'decimal is not a positive integer: 0.123' assertDies
    [ 0 0 0.123 hsv ] 'decimal is not a positive integer: 0.123' assertDies
  ]
]
