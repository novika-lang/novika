describe 'toCapitalized' [
  in lang

  it dies 'when given non-quote #1' [
    1 toCapitalized
  ]

  it dies 'when given non-quote #2' [
    #foo toCapitalized
  ]

  it dies 'when given non-quote #3' [
    [ 'f' 'o' 'o' ] toCapitalized
  ]

  it should 'not touch empty quote' [
    '' toCapitalized '' assert=
  ]

  it should 'not touch whitespace quote' [
    ' ' toCapitalized ' ' assert=
    '    ' toCapitalized '    ' assert=
    '
    ' toCapitalized '
    ' assert=
  ]

  it should 'not touch already capitalized quote' [
    'Lorem ipsum dolor sit amet.' toCapitalized 'Lorem ipsum dolor sit amet.' assert=
  ]

  it should 'work like toUppercase for single-character quote' [
    'h' toCapitalized 'H' assert=
    'H' toCapitalized 'H' assert=
    'ḧ' toCapitalized 'Ḧ' assert=
    '.' toCapitalized '.' assert=
  ]

  it should 'properly capitalize non-capitalized quote' [
    'john doe went to town in search of rats' toCapitalized
    'John doe went to town in search of rats' assert=

    'ïmanu!' toCapitalized
    'Ïmanu!' assert=

    "..."
  ]
]


describe '~' [
  in lang

  it should 'enquote and concat' [
    100 200 ~ '100200' assert=
    'hello' 'world' ~ 'helloworld' assert=
    [ 100 ] [ 200 ] ~ '[ 100 | ]+[ 200 | ]+' assert=
  ]
]


describe '~*' [
  in lang

  it should 'leave value forms intact' [
    123 ~* '123' assert=
    'hello' ~* 'hello' assert=
    true ~* 'true' assert=
    #true ~* '#true' assert=
    ###true ~* '##true' assert=
    0 0 0 rgb ~* 'rgb(0, 0, 0)' assert=
    #+ here ~* '[native code]' assert=
  ]

  it should 'join forms in blocks into quote non recursively' [
    [ 1 2 3 ] ~* '123' assert=
    [ [ 'A' true ] true ] ~* '[ \'A\' #true | ]+true' assert=
    100 $: x
    200 $: y
    [ [ x y ] ' :: ' x ' @ ' y ] ~* '[ x y | ]+ :: 100 @ 200' assert=
  ]
]
