describe 'newBlockSet' [
  in lang

  it should 'store blocks by address in insertion order' [
    newBlockSet $: set

    [ 1 2 ] $: foo
    [ 3 4 ] $: bar
    [ 1 2 ] $: baz
    [ 'saluton' ] $: boo

    set.add: foo
    set.add: bar

    set.has: foo true assert=
    set.has: bar true assert=
    set.has: baz false assert=
    set.has: boo false assert=

    10 times: [
      set.remove: bar
    ]
    set.has: bar false assert=
    set.size 1 assert=

    10 times: [
      set.add: baz
      set.add: boo
    ]

    set.has: baz true assert=
    set.has: boo true assert=
    set.size 3 assert=

    [ ] $: tmp

    set.each: [ tmp gulp ]

    tmp [ foo baz boo ] vals assert=

    stack count 0 assert=
  ]

  it should 'support different (non-address) keyBy' [
    newBlockSet $: set

    set.keyBy: count

    set.add: [ 1 2 ]
    set.add: [ 1 2 3 ]
    set.add: [ 1 2 3 4 ]
    set.size 3 assert=

    set.has: [ 3 4 ] true assert= "count = 2, exists"
    set.has: [ 5 6 7 ] true assert= "count = 3, exists"
    set.has: [ 100 ] false assert= "count = 1, does not exist"

    set.add: [ 100 200 300 ] "count = 3, exists, do not add"
    set.size 3 assert=

    [ ] $: tmp
    set.each: [ tmp gulp ]
    tmp [ [ 1 2 ] [ 1 2 3 ] [ 1 2 3 4 ] ] assert=
  ]

  it should 'die when given non-block' [
    newBlockSet $: set

    [ set.add: 'hello world' ] 'bad type: quote, expected: a block' assertDies
    [ set.has: 'hello world' ] 'bad type: quote, expected: a block' assertDies
    [ set.remove: 'hello world' ] 'bad type: quote, expected: a block' assertDies
  ]
]
