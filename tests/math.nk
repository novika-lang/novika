describe '2asc' [
  in lang

  it should 'sort two decimals ascending' [
    [ 1 2 2asc ] vals [ 1 2 ] assert=
    [ 2 1 2asc ] vals [ 1 2 ] assert=
  ]
]


describe '2desc' [
  in lang

  it should 'sort two decimals descending' [
    [ 1 2 2desc ] vals [ 2 1 ] assert=
    [ 2 1 2desc ] vals [ 2 1 ] assert=
  ]
]


describe '2min/2max' [
  in lang

  it should 'leave minimum of two decimals: 2min' [
    3 10 2min leaves: 3
  ]

  it should 'leave minimum of two decimals: 2max' [
    3 10 2max leaves: 10
  ]
]


describe 'clamp:' [
  in lang

  it should 'clamp N between Low and High' [
    [ 1 clamp: 5 10 ] vals [ 5 ] assert=
    [ 5 clamp: 5 10 ] vals [ 5 ] assert=
    [ 7 clamp: 5 10 ] vals [ 7 ] assert=
    [ 10 clamp: 5 10 ] vals [ 10 ] assert=
    [ 100 clamp: 5 10 ] vals [ 10 ] assert=
  ]
]


describe 'flipSign' [
  in lang

  it should 'leave opposite number' [
    -1 flipSign 1 assert=
    0 flipSign 0 assert=
    1 flipSign -1 assert=
  ]
]


describe 'abs' [
  in lang

  it should 'leave absolute value' [
    0 abs 0 assert=
    100 abs 100 assert=
    -100 abs 100 assert=
  ]
]


describe '%' [
  in lang

  it should 'leave (approximate) reciprocal of decimal' [
    [ 20 % ] vals [ 0.05 ] assert=
    100 % 100 * 1 assert=
    1.23 % 1.23 * 1 assertApprox=
    0 % 0 assert=
  ]
]


describe 'rangesMap' [
  in lang

  it should 'map decimal from r1 to r2' [
    [ 100  0 100  1.5 255 rangesMap ] vals [ 255 ] assert=

    0  0 100  1.5 255  rangesMap 1.5 assert=

    "Input below R1b:"
    -100  0 100  1.5 255  rangesMap 1.5 assert=

    "Input somewhere in the middle:"
    50  0 100  1.5 255 rangesMap 128.25 assert=

    "Input above R1e:"
    1234  0 100  1.5 255  rangesMap 255 assert=

    "Reverse range:"
    10  0 100  100 0  rangesMap 90 assert=

    "Negative numbers (I have no idea how this works)"
     10  0 100  50 -100  rangesMap   35 assert=
      0  0 100  50 -100  rangesMap   50 assert=
    100  0 100  50 -100  rangesMap -100 assert=
  ]
]


describe 'mapFromRange:toRange:' [
  in lang

  it should 'work the same as rangesMap' [

    0 mapFromRange: 0 100 toRange: 1.5 255
      1.5 assert=

    -100 mapFromRange: 0 100 toRange: 1.5 255
      1.5 assert=

    0 $: myBestLow
    100 $: myBestHi

    10 mapFromRange: myBestLow [ myBestHi ] toRange: 50 [ myBestHi flipSign ]
      35 assert=

    [ 10 mapFromRange: ] 'thru out of bounds' assertDies
    [ 10 mapFromRange: 1 ] 'thru out of bounds' assertDies
    [ 10 mapFromRange: 1 2 ] 'thru out of bounds' assertDies
    [ 10 mapFromRange: 1 2 some-weird-word ] 'expected â¸¢toRange:â¸¥, but got: â¸¢some-weird-wordâ¸¥' assertDies
    [ 10 mapFromRange: 1 2 toRange: ] 'thru out of bounds' assertDies
    [ 10 mapFromRange: 1 2 toRange: 1 ] 'thru out of bounds' assertDies
  ]
]


describe 'mapToRange' [
  in lang

  it should 'map percent decimal in range' [
    [ -100  0 100  mapToRange ] vals [ 0 ] assert=

       0  0 100  mapToRange 0 assert=
     0.1  0 100  mapToRange 10 assert=
       1  0 100  mapToRange 100 assert=
       2  0 100  mapToRange 100 assert=
  ]
]


describe 'mapToRange:' [
  in lang

  it should 'work the same as mapToRange' [
    [ -100 mapToRange: 0 100 ] vals [ 0 ] assert=

      0 mapToRange: 0 100  0 assert=
    0.1 mapToRange: 0 100  10 assert=
      1 mapToRange: 0 100  100 assert=
      2 mapToRange: 0 100  100 assert=
  ]
]


describe '->%:' [
  in lang

  it should 'leave percent of range' [
  -100 %->: 0 100    0 assert=
     0 %->: 0 100    0 assert=
    10 %->: 0 100   10 assert=
    25 %->: 0 100   25 assert=
   100 %->: 0 100  100 assert=
   200 %->: 0 100  100 assert=

   30  %->:  0 10_000   3000 assert=
   60  %->: 64    255  178.6 assert=
  ]
]


describe '%->:' [
  in lang

  it should 'leave decimal in range by percent' [
    100 ->%: 0 256 39.0625 assert=
    39.0625 %->: 0 256 100 assert=
    0 %->: -10 256 -10 assert=
    100 %->: 0 256 256 assert=
  ]
]
