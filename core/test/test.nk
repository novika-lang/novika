76 175 80 rgb $: _OK-COLOR
244 67 54 rgb $: _ERR-COLOR
255 152 0 rgb $: _DIE-COLOR

orphan $: _testPools

[ asWord $: name

  [ ] $: caseList

  _testPools name this pushes

  this
] @: _createTestPool


[ asWord $: name

  _testPools name entry:exists? not =>
    [ name _createTestPool ^ ]

  _testPools name entry:fetch
] @: _fetchTestPool

[
  ahead thru asWord _testPools swap entry:fetch $: pool

  pool.caseList map: [ .run $: case
    case.ok? _OK-COLOR _ERR-COLOR sel
      withEchoFg
        '.' withColorAppendEcho
      dropEchoFg
    case
  ] only: [ .ok? not ]

  dup empty? => [ drop ^ ] $: failCases

  failCases groupBy: [ .secDesc ] each: [ $: section
    [ ] [ '\n\n=== Wrong description for \'' section first .secDesc '\':' ] there join echo

    section each: [ $: failCase
      failCase.desc $: failCaseDesc
      failCase.failedUnexpectedly? br:
        [ _DIE-COLOR '☠' ]
        [ _ERR-COLOR '⨯' ]
      $: bullet

      withEchoFg
        [ '  ' bullet ' Does not ' failCaseDesc ] here join withColorEcho
      dropEchoFg

      failCase.failures each: [
        "Print bullets for each failure message. In case of
          an unexpected failure, there is only one such message:
          its details."
        '    • ' swap '.' stack join echo
      ]
    ]
  ]

  '' echo
] @: runTestsIn


[ ahead thru asQuote $: secDesc
  ahead thru asBlock $: _secBody

  #nil $: pool

  this $: self

  [ "Leaves list of test case instances in pool. If no pool,
     creates a new pool."
    pool #nil = => [ #global _fetchTestPool =: pool ]
    self #caseList pool.caseList dup <| pushes |>
  ] @: caseList

  [ "( -- Rb ): runs this test case. Leaves Report block which
     contains information such as whether this test case failed,
     and details for the failure."
    'child/inheritor responsibility' die
  ] @: run

  [ """( A -- O ): code implementation and Object for the
     'it should' case. Takes Ahead (i.e., a block expected
     to be `ahead`).

    Words `assert=`, `assertDies`, etc. are defined inside
    the body block of 'it should'.

    >>> it should 'do math' [ 1 2 + 3 assert= ]
    [ok]

    >>> it should 'do math' [ 1 2 + 5 assert= ]
    [fail]

    >>> it should 'do boo' [ [ 'boo' die ] 'boo' assertDies ]
    [ok]

    >>> it should 'do boo' [ [ 'boo' ] 'boo' assertDies ]
    [fail]
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ ":inherit:"
      this  $: self

      "Whether this test run succeeded."
      true  $: ok?

      "Whether this test run had failed unexpectedly."
      false $: failedUnexpectedly?

      "A list of failure messages."
      [ ] $: failures

      [ """( A B -- ): asserts that two forms, A and B, are
         equal (using `=`). If they are, that is counted as
         success. If they aren't, that is counted as failure.

        >>> 1 2 assert=
        [test case fails]

        >>> 1 1 assert=
        [test case succeeds]
        """
        $: b $: a

        a b = not => [
          false =: ok?

          [ 'Assertion failure: expected ' b ', got: ' a ] here join
            failures gulp
        ]
      ] $: assert=

      [ "( B1 B2 -- ): asserts taht block tapes of B1 and B2
         are equal."
        tapes= true assert=
      ] $: assertTapes=

      [ """( B M -- ): asserts that Block dies with Message
         set as the error's message (aka its details, obtained
         via `getErrorDetails`).

        >>> [ #foo asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case fails]

        >>> [ 123 asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case succeeds]
        """
        $: message new $: block

        this $: self 'no error' $: errorDetails

        block #*died [
          "Records that the subject block has died successfully,
           and resumes (transfers control back to) assertDies."
          getErrorDetails =: errorDetails
          self resume
        ] opens

        block do

        "Use `assert=` to ensure messages are equal."
        errorDetails message assert= open
      ] $: assertDies

      block #*died [
        "Records that this test run had failed unexpectedly,
         and resumes execution of `self`."
        getErrorDetails failures gulp

        false =: ok?
        true  =: failedUnexpectedly?

        self resume
      ] opens

      block #assert= assert= opens
      block #assertTapes= assertTapes= opens
      block #assertDies assertDies opens
      block do

      this
    ] @: run

    this
  ] @: createItShould

  [ """( A -- O ): code implementation and Object for the
     'it dies' case. Takes Ahead (i.e., a block expected
     to be `ahead`).

    >>> it dies 'when boo' [ … ]
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ ":inherit:"
      desc $: desc "Hoist desc here. We'll (maybe) redefine it."
      this $: self

      "See `createItShould` for what these mean. We're agreeing with
       `createItShould` on these words here, so callers think we're
       of one supertype. The latter is currently not enforced."
      false $: ok?
      false $: failedUnexpectedly?
      [ ] $: failures

      block #*died [ true =: ok? self resume ] opens
      block do

      ok? not => [
        'die ' desc stitch  =: desc
        'Did not die ' desc stitch failures gulp
      ]

      this
    ] @: run

    this
  ] @: createItDies

  [ "( it {should|dies Dq Bb} ): creates a test case with the
     given Description quote and Body block. See `createItShould`
     and `createItDies` for usage examples of each."
    ahead dup thru asWord $: det

    det #should = => [ createItShould caseList gulp ^ ]
    det   #dies = => [   createItDies caseList gulp ^ ]

    [ 'invalid \'it\': expected \'should\' or \'dies\', not \'' det '\'' ] here join die
  ] $: it

  [ ahead thru asWord $: poolName

    pool #nil = not => [
      "Forbid to chage pools on-the-fly, because that would
       present us with some difficulties."
      [ ] [ 'can\'t change test pool \'' pool.name '\' to \'' poolName '\'' ] there join die
    ]

    poolName _fetchTestPool =: pool
  ] $: in

  _secBody #it it opens
  _secBody #in in opens
  _secBody do
] @: describe
