[ """( describe Sd B ): introduces a group of tests with common success,
   failure, and death counters, with the given Section description, and
   then runs an instance of Block with various testing words injected
   (e.g., `itDies`, `itShould`)

  >>> describe '+ word' [
    itShould 'add numbers' [ 1 1 + 2 = ]
    itDies 'when adding wrong types' [ 1 '2' + ]
    itShould 'display failure on this' [ 1 1 + 3 = ]
  ]
  """

  [ 76 175 80 ] @: SUCCESS-RGB
  [ 244 67 54 ] @: FAILURE-RGB
  [ 255 193 7 ] @: DEATH-RGB

  ahead eject $: sectionName
  ahead eject new $: sectionBlockInstance

  0 $: successes
  0 $: failures
  0 $: deaths

  [ "( Cb Tcb Dhb Rb -- ): opens Runner block with Test case
     block on top of a new stack. If Test case block dies,
     Death handler block with error on top of a new stack
     is opened. Comments from '=' checks (such as 'expected
     x, got y') are inserted into Comments block."
    $: runner
    $: deathHandler
    $: testCaseBlock
    $: comments

    orphan $: deathHandlerBlock

    "Reparent death handler block to our test case's
     original parent to preserve lookup whilst adding
     our own death handler."
    deathHandlerBlock testCaseBlock parent reparent
    deathHandlerBlock #*died deathHandler opens

    [ "( Fa Fb -- true/false ): adds an 'Fa is not Fb' message and 
       leaves false when that is the case (determined using `=`); in
       case 'Fa is Fb', leaves true and prints nothing."
      $: b $: a
      a b = [
        'Expected: ' b enquote stitch ', got: ' stitch
                     a enquote stitch
                     comments gulp
        false
      ] or
    ] $: assertEqImpl

    deathHandlerBlock #assert= assertEqImpl opens

    "Reparent test case block to our death handler block.
     Now any death in test case block will be reported to
     the death handler block."
    testCaseBlock deathHandlerBlock reparent

    testCaseBlock enclose runner hydrate
  ] @: itImpl

  [ "( D -- ): reports success outcome for Description."
    SUCCESS-RGB withEchoFg
      ' ✔ ' swap stitch withColorEcho
    dropEchoFg

    successes 1 + =: successes
  ] @: reportSuccess

  [ "( D Cb -- ): reports failure outcome given Description
     and Comments block."
    $: comments
    
    FAILURE-RGB withEchoFg
      ' × ' swap stitch withColorEcho
    dropEchoFg

    comments each: [ '  ◦ ' swap stitch echo ]

    failures 1 + =: failures
  ] @: reportFailure

  [ "( E D -- ): reports death outcome for Description, and
     prints the report for Error itself."
    DEATH-RGB withEchoFg
      ' ☨ ' swap stitch withColorEcho
    dropEchoFg

    reportError

    deaths 1 + =: deaths
  ] @: reportDeath

  [ "( D B -- ): reports Description as success/failure depending
     on whether Block left true/false correspondingly on top of the
     stack after being opened with a new empty stack."
    ahead eject $: description
    ahead eject $: testCaseBlock

    [ ] $: comments

    comments testCaseBlock
      [ 'Does not ' description stitch reportDeath ^ ]
      [ val [ 'Does ' description stitch reportSuccess ]
            [ 'Does not ' description stitch comments reportFailure ] br ]
    itImpl
  ] $: itShouldImpl

  [ "( D B -- ): reports Description as success/failure depending on
     whether Block died while being opened with a new empty stack."
    ahead eject $: description
    ahead eject $: testCaseBlock

    [ ] $: comments

    comments description testCaseBlock
      [ 'Dies ' description stitch reportSuccess ^ ]
      [ do 'Does not die ' description stitch comments reportFailure ]
    itImpl
  ] $: itDiesImpl

  "Export blocks to a section block instance."
  sectionBlockInstance #itDies itDiesImpl opens
  sectionBlockInstance #itShould itShouldImpl opens

  '--- Starting to test ' sectionName stitch echo
  '' echo

  sectionBlockInstance do

  '' echo

  '=== Summary for ' sectionName stitch echo

  SUCCESS-RGB withEchoFg
    ' ✔ Successful cases: ' successes enquote stitch withColorEcho
  dropEchoFg

  failures 0 > => [
    FAILURE-RGB withEchoFg
      ' × Failures: ' failures enquote stitch withColorEcho
    dropEchoFg
  ]

  deaths 0 > => [
    DEATH-RGB withEchoFg
      ' ☨ Deaths: ' deaths enquote stitch withColorEcho
    dropEchoFg
  ]

  '' echo
] @: describe
