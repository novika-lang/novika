[ """( describe Sd B ): introduces a group of tests with common success,
   failure, and death counters, with the given Section description, and
   then runs an instance of Block with various testing words injected
   (e.g., `itDies`, `itShould`)

  >>> describe '+ word' [
    itShould 'add numbers' [ 1 1 + 2 = ]
    itDies 'when adding wrong types' [ 1 '2' + ]
    itShould 'display failure on this' [ 1 1 + 3 = ]
  ]

  There is also a natural language-like word, `is`, which doesn't do much
  other than `ahead thru`ing the action. The following works exactly
  the same as the code above:

  >>> describe '+ word' [
    it should 'add numbers' [ 1 1 + 2 = ]
    it dies 'when adding wrong types' [ 1 '2' + ]
    it should 'display failure on this' [ 1 1 + 3 = ]
  ]
  """

  76 175 80 rgb $: SUCCESS-RGB
  244 67 54 rgb $: FAILURE-RGB
  255 193 7 rgb $: DEATH-RGB

  ahead thru $: sectionName
  ahead thru new $: sectionBlockInstance

  0 $: successes
  0 $: failures
  0 $: deaths

  [ "( Cb Tcb Dhb Rb -- ): opens Runner block with Test case
     block on top of a new stack. If Test case block dies,
     Death handler block with error on top of a new stack
     is opened. Comments from '=' checks (such as 'expected
     x, got y') are inserted into Comments block."
    $: runner
    $: deathHandler
    $: testCaseBlock
    $: comments

    orphan $: deathHandlerBlock

    "Reparent death handler block to our test case's
     original parent to preserve lookup whilst adding
     our own death handler."
    deathHandlerBlock testCaseBlock parent reparent
    deathHandlerBlock #*died deathHandler opens

    [ "( Fa Fb -- true/false ): adds an 'Fa is not Fb' message and
       leaves false when that is the case (determined using `=`); in
       case 'Fa is Fb', leaves true and prints nothing."
      $: b $: a
      a b = [
        'Expected: ' b toQuote stitch ', got: ' stitch
                     a toQuote stitch
                     comments gulp
        false
      ] or
    ] $: assertEqImpl

    [ "( B M -- true/false ): asserts that Block dies with
        Message set as the error's message."
      $: msg new $: block
      this $: self
      #nil $: err

      block orphan dup $: diesHandler block parent reparent reparent drop

      diesHandler #*died [ =: err self resume ] opens
      block do

      err #nil = => [
        'Expected ' block ' to die with ' msg ', but it didn\'t.' stack join comments gulp ^ ]

      err getErrorDetails msg assertEqImpl open
    ] $: assertDiesImpl

    deathHandlerBlock #assert= assertEqImpl opens
    deathHandlerBlock #assertDies assertDiesImpl opens

    "Reparent test case block to our death handler block.
     Now any death in test case block will be reported to
     the death handler block."
    testCaseBlock deathHandlerBlock reparent

    testCaseBlock enclose runner hydrate
  ] @: itImpl

  [ "( Cb ) -- reports a Comments block."
    each: [ '  ◦ ' swap stitch echo ]
  ] @: reportComments

  [ "( D Cb -- ): reports success outcome given Description
     and Comments block."
    $: comments

    SUCCESS-RGB withEchoFg
      ' ✔ ' swap stitch withColorEcho
    dropEchoFg

    comments reportComments

    successes 1 + =: successes
  ] @: reportSuccess

  [ "( D Cb -- ): reports failure outcome given Description
     and Comments block."
    $: comments

    FAILURE-RGB withEchoFg
      ' × ' swap stitch withColorEcho
    dropEchoFg

    comments reportComments

    failures 1 + =: failures
  ] @: reportFailure

  [ "( E D -- ): reports death outcome for Description, and
     prints the report for Error itself."
    DEATH-RGB withEchoFg
      ' ☨ ' swap stitch withColorEcho
    dropEchoFg

    reportError

    deaths 1 + =: deaths
  ] @: reportDeath

  [ "( D B -- ): reports Description as success/failure depending
     on whether Block left true/false correspondingly on top of the
     stack after being opened with a new empty stack."
    ahead thru $: description
    ahead thru $: testCaseBlock

    [ ] $: comments

    comments testCaseBlock
      [ 'Does not ' description stitch reportDeath ^ ]
      [ do comments empty?
          [ 'Does ' description stitch comments reportSuccess ]
          [ 'Does not ' description stitch comments reportFailure ] br ]
    itImpl
  ] $: itShouldImpl

  [ "( D B -- ): reports Description as success/failure depending on
     whether Block died while being opened with a new empty stack."
    ahead thru $: description
    ahead thru $: testCaseBlock

    [ ] $: comments

    comments description testCaseBlock
      [ 'Dies ' description stitch comments reportSuccess ^ ]
      [ do 'Does not die ' description stitch comments reportFailure ]
    itImpl
  ] $: itDiesImpl

  "Export blocks to a section block instance."

  sectionBlockInstance #it [
    """( it _ ... -- ): helps with natural-language-like test phrasing,
     for instance `it should 'do stuff'`, `it dies 'when stuff'`, etc.

    Has no effect in terms of functionality.
    """
    ahead eject $: name

    """
    'it' basically ejects itself (by being evaluated) and
    the next word from ahead, then joins them, and shits
    them right in front of the call to it:
      CALLER:   it | should          ...
      AFTER IT: <nothing> | itShould ...
    """

    ahead 'it' name toQuote toCapitalized stitch toWord inject
  ] opens

  sectionBlockInstance #itDies itDiesImpl opens
  sectionBlockInstance #itShould itShouldImpl opens

  '--- Starting to test ' sectionName stitch echo
  '' echo

  sectionBlockInstance do

  '' echo

  '=== Summary for ' sectionName stitch echo

  SUCCESS-RGB withEchoFg
    ' ✔ Successful cases: ' successes toQuote stitch withColorEcho
  dropEchoFg

  failures 0 > => [
    FAILURE-RGB withEchoFg
      ' × Failures: ' failures toQuote stitch withColorEcho
    dropEchoFg
  ]

  deaths 0 > => [
    DEATH-RGB withEchoFg
      ' ☨ Deaths: ' deaths toQuote stitch withColorEcho
    dropEchoFg
  ]

  '' echo
] @: describe
