[ ahead thru asQuote $: desc
  ahead thru asBlock $: _secBody

  76 175 80 rgb $: OK-COLOR
  244 67 54 rgb $: ERR-COLOR
  255 152 0 rgb $: DIE-COLOR

  [ "A list of case instances in this describe block." ] $: caseList

  [ "( -- Rb ): runs this test case. Leaves Report block which
     contains information such as whether this test case failed,
     and details for the failure."
    'child/inheritor responsibility' die
  ] @: run

  [ """( A -- O ): code implementation and Object for the
     'it should' case. Takes Ahead (i.e., a block expected
     to be `ahead`).

    Words `assert=`, `assertDies`, etc. are defined inside
    the body block of 'it should'.

    >>> it should 'do math' [ 1 2 + 3 assert= ]
    [ok]

    >>> it should 'do math' [ 1 2 + 5 assert= ]
    [fail]

    >>> it should 'do boo' [ [ 'boo' die ] 'boo' assertDies ]
    [ok]

    >>> it should 'do boo' [ [ 'boo' ] 'boo' assertDies ]
    [fail]
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ ":inherit:"
      this  $: self

      "Whether this test run succeeded."
      true  $: ok?

      "Whether this test run had failed unexpectedly."
      false $: failedUnexpectedly?

      "A list of failure messages."
      [ ] $: failures

      [ """( A B -- ): asserts that two forms, A and B, are
         equal (using `=`). If they are, that is counted as
         success. If they aren't, that is counted as failure.

        >>> 1 2 assert=
        [test case fails]

        >>> 1 1 assert=
        [test case succeeds]
        """
        $: b $: a

        a b = not => [
          false =: ok?

          [ 'Assertion failure: expected ' b ', got: ' a ] here join
            failures gulp
        ]
      ] $: assert=

      [ """( B M -- ): asserts that Block dies with Message
         set as the error's message (aka its details, obtained
         via `getErrorDetails`).

        >>> [ #foo asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case fails]

        >>> [ 123 asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case succeeds]
        """
        $: message new $: block

        this $: self 'no error' $: errorDetails

        block #*died [
          "Records that the subject block has died successfully,
           and resumes (transfers control back to) assertDies."
          getErrorDetails =: errorDetails
          self resume
        ] opens

        block do

        "Use `assert=` to ensure messages are equal."
        errorDetails message assert= open
      ] $: assertDies

      block #*died [
        "Records that this test run had failed unexpectedly,
         and resumes execution of `self`."
        getErrorDetails failures gulp

        false =: ok?
        true  =: failedUnexpectedly?

        self resume
      ] opens

      block #assert= assert= opens
      block #assertDies assertDies opens
      block do

      this
    ] @: run

    this
  ] @: newItShould

  [ """( A -- O ): code implementation and Object for the
     'it dies' case. Takes Ahead (i.e., a block expected
     to be `ahead`).

    >>> it dies 'when boo' [ … ]
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ ":inherit:"
      desc $: desc "Hoist desc here. We'll (maybe) redefine it."
      this $: self

      "See `newItShould` for what these mean. We're agreeing with
       `newItShould` on these words here, so callers think we're
       of one supertype. The latter is currently not enforced."
      false $: ok?
      false $: failedUnexpectedly?
      [ ] $: failures

      block #*died [ true =: ok? self resume ] opens
      block do

      ok? not => [
        'die ' desc stitch  =: desc
        'Did not die ' desc stitch failures gulp
      ]

      this
    ] @: run

    this
  ] @: newItDies

  [ "( it {should|dies Dq Bb} ): creates a test case with the
     given Description quote and Body block. See `newItShould`
     and `newItDies` for usage examples of each."
    ahead dup thru asWord $: det

    det #should = => [ newItShould caseList gulp ^ ]
    det   #dies = => [   newItDies caseList gulp ^ ]

    [ 'invalid \'it\': expected \'should\' or \'dies\', not \'' det '\'' ] here join die
  ] $: it

  [ "( -- Fc ): runs all registered test cases, printing the
     progress '.'s. Afterwards, filters out and leaves a block
     containing only Failed cases."
    caseList map: [.run] only: [ $: case
      case.ok? OK-COLOR ERR-COLOR sel
        withEchoFg
          '.' withColorAppendEcho
        dropEchoFg

      "Leave only failed cases. TODO: use `but:` or `without:`
       or whatever other name I would come up with."
      case.ok? not
    ]
  ] @: _runWithProgressAndGetFailCases

  [ "Prints test case failures to STDOUT."
    dup empty? => [ drop ^ ] $: failCases

    [ '\n\n=== Wrong description for \'' desc '\':' ] here join echo

    failCases each: [ $: failCase
      failCase.desc $: failCaseDesc
      failCase.failedUnexpectedly? br:
        [ DIE-COLOR '☠' ]
        [ ERR-COLOR '⨯' ]
      $: bullet

      withEchoFg
        [ '  ' bullet ' Does not ' failCaseDesc ] here join withColorEcho
      dropEchoFg

      failCase.failures each: [
        "Print bullets for each failure message. In case of
         an unexpected failure, there is only one such message:
         its details."
        '    • ' swap '.' stack join echo
      ]

      '' echo
    ]
  ] @: _presentFailCases

  "Define 'it' as an opener for the block we've defined above,
   and evaluate the section body block to populate our list
   of pending cases."
  _secBody #it it opens
  _secBody do

  _runWithProgressAndGetFailCases _presentFailCases
] @: describe
