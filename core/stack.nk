"""
Note: some content and implementation behavior was taken from:

https://elasticdog.com/2008/12/beginning-factor-shufflers-and-combinators/
"""


[ """( A B -- ): drops a pair of forms.

  >>> 1 2
  === 1 2
  >>> 2drop
  ===
  """
  drop drop
] @: 2drop


[ """( A B -- B ): drops a form under the top.

  >>> 1 2
  === 1 2
  >>> nip
  === 2
  """
  swap drop
] @: nip


[ """( A B -- A B A ): duplicates a form over the top.

  >>> 1 2
  === 1 2
  >>> over
  === 1 2 1
  """
  <| dup |> swap
] @: over


[ """( A B -- A B A B ): duplicates a pair of forms.

  >>> 1 2
  === 1 2
  >>> 2dup
  === 1 2 1 2
  """
  over over
] @: 2dup


[ """( A B C -- B C A ): moves thirdmost form to the top.

  >>> 1 2 3
  === 1 2 3
  >>> rot
  === 2 3 1
  >>> rot
  === 3 1 2
  >>> rot
  === 1 2 3
  """
  <| swap |> swap
] @: rot


[ """( A B C -- C A B ): moves top form so it's thirdmost.

  >>> 1 2 3
  === 1 2 3
  >>> -rot
  === 3 1 2
  >>> -rot
  === 2 3 1
  >>> -rot
  === 1 2 3
  """
  rot rot
] @: -rot


[ "( B -- ): replaces current stack with Block in-place. Cursor
   position is saved (clamped to Block end if Block is smaller)"
  stack resub
] @: asStack


[ """( ... T dip: F -- ... F' -- ... F' T ): opens Form behind ToS.

  >>> 1 2 4 [ + ] dip
  === 3 4

  >>> 1 2 4 100 dip
  === 1 2 100 4
  """
  swap <| open |>
] @: dip


[ "( ... T dip: F -- ... F' -- ... F' T ): infix version of `dip`."
  ahead thruBlock dip
] @: dip:


[ """( ... T F -- ... T F' -- ... F' T ): opens Form with Top
   as ToS, restoring Top after Form is opened.

  >>> 1 2 4 [ + ] keep
  === 1 6 4

  >>> 1 2 4 'hello' keep
  === 1 2 4 'hello' 4
  """
  swap dup <| swap open |>
] @: keep


[ "( ... T keep: F -- ... T F' -- ... F' T ): infix version of `keep`."
  ahead thruBlock keep
] @: keep:


"Cleave combinators: they areused when you want to apply multiple
 blocks to the same set of items on the top of the stack."


[ """( F B1 B2 -- F B1', B1' F B2' -- B1' B2' ): opens Blocks
   with Form placed on top for each Block, leaves their results
   in order.

  >>> [ 1 2 3 ] [ sum ] [ count ] bi /
  === 2 \"average\"
  """
  @: b2 @: b1 $: f
  f b1
  f b2
] @: bi


[ """( F bi: B1 B2 -- F B1', B1' F B2' -- B1' B2' ): infix
   version of `bi`.

  >>> [ 1 2 3 ] bi: sum count /
  === 2
  """
  ahead thruBlock
  ahead thruBlock
  bi
] @: bi:


"Spread combinators: they are used when you want to apply a
 different block to different items on the top of the stack.
 The spread combinators are closely related to dip, but provide
 a bit more flexibility while also expressing intent."


[ """( F1 F2 B1 B2 -- F1 B1', B1' F2 B2' -- B1' B2' ): opens
   two Blocks with two corresponding Forms, leaves results of
   opening Blocks.

  >>> [ 1 2 ] [ 3 4 ] [ first ] [ last ] bi*
  === 1 4

  >>> [ 1 2 ] [ 3 4 ] [ first ] [ last + ] bi*
  === 5 \"result of B1 is available to B2\"
  """
  @: b2 @: b1 $: f2 $: f1
  f1 b1
  f2 b2
] @: bi*


[ "( F1 F2 B1 B2 -- F1 B1', B1' F2 B2' -- B1' B2' ): infix
   version of `bi*`."
  ahead thruBlock
  ahead thruBlock
  bi*
] @: bi*:


"Apply combinators: these are used when you want to apply a
 single block to multiple items on the top of the stack."


[ """( F1 F2 B -- (F1 B -- B'1), (F2 B -- B'2) -- B'1 B'2 ):
   applies Block to two Forms.

  >>> 1 2 [ 'X =' swap ~ ] bi@
  == 'X = 1' 'X = 2'
  """
  @: b $: f2 $: f1
  f1 b
  f2 b
] @: bi@


[ "( F1 F2 B -- (F1 B -- B'1), (F2 B -- B'2) -- B'1 B'2 ):
   infix version of `bi@`."
  ahead thruBlock bi@
] @: bi@:
