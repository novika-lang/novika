[ """( A B -- ): drops a pair of forms.

  >>> 1 2
  === 1 2
  >>> 2drop
  ===
  """
  drop drop
] @: 2drop


[ """( A B -- B ): drops a form under the top.

  >>> 1 2
  === 1 2
  >>> nip
  === 2
  """
  swap drop
] @: nip


[ """( A B -- A B A ): duplicates a form over the top.

  >>> 1 2
  === 1 2
  >>> over
  === 1 2 1
  """
  <| dup |> swap
] @: over


[ """( A B -- A B A B ): duplicates a pair of forms.

  >>> 1 2
  === 1 2
  >>> 2dup
  === 1 2 1 2
  """
  over over
] @: 2dup


[ """( A B C -- B C A ): moves thirdmost form to the top.

  >>> 1 2 3
  === 1 2 3
  >>> rot
  === 2 3 1
  >>> rot
  === 3 1 2
  >>> rot
  === 1 2 3
  """
  <| swap |> swap
] @: rot


[ """( A B C -- C A B ): moves top form so it's thirdmost.

  >>> 1 2 3
  === 1 2 3
  >>> -rot
  === 3 1 2
  >>> -rot
  === 2 3 1
  >>> -rot
  === 1 2 3
  """
  rot rot
] @: -rot


[ "( B -- ): replaces current stack with Block in-place. Cursor
   position is saved (clamped to end if Block is smaller)"
  stack resub
] @: cover


[ """( ... T dip: F -- ... F' -- ... F' T ): opens Form behind ToS.

  >>> 1 2 4 [ + ] dip
  === 3 4

  >>> 1 2 4 100 dip
  === 1 2 100 4
  """
  swap <| open |>
] @: dip


[ "( ... T dip: F -- ... F' -- ... F' T ): infix version of `dip`."
  ahead thruBlock dip
] @: dip:


[ """( ... T F -- ... T F' -- ... F' T ): opens Form with Top
   as ToS, restoring Top after Form is opened.

  >>> 1 2 4 [ + ] keep
  === 1 6 4

  >>> 1 2 4 'hello' keep
  === 1 2 4 'hello' 4
  """
  swap dup <| swap open |>
] @: keep


[ "( ... T keep: F -- ... T F' -- ... F' T ): infix version of `keep`."
  ahead thruBlock keep
] @: keep:
