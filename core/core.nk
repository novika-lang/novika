"""This is the entry point of Novika core.

We need to quickly go from low-level and playground-ish to
high-level and serious. Novika core is all about that.
"""

"First, we take hold of the current block (the block associated
with this file), and call it `_root`. With an underscore,
because that's our root, not their root."

conts dup
  count 1 - fromLeft
        0   fromLeft "continuationBlock"
        dup #_root swap pushes


_root #continuationBlock [
  "( C -- cB ): leaves the continuation Block of a Continuation."
  0 fromLeft
] opens


_root #continuationStack [
  "( C -- cS ): leaves the continuation Stack of a Continuation."
  1 fromLeft
] opens


_root #this [
  "( -- B ): pushes the caller's continuation Block."
  conts dup count 2 - fromLeft continuationBlock
] opens


_root #stack [
  "( -- S ): pushes the Stack of the caller's continuation."
  conts dup count 2 - fromLeft continuationStack
] opens


_root #ahead [
  "( -- B ): leaves caller Block on the stack."
  conts dup count 3 - fromLeft continuationBlock
] opens


_root #<| [
  "( -- ): moves stack cursor once to the left."
  stack |at 1 - stack swap |to
] opens


_root #|> [
  "( -- ): moves stack cursor once to the right."
  stack |at 1 + stack swap |to
] opens


_root #inject [
  "( B F -- ): inserts Form to Block: adds Form to Block,
   and moves cursor back again."
  <| dup |> shove dup |at 1 - |to
] opens


_root #there [
  "( S B -- S ): opens Block in Stack, leaves Stack. Ahead
   is transferred to block."
  <| dup |> ahead #hydrate inject
] opens


_root #eject [
  "( [ ... | F ... ]B -- [ ... | ... ]B -- F ): drops and
   leaves the Form after cursor in Block."
  [ |> ] there cherry
] opens


_root #@: [
  "( F @: N ): makes an opener entry called Name for Form."
  ahead swap ahead eject swap opens
] opens


[ "( F $: N -- ): makes a pusher entry called Name for Form."
  ahead swap ahead eject swap pushes
] @: $:


[ "( V =: N -- ): submits Value to an already defined entry
   under the specified Name."
  ahead swap ahead eject swap submit
] @: =:


[ "( help F -- ): echoes help for Form. If form is a word,
   fetches it in caller first."
  ahead dup eject dup word?
    [ entry:fetch ]
    [ nip         ]
  br desc echo
] @: help


[ "( F1 F2 -- ): echoes a pair of Forms."
  swap echo echo
] @: 2echo


[ "( F -- F ): echoes a Form but leaves it."
  dup echo
] @: p


[ "( F1 F2 -- F1 F2 ): echoes a pair of Forms but leaves them."
  2dup 2echo
] @: 2p


[ "( B -- Mt ): leaves Monotonic time difference in milliseconds
   for Block (leaves the time Block took to execute, in ms)."
  monotonic $: t1
  do
  monotonic $: t2

  t2 t1 -
] @: measure


[ "( needs: Pq -- ): ensures that the user has enabled the package
   with id specified by Package quote."
  ahead eject enquote $: packageId

  novika:packages [ packageId = ] any? not =>
    [
      244 67 54 withEchoFg
        '! This program requires the `' packageId stitch '` package. Consult the frontend' stitch
        '  you are using for information on how to do this.'
        swap withColorEcho
             withColorEcho
      dropEchoFg

      'missing package: ' packageId stitch die
    ]
] @: needsPackage:
