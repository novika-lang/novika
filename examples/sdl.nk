"""
Run this with:

  $ novika sdl examples/sdl.nk
"""

"TODO: handle this automatically somehow. also font close"
[ sdl:quit
  sdl:ttf:quit
  die
] @: __died__

sdl:init:everything sdl:init sdl:ensure

sdl:ttf:init sdl:ensure

'/home/alex/git/synapse/fonts/ui/Roboto-Regular.ttf' 11 sdl:ttf:open sdl:notNull $: font

'Hello World' sdl:window:centered sdl:window:centered 680 480 0 sdl:createWindow sdl:notNull $: window

window -1 sdl:renderer:accelerated sdl:createRenderer sdl:notNull $: renderer

font 'Hello World!!' sdl:ttf:size ${ textWidth textHeight }

[ @: h @: w @: y @: x

  [
    x 1 + $: x
    y 1 + $: y
    w 2 - $: w
    h 2 - $: h
    this sdl:intRect ffi:buildStruct&
  ] @: background

  [
    this sdl:intRect ffi:buildStruct&
  ] @: outline

  [ $: renderer

    x mapFromRange: 0 680 toRange: 20 132 round $: c
    y mapFromRange: 0 480 toRange: 0 360 round $: h

    60 c h lch $: bgColor
    30 c h lch $: outColor

    [ outColor getRGB ] vals [ ${ r g b } 0xff $: a this ] there cherry
      sdl:color ffi:buildStruct~ $: fgColor~


    font 'Hello World!!' fgColor~ sdl:ttf:getBlendedSurface sdl:notNull $: textSurface
    renderer textSurface sdl:textureFromSurface sdl:notNull $: textTexture

    renderer outColor getRGB 255 sdl:setRenderDrawColor sdl:ensure
    renderer outline sdl:fillRect

    renderer bgColor getRGB 255 sdl:setRenderDrawColor sdl:ensure
    renderer background sdl:fillRect


    [ 0 $: x
      0 $: y
      textWidth $: w
      textHeight $: h ] obj sdl:intRect ffi:buildStruct& $: srcrect

    [ x 10 + $: x
      y 10 + $: y
      textWidth $: w
      textHeight $: h ] obj sdl:intRect ffi:buildStruct& $: dstrect

    renderer textTexture srcrect dstrect sdl:renderCopy sdl:ensure

    textTexture sdl:destroyTexture
    textSurface sdl:freeSurface
  ] @: draw

  this
] @: createWindow

0 $: mouseX
0 $: mouseY

[ mouseX ] [ mouseY ] 100 100 createWindow $: window

sdl:event ffi:allocateUnion $: e

while: [ e ffi:addressof sdl:waitEvent 0 > ] [
  e.type sdl:event:quit = => break
  e.type sdl:event:mouseMotion = => [
    e.motion.x =: mouseX
    e.motion.y =: mouseY
  ]

  renderer 255 255 255 255 sdl:setRenderDrawColor
  renderer sdl:renderClear sdl:ensure
  renderer window.draw
  renderer sdl:renderPresent
]

font sdl:ttf:close

sdl:quit
sdl:ttf:quit
