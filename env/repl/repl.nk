"REPL root block, also persisted for the entire REPL session.
 A child of the block this comment is part of, and so inherits
 all imported capabilities/files (such as core) and essential."
this child $: _pgRoot


"Where history should be saved in the home directory:"
'.novika_history' $: _HISTORY_FILENAME

_pgRoot #la [
  "Outputs all words defined and accessible at this point."
  _pgRoot entry:names* each: [ $: word
    word private? => next

    _pgRoot word entry:fetch effect $: eff
    word withEmphasisAppendEcho
    ' ' appendEcho
    eff echo
  ]
] opens


_pgRoot #? [
'§1. Hi!' withEmphasisEcho
'
 Welcome to Novika, and thanks for trying it out! Getting
 around the language and the environment may feel daunting --
 and it is, for the language is being actively developed, and
 its pros & cons are getting discovered, explored & patched
 up on the go. Play, quit, play some more -- this is the zen
 at the moment. Have fun!
' echo

'§2. Introduction' withEmphasisEcho
'
 If we were to look at all Novika code that was ever written,
 most of it will be *words*. There are brick-level-words
 (*builtins*), house-level- words, street-level-words,
 city-level, region-level, and so on, up to infinity. Before
 "bricks" comes native code; each next level is built out of
 previous ones, and with enough care could even make use of
 the next levels. This analogy helps to understand *words*,
 and *forms* in general -- they are abstract building blocks,
 sometimes "bricks", sometimes "houses", sometimes "streets"
 and so on. *Blocks* are used to "glue" forms together.
 Blocks are forms as well, so you can "glue" one block to
 another as well as one form to another.
' echo

'§3. Finding new words' withEmphasisEcho

'
 Typing the following command will output all available
 words, together with their stack effect. Note that this
 command is only available in the REPL, similarly to `?`
 word you\'ve entered to see this message.

   >>> la
   startSession a block
   there ( S B -- S )
   @: a block
   $: ( F $: N -- )
   =: ( V =: N -- )
   2die ( Q F -- )
   needsCapability: ( needsCapability: Id -- )
   withColorEcho ( F -- )
   ...

   >>> help help
   ( help F -- ): echoes help for Form. If form is a word,
    fetches it in caller first.
' echo

' Documentation often contains examples. You can try typing
 some in, playing with forms in them, and orchestrating
 multiple examples so they perform one "song". This is one
 of the best ways to learn new words, both in natural and
 comuter languages.

 Note: I\'m using the word *command* here, but `la` and `help`
 are normal Novika words, just like `echo` and `swap` are.
' echo

'§4. Have any issues?' withEmphasisEcho
'
 Visit https://github.com/novika-lang/novika for more Novika content.
 Create an issue at https://github.com/novika-lang/novika/issues if
 you need help.
' echo
] opens


[ "Whether there was an error."
  false $: error

  "Global stack, persisted for the entire REPL session."
  [ ] $: pgStack

  "Configure readLine* to fit our use case."
  [ [ 1 = sel: '>>> ' '... ' ] @: prompt

    "If there is no history file, create one."
    disk:home _HISTORY_FILENAME disk:join $: historyFile

    historyFile disk:hasFile? not => [ historyFile disk:touch ]
    historyFile disk:read $: history

    [ "( -- ): writes current `history` to disk."
      history historyFile disk:write
    ] @: saveHistory

    "If we can't parse, expect more input (go multiline)."
    [ orphan swap

      false $: slurpDied "< Don't need anything else..."

      [ "Oops, 'slurp' died (note the position of __dies__), so let's
         try to wait for enough input to not make slurp die..."
        true =: slurpDied
      ] @: __died__

      slurp "Regardless of whether `slurp` dies, we end up here" slurpDied
    ] @: more?

    "These characters cannot be used inside words. Don't remember
     if there are any other..."
    '[]\'" ' $: delimiters

    [ 'Showing available toplevel words'

      (_pgRoot entry:names* without: private?)
    ] @: suggest
  ] obj $: config


  [ "( Q -- ): runs a Quote of Novika source code in the context
     of the current REPL session."
    $: line

    this $: self

    0 $: durationMs

    "Create an instance of the root block so that the line of code
     we will execute has access to all words the frontend provided."
    _pgRoot new $: pgRootInstance

    "Create an instance of the stack block, for if an error happens,
     we'd like to restore back to the 'good' stack."
    pgStack shallowCopy $: pgStackCopy

    [ "This block is required to isolate deaths inside the REPL line
       session from deaths inside the REPL code itself."

      [ "This death handler will catch all errors that are made in
         the REPL root block instance we've created above. This handler
         will report the error when it happens."
        reportError true =: error
        self resume
      ] @: __died__

      [ pgStackCopy pgRootInstance line slurp hydrate! ] measure =: durationMs
    ] do

    error br:
      [ "There was an error (or multiple errors). It was already
         reported by the death handler above."
        false =: error
      ]
      [ "There was no error. Merge dictionaries of original and
         instance of the REPL root block, making entries defined
         in the instance visible to next REPL inputs. Also,
         substitute the global stack with the updated stack,
         which proved to have no errors."
        _pgRoot pgRootInstance mergeDicts
        pgStackCopy =: pgStack

        [ 'In ' durationMs 'ms ('
                durationMs 1000 * 'μs '
                durationMs 1000000 * 'ns)'
        ] vals join echo
      ]

    pgStack echo
  ] @: runLine


  loop: [
    config readLine* br:
      [ "Line was read successfully:" runLine ]
      [ "The user had pressed Ctrl-D:" 'Bye.' echo break ]
  ]

  "Save history when the user quits (but NOT afte REPL error!)."
  config.saveHistory
] @: _startSession

  0 87 183 rgb withEchoBg ' ' withColorAppendEcho dropEchoBg
255 215 0 rgb withEchoBg ' ' withColorAppendEcho dropEchoBg

' Help Ukraine Now: https://war.ukraine.ua/donate/' withEmphasisEcho
'' echo

[
  'Novika ' novika:version '\n'
  'Hit Ctrl-D or Ctrl-C to quit. Type "?" for more information.'
] vals join echo

_startSession
