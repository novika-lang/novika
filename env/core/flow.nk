[ "( B -- S ): activates an empty Stack for the duration
   of Block."
  orphan swap there
] @: vals


[ "( B -- T ): activates an empty stack for the duration of Block,
   and leaves Top form in the stack. Dies if none."
  vals cherry
] @: val

[ "( B1 B2 -- T1 T2 ): activates individual empty stacks for each
   of the two Blocks, and leaves their corresponding Top forms."
  bi*: val val
] @: 2val


[ "( B -- Lb ): leaves Literal block after cursor in Block. If
   form after cursor isn't a block, encloses it and opens it with
   an empty stack, Block being the enclosing block's parent, and
   finally asserts the resulting form is a block."
  dup thru dup block? br: nip [ enclose adopt val asBlock ]
] @: thruLitBlock


[ "( B -- W/dies ): same as `thru asWord`."
  thru asWord
] @: thruWord


[ """( B W -- /dies ): same as `thruWord`, but also checks if
   the `thru`-ed word is the same as Word.

  ```
  [ ahead thruVal $: begin
    ahead thruWord: to:
    ahead thruVal $: end

    begin to: end
  ] @: from:

  from: 1 to: 100 leaves: [ 1 2 3 "…" 98 99 100 ]
  ```
  """
  ahead thruWord $: exp

  thruWord $: got

  got exp = not => [ [ 'expected ⸢' exp '⸥, but got: ⸢' got '⸥' ] ~* die ]
] @: thruWord:


[ "( B -- F' ): same as `thruBlock val`."
  thruBlock val
] @: thruVal


[ "( B -- [ ... F' ... ] ): same as `thruBlock vals`."
  thruBlock vals
] @: thruVals


[ """( B -- I ): like `do`, but leaves the resulting
   Instance of Block. Equivalent to `[ <Block> this ] do`.

  ```
  [ 100 $: x 200 $: y ] obj "[ 100 $: x 200 $: y · ${x :: 100} {y :: 200} ]"

  bi: [ .x ] [ .y ] leaves: [ 100 200 ]
  ```
  """
  orphan swap new dup dip: hydrate!
] @: obj


[ "( D br: T F -- ? ): infix version of `br`."
  ahead thruBlock "T"
  ahead thruBlock "F"
  br
] @: br:


[ "( D => Tb -- ? ): opens True branch form if Determiner
   is truthy."
  ahead thruBlock [ ] br
] @: =>


[ "( A B -- A/false ): leaves whether both A and B are truthy."
  $: b @: a

  a b false br
] @: and


[ "( A B -- true/A ): leaves whether A or B or both are truthy."
  $: b @: a

  a true b br
] @: or


[ "( A B -- true/A ): same as `or not`, leaves whether neither
   A nor B is truthy."
  or not
] @: neither?


[ "( B -- ): makes shallow copy of continuations stack the
   stack for the duration of Block. Replaces substrate of the
   continuation stack with the modified shallow copy after
   Block is opened."
  conts shallowCopy
    "Don't forget to drop the call to continues (as it will
     obscure what the caller expects continuations block to be)"
    [ drop ] there swap there
  conts resub
] @: continues


[ "( -- ): executes caller again. Looping primitive. Too low-
   level for users, prefer not to use (use `loop` instead).
   Beware that it does not re-instantiate the block."
  ahead 0 |to
] @: repeat


[ "( B -- ): drops all continuations before (and including)
   those for which Block leaves truthy value when opened with
   the continuation on top of an empty stack, coming from the
   right-hand side."
  $: needle?

  [
    stack empty? => [ 'could not find matching continuation' die ]

    enclose needle? there cherry
      [ ]  "Hit the needle! Don't recurse."
      rec  "Not the needle. Recurse."
    br
  ] dup $: rec continues
] @: dropContinuationsUntil


[ "( -- ): closes blocks all the way up to, and including,
   its *opener's parent*."
  ahead prototype parent prototype $: abovePrototype

  [ getContBlock prototype abovePrototype same? ] dropContinuationsUntil
] @: ^


[ "( Ib -- Sh Bh Nh ): takes an Iteration body block and
   leaves three handles: Start handle to start the loop,
   Next handle to continue the loop, and Break handle to
   break the loop."
  $: iterBody

  #nil $: breakTo

  [ orphan iterBody hydrate repeat ] $: loopBody

  [ this =: breakTo orphan loopBody hydrate! ]
  [  breakTo resume ]
  [ loopBody resume ]
] @: createLoop


[ "( Bb C Cb -- Sh ): defines `break` and `next` for a Body
   block that is being evaluated indirectly by a Control block,
   and only if Condition leaves a truthy value on top of the
   stack it hydrated. `next` resumes the Control block.
   Leaves Start handle to start the loop."
  @: ctrl $: cond new $: bodyInstance

  #nil $: blockToResume

  [ ahead =: blockToResume bodyInstance open ] $: setResumableProxy

  [ cond val
      [ "Give a proxy body which captures the caller, so we
         can resume it latern under `next`."
        setResumableProxy ctrl
      ]
      "Break the loop if condition is false. The definition
       of breakLoop is brought from below!"
      breakLoop
    br
  ] createLoop drop $: breakLoop @: startLoop

  [ bodyInstance #break breakLoop opens
    bodyInstance #next [ blockToResume resume ] opens
    startLoop ]
] @: createDetachedLoop


[ "( Ib -- ): basic infinite loop over an Iteration body block.
   `break` and `next` are available in the block. A new
   stack created for each iteration."
  new $: iterBody

  iterBody createLoop
    $: nextLoop
    $: breakLoop
    @: startLoop

  iterBody #break breakLoop opens
  iterBody #next nextLoop opens

  startLoop
] @: loop


[ "( loop: Ib -- ): prefix version of `loop`."
  ahead thruBlock loop
] @: loop:


[ "( C B -- ): hydrates an empty stack with Condition; if ToS
   is truthy afterwards, Block is opened over an empty stack.
   Repeats until ToS is false. Similar to `loop`, words `break`
   and `next` are available in Block."
  swap [ open ] createDetachedLoop open
] @: while


[ "( while: C B -- ): prefix version of `while`."
  ahead thruBlock
  ahead thruBlock
  while
] @: while:


[ "( C B -- ): inverse of `while` (opens Block while Condition
   is **false**), for more info see `while`."
  <| shallowCopy #not << |> while
] @: until


[ "( until: C B -- ): prefix version of `until`."
  ahead thruBlock
  ahead thruBlock
  until
] @: until:


[ "( C B -- ): opens Block Count times. For each iteration
   of Block, a new stack block is activated with current Count
   on top. `break` and `next` available."
  $: block $: max

  max negative? => [ 'times: cannot have negative bound' die ]

  0 $: current

  block [ current max < ]
  [
    current swap open current 1 + =: current
  ] createDetachedLoop open
] @: times


[ "( C times: B -- ): infix version of `times`."
  ahead thruBlock times
] @: times:
