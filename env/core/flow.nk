[ """( B -- S ): activates an empty Stack for the duration
   of Block.

  ```
  [ 1 2 3 ] vals leaves: [ 1 2 3 ]
  [ (1 2 + 2 *) 'hello' ] vals leaves: [ 6 'hello' ]
  ```
  """
  orphan swap there
] @: vals


[ """( B -- T ): activates an empty stack for the duration of Block,
   and leaves Top form in the stack. Dies if none.

  ```
  [ 1 2 3 ] val leaves: 3
  [ 'foo' 'bar' ~ ] val leaves: 'foobar'
  ```
  """
  vals cherry
] @: val


[ """( B1 B2 -- T1 T2 ): activates individual empty stacks for each
   of the two Blocks, and leaves their corresponding Top forms.

  ```
  [ 1 2 + ] [ 3 4 + ] 2val leaves: [ 3 7 ]
  ```
  """
  bi*: val val
] @: 2val


[ """( B -- Lb ): leaves Literal block after cursor in Block. If
   form after cursor isn't a block, encloses it and opens it with
   an empty stack, Block being the enclosing block's parent, and
   finally asserts the resulting form is a block.

  ```
  [ 'Hello World' ] $: x
  [ | x [ 4 ] ] $: foo

  foo thruLitBlock leaves: [[ 'Hello World' ]]
  foo toQuote leaves: '[ x | [ 4 ] ]'

  foo thruLitBlock leaves: [[ 4 ]]
  foo toQuote leaves: '[ x [ 4 ] ]'
  ```
  """
  dup thru dup block? br: nip [ enclose adopt val asBlock ]
] @: thruLitBlock


[ "( B -- W/dies ): same as `thru asWord`."
  thru asWord
] @: thruWord


[ """( B W -- /dies ): same as `thruWord`, but also checks if
   the `thru`-ed word is the same as Word.

  ```
  [ ahead thruVal $: begin
    ahead thruWord: to:
    ahead thruVal $: end

    begin to: end
  ] @: from:

  from: 1 to: 100 leaves: [ 1 2 3 "…" 98 99 100 ]
  ```
  """
  ahead thruWord $: exp

  thruWord $: got

  got exp = or: [ [ 'expected ⸢' exp '⸥, but got: ⸢' got '⸥' ] ~* die ]
] @: thruWord:


[ "( B -- F' ): same as `thruBlock val`."
  thruBlock val
] @: thruVal


[ "( B -- [ ... F' ... ] ): same as `thruBlock vals`."
  thruBlock vals
] @: thruVals


[ """( B -- I ): like `do`, but leaves the resulting
   Instance of Block. Equivalent to `[ <Block> this ] do`.

  ```
  [ 100 $: x 200 $: y ] obj "[ 100 $: x 200 $: y · ${x :: 100} {y :: 200} ]"

  bi: [ .x ] [ .y ] leaves: [ 100 200 ]
  ```
  """
  orphan swap new dup dip: hydrate!
] @: obj


[ """( ... D sel: T F -- ... T' / ... F' ): infix version of `sel`.

  ```
  (0 randTo: 100) odd? sel: 'Yay!' 'Nay!' echo
  ```
  """
  ahead thru
  ahead thru
  sel
] @: sel:


[ """( ... D br: T F -- ... T' / ... F' ): infix version of `br`.

  ```
  (0 randTo: 100) odd? br:
    [ 'Yay!' echo ]
    [ 'Nay!' echo ]

  "Say no to repetition!"
  (0 randTo: 100) odd? (br: 'Yay!' 'Nay!') echo
  ```
  """
  ahead thruBlock "T"
  ahead thruBlock "F"
  br
] @: br:


[ """( D => Tb -- ? ): opens True branch form if Determiner is truthy.

  ```
  (0 randTo: 100) even? => [ 'Okay it is even!' echo ]
  ```
  """
  ahead thruBlock [ ] br
] @: =>


[ """( D or: Fb -- ? ): opens False branch form if Determiner is falsey.
   Infix inverse of `=>`.

  ```
  (0 randTo: 100) even? or: [ 'Nah it is odd' echo ]
  ```
  """
  [ ] ahead thruBlock br
] @: or:


[ """( D ~> Tb -- ? ): opens True branch form if Determiner
   is truthy.

  If Determiner is a block, creates a copy of the stack and
  opens Determiner with that stack. If Determiner leaves a
  truthy form, opens True branch form with the old stack.
  Otherwise, does nothing.

  ```
  100 even? ~> 1 leaves: [ 1 ]
  101 even? ~> 1 leaves: [ ]

  100 ([ even? ] ~> [ 2 * ]) leaves: [ 200 ]
  101 ([ even? ] ~> [ 2 * ]) leaves: [ 101 ]

  2 4 ([ * even? ] ~> +) leaves: 6
  5 5 ([ * even? ] ~> +) leaves: [ 5 5 ]
  ```
  """
  ahead thruBlock $: trueBranch

  dup block? [ $: determiner
    (stack shallowCopy) determiner there
      cherry [ trueBranch open ]
  ] [ trueBranch ] br

  [ ] br
] @: ~>


[ """( A B -- A/false ): leaves whether both A and B are truthy.

  Supports short-circuiting. Remember that in Novika, only `false`
  itself is falsey. Everything else is truthy.

  ```
  (false false and) leaves: false
  (true false and) leaves: false
  (false true and) leaves: false
  (true true and) leaves: true

  (100 200 and) leaves: true
  (100 false and) leaves: false

  [ 100 even? ] [ 200 odd? ] and leaves: false
  ```
  """
  $: b @: a

  a b false br
] @: and


[ """( A B -- true/A ): leaves whether A or B or both are truthy.

  Supports short-circuiting. Remember that in Novika, only `false`
  itself is falsey. Everything else is truthy.

  ```
  (false false or) leaves: false
  (true false or) leaves: true
  (false true or) leaves: true
  (true true or) leaves: true

  (100 200 or) leaves: true
  (100 false or) leaves: true

  [ 100 even? ] [ 200 odd? ] or leaves: false
  ```
  """
  $: b @: a

  a true b br
] @: or


[ """( A B -- true/A ): same as `or not`, leaves whether neither
   A nor B is truthy.

  Supports short-circuiting. Remember that in Novika, only `false`
  itself is falsey. Everything else is truthy.

  ```
  [ 100 odd? ] [ 201 even? ] neither? leaves: true
  ```
  """
  or not
] @: neither?


[ "( B -- ): makes shallow copy of continuations stack the
   stack for the duration of Block. Replaces substrate of the
   continuation stack with the modified shallow copy after
   Block is opened."
  conts shallowCopy
    "Don't forget to drop the call to continues (as it will
     obscure what the caller expects continuations block to be)"
    [ drop ] there swap there
  conts resub
] @: continues


[ """( -- ): executes caller again. Looping primitive. Too low-
   level for users, prefer not to use (use `loop` instead).
   Beware that it does not re-instantiate the block.

  ```
  [
    'Looping indefinitely, yay!' echo

    repeat
  ] do
  ```
  """
  ahead 0 |to
] @: repeat


[ "( B -- ): drops all continuations before (and including)
   those for which Block leaves truthy value when opened with
   the continuation on top of an empty stack, coming from the
   right-hand side."
  $: needle?

  [
    stack empty? => [ 'could not find matching continuation' die ]

    enclose needle? there cherry
      [ ]  "Hit the needle! Don't recurse."
      rec  "Not the needle. Recurse."
    br
  ] dup $: rec continues
] @: dropContinuationsUntil


[ "( -- ): closes blocks all the way up to, and including,
   its *opener's parent*."
  ahead prototype parent prototype $: abovePrototype

  [ getContBlock prototype abovePrototype same? ] dropContinuationsUntil
] @: ^


[ """( Ib -- Sh Bh Nh ): takes an Iteration body block and
   leaves three handles: Start handle to start the loop,
   Next handle to continue the loop, and Break handle to
   break the loop.

  ```
  [ '> ' readLine or: nextCycle
    [ 'quit' quitLoop
      'next' nextCycle
    ] choose
    'You have entered: ' swap ~ echo
  ] createLoop
    @: nextCycle
    @: quitLoop
    @: startLoop

  'Hello! Type `quit` to quit!' echo
    startLoop
  'Bye!' echo
  ```
  """
  $: iterBody

  #nil $: breakTo

  [ orphan iterBody hydrate repeat ] $: loopBody

  [ this =: breakTo orphan loopBody hydrate! ]
  [  breakTo resume ]
  [ loopBody resume ]
] @: createLoop


[ """( Bb C Cb -- Sh ): defines `break` and `next` for a Body
   block that is being evaluated indirectly by a Control block,
   and only if Condition leaves a truthy value on top of the
   stack it hydrated. `next` resumes the Control block.
   Leaves Start handle to start the loop.

  ```
  "Body block is the 'client' block of sorts:"
  [ dup even? (br: ' is even!' ' is odd!') ~ echo
  ] $: bodyBlock


  0 $: n

  "Control block chooses whether, and how to run
  the body block."
  [ n enclose bodyBlock hydrate
    n 1 + =: n
  ] $: controlBlock

  "Condition block chooses whether to stop looping."
  [ n 5 <
  ] $: conditionBlock

  bodyBlock conditionBlock controlBlock createDetachedLoop
    @: startLoop

  startLoop

  "STDOUT: 0 is even!⏎"
  "STDOUT: 1 is odd!⏎"
  "STDOUT: 2 is even!⏎"
  "STDOUT: 3 is odd!⏎"
  "STDOUT: 4 is even!⏎"

  n leaves: 5
  ```
  """
  @: ctrl $: cond new $: bodyInstance

  #nil $: blockToResume

  [ ahead =: blockToResume bodyInstance open ] $: setResumableProxy

  [ cond val
      [ "Give a proxy body which captures the caller, so we
         can resume it latern under `next`."
        setResumableProxy ctrl
      ]
      "Break the loop if condition is false. The definition
       of breakLoop is brought from below!"
      breakLoop
    br
  ] createLoop drop $: breakLoop @: startLoop

  [ bodyInstance #break breakLoop opens
    bodyInstance #next [ blockToResume resume ] opens
    startLoop ]
] @: createDetachedLoop


[ """( Ib -- ): basic infinite loop over an Iteration body block.
   `break` and `next` are available in the block. A new
   stack created for each iteration.

  ```
  'Hello! Type `quit` to quit!' echo

  [ '> ' readLine or: next
    [ 'quit' break
      'next' next
    ] choose
    'You have entered: ' swap ~ echo
  ] loop

  'Bye!' echo
  ```
  """
  new $: iterBody

  iterBody createLoop
    $: nextLoop
    $: breakLoop
    @: startLoop

  iterBody #break breakLoop opens
  iterBody #next nextLoop opens

  startLoop
] @: loop


[ "( loop: Ib -- ): prefix version of `loop`."
  ahead thruBlock loop
] @: loop:


[ """( C B -- ): hydrates an empty stack with Condition; if ToS
   is truthy afterwards, Block is opened over an empty stack.
   Repeats until ToS is false. Similar to `loop`, words `break`
   and `next` are available in Block.

  ```
  1 to: 10 sample: 10 p $: numbers

  0 $: index

  while: [ numbers index fromLeft even? ]
  [
    index 1 + =: index
    index (numbers count) = => [
      'No odd numbers :(' echo
      okbye
    ]
  ]

  'First odd number is: ' (numbers index fromLeft) ~ echo
  ```
  """
  swap [ open ] createDetachedLoop open
] @: while


[ "( while: C B -- ): prefix version of `while`."
  ahead thruBlock
  ahead thruBlock
  while
] @: while:


[ """( C B -- ): inverse of `while` (opens Block while Condition
   is **false**), for more info see `while`.

  ```
  1 to: 10 sample: 10 p $: numbers

  0 $: index

  until: [ numbers index fromLeft odd? ]
  [
    index 1 + =: index
    index (numbers count) = => [
      'No odd numbers :(' echo
      okbye
    ]
  ]

  'First odd number is: ' (numbers index fromLeft) ~ echo
  ```
  """
  <| @: condition [ condition not ] |> while
] @: until


[ "( until: C B -- ): prefix version of `until`."
  ahead thruBlock
  ahead thruBlock
  until
] @: until:


[ """( C B -- ): opens Block Count times. For each iteration
   of Block, a new stack block is activated with current Count
   on top. `break` and `next` available.

  ```
  16 times: [
    even? ~> next
    9 >= ~> break
    echo
  ]

  "STDOUT: 1⏎"
  "STDOUT: 3⏎"
  "STDOUT: 5⏎"
  "STDOUT: 7⏎"
  ```
  """
  $: block $: max

  max negative? => [ 'times: cannot have negative bound' die ]

  0 $: current

  block [ current max < ]
  [
    current swap open current 1 + =: current
  ] createDetachedLoop open
] @: times


[ "( C times: B -- ): infix version of `times`."
  ahead thruBlock times
] @: times:


[ """( N B -- ): **unsafe** `times` alternative for when you
   *really* need to iterate a lot.

  This word basically strips off all steps in the `createDetachedLoop`
  (aka structured control flow) abstraction ladder.

  Internally, it's a bit like your Block being followed by a GOTO
  back to the beginning, plus a counter *on the stack*.

  Note that the loop is *compiled* from a template when you use
  this word. **This means that opening this word multiple times
  in a row is inefficient**, as such compilation is expensive.
  However, if you need to *iterate* quickly, you can try using
  this word.

  The stack your Block is given is *not* owned by you. You must
  not leave junk, and you must not drop the index. The effect
  of your block **must** be `( I -- I )`.

  `next` and `break` are **not** supported.

  ```
  10_000 compiledTimes: [ $: index
    index 2 * echo
    index
  ]
  ```
  """
  $: iteratee
  $: ntimes

  "Handwritten loop template. Only builtins can be used inside."
  [ dup `ntimes <
      [ ]
      [ `block `endsAt |to ]
    sel stack swap hydrate!

    (stack `iteratee hydrate)

    1 +

    `block 0 |to
  ] $: template

  "Substitution table for `words in the template."
  [ template $: `block
    template count $: `endsAt

    ntimes $: `ntimes
    iteratee $: `iteratee
  ] obj $: subst

  [ dup 0 |to [
      dup word? br:
        [ subst over entry:fetch? => nip ]
        [ dup block? => compile ]
    ] |slideRight
  ] @: compile

  template compile $: body

  0 stack body hydrate! drop
] @: compiledTimes


[ """( N compiledTimes: B -- ): infix version of `compiledTimes`.

  ```
  0 $: acc
  100_000 compiledTimes: [ "( I -- I )"
    dup acc + =: acc
  ]
  acc echo "STDOUT: 5000050000⏎"
  ```
  """
  ahead thruBlock compiledTimes
] @: compiledTimes:
