[ "( Q -- Q' ): capitalizes Quote: transforms the first
   letter of Quote to uppercase."
  $: qq

  qq quote? not => [
    "We could have enquoted it of course, but that would be against
     the language's shaky philosophy of having more-or-less type-
     centric words."
    'toCapitalized expected a quote, got: ' qq 2die
  ]

  qq count
    dup 0 = => [ drop qq ^ ]
    dup 1 = => [ drop qq toUppercase ^ ]
    drop

  qq 1 sliceQuoteAt swap toUppercase swap stitch
] @: toCapitalized


[ """( A B -- Q ): obtains Quote by stitching (and
   enquoting, if necessary) two forms, A and B.

  ```
  100 200 ~ leaves: '100200'
  'hello' 'world' ~ leaves: 'helloworld'
  ```
  """
  bi@: toQuote stitch
] @: ~


[ """( F -- Q ): like `here join`, but faster and not
   recursive in case Form is a block. Else, same as
   `toQuote`. Leaves the resulting Quote.

  ```
  123 ~* leaves: '123'
  [ 1 2 3 ] ~* leaves: '123'

  'John' $: name
  [ 'My name is ' name '!' ] ~* leaves: 'My name is John!'
  ```

  Beware that the referenced entries are only resolved. They
  are not opened. Consider using `vals join` if you want to
  stitch results instead.

  ```
  [ 1 2 + ] @: foo

  [ 'foo = ' foo ] ~* leaves: 'foo = [ 1 2 + ]'

  \"You can use this if you want to evaluate first:\"
  [ 'foo = ' foo ] vals join leaves: 'foo = 3'
  ```
  """
  dup block? not => [ toQuote ^ ]

  ahead $: caller

  [ dup word? => [ caller swap entry:fetch ] toQuote stitch ] '' reduce
] @: ~*
