76 175 80 rgb $: _OK-COLOR
244 67 54 rgb $: _ERR-COLOR
255 152 0 rgb $: _DIE-COLOR


"Holds instances of test groups."
orphan $: _groups


[ """( N -- Tg ): creates a Test group with Name.

  Currently, test groups have two reachable fields:
    * name: leaves Name of the Test group
    * cases: holds cases in this Test group
  """
  asWord $: name
  orphan $: cases
  _groups name this pushes
  this
] @: _createTestGroup


[ "( N -- Tg ): fetches (creates or retrieves) a Test group
   with the given Name."
  asWord $: name
  _groups name entry:fetch? not =>
    [ name _createTestGroup ]
] @: _fetchTestGroup


[ "( Rb -- ): appends an echo of '.' in the appropriate color
   and, if needed, emphasis, depending on a given Report block."
  [
    [ .ok?   ] [  _OK-COLOR withEchoFg '.' withColorAppendEcho ]
    [ .died? ] [ _DIE-COLOR withEchoFg 'D' withEmphasisAppendEcho ]
    [        ] [ _ERR-COLOR withEchoFg 'X' withEmphasisAppendEcho ]
  ] choose dropEchoFg
] @: _appendReportDot


[ "( runTestsInGroup: G -- B ): runs all test cases under Group.
   Reports the results on-the-fly. Dies if Group doesn't exist.
   Leaves Boolean for whether all tests in Group succeeded."
  ahead thru asWord $: groupName

  "Fetch the test group. If none, die out of this word. Else,
   put it under `group` for use later on."
  _groups groupName entry:fetch? not =>
    [ 'no such test group: ' groupName 2die ]
  $: group

  [ ] $: failedCases

  "Run cases, collect failed ones. This is the part that
   produces the '.'s."
  group.cases each: [ .run $: reportBlock
    reportBlock dup _appendReportDot .ok? not =>
      [ failedCases reportBlock shove ]
  ]

  failedCases groupBy: [ .describeDesc ] each: [ $: section
    [ '\n\n=== Wrong description for \'' section.id '\':' ] vals join echo

    section each: [ $: failedCase
      failedCase.desc $: failedCaseDesc
      failedCase.died? br:
        [ _DIE-COLOR '☠' ]
        [ _ERR-COLOR '⨯' ]
      $: bullet

      withEchoFg
        [ '  ' bullet ' Does not ' failedCaseDesc ] ~* withColorEcho
      dropEchoFg

      failedCase.failures each: [
        "Print bullets for each failure message. In case of an
         unexpected failure, there is only one such message:
         its details."
        '    • ' swap '.' stack join echo
      ]
    ]
  ]

  '' echo

  failedCases empty?
] @: runTestsInGroup:


[ """( describe Dq B -- ): groups multiple test cases (listed
   in Block) under a single Description quote.

  Describes can be grouped under so-called *test groups*. Unless
  you provide a group (or several) yourself, the describe will
  belong to the test group called 'rogue'.

  You can specify one or more groups the describe will belong
  to using `in`. The following describes are grouped under 'rogue':

  ```
  describe 'Foo' [
    it should 'work' [ "..." ]
  ]

  describe 'Bar' [
    it should 'a' [ "..." ]
    it should 'b' [ "..." ]
  ]
  ```

  The following describes are grouped under 'foo':

  ```
  describe 'Foo' [
    in foo

    it should 'work' [ "..." ]
  ]

  describe 'Bar' [
    in foo

    it should 'a' [ "..." ]
    it should 'b' [ "..." ]
  ]
  ```

  You can run a test group using the word `runTestsInGroup:`.
  It will run all tests and echo the test report to the standard
  output on the fly. With describes as above, that is, belonging
  to the group 'foo', you can run them like so:

  ```
  runTestsInGroup: foo
  ```

  Describes can belong to multiple groups:

  ```
  describe 'Foo' [
    in a
    in b

    it should 'happy path' [ true true assert= ]
  ]

  describe 'Bar' [
    in a

    it should 'sad path' [ true false assert= ]
  ]

  runTestsInGroup: a  "runs Foo and Bar"
  runTestsInGroup: b  "runs Foo"
  ```
  """
  ahead thru asQuote $: describeDesc
  ahead thru asBlock $: _describeBody

  this $: self

  "A list of test case instances in the test pool of this describe."
  [ ] $: cases

  "A list of groups this describe belongs to. `rogue` is the default
   (fallback) group. It's not set here to save on computation; rather,
   it's set by the first 'it' (unless there are other groups at that
   time already, of course)."
  [ ] $: testGroups


  [ "( -- Rb ): runs this test case. Leaves Report block which
     contains information such as whether this test case failed,
     and details for the failure."
    'child/inheritor responsibility' die
  ] @: run


  [ """( A -- O ): code implementation and Object for the 'it should'
     test case. Takes Ahead (i.e., a block expected to be `ahead`).

    Exposes to the test case block the following vocabulary:
      * `assert=`
      * `assertApprox=`
      * `assertDies`

    >>> it should 'do math' [ 1 2 + 3 assert= ]
    [ok]

    >>> it should 'do math' [ 1 2 + 5 assert= ]
    [fail]

    >>> it should 'do boo' [ [ 'boo' die ] 'boo' assertDies ]
    [ok]

    >>> it should 'do boo' [ [ 'boo' ] 'boo' assertDies ]
    [fail]
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ "( -- ): runs this it should case."

      "Whether this test run succeeded."
      true  $: ok?

      "Whether this test run had died unexpectedly."
      false $: died?

      "A list of failure messages in this test run."
      [ ] $: failures

      [ "( Mq -- ): records failure with Message quote."
        failures gulp false =: ok?
      ] @: _fail

      [ """( A B -- ): asserts that two forms, A and B, are
         equal (using `=`). If they are, that is counted as
         success. If they aren't, that is counted as failure.

        >>> 1 2 assert=
        [test case fails]

        >>> 1 1 assert=
        [test case succeeds]
        """
        2dup = br: 2drop
          [ $: b $: a [ 'Assert: expected ⸢' b '⸥, got: ⸢' a '⸥' ] ~* _fail ]
      ] $: assert=

      [ "( A B -- ): asserts that A and B are approximately
         equal as per `approx=`."
        2dup approx= br: 2drop
          [ $: b $: a [ 'Assert: expected ⸢' a '⸥ to be approximately equal to ⸢' b '⸥' ] ~* _fail ]
      ] $: assertApprox=

      [ """( B M -- ): asserts that Block dies with Message
         set as the error's message (aka its details, obtained
         via `getErrorDetails`).

        >>> [ #foo asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case fails]

        >>> [ 123 asWord ] 'bad type: decimal, expected: a word' assertDies
        [test case succeeds]
        """
        $: message new $: block

        'no error' $: errorDetails

        [ "Records that the subject block has died successfully."
          getErrorDetails =: errorDetails
        ] deathHandlerDo: [ block do ]

        errorDetails message assert= open
      ] $: assertDies

      [ "A stack of death handler blocks in this test run.
         We catch any deaths in test block, then drop and
         open the top death handler."
      ] $: _deathHandlers

      [ "( Dhb deathHandlerDo: B -- ): runs Block with Death
         handler block set as death handler."
        $: deathHandler  ahead thruBlock $: body

        this $: self

        _deathHandlers
          [ "Runs the user-specified death handler and transfers
             control back to deathHandlerDo:"
            deathHandler open

            self resume
          ] shove

        "Execute the body. If `self resume` line is triggered, the
         cursor will be positioned after `do`."
        body do

        _deathHandlers cherry drop
      ] @: deathHandlerDo:

      block #*died [
        "Catches unhandled deaths in test block and opens the
         top block in `_deathHandlers`."
        _deathHandlers top open
      ] opens

      block #assert= assert= opens
      block #assertApprox= assertApprox= opens
      block #assertDies assertDies opens

      [ "Records that this test run had failed unexpectedly."
        getErrorDetails failures gulp

        false =: ok?
        true  =: died?
      ] deathHandlerDo: [ block do ]

      this
    ] @: run

    this
  ] @: createItShould


  [ """( A -- O ): code implementation and Object for the 'it dies'
     test case. Takes Ahead (i.e., a block expected to be `ahead`).

    >>> it dies 'when du' [ 'xyzzy' die ]
    [ok]

    >>> it dies 'when fu' [ ]
    [fail]

    Note: scheduled for removal. Prefer using 'it should' together
    with `assertDies`.
    """
    dup thru asQuote $: desc
        thru asBlock $: block

    [ ":inherit:"
      desc $: desc "Hoist desc here. We'll (maybe) redefine it."
      this $: self

      "See `createItShould` for what these mean. We're agreeing with
       `createItShould` on these words here, so callers think we're
       of one supertype. The latter is currently not enforced."
      false $: ok?
      false $: died?
      [ ] $: failures

      block #*died [ true =: ok? self resume ] opens
      block do

      ok? not => [
        'die ' desc stitch =: desc
        'Did not die ' desc stitch failures gulp
      ]

      this
    ] @: run

    this
  ] @: createItDies


  [ "( it {should|dies Dq Bb} ): creates a test case with the
     given Description quote and Body block. See `createItShould`
     and `createItDies` for usage examples of both."
    ahead dup thru asWord $: det

    "If no test groups were set before the first 'it', use `in`
     and group under 'rogue'."
    testGroups empty? => [ in open rogue ]

    det #should = => [ createItShould cases gulp ^ ]
    det   #dies = => [   createItDies cases gulp ^ ]

    [ 'invalid \'it\': expected \'should\' or \'dies\', not \'' det '\'' ] ~* die
  ] $: it


  [ "( in Nw -- ): moves this test group to the test group under
     the given Name."
    ahead thru asWord _fetchTestGroup testGroups gulp
  ] $: in


  _describeBody #it it opens
  _describeBody #in in opens
  _describeBody do

  testGroups each: [ .cases cases concat! ]
] @: describe


[ """( ... leaves: B -- ... ): compares active stack with
   Block: noop if equal via `=`, otherwise, dies. Note that
   only N last items in active stack are compared with Block,
   where N is the amount of items in Block.

  ```
  100 leaves: [ 100 ] "Stack has 100 now."
  200 leaves: [ 100 200 ] "Stack has 100 and 200."
  300 leaves: [ 300 ] "Stack has 100 and 200 and 300"
  ```
  """
  stack shallowCopy $: actual
  ahead thruBlock $: expected

  [ [ actual ' did not match ' expected ] ~* die ] @: fail

  actual count expected count < => fail

  expected eachWithIndex: [ $: form $: index
    form actual expected count 1 - index - fromRight = not => fail
  ]
] @: leaves:
