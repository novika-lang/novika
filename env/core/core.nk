"""This is the entry point of env/core, Novika's standard library.
"""

this #@: [
  """( F @: N -- ): creates an opener entry with the given
   Name in caller. Submits Form to the entry. Opener entries,
   when resolved to and opened, in turn **open** their
   corresponding Form.

  ```
  "Blocks are evaluated (opened) when the opener entry
  they're stored under is opened."
  [ 1 2 + ] @: getThree
  getThree leaves: [ 3 ]

  "Builtins also get opened when under an opener entry."
  #+ here @: myAddAlias
  1 2 myAddAlias leaves: [ 3 ]

  "Any other form is left as-is, even if it is a word."
  3 @: litThree
  #+ @: litPlus
  litThree leaves: [ 3 ]
  litPlus leaves: [ + ]
  ```
  """
  <| ahead dup thru |> opens
] opens


[ """( F $: N -- ): creates a pusher entry with the given
   Name in caller. Submits Form to the entry. Pusher entries,
   when resolved to and opened, **push** their corresponding
   Form onto the active stack.

  ```
  100 $: x
  200 $: y

  x leaves: 100
  y leaves: 200

  [ 1 2 + ] $: getThree

  "Nope! In this case, use `@:` if you want the block to be
   opened (evaluated)."
  getThree leaves: [ 1 2 + ]
  ```
  """
  <| ahead dup thru |> pushes
] @: $:


[ """( F =: N -- ): submits Form to an entry with the given
   Name.

  The entry must exist already, being defined by `$:`, `@:`,
  or otherwise. Entry type is disregarded (i.e. it doesn't
  matter whether it's an opener or a pusher entry). More
  importantly, *entry type is preserved.*

  ```
  "Note, by the way, that order doesn't matter. What
   matters is for `x` to be there at the time of calling
   `addOneToX`. In other words, `addOneToX` must be able to
   find `x` when it's opened."

  100 $: x

  [ x 1 + =: x ] @: addOneToX

  x leaves: 100
  addOneToX
  x leaves: 101
  "..."
  ```
  """
  <| ahead dup thru |> entry:submit
] @: =:


[ """( Qm F -- ): enquotes Form, stitches it to the end of
   Quote message, and dies with the resulting quote set as
   the death message.

  ```
  'expected foobar, got: ' 100 2die "Sorry: expected foobar, got: 100."
  ```
  """
  toQuote stitch die
] @: 2die


[ "( needsCapability: I -- ): ensures that the frontend has enabled
   the capability with the specified Id. Dies if such a capability
   isn't enabled, or if Id isn't a capability id at all."
  ahead thru toQuote $: capId

  capId anyof: novika:capabilities not =>
    [
      244 67 54 rgb withEchoFg
        '! This program requires the `' capId stitch '` capability. Consult the frontend' stitch
        '  you are using for information on how to include it.'
        swap withColorEcho
             withColorEcho
      dropEchoFg

      'missing capability: ' capId stitch die
    ]
] @: needsCapability:
