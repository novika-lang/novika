"""
Note: some content and implementation behavior was taken from:

https://elasticdog.com/2008/12/beginning-factor-shufflers-and-combinators/
"""


[ """( A B -- ): drops a pair of forms.

  ```
  1 2 2drop leaves: [ ]
  ```
  """
  drop drop
] @: 2drop


[ """( A B -- B ): drops a form under the top.

  ```
  1 2 nip leaves: [ 2 ]
  ```
  """
  swap drop
] @: nip


[ """( A B -- A B A ): duplicates a form over the top.

  ```
  1 2 over leaves: [ 1 2 1 ]
  ```
  """
  <| dup |> swap
] @: over


[ """( A B - B A B ): puts a duplicate of the top form
   before the second-from-top form.

  ```
  1 2 tuck leaves: [ 2 1 2 ]
  ```
  """
  dup <| swap |>
] @: tuck


[ """( A B -- A B A B ): duplicates a pair of forms.

  ```
  1 2 2dup leaves: [ 1 2 1 2 ]
  ```
  """
  over over
] @: 2dup


[ """( A B C -- B C A ): moves thirdmost form to the top.

  ```
  1 2 3 rot leaves: [ 2 3 1 ]
        rot leaves: [ 3 1 2 ]
        rot leaves: [ 1 2 3 ]
  ```
  """
  <| swap |> swap
] @: rot


[ """( A B C -- C A B ): moves top form so it's thirdmost.

  ```
  1 2 3 -rot leaves: [ 3 1 2 ]
        -rot leaves: [ 2 3 1 ]
        -rot leaves: [ 1 2 3 ]
  ```
  """
  rot rot
] @: -rot


[ "( B -- ): replaces current stack with Block in-place. Cursor
   position is saved (clamped to Block end if Block is smaller)"
  stack resub
] @: asStack


[ """( ... T dip: F -- ... F' T ): opens Form behind Top.

  ```
  1 2 4 [ + ] dip leaves: [ 3 4 ]
  1 2 4 100 dip leaves: [ 1 2 100 4 ]
  ```
  """
  swap <| open |>
] @: dip


[ "( ... T dip: F -- ... F' T ): infix version of `dip`."
  ahead thruBlock dip
] @: dip:


[ """( ... T F -- ... F' T ): opens Form with
   Top on top of the stack, restoring Top after it is opened.

  ```
  1 2 4 [ + ] keep leaves: [ 1 6 4 ]
  1 2 4 'hello' keep leaves: [ 1 2 4 'hello' 4 ]
  ```
  """
  swap dup <| swap open |>
] @: keep


[ "( ... T keep: F -- ... F' T ): infix version of `keep`."
  ahead thruBlock keep
] @: keep:


"Cleave combinators: they are used when you want to apply
 multiple blocks to the same set of items on the top of
 the stack."


[ """( F A B -- A' B' ): opens two blocks, A and
   B, with Form placed on top of the stack for each one, and
   leaves their results in order.

  ```
  [ 1 2 3 ] [ sum ] [ count ] bi / leaves: 2
  ```
  """
  @: b2 @: b1 $: f
  f b1
  f b2
] @: bi


[ """( F bi: A B -- A' B' ): infix version of `bi`.

  ```
  [ 1 2 3 ] bi: sum count / leaves: 2
  ```
  """
  ahead thruBlock
  ahead thruBlock
  bi
] @: bi:


"Spread combinators: they are used when you want to apply a
 different block to different items on the top of the stack.
 The spread combinators are closely related to dip, but provide
 a bit more flexibility while also expressing intent."


[ """( Af Bf A B -- A' B' ): opens block A with A form,
   block B with B form, and leaves the results.

  Note: the result of opening A is available to B.

  ```
  [ 1 2 ] [ 3 4 ] [ first ] [ last ] bi* leaves: [ 1 4 ]

  \"Note how we use the result of the first block in the
   second block:\"
  [ 1 2 ] [ 3 4 ] [ first ] [ last + ] bi* leaves: [ 5 ]
  ```
  """
  @: b2 @: b1 $: f2 $: f1
  f1 b1
  f2 b2
] @: bi*


[ "( Af Bf bi*: A B -- A' B' ): infix version of `bi*`."
  ahead thruBlock
  ahead thruBlock
  bi*
] @: bi*:


"Apply combinators: these are used when you want to apply a
 single block to multiple items on the top of the stack."


[ """( X Y B -- Bx By ): leaves the results of applying
   Block first to X form, and then to Y form.

  ```
  1 2 [ 'X =' swap ~ ] bi@ leaves: [ 'X = 1' 'X = 2' ]
  ```
  """
  @: b $: f2 $: f1
  f1 b
  f2 b
] @: bi@


[ "( X Y bi@: B -- Bx By ): infix version of `bi@`."
  ahead thruBlock bi@
] @: bi@:
