"""
This is a prototype of a Novika REPL. You can run it from
the terminal or from a viewer such as one found in `world/`
or the upcoming Novika Sketchbook.

To start it up, run the following command from the Novika
repo directory:

  >>> ./bin/novika core repl.nk

The REPL could be somewhat buggy because it uses some of the
more obscure features of Novika, and interfaces with the guts
of the language more intimately than most other Novika code.
Considering the language is currently entirely untested (meaning
no automatic tests, of course), to reiterate, bugs are expected.
"""

"REPL root block, also persisted for the entire REPL session.
 A child of the block this comment is part of, and so inherits
 all imported features/files (such as core) and essential."
this child $: _pgRoot


_pgRoot #? [
'
Welcome to Novika, and thanks for trying it out!

Typing `help <word>` prints help for the specified word. For example:

  >>> help help
  ( help F -- ): echoes help for Form. If form is a word,
  fetches it in caller first.
  …

  >>> help +
  ( A B -- S ): leaves the Sum of two decimals.
  …

To list all available words, use the following script:

  >>> ls* sepBy: \' \' echo
  ? _pgRoot startSession there @: $: =: 2die needsFeature: withColorEcho …

... then you can start exploring:

  >>> help there
  ( S B -- S ): opens Block in Stack, leaves Stack. Ahead
  is transferred to block.
  …

  (your output may differ)

To list words followed by their descriptions, use:

  >>> ls* map: [ dup here desc stack sepBy: \'\\n\' ] sepBy: \'\\n\\n\' echo
  …
  ls
  ( B -- Nb ): gathers all dictionary entry names into Name block.

  reparent
  ( C P -- C ): changes the parent of Child to Parent. Checks
  for cycles which can hang the interpreter, therefore is
  O(N) where N is the amount of Parent\'s ancestors.

  slurp
  ( B Q -- B ): parses Quote and adds all forms from Quote
  to Block.
  …

  (your output may differ)

Help messages often contain examples. You can try typing some
in and playing with stuff.

Visit https://github.com/novika-lang/novika for more Novika content.
Create an issue at https://github.com/novika-lang/novika/issues if
you need help.
' echo
] opens


[
  "Whether there was an error."
  false $: error

  "Global stack, persisted for the entire REPL session."
  [ ] $: pgStack


  [ "( Q -- ): runs a Quote of Novika source code in the context
     of the current REPL session."
    $: line

    this $: self

    0 $: timeTakenMs

    "Create an instance of the root block so that the line of code
     we will execute has access to all words the frontend provided."
    _pgRoot new $: pgRootInstance

    "Create an instance of the stack block, for if an error happens,
     we'd like to restore back to the 'good' stack."
    pgStack shallowCopy $: pgStackCopy

    [
      "This block is required to isolate deaths inside the REPL line
       session from deaths inside the REPL code itself."

      [ "This death handler will catch all errors that are made in
         the REPL root block instance we've created above. This handler
         will report the error when it happens."
        reportError true =: error
        self resume
      ] @: *died

      [ pgStackCopy pgRootInstance line slurp hydrate! ] measure =: timeTakenMs
    ] do

    error br:
      [ "There was an error (or multiple errors). It was already
         reported by the death handler above."
        false =: error
      ]
      [ "There was no error. Merge dictionaries of original and
         instance of the REPL root block, making entries defined
         in the instance visible to next REPL inputs. Also,
         substitute the global stack with the updated stack,
         which proved to have no errors."
        _pgRoot pgRootInstance mergeDicts
        pgStackCopy =: pgStack
        [ 'In ' timeTakenMs 'ms' ] ~* echo
      ]

    pgStack echo
  ] @: runLine


  loop: [
    '>>> ' readLine br:
      [ "Line was read successfully:" runLine ]
      [ "The user had pressed Ctrl-D:" 'Bye.' echo break ]
  ]
] @: startSession


[ ] [
  'Novika ' novika:version '\n'
  'Hit Ctrl-D or Ctrl-C to quit. Type "?" for more information.'
] there join echo


startSession
