crystal_doc_search_index_callback({"repository_name":"novika","body":"# Novika\n\n<img src=\"img/logo.svg\" align=right>\n\n> A language that doesn't affect the way you think about programming, is not worth knowing.\n> ­— Alan J. Perlis\n\nNovika is a free-form, moldable, interpreted programming language.\n\n## Hi!\n\nUhmm... yeah, I have no idea what the sentence above means either. But let me try to explain anyway :)\n\n### Free-form\n\nNovika has no syntax and no style. Novika is so free-form it cannot be pretty-printed *even at runtime*.\n\nNovika is like simulating a house of LEGO blocks vs. simulating a house of huge concrete blocks, wood, and all that. The latter\nis much easier to the computer, but the former offers unlimited flexibility: you can build only so much from huge concrete blocks,\nwoord, chairs and whatnot. With LEGO, it's another story — an infinite amount of possibilities before you.\n\n### Moldable\n\nYou can mold it and therefore it is moldable. The more you use Novika, the more it becomes truly *yours*. It quickly gets personal!\n\n### Interpreted\n\nThere's a little yellow gnome Kate sitting inside your monitor. She is reading the Novika code on the\nscreen — don't forget she has to flip it in her mind! She is telling the computer what to do — all that\non the go! Kate is slow but very flexible.\n\n### How about something more formal?\n\nNovika belongs to no single paradigm. Instead, I'd say it's a mix of functional, object-oriented, and procedural paradigms — although by no means am I an expert on such things.\n\nNovika borrows from Lisp, Forth, and Factor — and takes inspiration from Self, Red/Rebol, and Smalltalk.\n\nNovika blocks are closures and objects simultaneously — they can relate, talk, and encapsulate. Blocks are code, too. In Novika, data is code, and code is data. And what are objects? Objects are data (sort of!) — and therefore, code.\n\nBlocks can form friendships with each other, become parents of one another, and intercept, well, anything — feel free to slap some Pythonesque dunders on top of all I've said!\nThe block tree (or the block graph, depending on how you look at it) is yours — you are free to take over it anytime.\n\nThe engine is yours, too — blocks are the code, and code is run by the engine.\n\nSemantically, Novika is like Lisp *A* set in motion by Lisp *B* with the possibility of bidirectional communication — but with objects, stacks, and so, so much more!\n\nAnd the syntax of Novika? Well, there is no syntax. That is to say, almost no syntax. Syntactically, Novika lies somewhere between Lisp and Forth. And Forth — Forth has no syntax.\nThe rest is yours to define!\n\n### Trade-offs\n\nOf course, I had to make some trade-offs to achieve such a peculiar arrangement!\n\n#### Negative performance\n\n*Wait, what?*\n\nSee, good compilers/interpreters live well in the positives. That is to say they remove irrelevant runtime. Bad compilers and “normal” interpreters live near zero, at the very least getting rid of the notion of parsing.\n\nAnd what about Novika? Novika is deep in the negatives. Novika *parses* at runtime. Yup, you’ve heard it right.\n\nWaging wars with FFI will give you performance, sure (that is, will move you closer to zero from the negative side!) But then, why not simply use C, Rust, Crystal, or any other fancy-schmancy programming language — especially if you're doing something *serious*?\n\n#### Readability\n\n*It's up to you.*\n\nMaybe you want your code to look cryptic — so your friends think you’re a hacker or something. Novika will not stand in your way.\n\nBut wait, why is that? Why is Novika not *designed* to be readable? Isn't that popular nowadays?\n\nSee, in Novika, it is easy to make your code readable — even natural language-like. This ease, however, degrades performance. Even if Novika someday gets a JIT, writing natural-language-like code will still impose a performance penalty, however minuscule it will be. Again, it’s up to you. Either you have their syntax and their performance, or your syntax and your performance.\n\n#### Big projects\n\n*Never.*\n\nI have no clue what big projects are, or what they need. There are enough smart people in this world already.\n\nI would say Novika is an interesting experiment and a great personal project. Perhaps the language will grow into something bigger a few years from now. Most likely, however, it'll die. Maintaining a full-featured programming language in the 21st century is hard ­— there's just so much it must be able to do! Maintaining an innovative one — that's a thousand times harder.\n\n## An objective evaluation\n\nTL; DR: Novika is a great language for quickly *prototyping* things.\n\nIn fact, most of interpreted languages are.\n\n1. When I say \"prototyping\", I mean the \"shut up\" kind of prototyping, when you're so angry you just don't want\n   the language to complain! An unused variable, something that needs to be an object rather than a method to\n   work properly, wrong types — you don't care (all caps!), and Novika understands.\n\n2. This comes at a cost. For one, performance is not that great — ­and in Novika, it is terrible, much worse\n   than even in Python or MRI. This is mainly due to my naïve code but also due to the fact that the language\n   wasn't *designed* for performance — it was designed for seamless reflectivity and quick prototyping.\n\n3. In the land of interpreted languages, errors are a terrible and soul-devouring beast which you truly don't want to encounter. In Novika,\n   anything can just `'\"helpful\" explanation' die` and explode your whole program — at runtime, of course! And hope\n   it at least says something useful.\n\n4. Moderately sized projects become harder to maintain in the refactoring and bug-fixing sense. There are\n   no automated tools to help you with anything except for search & replace — and your brain designing things\n   right the first time, of course, which for most programmers (including myself) is almost never the case.\n\n5. Novika is one of the few high-level languages which allow self-modification, and there are even multiple flavors\n   of it. I won't list them here because if this wall of text didn't kill you yet, then it sure will would\n   these flavors be here. Novika is extremely hard to optimize: while in other languages there is at least\n   a clear-ish flow of control, in Novika, there isn't, for any piece of code can change its meaning at any\n   point in time.\n\n6. If you're still here, the best thing about Novika is that it's not PHP, Perl, or JavaScript when it\n   comes to types. Things rarely take an argument of more than one type. No implicit conversion is ever\n   done (as far as I remember!)\n\n7. I like criticizing my projects, but remember to make your own judgement as\n   well. After all, there are Python-people, Perl-people, Red-people, Scheme-people\n   and even Forth-people — all sorts of weird people :) So why not Novika-people? Maybe you're one of them.\n\n## Examples\n\nOrdered by craziness!\n\n1. Hello World:\n\n```novika\n'Hello World' echo\n```\n\n2. Factorial:\n\n```novika\n\"Parentheses () do not mean anything in Novika. They're like single-character comments.\"\n\n(5 to: 1) product \"120\"\n```\n\n3. Sieve of Eratosthenes: prints prime numbers in `[2; 120]`.\n\n```novika\n2 to: 120 ||-> [ $: n (stack without: [ n /? ]) asStack n ] each: echo\n```\n\n4. First 100 Fizz buzz rounds:\n\n```novika\n1 to: 100 each: [\n  [ [ 15 /? ] 'FizzBuzz'\n    [  5 /? ] 'Buzz'\n    [  3 /? ] 'Fizz'\n  ] choose echo\n]\n```\n\n5. A tiny DSL for counting the average of a bunch of numbers:\n\n```novika\n[ ahead |beforeOrToEnd: [ decimal? not ] bi: sum count / ] @: avg:\n\navg: 1 2 3      echo \"STDOUT: 2⏎\"\navg: 100 4 6 5  echo \"STDOUT: 28.75⏎\"\n```\n\n6. Self-modification by indirection (i.e. the normies' one):\n\n```novika\n[ ' from A branch' ~ echo ] $: alpha\n[ ' from B branch' ~ echo ] $: beta\n[ ' from C branch' ~ echo ] $: gamma\n\nalpha @: printIt\n\n[ 'Hi' printIt\n\n  (this -> [ alpha beta gamma ]) sample =: printIt\n] @: selfModify\n\nselfModify \"Will print from any of the branches randomly...\"\nselfModify\nselfModify\n```\n\n7. Self-modification by rewriting (i.e. the dirty but true one):\n\n```novika\n[ ' from A branch' ~ echo ] @: alpha\n[ ' from B branch' ~ echo ] @: beta\n[ ' from C branch' ~ echo ] @: gamma\n\n[ 'Hi' alpha\n\n  (this prototype) 2 [ drop ([ alpha beta gamma ] sample) ] |hydrate\n] @: selfModify\n\nselfModify \"Will print from any of the branches randomly...\"\nselfModify\nselfModify\n```\n\nNow, if you want to look at something a bit more elaborate, there's:\n\n* A snake game [example](https://github.com/novika-lang/novika/blob/rev10/examples/snake.new.nk)\n* A simple [documentation viewer](https://github.com/novika-lang/novika/blob/rev10/examples/docuview.nk)\n* A [prompt](https://github.com/novika-lang/novika/blob/rev10/examples/lch-prompt.nk) that blinks in colors from the LCH color space\n* A TDD-d [observable](https://github.com/novika-lang/novika/blob/rev10/examples/observable.nk)\n* A [live REPL interface](https://github.com/novika-lang/novika/blob/rev10/examples/mathrepl.nk) to a DSL for infix math expressions\n\n### Curious curiosities\n\nHere's an example of *weird* Novika. I don't know if the following program qualifies as\n*nondeterministic*, but Novika certainly supports nondeterministic programming as I understand\nit, in that the evaluation of any program is controlled mainly by that very program and the\nchoices it may or may not make at runtime -- choices deterministic or not.\n\n```novika\n[ \"( S B -- C ): safely creates a Continuation block\n   from the given Stack and Block.\"\n  new keep: [0 |to] newContinuation\n] @: createContinuation\n\n[\n  [ 'Hey!' echo ]\n  [ 'Bye!' echo ]\n  [ 'Uhm...' echo ]\n] $: drum\n\n[ \"Open a random block from the drum. \"\n  drum (0 randTo: [ drum count 1 - ]) fromLeft open\n] @: spinTheDrum\n\n[ $: probability\n\n  [\n    drop\n\n    rand probability < =>\n      [ \"This will be the stack:\" (this -> [ probability ])\n        \"This will be the block:\" (this -> withProbabilitySpin)\n        createContinuation\n      ]\n\n    \"This will be the stack:\" [ ]\n    \"This will be the block:\" (this -> spinTheDrum)\n    createContinuation\n  ] continues\n] @: withProbabilitySpin\n```\n\nIt's pretty hard to explain, but basically, if you give `withProbabilitySpin`\na probability from 0 to 1, then it will:\n\n1. `spinTheDrum` to open (aka execute, aka evaluate) a random block from `drum`.\n2. Based on a random number, decide whether to open `withProbabilitySpin` again.\n3. And so on...\n\nWhat I'm showing you here can be done with recursion and first-order\nfunctions, sure -- or with loops. But there are limits to how \"non-deterministically\"\nrecursion/loops can control the flow, and here, in Novika -- in Novika there are\nno limits! (even though Novika is powered by a loop behind the scenes haha)\n\nSo, if you give `withProbabilitySpin` the probability `1`, it will\nloop forever. To add to the above, it will indeed *loop*, not recurse.\nThat is, there won't be a call stack explosion!\n\nIf the probability is less than one, it will loop for an unknown\namount of times. At probability `0`, it won't loop at all.\n\n```novika\n1 withProbabilitySpin \"(or 0, or 0.5, etc.)\"\n```\n\nFeel free to play with the probability yourself!\n\n## Installing Novika\n\nThe fastest way to get started with Novika is to download and unpack the latest [nightly build](https://github.com/novika-lang/nightly-builds/releases/latest).\nNovika [releases](https://github.com/novika-lang/novika/releases/latest) are as unstable as nightlies, if not more so, so don't worrry :)\n\n1. If you don't want to do a system-wide install, simply use `bin/novika` *while in the directory of the nightly/release*.\n\n2. Otherwise, move the `env` folder to your user's home directory, and rename it to `.novika`. Optionally, add `bin/novika` to your PATH.\n\n## Building Novika from source\n\nYou will need to have [Crystal](https://crystal-lang.org/install/) installed.\n\n1. Clone this repository:\n\n```\ngit clone https://github.com/novika-lang/novika.git\n```\n\n2. Go there:\n\n```\ncd novika\n```\n\n### Windows\n\nFollow these commands:\n\n```\nmv shard.yml shard.old.yml\nmv shard.windows.yml shard.yml\nshards build --without-development --release --progress --no-debug\n```\n\n### Linux\n\n```\nshards build --without-development --release --progress --no-debug -Dnovika_console -Dnovika_readline\n```\n\n### What do the `-D`s mean?\n\n* `-Dnovika_readline`: use [linenoise](https://github.com/antirez/linenoise) instead of `gets` for `readLine`.\n* `-Dnovika_console`: use [termbox2.cr](https://github.com/homonoidian/termbox2.cr) as the backend for capability *console*.  Otherwise, *console* won't be available. Since [termbox2](https://github.com/termbox/termbox2) doesn't support Windows, you have to drop the flag when compiling for/under it.\n\n### What's next?\n\nYou can optionally add `bin/novika` to PATH, and/or create a symbolic link for `env` called `.novika` in your user's home directory, like so:\n\n```\nln -s /path/to/novika/repo/env /home/<your-user>/.novika\n```\n\nI'd recommend you to run the tests with `bin/novika tests`. If something seems wrong, [file an issue](https://github.com/novika-lang/novika/issues/new).\n\n## Running the examples\n\nTry to run one of the [examples](#examples). Some of them contain instructions on how you can run them. In general, you can use:\n\n```\nbin/novika path/to/example.nk\n```\n\nIf it's yelling at you in red that you need *console*, use:\n\n```\nbin/novika console path/to/example.nk\n```\n\n(unless you're on Windows; Novika on Windows doesn't support console yet)\n\n## Playing with the REPL\n\nTo run the REPL, use:\n\n```\nbin/novika repl\n```\n\nTo list all available words, use `la`:\n\n```\n>>> la\n```\n\nTo see documentation for a particular word, use `help` followed by the word that you're interested in:\n\n```\n>>> help toOrphan\n...\n>>> help 123\ndecimal number 123\n>>> help 'Who am I?'\nquote 'Who am I?'\n```\n\nTo get a string description of a thing's type, use `typedesc`:\n\n```\n>>> 123 typedesc\n... 'decimal' ...\n>>> ##foobar typedesc\n... 'quoted word' ...\n```\n\n## Learning Novika\n\n1. Explore files in `tests/` to see how various words can be used. Beware, however, that those are internal behavior tests — and most of the time, they aren't practical/particularly readable.\n2. Explore `help` messages of various words. A less up-to-date but more convenient way to do the same is to read word documentation [here](https://novika-lang.github.io/words/).\n3. Explore files in `env/core`, the language's standard library.\n4. Explore the [Wiki](https://github.com/novika-lang/novika/wiki).\n\nI know there aren't a lot of materials here nor anywhere that'd teach you the language. On the fundamental stuff, the language is so weird I can't even remember how it all came to be. And in general I have so much to say that I just don't know where to begin. Hopefully, there will be more stuff here someday.\n\nExplore Novika as if it were an alien spaceship that accidentally fell on Earth, full of weird little yellow rotating yukoos. The aliens did not write on every button what it will do when you press it. And even if they did, what kind of language would they be using?!\n\n## Contributing\n\nFirst of all, thank you for even getting this far! Even if you didn't read the whole document, thank you. Seriously :)\n\n### Where do I start?\n\n1. First of all, the documentation for rev10 (i.e., this implementation) is available [here](https://novika-lang.github.io/novika/).\n2. Try exploring [capabilities](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities) and their [implementations](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities/impl). This is where native code words like `dup` and `appendEcho` are defined. This is also a nice *starting point* to find bugs, optimize, add new stuff, etc. It's also one of the places where you can find typos, lack of documentation, and even some TODOs.\n3. Try looking through the [interpreter code](https://github.com/novika-lang/novika/tree/rev10/src/novika) in general. I do have a compulsion to write comments, so most of the code is documented. How well documented is not for me to decide, but documented it is.\n4. If you're someone who knows something about optimization, your eyes will hurt! Believe me :)\n\n### What happens where?\n\nWhen you do your `bin/novika hello.nk`, here's *roughly* the order in which various components get invoked:\n\n1. [The command-line interface](https://github.com/novika-lang/novika/blob/rev10/src/cli.cr) frontend is what greets you (or doesn't) and sets everything up.\n2. [Resolver](https://github.com/novika-lang/novika/blob/rev10/src/novika/resolver.cr) knows where everything is on the disk.\n3. [Capability collection](https://github.com/novika-lang/novika/blob/rev10/src/novika/capability.cr) allows to control the capabilities of this particular invokation of the language/capabilities of the language overall. For example, this component is aware of you droping the `-Dnovika_console` flag.\n4. [Capability interfaces and implementations](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities) describe and implement those capabilities.\n5. [Scissors](https://github.com/novika-lang/novika/blob/rev10/src/novika/scissors.cr) cut the contents of `hello.nk` (or any other blob of source code) into pieces called *unclassified forms*\n6. [Classifier](https://github.com/novika-lang/novika/blob/rev10/src/novika/classifier.cr) classifies them, and shoves the resulting [forms](https://github.com/novika-lang/novika/tree/rev10/src/novika/forms) into a *file block*.\n7. [Blocks](https://github.com/novika-lang/novika/blob/rev10/src/novika/forms/block.cr) are *the* most important forms in Novika.\n7. [Engine](https://github.com/novika-lang/novika/blob/rev10/src/novika/engine.cr) [runs](https://github.com/novika-lang/novika/blob/db440e7f8ba4342a9eaacf77f76b6c59bc49528f/src/novika/engine.cr#L307) file blocks and all blocks \"subordinate\" to them. **This is the entrypoint for code execution, and one of the cornerstones of Novika**.\n8. [Errors](https://github.com/novika-lang/novika/blob/rev10/src/novika/error.cr) happen. Or don't.\n\nNote that most of these components interact with each other, making this list pretty pointless \"for science\".\n\n### XXX: the hottest files in Novika\n\nHottest as in load and load as in performance, of course!\n\n* Block [dictionary implementation](https://github.com/novika-lang/novika/blob/rev10/src/novika/dict.cr), `Dict`, is simply a wrapper around `Hash(K, V)`.\n* Current [substrate implementation](https://github.com/novika-lang/novika/blob/rev10/src/novika/substrate.cr) is a *veerry* dumb copy-on-write array. Here's a helpful \"formula\": `block = ... + tape + dict + ...; tape = substrate + cursor`\n\n### Stuff you might want to... borrow!\n\n* A self-sufficient FFI [wrapper](https://github.com/novika-lang/novika/blob/rev10/src/novika/ffi.cr) only a few edits away!\n\n### And the usual procedure...\n\n1. Fork it (<https://github.com/novika-lang/novika/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n* [homonoidian](https://github.com/homonoidian) - creator and maintainer\n","program":{"html_id":"novika/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"},{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"}],"locations":[],"repository_name":"novika","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"extended_modules":[{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"class_methods":[{"html_id":"check_compressed_data(compressed_data:Slice,want:Slice)-class-method","name":"check_compressed_data","abstract":false,"args":[{"name":"compressed_data","external_name":"compressed_data","restriction":"Slice"},{"name":"want","external_name":"want","restriction":"Slice"}],"args_string":"(compressed_data : Slice, want : Slice)","args_html":"(compressed_data : Slice, want : Slice)","location":{"filename":"src/ext/brotli/spec/spec_helper.cr","line_number":4,"url":null},"def":{"name":"check_compressed_data","args":[{"name":"compressed_data","external_name":"compressed_data","restriction":"Slice"},{"name":"want","external_name":"want","restriction":"Slice"}],"visibility":"Public","body":"uncompressed = Compress::Brotli.decode(compressed_data)\nif uncompressed != want\n  fail((\"Data doesn't uncompress to the original value \\n\" + \"Length of original: #{want.size}\\n\") + \"Length of uncompressed: #{uncompressed.size}\")\nend\nuncompressed.should(eq(want))\n"}}],"types":[{"html_id":"novika/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/substrate.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nSee [`Array` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/array.html) in the language reference.\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","instance_methods":[{"html_id":"unsafe_concat(other:Array(T),index,other_start,other_insert_count)-instance-method","name":"unsafe_concat","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"args_string":"(other : Array(T), index, other_start, other_insert_count)","args_html":"(other : <a href=\"Array.html\">Array</a>(T), index, other_start, other_insert_count)","location":{"filename":"src/novika/substrate.cr","line_number":2,"url":null},"def":{"name":"unsafe_concat","args":[{"name":"other","external_name":"other","restriction":"Array(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"visibility":"Public","body":"resize_if_cant_insert(other_insert_count)\n(@buffer + index).move_to((@buffer + index) + other_insert_count, @size - index)\n(@buffer + index).copy_from(other.to_unsafe + other_start, other_insert_count)\n@size = @size + other_insert_count\nself\n"}}]},{"html_id":"novika/LibDl","path":"LibDl.html","kind":"alias","full_name":"LibDl","name":"LibDl","abstract":false,"locations":[{"filename":"src/ext/dlfcn.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"LibC","aliased_html":"LibC","const":false},{"html_id":"novika/Novika","path":"Novika.html","kind":"module","full_name":"Novika","name":"Novika","abstract":false,"locations":[{"filename":"src/novika.cr","line_number":40,"url":null},{"filename":"src/novika/capability.cr","line_number":1,"url":null},{"filename":"src/novika/dict.cr","line_number":1,"url":null},{"filename":"src/novika/engine.cr","line_number":1,"url":null},{"filename":"src/novika/error.cr","line_number":1,"url":null},{"filename":"src/novika/forms/block.cr","line_number":1,"url":null},{"filename":"src/novika/forms/boolean.cr","line_number":1,"url":null},{"filename":"src/novika/forms/builtin.cr","line_number":1,"url":null},{"filename":"src/novika/forms/byteslice.cr","line_number":1,"url":null},{"filename":"src/novika/forms/color.cr","line_number":3,"url":null},{"filename":"src/novika/forms/decimal.cr","line_number":1,"url":null},{"filename":"src/novika/forms/foreign.cr","line_number":3,"url":null},{"filename":"src/novika/forms/form.cr","line_number":24,"url":null},{"filename":"src/novika/forms/quote.cr","line_number":1,"url":null},{"filename":"src/novika/forms/words.cr","line_number":1,"url":null},{"filename":"src/novika/image.cr","line_number":6,"url":null},{"filename":"src/novika/resolver.cr","line_number":3,"url":null},{"filename":"src/novika/substrate.cr","line_number":14,"url":null},{"filename":"src/novika/tape.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EFFECT_PATTERN","name":"EFFECT_PATTERN","value":"/^(\\(\\s+(?:[^\\(\\)]*)\\--(?:[^\\(\\)]*)\\s+\\)):/","doc":"Regex that can be used to search for a pattern in `Block`\ncomments. Perfer `Form#effect` over matching by hand.","summary":"<p>Regex that can be used to search for a pattern in <code><a href=\"Novika/Block.html\">Block</a></code> comments.</p>"},{"id":"MANIFEST_APP","name":"MANIFEST_APP","value":"\".nk.app\""},{"id":"MANIFEST_LIB","name":"MANIFEST_LIB","value":"\".nk.lib\""},{"id":"MANIFEST_PERMISSIONS","name":"MANIFEST_PERMISSIONS","value":"\"permissions\""},{"id":"PERMISSION_NO","name":"PERMISSION_NO","value":"\"0\""},{"id":"PERMISSION_YES","name":"PERMISSION_YES","value":"\"1\""},{"id":"VERSION","name":"VERSION","value":"\"0.0.10\""}],"extended_modules":[{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"}],"instance_methods":[{"html_id":"colorful?:Bool-instance-method","name":"colorful?","doc":"Returns whether the output of Novika should be colorful.\n\nWhether this will be respected by general Novika code cannot\nbe guaranteed, but it is guaranteed to be respected by the\nCLI frontend.","summary":"<p>Returns whether the output of Novika should be colorful.</p>","abstract":false,"location":{"filename":"src/novika.cr","line_number":50,"url":null},"def":{"name":"colorful?","return_type":"Bool","visibility":"Public","body":"((STDOUT.tty? && STDERR.tty?) && (ENV[\"TERM\"]? != \"dumb\")) && (!(ENV.has_key?(\"NO_COLOR\")))"}}],"types":[{"html_id":"novika/Novika/Block","path":"Novika/Block.html","kind":"class","full_name":"Novika::Block","name":"Block","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/block.cr","line_number":22,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_COUNT_TO_S","name":"MAX_COUNT_TO_S","value":"128","doc":"Maximum amount of forms to display in block string representation.","summary":"<p>Maximum amount of forms to display in block string representation.</p>"},{"id":"MAX_NESTED_COUNT_TO_S","name":"MAX_NESTED_COUNT_TO_S","value":"12","doc":"Maximum amount of forms to display in string representation\nof *nested* blocks.","summary":"<p>Maximum amount of forms to display in string representation of <em>nested</em> blocks.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Blocks are fundamental to Novika.\n\nThey are a kind of AST node, they hold continuations and\nare continuations, they are arrays, stacks, and hash tables,\nall at the same time.\n\nIn this sense, blocks have *roles*. But any block can be\nany role, and change its role as often and whenever it\nwants or needs to.","summary":"<p>Blocks are fundamental to Novika.</p>","class_methods":[{"html_id":"[](*forms:Form)-class-method","name":"[]","doc":"Creates and returns an orphan block whose tape will\ncontain *forms*.","summary":"<p>Creates and returns an orphan block whose tape will contain <em>forms</em>.</p>","abstract":false,"args":[{"name":"forms","external_name":"forms","restriction":"Form"}],"args_string":"(*forms : Form)","args_html":"(*forms : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":100,"url":null},"def":{"name":"[]","args":[{"name":"forms","external_name":"forms","restriction":"Form"}],"splat_index":0,"visibility":"Public","body":"leaf = true\narray = forms.map do |form|\n  if form.is_a?(Block)\n    leaf = false\n  end\n  form.as(Form)\nend.to_a\nBlock.new(parent: nil, tape: Tape.for(array), leaf: leaf)\n"}},{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":114,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"block\""}},{"html_id":"with(array:Array(Form),leaf:Bool|Nil=nil)-class-method","name":"with","doc":"Creates and returns an orphan block with *array* being\nits tape substrate's container. See `Tape.for`.","summary":"<p>Creates and returns an orphan block with <em>array</em> being its tape substrate's container.</p>","abstract":false,"args":[{"name":"array","external_name":"array","restriction":"Array(Form)"},{"name":"leaf","default_value":"nil","external_name":"leaf","restriction":"Bool | ::Nil"}],"args_string":"(array : Array(Form), leaf : Bool | Nil = nil)","args_html":"(array : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Form.html\">Form</a>), leaf : Bool | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":94,"url":null},"def":{"name":"with","args":[{"name":"array","external_name":"array","restriction":"Array(Form)"},{"name":"leaf","default_value":"nil","external_name":"leaf","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"Block.new(parent: nil, tape: Tape.for(array), leaf: leaf.nil? ? array.includes?(Block) : leaf)"}}],"constructors":[{"html_id":"new(parent:Block|Nil=nil,prototype:Nil|Novika::Block=self,tape:Novika::Tape(Novika::Form)|Nil=nil,dict:Novika::IDict|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"},{"name":"prototype","default_value":"self","external_name":"prototype","restriction":"::Nil | ::Novika::Block"},{"name":"tape","default_value":"nil","external_name":"tape","restriction":"::Novika::Tape(::Novika::Form) | ::Nil"},{"name":"dict","default_value":"nil","external_name":"dict","restriction":"::Novika::IDict | ::Nil"}],"args_string":"(parent : Block | Nil = nil, prototype : Nil | Novika::Block = self, tape : Novika::Tape(Novika::Form) | Nil = nil, dict : Novika::IDict | Nil = nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>, prototype : Nil | <a href=\"../Novika/Block.html\">Novika::Block</a> = <span class=\"k\">self</span>, tape : <a href=\"../Novika/Tape.html\">Novika::Tape</a>(<a href=\"../Novika/Form.html\">Novika::Form</a>) | Nil = <span class=\"n\">nil</span>, dict : <a href=\"../Novika/IDict.html\">Novika::IDict</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":81,"url":null},"def":{"name":"new","args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"},{"name":"prototype","default_value":"self","external_name":"prototype","restriction":"::Nil | ::Novika::Block"},{"name":"tape","default_value":"nil","external_name":"tape","restriction":"::Novika::Tape(::Novika::Form) | ::Nil"},{"name":"dict","default_value":"nil","external_name":"dict","restriction":"::Novika::IDict | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent, prototype, tape, dict)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other)-instance-method","name":"==","doc":"Loose equality: for two blocks to be loosely equal, their\ntapes and their dictionaries must be loosely equal.\n\nSupports recursive (reflection) equality, e.g.:\n\n```novika\n[ ] $: a\na a shove\na first a = \"=> true\"\n```","summary":"<p>Loose equality: for two blocks to be loosely equal, their tapes and their dictionaries must be loosely equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/forms/block.cr","line_number":675,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"if other.is_a?(self)\nelse\n  return false\nend\nif same?(other)\n  return true\nend\nif count == other.count\nelse\n  return false\nend\nresult = false\nexecuted = exec_recursive(:==) do\n  result = true\n  if has_tape? || other.has_tape?\n    result && (result = tape == other.tape)\n  end\n  if has_dict? || other.has_dict?\n    result && (result = dict == other.dict)\n  end\nend\nexecuted && result\n"}},{"html_id":"a(type:T.class,_depth=0):TforallT-instance-method","name":"a","doc":"Converts this block into the given *type*. Code execution\nmay be required, hence the need for *engine*. If failed,\nsame as `Form#a`.","summary":"<p>Converts this block into the given <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"},{"name":"_depth","default_value":"0","external_name":"_depth","restriction":""}],"args_string":"(type : T.class, _depth = 0) : T forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, _depth = <span class=\"n\">0</span>) : T forall T","location":{"filename":"src/novika/forms/block.cr","line_number":767,"url":null},"def":{"name":"a","args":[{"name":"type","external_name":"type","restriction":"T.class"},{"name":"_depth","default_value":"0","external_name":"_depth","restriction":""}],"return_type":"T","visibility":"Public","body":"if self.is_a?(T)\n  return self\nend\n(case T\nwhen Decimal.class\n  a?(Hook.as_decimal, type, _depth)\nwhen Quote.class\n  a?(Hook.as_quote, type, _depth)\nwhen Word.class\n  a?(Hook.as_word, type, _depth)\nwhen Color.class\n  a?(Hook.as_color, type, _depth)\nwhen Boolean.class\n  a?(Hook.as_boolean, type, _depth)\nwhen QuotedWord.class\n  a?(Hook.as_quoted_word, type, _depth)\nwhen Byteslice.class\n  a?(Hook.as_byteslice, type, _depth)\nend) || (afail(T))\n"}},{"html_id":"add(form:Form):self-instance-method","name":"add","doc":"Adds *form* to the tape.","summary":"<p>Adds <em>form</em> to the tape.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : self","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":282,"url":null},"def":{"name":"add","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"impl = ->(other : Form) do\n  if other.is_a?(Block)\n    self.leaf = false\n  end\n  self.tape = tape.add(other)\nend\nif hook = flat_at?(Hook.on_shove)\n  default = Builtin.new(\"__shove__\", desc: \"( F -- ): default __shove__ implementation. Pushes Form to\\n the block it was captured in.\") do |_, stack|\n    impl.call(stack.drop)\n  end\n  Engine.exhaust(Engine.current.capabilities, hook, stack: Block[form, default])\nelse\n  impl.call(form)\nend\nself\n"}},{"html_id":"at(b:Int32,e:Int32)-instance-method","name":"at","doc":"Returns a block of forms between *b* and *e*, both\ninclusive. Clamps *b* and *e* to bounds.","summary":"<p>Returns a block of forms between <em>b</em> and <em>e</em>, both inclusive.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32)","args_html":"(b : Int32, e : Int32)","location":{"filename":"src/novika/forms/block.cr","line_number":220,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"visibility":"Public","body":"if has_tape?\nelse\n  return Block.new\nend\nb = Math.max(b, 0)\ne = Math.min(e, count - 1)\nBlock.with((b..e).map do |index|\n  at(index)\nend)\n"}},{"html_id":"at(name:Form,entry:Entry):self-instance-method","name":"at","doc":"Binds *name* to *entry* in this block's dictionary.","summary":"<p>Binds <em>name</em> to <em>entry</em> in this block's dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : self","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":592,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"self","visibility":"Public","body":"tap do\n  dict.set(name, entry)\nend"}},{"html_id":"at(name:Form,form:Form):self-instance-method","name":"at","doc":"Binds *name* to *form* in this block's dictionary.","summary":"<p>Binds <em>name</em> to <em>form</em> in this block's dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form) : self","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":597,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"at(name, Entry.new(form))"}},{"html_id":"at(index:Int32):Form-instance-method","name":"at","doc":"Returns the form at *index* in the tape. Dies if *index*\nis out of bounds. See `Tape#at?`.","summary":"<p>Returns the form at <em>index</em> in the tape.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Form","args_html":"(index : Int32) : <a href=\"../Novika/Form.html\">Form</a>","location":{"filename":"src/novika/forms/block.cr","line_number":212,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"index out of bounds\")\nend\n(tape.at?(index)) || (die(\"index out of bounds\"))\n"}},{"html_id":"at(name:String,desc=\"abuiltin\",&code:Engine,Block->):self-instance-method","name":"at","doc":"Makes an `OpenEntry` called *name* for *code* wrapped\nin `Builtin`.","summary":"<p>Makes an <code><a href=\"../Novika/OpenEntry.html\">OpenEntry</a></code> called <em>name</em> for <em>code</em> wrapped in <code><a href=\"../Novika/Builtin.html\">Builtin</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"args_string":"(name : String, desc = \"a builtin\", &code : Engine, Block -> ) : self","args_html":"(name : <a href=\"../String.html\">String</a>, desc = <span class=\"s\">&quot;a builtin&quot;</span>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> ) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":608,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"return_type":"self","visibility":"Public","body":"at(Word.new(name), OpenEntry.new(Builtin.new(name, desc, code)))"}},{"html_id":"at(name:Word,desc=\"abuiltin\",&code:Engine,Block->):self-instance-method","name":"at","doc":"Makes an `OpenEntry` called *name* for *code* wrapped\nin `Builtin`.","summary":"<p>Makes an <code><a href=\"../Novika/OpenEntry.html\">OpenEntry</a></code> called <em>name</em> for <em>code</em> wrapped in <code><a href=\"../Novika/Builtin.html\">Builtin</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Word"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"args_string":"(name : Word, desc = \"a builtin\", &code : Engine, Block -> ) : self","args_html":"(name : <a href=\"../Novika/Word.html\">Word</a>, desc = <span class=\"s\">&quot;a builtin&quot;</span>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> ) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":603,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Word"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"return_type":"self","visibility":"Public","body":"at(name, OpenEntry.new(Builtin.new(name.id, desc, code)))"}},{"html_id":"at?(index)-instance-method","name":"at?","doc":"Returns the form at *index*, or nil.","summary":"<p>Returns the form at <em>index</em>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/forms/block.cr","line_number":206,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"if has_tape?\n  tape.at?(index)\nend"}},{"html_id":"befriend(other:Block)-instance-method","name":"befriend","doc":"Adds *other* to the friendlist of this block.","summary":"<p>Adds <em>other</em> to the friendlist of this block.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block)","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":393,"url":null},"def":{"name":"befriend","args":[{"name":"other","external_name":"other","restriction":"Block"}],"visibility":"Public","body":"friends << other"}},{"html_id":"can_be?(type:T.class)forallT-instance-method","name":"can_be?","doc":"Returns whether this block implements hook(s) needed\nfor behaving like *type*. See also: `a(type)`.","summary":"<p>Returns whether this block implements hook(s) needed for behaving like <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":783,"url":null},"def":{"name":"can_be?","args":[{"name":"type","external_name":"type","restriction":"T.class"}],"visibility":"Public","body":"if self.is_a?(T)\n  return true\nend\ncase T\nwhen Decimal.class\n  flat_has?(Hook.as_decimal)\nwhen Quote.class\n  flat_has?(Hook.as_quote)\nwhen Word.class\n  flat_has?(Hook.as_word)\nwhen Color.class\n  flat_has?(Hook.as_color)\nwhen Boolean.class\n  flat_has?(Hook.as_boolean)\nwhen QuotedWord.class\n  flat_has?(Hook.as_quoted_word)\nwhen Byteslice.class\n  flat_has?(Hook.as_byteslice)\nelse\n  false\nend\n"}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of forms in this block.","summary":"<p>Returns the amount of forms in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":196,"url":null},"def":{"name":"count","visibility":"Public","body":"has_tape? ? tape.count : 0"}},{"html_id":"cursor-instance-method","name":"cursor","doc":"Returns the cursor position in this block.","summary":"<p>Returns the cursor position in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":191,"url":null},"def":{"name":"cursor","visibility":"Public","body":"has_tape? ? tape.cursor : 0"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/block.cr","line_number":110,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << (prototype.comment? || \"a block\")"}},{"html_id":"describe_with?(comment:String,force=false):String|Nil-instance-method","name":"describe_with?","doc":"Sets the block comment of this block to *comment* in\ncase it doesn't have a comment already.\n\nSetting the comment can also be forced by making *force* true.","summary":"<p>Sets the block comment of this block to <em>comment</em> in case it doesn't have a comment already.</p>","abstract":false,"args":[{"name":"comment","external_name":"comment","restriction":"String"},{"name":"force","default_value":"false","external_name":"force","restriction":""}],"args_string":"(comment : String, force = false) : String | Nil","args_html":"(comment : <a href=\"../String.html\">String</a>, force = <span class=\"n\">false</span>) : <a href=\"../String.html\">String</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":133,"url":null},"def":{"name":"describe_with?","args":[{"name":"comment","external_name":"comment","restriction":"String"},{"name":"force","default_value":"false","external_name":"force","restriction":""}],"return_type":"String | ::Nil","visibility":"Public","body":"if force || (!comment?)\n  @comment = dedent(comment)\nend"}},{"html_id":"drop:Form-instance-method","name":"drop","doc":"Removes and returns the top form. Dies if none.","summary":"<p>Removes and returns the top form.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":348,"url":null},"def":{"name":"drop","return_type":"Form","visibility":"Public","body":"impl = -> do\n  top.tap do\n    self.tape = tape.drop? || (raise(\"unreachable\"))\n  end\nend\nif hook = flat_at?(Hook.on_cherry)\n  default = Builtin.new(\"__cherry__\", desc: \"( -- ): default __cherry__ implementation.\") do\n    impl.call\n  end\n  (Engine.exhaust(Engine.current.capabilities, hook, Block[default])).top\nelse\n  impl.call\nend\n"}},{"html_id":"dupe:self-instance-method","name":"dupe","doc":"Duplicates the form before the cursor, dies if none.","summary":"<p>Duplicates the form before the cursor, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":325,"url":null},"def":{"name":"dupe","return_type":"self","visibility":"Public","body":"add(top)"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Yields all forms in this block.","summary":"<p>Yields all forms in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":201,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"if has_tape?\n  tape.each do |form|\n    yield form\n  end\nend"}},{"html_id":"each_friend(&)-instance-method","name":"each_friend","doc":"Yields friends of this block. Asserts each is a block,\notherwise, dies (e.g. the user may have mistakenly\nadded some other form).","summary":"<p>Yields friends of this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":381,"url":null},"def":{"name":"each_friend","yields":1,"block_arity":1,"visibility":"Public","body":"if has_friends?\nelse\n  return\nend\nfriends.reverse_each do |friend|\n  if friend.is_a?(Block)\n  else\n    die(\"expected a block, got #{friend.class.typedesc} for a friend\")\n  end\n  yield friend\nend\n"}},{"html_id":"each_neighbor(payload:Block->T|Nil,visited:BlockIdMap|Nil=nil)forallT-instance-method","name":"each_neighbor","doc":"Explores neighbor blocks of this block, calls *payload* with\neach such neighbor block. Records all neighbors it visited in\n*visited*.\n\n*Explicitly adjacent* (marked as *ExA1-2* in the diagram below)\nneighbor blocks are blocks found in the dictionary and tape of\nthis block (marked as *B* in the diagram below).\n\n*Implicitly adjacent* (marked as *ImA1-4* in the diagram below)\nneighbor blocks are blocks in the tapes and dictionaries of\nexplicitly adjacent neighbor blocks, and so on, recursively.\n\n```text\n┌───────────────────────────────────────┐\n│ B                                     │\n│  ┌───────────────┐ ┌───────────────┐  │\n│  │ ExA1          │ │ ExA2          │  │\n│  │ ┌────┐ ┌────┐ │ │ ┌────┐ ┌────┐ │  │\n│  │ │ImA1│ │ImA2│ │ │ │ImA3│ │ImA4│ │  │\n│  │ └────┘ └────┘ │ │ └────┘ └────┘ │  │\n│  │    ...    ... │ │    ...    ... │  │\n│  └───────────────┘ └───────────────┘  │\n│                                       │\n└───────────────────────────────────────┘\n```","summary":"<p>Explores neighbor blocks of this block, calls <em>payload</em> with each such neighbor block.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"args_string":"(payload : Block -> T | Nil, visited : BlockIdMap | Nil = nil) forall T","args_html":"(payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil, visited : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":494,"url":null},"def":{"name":"each_neighbor","args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"visibility":"Public","body":"each do |form|\n  if form.is_a?(Block)\n  else\n    next\n  end\n  if visited.try(&.has_key?(form.object_id))\n    next\n  end\n  visited || (visited = BlockIdMap.new)\n  visited[form.object_id] = form\n  if payload.call(form)\n    return\n  end\n  form.each_neighbor(payload, visited)\nend\nif has_dict?\nelse\n  return\nend\ndict.each do |_, entry|\n  form = entry.form\n  if form.is_a?(Block)\n  else\n    next\n  end\n  if visited.try(&.has_key?(form.object_id))\n    next\n  end\n  visited || (visited = BlockIdMap.new)\n  visited[form.object_id] = form\n  if payload.call(form)\n    return\n  end\n  form.each_neighbor(payload, visited)\nend\n"}},{"html_id":"each_neighbor(visited:BlockIdMap|Nil=nil,&payload:Block->T|Nil)forallT-instance-method","name":"each_neighbor","doc":"Explores neighbor blocks of this block, calls *payload* with\neach such neighbor block. Records all neighbors it visited in\n*visited*.\n\n*Explicitly adjacent* (marked as *ExA1-2* in the diagram below)\nneighbor blocks are blocks found in the dictionary and tape of\nthis block (marked as *B* in the diagram below).\n\n*Implicitly adjacent* (marked as *ImA1-4* in the diagram below)\nneighbor blocks are blocks in the tapes and dictionaries of\nexplicitly adjacent neighbor blocks, and so on, recursively.\n\n```text\n┌───────────────────────────────────────┐\n│ B                                     │\n│  ┌───────────────┐ ┌───────────────┐  │\n│  │ ExA1          │ │ ExA2          │  │\n│  │ ┌────┐ ┌────┐ │ │ ┌────┐ ┌────┐ │  │\n│  │ │ImA1│ │ImA2│ │ │ │ImA3│ │ImA4│ │  │\n│  │ └────┘ └────┘ │ │ └────┘ └────┘ │  │\n│  │    ...    ... │ │    ...    ... │  │\n│  └───────────────┘ └───────────────┘  │\n│                                       │\n└───────────────────────────────────────┘\n```","summary":"<p>Explores neighbor blocks of this block, calls <em>payload</em> with each such neighbor block.</p>","abstract":false,"args":[{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"args_string":"(visited : BlockIdMap | Nil = nil, &payload : Block -> T | Nil) forall T","args_html":"(visited : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>, &payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":531,"url":null},"def":{"name":"each_neighbor","args":[{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},"visibility":"Public","body":"each_neighbor(payload, visited)"}},{"html_id":"each_relative(payload:Block->T|Nil,skip:BlockIdMap|Nil=nil,skip_self=false)forallT-instance-method","name":"each_relative","doc":"Explores this block's relatives, i.e., its vertical (parent) and\nhorizontal (friend) hierarchy neighbors, calls *payload* with\neach such relative.\n\nWhen *payload* returns a value of type *T* (a non-nil),\nexploration terminates. When *payload* returns nil, exploration\ncontinues.\n\nThe order is as follows, and is exactly Novika's *lookup order*.\nNote that here, \"yielded X\" means \"called *payload* with X\".\n\n- First, this block is yielded.\n- Then, the parent blocks of this block are yielded, starting\n  from the immediate parent and ending with the toplevel (god)\n  block.\n- Then, this method recurses on friends of this block.\n- Then, this method recurses on friends of parent blocks.\n\n*skip* can be used to disable exploration of specific blocks,\ntogether with their (unexplored) vertical and horizontal\nhierarchy.\n\n*skip_self* can be set to true to disable calling *payload* for\nthis block, and only in this particular `each_relative` call.","summary":"<p>Explores this block's relatives, i.e., its vertical (parent) and horizontal (friend) hierarchy neighbors, calls <em>payload</em> with each such relative.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"skip","default_value":"nil","external_name":"skip","restriction":"BlockIdMap | ::Nil"},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":""}],"args_string":"(payload : Block -> T | Nil, skip : BlockIdMap | Nil = nil, skip_self = false) forall T","args_html":"(payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil, skip : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>, skip_self = <span class=\"n\">false</span>) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":428,"url":null},"def":{"name":"each_relative","args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"skip","default_value":"nil","external_name":"skip","restriction":"BlockIdMap | ::Nil"},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":""}],"visibility":"Public","body":"if skip.try(&.has_key?(object_id))\n  return\nend\nif (!skip_self) && (value = payload.call(self))\n  return value\nend\nblock = parent?\nwhile block\n  if skip.try(&.has_key?(block.object_id))\n    break\n  end\n  if value = payload.call(block)\n    return value\n  end\n  block = block.parent?\nend\nblock = self\nskip || (skip = BlockIdMap.new)\nwhile block\n  if skip.has_key?(block.object_id)\n  else\n    skip[block.object_id] = block\n    block.each_friend do |friend|\n      if value = payload.call(friend)\n        return value\n      end\n    end\n    block.each_friend do |friend|\n      return (friend.each_relative(payload, skip, skip_self: true)) || (next)\n    end\n  end\n  block = block.parent?\nend\n"}},{"html_id":"each_relative(skip=nil,skip_self=false,&payload:Block->T|Nil)forallT-instance-method","name":"each_relative","doc":"Explores this block's relatives, i.e., its vertical (parent) and\nhorizontal (friend) hierarchy neighbors, calls *payload* with\neach such relative.\n\nWhen *payload* returns a value of type *T* (a non-nil),\nexploration terminates. When *payload* returns nil, exploration\ncontinues.\n\nThe order is as follows, and is exactly Novika's *lookup order*.\nNote that here, \"yielded X\" means \"called *payload* with X\".\n\n- First, this block is yielded.\n- Then, the parent blocks of this block are yielded, starting\n  from the immediate parent and ending with the toplevel (god)\n  block.\n- Then, this method recurses on friends of this block.\n- Then, this method recurses on friends of parent blocks.\n\n*skip* can be used to disable exploration of specific blocks,\ntogether with their (unexplored) vertical and horizontal\nhierarchy.\n\n*skip_self* can be set to true to disable calling *payload* for\nthis block, and only in this particular `each_relative` call.","summary":"<p>Explores this block's relatives, i.e., its vertical (parent) and horizontal (friend) hierarchy neighbors, calls <em>payload</em> with each such relative.</p>","abstract":false,"args":[{"name":"skip","default_value":"nil","external_name":"skip","restriction":""},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":""}],"args_string":"(skip = nil, skip_self = false, &payload : Block -> T | Nil) forall T","args_html":"(skip = <span class=\"n\">nil</span>, skip_self = <span class=\"n\">false</span>, &payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":465,"url":null},"def":{"name":"each_relative","args":[{"name":"skip","default_value":"nil","external_name":"skip","restriction":""},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":""}],"yields":1,"block_arity":1,"block_arg":{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},"visibility":"Public","body":"each_relative(payload, skip)"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor all forms except blocks and builtins, simply returns\ntheir string representation.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/block.cr","line_number":803,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << (prototype.comment? =~ EFFECT_PATTERN ? $~[1] : \"a block\")"}},{"html_id":"eject:Form-instance-method","name":"eject","doc":"Drops and returns the element after the cursor. Dies if\ncursor is at the end.","summary":"<p>Drops and returns the element after the cursor.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":266,"url":null},"def":{"name":"eject","return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"eject out of bounds\")\nend\nself.tape, _ = tape.eject? || (die(\"eject out of bounds\"))\n"}},{"html_id":"entry_for(name:Form):Entry-instance-method","name":"entry_for","doc":"Returns the dictionary entry for *name*, or dies.\n\nSee `each_relative` for a detailed description of lookup\norder etc.","summary":"<p>Returns the dictionary entry for <em>name</em>, or dies.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/forms/block.cr","line_number":539,"url":null},"def":{"name":"entry_for","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry","visibility":"Public","body":"(entry_for?(name)) || (die(\"no value form for '#{name}'\"))"}},{"html_id":"entry_for?(name:Form):Entry|Nil-instance-method","name":"entry_for?","doc":"Returns the dictionary entry for *name*, or nil.\n\nSee `each_relative` for a detailed description of lookup\norder etc.","summary":"<p>Returns the dictionary entry for <em>name</em>, or nil.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":547,"url":null},"def":{"name":"entry_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry | ::Nil","visibility":"Public","body":"if entry = flat_at?(name)\n  return entry\nend\neach_relative(skip_self: true, &.flat_at?(name))\n"}},{"html_id":"flat_at?(name:Form):Entry|Nil-instance-method","name":"flat_at?","doc":"Returns the dictionary entry corresponding to *name*.\nDoes not traverse the block hierarchy.","summary":"<p>Returns the dictionary entry corresponding to <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":577,"url":null},"def":{"name":"flat_at?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry | ::Nil","visibility":"Public","body":"if has_dict?\nelse\n  return\nend\ndict.get(name) do\nend\n"}},{"html_id":"flat_has?(name:Form):Bool-instance-method","name":"flat_has?","doc":"Returns whether this block's (and this block's only)\ndictionary has an entry corresponding to *name*.","summary":"<p>Returns whether this block's (and this block's only) dictionary has an entry corresponding to <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":585,"url":null},"def":{"name":"flat_has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"if has_dict?\nelse\n  return false\nend\ndict.has?(name)\n"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":559,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":"(entry_for?(name)).try(&.form)"}},{"html_id":"has_comment?:Bool-instance-method","name":"has_comment?","doc":"Returns whether this block has a comment.","summary":"<p>Returns whether this block has a comment.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":119,"url":null},"def":{"name":"has_comment?","return_type":"Bool","visibility":"Public","body":"!(!@comment.try do |it|\n  !it.empty?\nend)"}},{"html_id":"has_dict?:Bool-instance-method","name":"has_dict?","doc":"Returns whether this block has a dict.","summary":"<p>Returns whether this block has a dict.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":56,"url":null},"def":{"name":"has_dict?","return_type":"Bool","visibility":"Public","body":"!(!@dict)"}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":555,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"!(!each_relative do |block|\n  (block.flat_has?(name)) || nil\nend)"}},{"html_id":"has_friends?-instance-method","name":"has_friends?","doc":"Returns whether this block has any friends.","summary":"<p>Returns whether this block has any friends.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":374,"url":null},"def":{"name":"has_friends?","visibility":"Public","body":"(!(!@friends)) && (!friends.empty?)"}},{"html_id":"has_tape?:Bool-instance-method","name":"has_tape?","doc":"Returns whether this block has a tape.","summary":"<p>Returns whether this block has a tape.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":45,"url":null},"def":{"name":"has_tape?","return_type":"Bool","visibility":"Public","body":"!(!@tape)"}},{"html_id":"import!(fromdonor:Block):self-instance-method","name":"import!","doc":"Imports entries from *donor* to this block's dictionary\nby mutating this block's dictionary.","summary":"<p>Imports entries from <em>donor</em> to this block's dictionary by mutating this block's dictionary.</p>","abstract":false,"args":[{"name":"donor","external_name":"from","restriction":"Block"}],"args_string":"(from donor : Block) : self","args_html":"(from donor : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":235,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"from","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"tap do\n  dict.import!(donor.dict)\nend"}},{"html_id":"includes?(other:Form)-instance-method","name":"includes?","doc":"Returns whether the tape of this block includes *other*,\nas per loose equality `==(other)`.","summary":"<p>Returns whether the tape of this block includes <em>other</em>, as per loose equality <code><a href=\"../Novika/Block.html#%3D%3D%28other%29-instance-method\">#==(other)</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Form"}],"args_string":"(other : Form)","args_html":"(other : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":690,"url":null},"def":{"name":"includes?","args":[{"name":"other","external_name":"other","restriction":"Form"}],"visibility":"Public","body":"if has_tape?\nelse\n  return false\nend\ntape.each do |form|\n  if other == form\n    return true\n  end\nend\nfalse\n"}},{"html_id":"inject(form:Form)-instance-method","name":"inject","doc":"Adds *form* after the cursor.","summary":"<p>Adds <em>form</em> after the cursor.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":260,"url":null},"def":{"name":"inject","args":[{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"self.tape = tape.inject(form)"}},{"html_id":"instance(parentnew_parent:Block=self,__tr=nil):Block-instance-method","name":"instance","doc":"Creates and returns an instance of this block, under the\ngiven *parent*.","summary":"<p>Creates and returns an instance of this block, under the given <em>parent</em>.</p>","abstract":false,"args":[{"name":"new_parent","default_value":"self","external_name":"parent","restriction":"Block"},{"name":"__tr","default_value":"nil","external_name":"__tr","restriction":""}],"args_string":"(parent new_parent : Block = self, __tr = nil) : Block","args_html":"(parent new_parent : <a href=\"../Novika/Block.html\">Block</a> = <span class=\"k\">self</span>, __tr = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/forms/block.cr","line_number":700,"url":null},"def":{"name":"instance","args":[{"name":"new_parent","default_value":"self","external_name":"parent","restriction":"Block"},{"name":"__tr","default_value":"nil","external_name":"__tr","restriction":""}],"return_type":"Block","visibility":"Public","body":"copy = self.class.new(parent: new_parent, tape: has_tape? ? tape.copy : nil, prototype: prototype)\nif leaf?\n  return copy\nend\n__tr || (__tr = {} of Block => Block)\n__tr[self] = copy\ncopy.tape = copy.tape.map! do |form|\n  if form.is_a?(Block)\n  else\n    next\n  end\n  __tr[form]? || (form.instance(copy, __tr: __tr))\nend\ncopy.leaf = false\ncopy\n"}},{"html_id":"ls:Array(Form)-instance-method","name":"ls","doc":"Lists all name forms in this block's dictionary.","summary":"<p>Lists all name forms in this block's dictionary.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":229,"url":null},"def":{"name":"ls","return_type":"Array(Form)","visibility":"Public","body":"has_dict? ? dict.names : [] of Form"}},{"html_id":"next?:Form|Nil-instance-method","name":"next?","doc":"See `Tape#next?`.","summary":"<p>See <code><a href=\"../Novika/Tape.html#next%3F-instance-method\">Tape#next?</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":240,"url":null},"def":{"name":"next?","return_type":"Form | ::Nil","visibility":"Public","body":"if has_tape?\nelse\n  return\nend\nself.tape, _ = tape.next? || (return)\n"}},{"html_id":"on_open(engine:Engine,stack:Block=engine.stack):self-instance-method","name":"on_open","doc":"Schedules this block for execution in *engine* using the\nsafe scheduling method (see `Engine#schedule`). Optionally,\na *stack* block may be provided (otherwise, the *engine*'s\ncurrent stack is used).","summary":"<p>Schedules this block for execution in <em>engine</em> using the safe scheduling method (see <code><a href=\"../Novika/Engine.html#schedule%28schedulable%3ASchedulable%2Cstack%3ABlock%29-instance-method\">Engine#schedule</a></code>).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","default_value":"engine.stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block = engine.stack) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a> = engine.stack) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":616,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","default_value":"engine.stack","external_name":"stack","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"tap do\n  engine.schedule(self, stack)\nend"}},{"html_id":"opens?(name:Form)-instance-method","name":"opens?","doc":"Returns whether *name* opens its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":567,"url":null},"def":{"name":"opens?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":"entry_for?(name).is_a?(OpenEntry)"}},{"html_id":"parent:Block|Nil-instance-method","name":"parent","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"def":{"name":"parent","return_type":"Block | ::Nil","visibility":"Public","body":"if (value = @parent).nil?\n  ::raise(NilAssertionError.new(\"Novika::Block#parent cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"parent=(parent:Block|Nil)-instance-method","name":"parent=","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Block | ::Nil"}],"args_string":"(parent : Block | Nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil)","location":{"filename":"src/novika/forms/block.cr","line_number":71,"url":null},"def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Block | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"parent?:Block|Nil|Nil-instance-method","name":"parent?","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"def":{"name":"parent?","return_type":"Block | ::Nil | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"paste(elems:Block)-instance-method","name":"paste","doc":"Mutably adds elements before the cursor in *elems* block's\ntape after the cursor in this block's tape.","summary":"<p>Mutably adds elements before the cursor in <em>elems</em> block's tape after the cursor in this block's tape.</p>","abstract":false,"args":[{"name":"elems","external_name":"elems","restriction":"Block"}],"args_string":"(elems : Block)","args_html":"(elems : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":306,"url":null},"def":{"name":"paste","args":[{"name":"elems","external_name":"elems","restriction":"Block"}],"visibility":"Public","body":"if elems.count.zero?\n  return\nend\nself.tape = tape.paste(elems.tape)\n"}},{"html_id":"prototype:Block-instance-method","name":"prototype","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"def":{"name":"prototype","return_type":"Block","visibility":"Public","body":"if (value = @prototype).nil?\n  ::raise(NilAssertionError.new(\"Novika::Block#prototype cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"prototype=(prototype:Block)-instance-method","name":"prototype=","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"args":[{"name":"prototype","external_name":"prototype","restriction":"Block"}],"args_string":"(prototype : Block)","args_html":"(prototype : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":75,"url":null},"def":{"name":"prototype=","args":[{"name":"prototype","external_name":"prototype","restriction":"Block"}],"visibility":"Public","body":"@prototype = prototype"}},{"html_id":"prototype?:Block|Nil-instance-method","name":"prototype?","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"def":{"name":"prototype?","return_type":"Block | ::Nil","visibility":"Public","body":"@prototype"}},{"html_id":"pushes?(name:Form)-instance-method","name":"pushes?","doc":"Returns whether *name* pushes its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":571,"url":null},"def":{"name":"pushes?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":"!(!(entry_for?(name)).try do |entry|\n  !entry.is_a?(OpenEntry)\nend)"}},{"html_id":"resub(other:Block):self-instance-method","name":"resub","doc":"Replaces this block's tape with *other*'s.","summary":"<p>Replaces this block's tape with <em>other</em>'s.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block) : self","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":653,"url":null},"def":{"name":"resub","args":[{"name":"other","external_name":"other","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"self.tape = has_tape? ? tape.resub(other.tape) : Tape.new(other.tape.substrate)\nself\n"}},{"html_id":"schedule(engine:Engine,stack:Block)-instance-method","name":"schedule","doc":"Schedules an instance of this block for execution, with *stack*\nset as the stack that will be used by the instance during\nexecution.\n\nMoves the cursor of the instance before the first form\nso that the entire block will be executed by *engine*.","summary":"<p>Schedules an instance of this block for execution, with <em>stack</em> set as the stack that will be used by the instance during execution.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":637,"url":null},"def":{"name":"schedule","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"if count.zero?\n  return\nend\ninstance.schedule!(engine, stack)\n"}},{"html_id":"schedule!(engine:Engine,stack:Block)-instance-method","name":"schedule!","doc":"Schedules this block for execution, with *stack* set as the\nstack that will be used by this block during execution.\n\nMoves the cursor before the first form so that the entire\nblock will be executed by *engine*.","summary":"<p>Schedules this block for execution, with <em>stack</em> set as the stack that will be used by this block during execution.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":625,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"if count.zero?\n  return\nend\nengine.schedule!(stack: stack, block: to(0))\n"}},{"html_id":"shallow:Block-instance-method","name":"shallow","doc":"Returns a shallow copy of this block.","summary":"<p>Returns a shallow copy of this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":644,"url":null},"def":{"name":"shallow","return_type":"Block","visibility":"Public","body":"self.class.new(parent: parent?, tape: has_tape? ? tape.copy : nil, dict: has_dict? ? dict.copy : nil, prototype: prototype)"}},{"html_id":"slice:Tuple(Block,Block)-instance-method","name":"slice","doc":"Slices this block at cursor. This results in two halves,\nwhich are consequently returned.","summary":"<p>Slices this block at cursor.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":338,"url":null},"def":{"name":"slice","return_type":"::Tuple(Block, Block)","visibility":"Public","body":"if has_tape?\nelse\n  return {Block.new(parent: self), Block.new(parent: self)}\nend\nlhs, rhs = tape.slice\n{Block.new(parent: self, tape: lhs), Block.new(parent: self, tape: rhs)}\n"}},{"html_id":"slurp(source:String):self-instance-method","name":"slurp","doc":"Parses all forms in string *source*, and adds them to\nthis block.","summary":"<p>Parses all forms in string <em>source</em>, and adds them to this block.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String) : self","args_html":"(source : <a href=\"../String.html\">String</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":178,"url":null},"def":{"name":"slurp","args":[{"name":"source","external_name":"source","restriction":"String"}],"return_type":"self","visibility":"Public","body":"classifier = Classifier.new(source, block: self)\nScissors.cut(source) do |start, count, dot|\n  classifier.classify(start, count, dot)\nend\nclassifier.end\nself\n"}},{"html_id":"sort_using!(&cmp:Form,Form->Int32)-instance-method","name":"sort_using!","doc":"Sorts this block's tape inplace, calls *cmp* comparator proc\nfor each form pair for a comparison integer -1, 0, or 1.","summary":"<p>Sorts this block's tape inplace, calls <em>cmp</em> comparator proc for each form pair for a comparison integer -1, 0, or 1.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":366,"url":null},"def":{"name":"sort_using!","yields":2,"block_arity":2,"block_arg":{"name":"cmp","external_name":"cmp","restriction":"(Form, Form -> Int32)"},"visibility":"Public","body":"if has_tape?\nelse\n  return\nend\nself.tape = tape.sort_using!(cmp)\nself\n"}},{"html_id":"spot(io,vicinity=10)-instance-method","name":"spot","doc":"Appends a string representation of this block to *io* in\nwhich only forms in the negative and positive *vicinity*\nof this block's cursor are present, and the word before\nthe cursor is emphasized.\n\nDoes not respect `MAX_COUNT_TO_S`. Does not display quotes.\nDoes not display nested blocks.","summary":"<p>Appends a string representation of this block to <em>io</em> in which only forms in the negative and positive <em>vicinity</em> of this block's cursor are present, and the word before the cursor is emphasized.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"vicinity","default_value":"10","external_name":"vicinity","restriction":""}],"args_string":"(io, vicinity = 10)","args_html":"(io, vicinity = <span class=\"n\">10</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":814,"url":null},"def":{"name":"spot","args":[{"name":"io","external_name":"io","restriction":""},{"name":"vicinity","default_value":"10","external_name":"vicinity","restriction":""}],"visibility":"Public","body":"io << \"[\"\nb = (cursor - vicinity).clamp(0..(count - 1))\ne = (cursor + vicinity).clamp(0..(count - 1))\n(b..e).each do |index|\n  form = at(index)\n  focus = index == (cursor - 1)\n  (Colorize.with.bold.toggle(focus)).surround(io) do\n    case form\n    when Block\n      io << \" […]\"\n    when Quote\n      io << \" '…'\"\n    else\n      (io << \" \") << form\n    end\n  end\n  if focus\n    io << \" |\".colorize.red\n  end\nend\nio << \" ]\"\n"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":563,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"(entry_for?(name)).try(&.submit(form))"}},{"html_id":"swap:self-instance-method","name":"swap","doc":"Swaps two forms before the cursor, dies if none.","summary":"<p>Swaps two forms before the cursor, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":330,"url":null},"def":{"name":"swap","return_type":"self","visibility":"Public","body":"self.tape = tape.swap? || (die(\"at least two forms required before the cursor\"))\nself\n"}},{"html_id":"thru-instance-method","name":"thru","doc":"Returns form after cursor, and moves cursor past it.\n\nSimilar to `eject`, but doesn't modify the block.","summary":"<p>Returns form after cursor, and moves cursor past it.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":275,"url":null},"def":{"name":"thru","visibility":"Public","body":"if has_tape?\nelse\n  die(\"thru out of bounds\")\nend\nself.tape, _ = tape.thru? || (die(\"thru out of bounds\"))\n"}},{"html_id":"to(index:Int32):self-instance-method","name":"to","doc":"Moves tape cursor to *index*. Dies if *index* is out\nof bounds. See `Tape#to?`.","summary":"<p>Moves tape cursor to <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : self","args_html":"(index : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":248,"url":null},"def":{"name":"to","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"if (!has_tape?) && index.zero?\n  return self\nend\nif has_tape?\nelse\n  die(\"cursor index out of bounds\")\nend\nself.tape = (tape.to?(index)) || (die(\"cursor index out of bounds\"))\nself\n"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":799,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"(a?(Hook.as_quote, Quote)) || super()"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/block.cr","line_number":839,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if repr = a?(Hook.as_quote, Quote)\n  io << repr.string\n  return\nend\nexecuted = exec_recursive(:to_s) do\n  io << \"[\"\n  if has_tape? && (!tape.empty?)\n    (0...cursor).each do |index|\n      (io << \" \") << (at(index))\n    end\n    if cursor == count\n    else\n      io << \" |\"\n      (cursor...count).each do |index|\n        (io << \" \") << (at(index))\n      end\n    end\n  end\n  if has_dict? && (!dict.empty?)\n    io << \" ·\"\n    dict.each do |name, entry|\n      ((((io << \" \") << (entry.is_a?(OpenEntry) ? \"@\" : \"$\")) << \"{\") << name) << \" :: \"\n      entry.effect(io)\n      io << \"}\"\n    end\n  end\n  io << \" ]\"\nend\nif executed\nelse\n  io << \"⭮\"\nend\n"}},{"html_id":"to_tape_block:self-instance-method","name":"to_tape_block","doc":"Returns tape block for this block. Tape block is an *orphan*\nblock with a shallow copy of this block's tape set as its tape,\nand at all times no dictionary.","summary":"<p>Returns tape block for this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":661,"url":null},"def":{"name":"to_tape_block","return_type":"self","visibility":"Public","body":"Block.new(parent: nil, tape: tape.copy, leaf: leaf?)"}},{"html_id":"top:Form-instance-method","name":"top","doc":"Returns the top form, dies if none.","summary":"<p>Returns the top form, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":313,"url":null},"def":{"name":"top","return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"no top for block\")\nend\ntop? || (die(\"no top for block\"))\n"}},{"html_id":"top?:Form|Nil-instance-method","name":"top?","doc":"Returns the top form, or nil if none.","summary":"<p>Returns the top form, or nil if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":320,"url":null},"def":{"name":"top?","return_type":"Form | ::Nil","visibility":"Public","body":"tape.top?"}},{"html_id":"unfriend(other:Block)-instance-method","name":"unfriend","doc":"Removes *other* from the friendlist of this block.","summary":"<p>Removes <em>other</em> from the friendlist of this block.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block)","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":398,"url":null},"def":{"name":"unfriend","args":[{"name":"other","external_name":"other","restriction":"Block"}],"visibility":"Public","body":"if has_friends?\nelse\n  return\nend\nfriends.delete(other)\n"}}]},{"html_id":"novika/Novika/BlockIdMap","path":"Novika/BlockIdMap.html","kind":"alias","full_name":"Novika::BlockIdMap","name":"BlockIdMap","abstract":false,"locations":[{"filename":"src/novika/forms/block.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"Hash(UInt64, Novika::Block)","aliased_html":"Hash(UInt64, <a href=\"../Novika/Block.html\">Novika::Block</a>)","const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Maps block unique identifiers (currently, object ids are used as\nsuch) to blocks they identify.\n\nUsed instead of Sets for forcing identity-based lookup rather\nthan hash-based lookup.","summary":"<p>Maps block unique identifiers (currently, object ids are used as such) to blocks they identify.</p>"},{"html_id":"novika/Novika/BlockPool","path":"Novika/BlockPool.html","kind":"class","full_name":"Novika::BlockPool","name":"BlockPool","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":549,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BlockPool]","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: pivot, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: cb, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  blocks.size\nend}, {type: \"array\", name: blocks, cls: FrozenBlock, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(pivot:Block,caps:CapabilityCollection,mode=CaptureMode::CaptureAll)-class-method","name":"new","doc":"Creates a block pool by exploring the given *pivot*\nblock's hierarchy, forms, etc.\n\nNote that the pivot block may or may not be the root\nblock; the whole tree is explored anyway, be it\n\"above\", \"below\", \"to the left\", or \"to the right\"\nof the pivot block.","summary":"<p>Creates a block pool by exploring the given <em>pivot</em> block's hierarchy, forms, etc.</p>","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(pivot : Block, caps : CapabilityCollection, mode = CaptureMode::CaptureAll)","args_html":"(pivot : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":777,"url":null},"def":{"name":"new","args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"pool = new\nvisitor = BlockVisitor.new(caps.block, mode)\nvisitor.enter(pivot)\npool.cb = caps.block.object_id\npool.pivot = pivot.object_id\npool.blocks = visitor.blocks\npool\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":550,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"blocks:Array(FrozenBlock)-instance-method","name":"blocks","doc":"Lists the frozen blocks in this pool.","summary":"<p>Lists the frozen blocks in this pool.</p>","abstract":false,"def":{"name":"blocks","return_type":"Array(FrozenBlock)","visibility":"Public","body":"@blocks"}},{"html_id":"blocks=(blocks:Array(FrozenBlock))-instance-method","name":"blocks=","doc":"Lists the frozen blocks in this pool.","summary":"<p>Lists the frozen blocks in this pool.</p>","abstract":false,"args":[{"name":"blocks","external_name":"blocks","restriction":"Array(FrozenBlock)"}],"args_string":"(blocks : Array(FrozenBlock))","args_html":"(blocks : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/FrozenBlock.html\">FrozenBlock</a>))","def":{"name":"blocks=","args":[{"name":"blocks","external_name":"blocks","restriction":"Array(FrozenBlock)"}],"visibility":"Public","body":"@blocks = blocks"}},{"html_id":"cb:UInt64-instance-method","name":"cb","doc":"Holds the capability block id. Even though during serialization,\ncapability block is skipped (as serializing it would be of no\nparticular use), its id is still stored so that client-side\n(nki-side), it can be replaced with the client capability\nblock, hopefully with all necessary capabilities.","summary":"<p>Holds the capability block id.</p>","abstract":false,"def":{"name":"cb","return_type":"UInt64","visibility":"Public","body":"@cb"}},{"html_id":"cb=(cb:UInt64)-instance-method","name":"cb=","doc":"Holds the capability block id. Even though during serialization,\ncapability block is skipped (as serializing it would be of no\nparticular use), its id is still stored so that client-side\n(nki-side), it can be replaced with the client capability\nblock, hopefully with all necessary capabilities.","summary":"<p>Holds the capability block id.</p>","abstract":false,"args":[{"name":"cb","external_name":"cb","restriction":"UInt64"}],"args_string":"(cb : UInt64)","args_html":"(cb : UInt64)","def":{"name":"cb=","args":[{"name":"cb","external_name":"cb","restriction":"UInt64"}],"visibility":"Public","body":"@cb = cb"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of blocks in this pool.","summary":"<p>Holds the amount of blocks in this pool.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of blocks in this pool.","summary":"<p>Holds the amount of blocks in this pool.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"pivot:UInt64-instance-method","name":"pivot","doc":"Holds the pivot block id.","summary":"<p>Holds the pivot block id.</p>","abstract":false,"def":{"name":"pivot","return_type":"UInt64","visibility":"Public","body":"@pivot"}},{"html_id":"pivot=(pivot:UInt64)-instance-method","name":"pivot=","doc":"Holds the pivot block id.","summary":"<p>Holds the pivot block id.</p>","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"UInt64"}],"args_string":"(pivot : UInt64)","args_html":"(pivot : UInt64)","def":{"name":"pivot=","args":[{"name":"pivot","external_name":"pivot","restriction":"UInt64"}],"visibility":"Public","body":"@pivot = pivot"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Reconstructs (melts if necessary) the pivot block, its\nblock hierarchy, its forms etc. Returns the resulting\n`Block` form.","summary":"<p>Reconstructs (melts if necessary) the pivot block, its block hierarchy, its forms etc.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":764,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"assembler = BlockAssembler.new(blocks, caps.block)\nassembler.resolve!(cb, caps.block)\nassembler.fetch(pivot)\n"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/BlockRefSnapshot","path":"Novika/BlockRefSnapshot.html","kind":"class","full_name":"Novika::BlockRefSnapshot","name":"BlockRefSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":47,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BlockRefSnapshot]","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: id, cls: UInt64, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(id:UInt64)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","location":{"filename":"src/novika/image.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"instance = new\ninstance.id = id\ninstance\n"}},{"html_id":"new(block:Form)-class-method","name":"new","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Form"}],"args_string":"(block : Form)","args_html":"(block : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/image.cr","line_number":64,"url":null},"def":{"name":"new","args":[{"name":"block","external_name":"block","restriction":"Form"}],"visibility":"Public","body":"new(block.object_id)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":48,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:UInt64-instance-method","name":"id","doc":"Holds unique id of the block this reference points to,\nin `BlockPool`.","summary":"<p>Holds unique id of the block this reference points to, in <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"def":{"name":"id","return_type":"UInt64","visibility":"Public","body":"@id"}},{"html_id":"id=(id:UInt64)-instance-method","name":"id=","doc":"Holds unique id of the block this reference points to,\nin `BlockPool`.","summary":"<p>Holds unique id of the block this reference points to, in <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":54,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"assembler.fetch(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Boolean","path":"Novika/Boolean.html","kind":"struct","full_name":"Novika::Boolean","name":"Boolean","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"subclasses":[{"html_id":"novika/Novika/False","kind":"struct","full_name":"Novika::False","name":"False"},{"html_id":"novika/Novika/True","kind":"struct","full_name":"Novika::True","name":"True"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a boolean (true/false) value.","summary":"<p>Represents a boolean (true/false) value.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":26,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"constructors":[{"html_id":"[](object):Boolean-class-method","name":"[]","doc":"Creates a `Boolean` subclass for the given *object*.","summary":"<p>Creates a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> subclass for the given <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":""}],"args_string":"(object) : Boolean","args_html":"(object) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":7,"url":null},"def":{"name":"[]","args":[{"name":"object","external_name":"object","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"object ? True.new : False.new"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}},{"html_id":"same?(a:Reference,b:Reference):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Reference"},{"name":"b","external_name":"b","restriction":"Reference"}],"args_string":"(a : Reference, b : Reference) : Boolean","args_html":"(a : Reference, b : Reference) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":12,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":"Reference"},{"name":"b","external_name":"b","restriction":"Reference"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a.same?(b)]"}},{"html_id":"same?(a:Byteslice,b:Byteslice):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Byteslice"},{"name":"b","external_name":"b","restriction":"Byteslice"}],"args_string":"(a : Byteslice, b : Byteslice) : Boolean","args_html":"(a : <a href=\"../Novika/Byteslice.html\">Byteslice</a>, b : <a href=\"../Novika/Byteslice.html\">Byteslice</a>) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":17,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":"Byteslice"},{"name":"b","external_name":"b","restriction":"Byteslice"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a.same?(b)]"}},{"html_id":"same?(a,b):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b) : Boolean","args_html":"(a, b) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":22,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a == b]"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/BooleanSnapshot","path":"Novika/BooleanSnapshot.html","kind":"class","full_name":"Novika::BooleanSnapshot","name":"BooleanSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":72,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BooleanSnapshot]","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 0, cls: Novika::BooleanSnapshot, onlyif: nil, verify: nil}] of Nil","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Boolean)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"args_string":"(form : Boolean)","args_html":"(form : <a href=\"../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/image.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"visibility":"Public","body":"bool = new\nbool.state = form.is_a?(True)\nbool\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":73,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"state:Bool-instance-method","name":"state","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"state","return_type":"Bool","visibility":"Public","body":"@state == 1"}},{"html_id":"state=(state:UInt8)-instance-method","name":"state=","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"UInt8"}],"args_string":"(state : UInt8)","args_html":"(state : UInt8)","def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"UInt8"}],"visibility":"Public","body":"@state = state"}},{"html_id":"state=(value:Bool)-instance-method","name":"state=","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"state=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@state = UInt8.new(value ? 1 : 0)"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":81,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Boolean[state]"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Builtin","path":"Novika/Builtin.html","kind":"struct","full_name":"Novika::Builtin","name":"Builtin","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/builtin.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Wraps a snippet of Crystal (native) code, namely a Crystal\n`Proc`, for usage in the Novika-land.","summary":"<p>Wraps a snippet of Crystal (native) code, namely a Crystal <code>Proc</code>, for usage in the Novika-land.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/builtin.cr","line_number":24,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"builtin\""}}],"constructors":[{"html_id":"new(id:String,desc:String,code:Novika::Engine,Novika::Block->_)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"desc","external_name":"desc","restriction":"String"},{"name":"code","external_name":"code","restriction":"(::Novika::Engine, ::Novika::Block -> _)"}],"args_string":"(id : String, desc : String, code : Novika::Engine, Novika::Block -> _)","args_html":"(id : <a href=\"../String.html\">String</a>, desc : <a href=\"../String.html\">String</a>, code : <a href=\"../Novika/Engine.html\">Novika::Engine</a>, <a href=\"../Novika/Block.html\">Novika::Block</a> -> _)","location":{"filename":"src/novika/forms/builtin.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"desc","external_name":"desc","restriction":"String"},{"name":"code","external_name":"code","restriction":"(::Novika::Engine, ::Novika::Block -> _)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, desc, code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(id:String,desc:String,&code:Engine,Block->)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"desc","external_name":"desc","restriction":"::String"}],"args_string":"(id : String, desc : String, &code : Engine, Block -> )","args_html":"(id : <a href=\"../String.html\">String</a>, desc : <a href=\"../String.html\">String</a>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> )","location":{"filename":"src/novika/forms/builtin.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"desc","external_name":"desc","restriction":"::String"}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"visibility":"Public","body":"_ = allocate\n_.initialize(id, desc, &code) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if code == other.code\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/builtin.cr","line_number":20,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << @desc"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor all forms except blocks and builtins, simply returns\ntheir string representation.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/builtin.cr","line_number":33,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@desc =~ EFFECT_PATTERN ? (io << $~[1]) : \"native code\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = code.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this builtin.","summary":"<p>Returns the identifier of this builtin.</p>","abstract":false,"location":{"filename":"src/novika/forms/builtin.cr","line_number":9,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/builtin.cr","line_number":28,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"code.call(engine, engine.stack)\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/builtin.cr","line_number":37,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[native code for: '\") << id) << \"']\""}}]},{"html_id":"novika/Novika/BuiltinSnapshot","path":"Novika/BuiltinSnapshot.html","kind":"class","full_name":"Novika::BuiltinSnapshot","name":"BuiltinSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":245,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BuiltinSnapshot]","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Builtin)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"args_string":"(form : Builtin)","args_html":"(form : <a href=\"../Novika/Builtin.html\">Builtin</a>)","location":{"filename":"src/novika/image.cr","line_number":256,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"visibility":"Public","body":"builtin = new\nbuiltin.id = form.id\nbuiltin\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":246,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated unique identifier of this\nbuiltin.","summary":"<p>Holds the 0-terminated unique identifier of this builtin.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated unique identifier of this\nbuiltin.","summary":"<p>Holds the 0-terminated unique identifier of this builtin.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":252,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"assembler.cb.form_for(Novika::Word.new(id))"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Byteslice","path":"Novika/Byteslice.html","kind":"struct","full_name":"Novika::Byteslice","name":"Byteslice","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/byteslice.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_PREVIEW","name":"DEFAULT_PREVIEW","value":"\"byteslice\"","doc":"Holds the default preview string for byteslices.","summary":"<p>Holds the default preview string for byteslices.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":23,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"byteslice\""}}],"constructors":[{"html_id":"new(bytes:Bytes,preview:String=DEFAULT_PREVIEW,mutable:Bool=true)-class-method","name":"new","doc":"Initializes a byteslice from *bytes*.","summary":"<p>Initializes a byteslice from <em>bytes</em>.</p>","abstract":false,"args":[{"name":"bytes","external_name":"bytes","restriction":"Bytes"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":"::String"},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":"::Bool"}],"args_string":"(bytes : Bytes, preview : String = DEFAULT_PREVIEW, mutable : Bool = true)","args_html":"(bytes : Bytes, preview : <a href=\"../String.html\">String</a> = <span class=\"t\">DEFAULT_PREVIEW</span>, mutable : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"bytes","external_name":"bytes","restriction":"Bytes"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":"::String"},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bytes, preview, mutable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(io:IO,preview=DEFAULT_PREVIEW,mutable=true)-class-method","name":"new","doc":"Initializes a byteslice form from the given *io*.","summary":"<p>Initializes a byteslice form from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":""},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":""}],"args_string":"(io : IO, preview = DEFAULT_PREVIEW, mutable = true)","args_html":"(io : IO, preview = <span class=\"t\">DEFAULT_PREVIEW</span>, mutable = <span class=\"n\">true</span>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":""},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, preview, mutable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&)-class-method","name":"new","doc":"Yields an IO to the block, then returns a raw bytes\nform for it.","summary":"<p>Yields an IO to the block, then returns a raw bytes form for it.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":82,"url":null},"def":{"name":"new","yields":1,"block_arity":1,"visibility":"Public","body":"io = IO::Memory.new\nyield io\nnew(io)\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Two byteslices are equal when their content is equal, and\ntheir mutability statuses are equal.","summary":"<p>Two byteslices are equal when their content is equal, and their mutability statuses are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @bytes == (other.@bytes)\nelse\n  return false\nend\nif @mutable == (other.@mutable)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"address-instance-method","name":"address","doc":"Returns the memory address where this byteslice points to.","summary":"<p>Returns the memory address where this byteslice points to.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":66,"url":null},"def":{"name":"address","visibility":"Public","body":"@bytes.to_unsafe.address"}},{"html_id":"at(b:Int32,e:Int32)-instance-method","name":"at","doc":"Returns a sub-slice starting at *b*-th byte, and\nending at *e*-th byte.\n\nThe resulting byteslice *does not* preserve the\npreview string of this byteslice.","summary":"<p>Returns a sub-slice starting at <em>b</em>-th byte, and ending at <em>e</em>-th byte.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32)","args_html":"(b : Int32, e : Int32)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":39,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"visibility":"Public","body":"b = Math.max(b, 0)\ne = Math.min(e, count - 1)\nByteslice.new(@bytes[b..e], mutable: @mutable)\n"}},{"html_id":"at(index:Int32)-instance-method","name":"at","doc":"Returns the *index*-th byte.","summary":"<p>Returns the <em>index</em>-th byte.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","args_html":"(index : Int32)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":28,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"visibility":"Public","body":"byte = @bytes[index]? || (die(\"index out of bounds\"))\nDecimal.new(byte)\n"}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of bytes in this byteslice.","summary":"<p>Returns the amount of bytes in this byteslice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":46,"url":null},"def":{"name":"count","visibility":"Public","body":"@bytes.size"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":50,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Two byteslices are equal when their content is equal, and\ntheir mutability statuses are equal.","summary":"<p>Two byteslices are equal when their content is equal, and their mutability statuses are equal.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @bytes.hash(hasher)\nhasher = @mutable.hash(hasher)\nhasher\n"}},{"html_id":"mutable?:Bool-instance-method","name":"mutable?","doc":"Returns whether this byteslice is mutable.","summary":"<p>Returns whether this byteslice is mutable.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":12,"url":null},"def":{"name":"mutable?","return_type":"Bool","visibility":"Public","body":"@mutable"}},{"html_id":"points_to?(address:UInt64)-instance-method","name":"points_to?","doc":"Returns whether this byteslice points to the given *address*.","summary":"<p>Returns whether this byteslice points to the given <em>address</em>.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"UInt64"}],"args_string":"(address : UInt64)","args_html":"(address : UInt64)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":89,"url":null},"def":{"name":"points_to?","args":[{"name":"address","external_name":"address","restriction":"UInt64"}],"visibility":"Public","body":"address == self.address"}},{"html_id":"preview:String-instance-method","name":"preview","doc":"Returns the preview string of this byteslice.","summary":"<p>Returns the preview string of this byteslice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":9,"url":null},"def":{"name":"preview","return_type":"String","visibility":"Public","body":"@preview"}},{"html_id":"same?(other:Byteslice)-instance-method","name":"same?","doc":"Returns whether this and *other* byteslices point to the same\nlocation in memory, and have the same mutability status.","summary":"<p>Returns whether this and <em>other</em> byteslices point to the same location in memory, and have the same mutability status.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Byteslice"}],"args_string":"(other : Byteslice)","args_html":"(other : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":95,"url":null},"def":{"name":"same?","args":[{"name":"other","external_name":"other","restriction":"Byteslice"}],"visibility":"Public","body":"(other.points_to?(address)) && (@mutable == other.mutable?)"}},{"html_id":"to_io:IO::Memory-instance-method","name":"to_io","doc":"Wraps the underlying byte slice in an IO.","summary":"<p>Wraps the underlying byte slice in an IO.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":71,"url":null},"def":{"name":"to_io","return_type":"IO::Memory","visibility":"Public","body":"IO::Memory.new(@bytes)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":54,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((((io << \"[\") << @preview) << \", consists of \") << count) << \" \"\nio << (@mutable ? \"mutable\" : \"immutable\")\nio << \" byte(s)]\"\n"}},{"html_id":"to_unsafe:Bytes-instance-method","name":"to_unsafe","doc":"Returns the underlying byte slice.","summary":"<p>Returns the underlying byte slice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":61,"url":null},"def":{"name":"to_unsafe","return_type":"Bytes","visibility":"Public","body":"@bytes"}},{"html_id":"write_to(io:IO)-instance-method","name":"write_to","doc":"Writes this byteslice to *io*.","summary":"<p>Writes this byteslice to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":76,"url":null},"def":{"name":"write_to","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write(@bytes)"}}]},{"html_id":"novika/Novika/BytesliceSnapshot","path":"Novika/BytesliceSnapshot.html","kind":"class","full_name":"Novika::BytesliceSnapshot","name":"BytesliceSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":268,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BytesliceSnapshot]","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  content.size\nend}, {type: \"bytes\", name: content, cls: Bytes, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Byteslice)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"args_string":"(form : Byteslice)","args_html":"(form : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/image.cr","line_number":278,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"visibility":"Public","body":"byteslice = new\nbyteslice.content = form.to_unsafe\nbyteslice\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":269,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"content:Bytes-instance-method","name":"content","abstract":false,"def":{"name":"content","return_type":"Bytes","visibility":"Public","body":"@content"}},{"html_id":"content=(content:Bytes)-instance-method","name":"content=","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"Bytes"}],"args_string":"(content : Bytes)","args_html":"(content : Bytes)","def":{"name":"content=","args":[{"name":"content","external_name":"content","restriction":"Bytes"}],"visibility":"Public","body":"@content = content"}},{"html_id":"count:UInt64-instance-method","name":"count","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":274,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Byteslice.new(content)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Capabilities","path":"Novika/Capabilities.html","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities","abstract":false,"locations":[{"filename":"src/novika/capabilities/console.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/disk.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/frontend.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/ink.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/system.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"types":[{"html_id":"novika/Novika/Capabilities/IConsole","path":"Novika/Capabilities/IConsole.html","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/console.cr","line_number":34,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BG_DEFAULT","name":"BG_DEFAULT","value":"Color.new(Decimal.new(0), Decimal.new(0), Decimal.new(0))","doc":"Background color used when there is no user-provided\nbackground color.","summary":"<p>Background color used when there is no user-provided background color.</p>"},{"id":"FG_DEFAULT","name":"FG_DEFAULT","value":"Color.new(Decimal.new(255), Decimal.new(255), Decimal.new(255))","doc":"Foreground color used when there is no user-provided\nforeground color.","summary":"<p>Foreground color used when there is no user-provided foreground color.</p>"}],"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Console","kind":"class","full_name":"Novika::Capabilities::Impl::Console","name":"Console"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"doc":"Enables the console API.\n\nExposed vocabulary:\n\n* `console:on`, implemented by `on`\n* `console:off`, implemented by `off`\n* `console:256`, implemented by `colors_256`\n* `console:compat`, implemented by `colors_compat`\n* `console:truecolor`, implemented by `colors_truecolor`\n* `console:readKey`, implemented by `read_key`\n* `console:size`, implemented by `size`\n* `console:hadKeyPressed?`, implemented by `had_key_pressed?`\n* `console:hadCtrlPressed?`, implemented by `had_ctrl_pressed?`\n* `console:hadAltPressed?`, implemented by `had_alt_pressed?`\n* `console:hadShiftPressed?`, implemented by `had_shift_pressed?`\n* `console:hadBackspacePressed?`, implemented by `had_backspace_pressed?`\n* `console:hadFnPressed?`, implemented by `had_fn_pressed?`\n* `console:hadInsertPressed?`, implemented by `had_insert_pressed?`\n* `console:hadDeletePressed?`, implemented by `had_delete_pressed?`\n* `console:hadHomePressed?`, implemented by `had_home_pressed?`\n* `console:hadEndPressed?`, implemented by `had_end_pressed?`\n* `console:hadPgupPressed?`, implemented by `had_pgup_pressed?`\n* `console:hadPgdnPressed?`, implemented by `had_pgdn_pressed?`\n* `console:hadLeftPressed?`, implemented by `had_left_pressed?`\n* `console:hadRightPressed?`, implemented by `had_right_pressed?`\n* `console:hadUpPressed?`, implemented by `had_up_pressed?`\n* `console:hadDownPressed?`, implemented by `had_down_pressed?`\n* `console:getCharPressed`, implemented by `get_char_pressed`\n* `console:change`, implemented by `change`\n* `console:appendEcho`, implemented by `append_echo`\n* `console:present`, implemented by `present`\n* `console:clear`, implemented by `clear`","summary":"<p>Enables the console API.</p>","class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":45,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"console\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":53,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":49,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"enables the console API\""}}],"instance_methods":[{"html_id":"append_echo(engine,x:Decimal,y:Decimal,fg:Color,bg:Color,quote:Quote)-instance-method","name":"append_echo","doc":"Appends echo of *quote* colorized with *fg* and *bg*\ncolors at the given *x* and *y* position (in columns,\nrows).","summary":"<p>Appends echo of <em>quote</em> colorized with <em>fg</em> and <em>bg</em> colors at the given <em>x</em> and <em>y</em> position (in columns, rows).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color, quote : Quote)","args_html":"(engine, x : <a href=\"../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../Novika/Color.html\">Color</a>, bg : <a href=\"../../Novika/Color.html\">Color</a>, quote : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":160,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"bg-instance-method","name":"bg","doc":"Returns the active primary background color.","summary":"<p>Returns the active primary background color.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":176,"url":null},"def":{"name":"bg","visibility":"Public","body":"(capabilities.fetch(IInk) do |__arg1|\n  __arg1.bg.last?\nend) || BG_DEFAULT"}},{"html_id":"clear(engine,fg:Color,bg:Color)-instance-method","name":"clear","doc":"Clears the console with *fg* and *bg* colors.","summary":"<p>Clears the console with <em>fg</em> and <em>bg</em> colors.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, fg : Color, bg : Color)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a>, bg : <a href=\"../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":166,"url":null},"def":{"name":"clear","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":""}},{"html_id":"colors_256(engine)-instance-method","name":"colors_256","doc":"Enables the 256-color output mode.","summary":"<p>Enables the 256-color output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":64,"url":null},"def":{"name":"colors_256","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"colors_compat(engine)-instance-method","name":"colors_compat","doc":"Enables the compatibility color (8-color) output mode.","summary":"<p>Enables the compatibility color (8-color) output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":67,"url":null},"def":{"name":"colors_compat","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"colors_truecolor(engine)-instance-method","name":"colors_truecolor","doc":"Enables the truecolor output mode.","summary":"<p>Enables the truecolor output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":70,"url":null},"def":{"name":"colors_truecolor","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"fg-instance-method","name":"fg","doc":"Returns the active primary foreground color.","summary":"<p>Returns the active primary foreground color.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":171,"url":null},"def":{"name":"fg","visibility":"Public","body":"(capabilities.fetch(IInk) do |__arg0|\n  __arg0.fg.last?\nend) || FG_DEFAULT"}},{"html_id":"get_char_pressed(engine):Quote-instance-method","name":"get_char_pressed","doc":"Leaves char quote for the key that was pressed.\nUsually a lowercase or uppercase letter; but also may\nlook like `'\\\\n'` or `'\\\\t'`, etc.)\n\nIn case the key that was pressed cannot be represented\nby the means of a quote, or if the user did not press\nany key, an empty quote is left in place of Char\nquote.","summary":"<p>Leaves char quote for the key that was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":155,"url":null},"def":{"name":"get_char_pressed","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"had_alt_pressed?(engine):Boolean-instance-method","name":"had_alt_pressed?","doc":"Returns boolean for whether the ALT key was pressed.","summary":"<p>Returns boolean for whether the ALT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":95,"url":null},"def":{"name":"had_alt_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_backspace_pressed?(engine):Boolean-instance-method","name":"had_backspace_pressed?","doc":"Returns boolean for whether the Backspace key\nwas pressed.","summary":"<p>Returns boolean for whether the Backspace key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":102,"url":null},"def":{"name":"had_backspace_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_char_pressed?(engine):Boolean-instance-method","name":"had_char_pressed?","doc":"Returns boolean for whether EXCLUSIVELY a printable\ncharacter key was pressed (no CTRL, ALT, etc.) Whether\nthe SHIFT key was pressed or not is ignored.","summary":"<p>Returns boolean for whether EXCLUSIVELY a printable character key was pressed (no CTRL, ALT, etc.) Whether the SHIFT key was pressed or not is ignored.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":145,"url":null},"def":{"name":"had_char_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_ctrl_pressed?(engine):Boolean-instance-method","name":"had_ctrl_pressed?","doc":"leaves Boolean for whether the CTRL key was pressed.","summary":"<p>leaves Boolean for whether the CTRL key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":92,"url":null},"def":{"name":"had_ctrl_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_delete_pressed?(engine):Boolean-instance-method","name":"had_delete_pressed?","doc":"Returns boolean for whether the DELETE key was pressed.","summary":"<p>Returns boolean for whether the DELETE key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":112,"url":null},"def":{"name":"had_delete_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_down_pressed?(engine):Boolean-instance-method","name":"had_down_pressed?","doc":"Returns boolean for whether the DOWN ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the DOWN ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":140,"url":null},"def":{"name":"had_down_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_end_pressed?(engine):Boolean-instance-method","name":"had_end_pressed?","doc":"Returns boolean for whether the END key was pressed.","summary":"<p>Returns boolean for whether the END key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":118,"url":null},"def":{"name":"had_end_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_fn_pressed?(engine):Boolean-instance-method","name":"had_fn_pressed?","doc":"Returns boolean for whether one of the function\nkeys F1-F12 was pressed.","summary":"<p>Returns boolean for whether one of the function keys F1-F12 was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":106,"url":null},"def":{"name":"had_fn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_home_pressed?(engine):Boolean-instance-method","name":"had_home_pressed?","doc":"Returns boolean for whether the HOME key was pressed.","summary":"<p>Returns boolean for whether the HOME key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":115,"url":null},"def":{"name":"had_home_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_insert_pressed?(engine):Boolean-instance-method","name":"had_insert_pressed?","doc":"Returns boolean for whether the INSERT key was pressed.","summary":"<p>Returns boolean for whether the INSERT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":109,"url":null},"def":{"name":"had_insert_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_key_pressed?(engine):Boolean-instance-method","name":"had_key_pressed?","doc":"Returns boolean for whether any key was pressed.","summary":"<p>Returns boolean for whether any key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":89,"url":null},"def":{"name":"had_key_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_left_pressed?(engine):Boolean-instance-method","name":"had_left_pressed?","doc":"Returns boolean for whether the LEFT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the LEFT ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":128,"url":null},"def":{"name":"had_left_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_pgdn_pressed?(engine):Boolean-instance-method","name":"had_pgdn_pressed?","doc":"Returns boolean for whether the PAGE DOWN key was pressed.","summary":"<p>Returns boolean for whether the PAGE DOWN key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":124,"url":null},"def":{"name":"had_pgdn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_pgup_pressed?(engine):Boolean-instance-method","name":"had_pgup_pressed?","doc":"Returns boolean for whether the PAGE UP key was pressed.","summary":"<p>Returns boolean for whether the PAGE UP key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":121,"url":null},"def":{"name":"had_pgup_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_right_pressed?(engine):Boolean-instance-method","name":"had_right_pressed?","doc":"Returns boolean for whether the RIGHT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the RIGHT ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":132,"url":null},"def":{"name":"had_right_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_shift_pressed?(engine):Boolean-instance-method","name":"had_shift_pressed?","doc":"Returns boolean for whether the SHIFT key was pressed.","summary":"<p>Returns boolean for whether the SHIFT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":98,"url":null},"def":{"name":"had_shift_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_up_pressed?(engine):Boolean-instance-method","name":"had_up_pressed?","doc":"Returns boolean for whether the UP ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the UP ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":136,"url":null},"def":{"name":"had_up_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"inject(intotarget)-instance-method","name":"inject","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/console.cr","line_number":180,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(\"console:on\", \"( -- ): enables the console. Must be called before using\\n any other console-related word.\") do |engine|\n  on(engine)\nend\ntarget.at(\"console:off\", \"( -- ): disables the console. Must be called at the end\\n of your program or when you don't need console anymore.\") do |engine|\n  off(engine)\nend\ntarget.at(\"console:compat\", \"( -- ): enables the compatibility color output mode. In\\n this mode, only 8 colors are available. All RGB colors\\n are automatically reduced to one of those 8 colors.\") do |engine|\n  colors_compat(engine)\nend\ntarget.at(\"console:256\", \"( -- ): enables the 256-color output mode. In this mode,\\n 256 colors are available. All RGB colors are automatically\\n reduced to one of those 256 colors.\") do |engine|\n  colors_256(engine)\nend\ntarget.at(\"console:truecolor\", \"( -- ): enables the truecolor output mode. In this mode,\\nall colors are available and are passed to the console\\nas-is.\") do |engine|\n  colors_truecolor(engine)\nend\ntarget.at(\"console:size\", \"( -- Cw Ch ): leaves the Console width (in columns) and\\n Console height (in rows).\") do |engine, stack|\n  w, h = size(engine)\n  w.onto(stack)\n  h.onto(stack)\nend\ntarget.at(\"console:setTimeout\", \"( D -- ): sets input timeout to Duration, given in *milliseconds*.\\n\\n * If Duration is negative, `console:readKey` will wait\\n   for input indefinitely (i.e., until there is input).\\n\\n * If Duration is zero, `console:readKey` won't wait for\\n   input at all, but make note if there is any at the moment.\\n\\n * If Duration is positive, `console:readKey` will peek\\n   during the timeout window.\") do |_, stack|\n  @timeout = stack.drop.a(Decimal)\nend\ntarget.at(\"console:readKey\", \"( -- ): peeks or waits for input. See `console:setTimeout`.\\n Refreshes the input state. Use `console:hadKeyPressed` and\\n friends to explore the input state afterwards.\") do |engine|\n  read_key(engine, @timeout)\nend\ntarget.at(\"console:hadKeyPressed?\", \"( -- B ): leaves Boolean for whether any key was pressed.\") do |engine, stack|\n  (had_key_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadCtrlPressed?\", \"( -- B ): leaves Boolean for whether the CTRL key was pressed.\") do |engine, stack|\n  (had_ctrl_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadAltPressed?\", \"( -- B ): leaves Boolean for whether the ALT key was pressed.\") do |engine, stack|\n  (had_alt_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadShiftPressed?\", \"( -- B ): leaves Boolean for whether the SHIFT key was pressed.\") do |engine, stack|\n  (had_shift_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadBackspacePressed?\", \"( -- B ): leaves Boolean for whether the Backspace key\\n was pressed.\") do |engine, stack|\n  (had_backspace_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadFnPressed?\", \"( -- B ): leaves Boolean for whether one of the function\\n keys F1-F12 was pressed.\") do |engine, stack|\n  (had_fn_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadInsertPressed?\", \"( -- B ): leaves Boolean for whether the INSERT key was pressed.\") do |engine, stack|\n  (had_insert_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadDeletePressed?\", \"( -- B ): leaves Boolean for whether the DELETE key was pressed.\") do |engine, stack|\n  (had_delete_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadHomePressed?\", \"( -- B ): leaves Boolean for whether the HOME key was pressed.\") do |engine, stack|\n  (had_home_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadEndPressed?\", \"( -- B ): leaves Boolean for whether the END key was pressed.\") do |engine, stack|\n  (had_end_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadPageUpPressed?\", \"( -- B ): leaves Boolean for whether the PAGE UP key was pressed.\") do |engine, stack|\n  (had_pgup_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadPageDownPressed?\", \"( -- B ): leaves Boolean for whether the PAGE DOWN key was pressed.\") do |engine, stack|\n  (had_pgdn_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadLeftPressed?\", \"( -- B ): leaves Boolean for whether the LEFT ARROW key\\n was pressed.\") do |engine, stack|\n  (had_left_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadRightPressed?\", \"( -- B ): leaves Boolean for whether the RIGHT ARROW key\\n was pressed.\") do |engine, stack|\n  (had_right_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadUpPressed?\", \"( -- B ): leaves Boolean for whether the UP ARROW key\\n was pressed.\") do |engine, stack|\n  (had_up_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadDownPressed?\", \"( -- B ): leaves Boolean for whether the DOWN ARROW key\\n was pressed.\") do |engine, stack|\n  (had_down_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadCharPressed?\", \"( -- B ): leaves Boolean for whether EXCLUSIVELY a printable\\n character key was pressed (no CTRL, ALT, etc.) Whether the\\n SHIFT key was pressed or not is ignored.\") do |engine, stack|\n  (had_char_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:getCharPressed\", \"( -- Cq ): leaves Char quote for the key that was pressed.\\n Usually a lowercase or uppercase letter; but also may look\\n like `'\\\\n'` or `'\\\\t'`, etc.)\\n\\nIn case the key that was pressed cannot be represented\\nby the means of a quote, or if the user did not press\\nany key, an empty quote is left in place of Char quote.\") do |engine, stack|\n  (get_char_pressed(engine)).onto(stack)\nend\ntarget.at(\"console:change\", \"( X Y -- ): changes the color of the cell at X, Y coordinates\\n to be the foreground, background colors set by ink's\\n `withEchoFg` and `withEchoBg`.\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  change(engine, x, y, fg, bg)\nend\ntarget.at(\"console:appendEcho\", \"( F X Y -- ): appends echo of Form at an X and Y position\\n (in columns and rows correspondingly) using the foreground,\\n background colors set by ink's `withEchoFg` and `withEchoBg`.\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  q = stack.drop.to_quote\n  append_echo(engine, x, y, fg, bg, q)\nend\ntarget.at(\"console:withReverseAppendEcho\", \"( F X Y -- ): appends Form with foreground and background\\n colors swapped with each other (background color is set\\n to foreground color, and vice versa).\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  q = stack.drop.to_quote\n  append_echo(engine, x, y, bg, fg, q)\nend\ntarget.at(\"console:present\", \"( -- ): syncs internal buffer and console.\") do |engine|\n  present(engine)\nend\ntarget.at(\"console:clear\", \"( -- ): clears console with primary colors.\") do |engine|\n  clear(engine, fg, bg)\nend\n"}},{"html_id":"off(engine)-instance-method","name":"off","doc":"Disables the Console API.","summary":"<p>Disables the Console API.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":61,"url":null},"def":{"name":"off","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"on(engine)-instance-method","name":"on","doc":"Enables the Console API.","summary":"<p>Enables the Console API.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":58,"url":null},"def":{"name":"on","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"present(engine)-instance-method","name":"present","doc":"Syncs the internal buffer with console.","summary":"<p>Syncs the internal buffer with console.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":163,"url":null},"def":{"name":"present","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"read_key(engine,timeout:Decimal)-instance-method","name":"read_key","doc":"Peeks or waits for input. Refreshes the input state.\n\n* Negative *timeout* must wait indefinitely for input,\n  and after receiving input refresh the state.\n\n* Zero *timeout* must refresh the input state without\n  waiting for input.\n\n* Positive *timeout* must wait for input in a window\n  *timeout* milliseconds long, and refresh the input\n  state after receiving input.","summary":"<p>Peeks or waits for input.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"args_string":"(engine, timeout : Decimal)","args_html":"(engine, timeout : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":86,"url":null},"def":{"name":"read_key","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"size(engine):Tuple(Decimal,Decimal)-instance-method","name":"size","doc":"Returns the console width (in columns) and height (in rows).","summary":"<p>Returns the console width (in columns) and height (in rows).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Tuple(Decimal, Decimal)","args_html":"(engine) : Tuple(<a href=\"../../Novika/Decimal.html\">Decimal</a>, <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":73,"url":null},"def":{"name":"size","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"::Tuple(Decimal, Decimal)","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IDisk","path":"Novika/Capabilities/IDisk.html","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/disk.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Disk","kind":"class","full_name":"Novika::Capabilities::Impl::Disk","name":"Disk"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"disk\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes various disk-related (storage-related) words\""}}],"instance_methods":[{"html_id":"can_read?(engine,path:Quote):Boolean-instance-method","name":"can_read?","doc":"Returns whether *path* exists and is readable.","summary":"<p>Returns whether <em>path</em> exists and is readable.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":18,"url":null},"def":{"name":"can_read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"copy(engine,src:Quote,dst:Quote):Bool-instance-method","name":"copy","doc":"Copies source *src* (quote path to a file, symlink, or\ndirectory) to destination *dst* (also a quote).\n\nIf *src* is a directory, copies it recursively.\n\nReturns whether the operation was successful.","summary":"<p>Copies source <em>src</em> (quote path to a file, symlink, or directory) to destination <em>dst</em> (also a quote).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"args_string":"(engine, src : Quote, dst : Quote) : Bool","args_html":"(engine, src : <a href=\"../../Novika/Quote.html\">Quote</a>, dst : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":60,"url":null},"def":{"name":"copy","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"dir_empty?(engine,path:Quote):Boolean|Nil-instance-method","name":"dir_empty?","doc":"Returns whether directory pointed to by *path* is empty.\nReturns nil if *path* does not point to a directory, or\nif *path* does not exist.","summary":"<p>Returns whether directory pointed to by <em>path</em> is empty.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean | Nil","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a> | Nil","location":{"filename":"src/novika/capabilities/disk.cr","line_number":35,"url":null},"def":{"name":"dir_empty?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean | ::Nil","visibility":"Public","body":""}},{"html_id":"has?(engine,path:Quote):Boolean-instance-method","name":"has?","doc":"Returns whether *path* exists.","summary":"<p>Returns whether <em>path</em> exists.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":21,"url":null},"def":{"name":"has?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_dir?(engine,path:Quote):Boolean-instance-method","name":"has_dir?","doc":"Returns whether *path* exists and points to a directory.","summary":"<p>Returns whether <em>path</em> exists and points to a directory.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":24,"url":null},"def":{"name":"has_dir?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_file?(engine,path:Quote):Boolean-instance-method","name":"has_file?","doc":"Returns whether *path* exists and points to a file.","summary":"<p>Returns whether <em>path</em> exists and points to a file.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":27,"url":null},"def":{"name":"has_file?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_symlink?(engine,path:Quote):Boolean-instance-method","name":"has_symlink?","doc":"Returns whether *path* exists and points to a symlink.","summary":"<p>Returns whether <em>path</em> exists and points to a symlink.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":30,"url":null},"def":{"name":"has_symlink?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":76,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"disk:has?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n on the disk.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:canRead?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and is readable.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (can_read?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasDir?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a directory.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_dir?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasFile?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a file.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_file?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasSymlink?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a symlink.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_symlink?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:dirEmpty?\", \"( Ptd -- B ): leaves Boolean for whether Path to directory\\n is empty. Dies if Path to directory points to something\\n other than a directory, or doesn't exist.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  if boolean = dir_empty?(engine, path)\n  else\n    path.die(\"no directory at path\")\n  end\n  boolean.onto(stack)\nend\ntarget.at(\"disk:join\", \"( Bp Cp -- P ): leaves Path, which is the result of joining Base\\n path and Child path using the platform-specific path separator.\\n\\n```\\n'hello' 'world' disk:join leaves: 'hello/world' \\\"On Unix\\\"\\n'hello' 'world' disk:join leaves: 'hello\\\\\\\\world' \\\"On Windows\\\"\\n```\") do |engine, stack|\n  cp = stack.drop.a(Quote)\n  bp = stack.drop.a(Quote)\n  (join(engine, bp, cp)).onto(stack)\nend\ntarget.at(\"disk:pwd\", \"( -- Wd ): leaves current Working directory.\") do |engine, stack|\n  (pwd(engine)).onto(stack)\nend\ntarget.at(\"disk:touch\", \"( P -- ): creates an empty file at Path. Does nothing\\n if Path already exists.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  touch(engine, path)\nend\ntarget.at(\"disk:mkdir\", \"( P -- ): creates an empty directory at Path, including\\n any non-existing intermediate directories. Does nothing\\n if Path already exists.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  mkdir(engine, path)\nend\ntarget.at(\"disk:copy\", \"( S D -- ): copies Source (quote path to a file, symlink,\\n or directory) to Destination (also a quote).\\n\\nIf Source is a directory, copies it recursively.\\nIf copy process failed, dies.\") do |engine, stack|\n  dst = stack.drop.a(Quote)\n  src = stack.drop.a(Quote)\n  if copy(engine, src, dst)\n  else\n    src.die(\"could not copy\")\n  end\nend\ntarget.at(\"disk:read\", \"( F -- C ): reads and leaves the Contents of File. Dies\\n if there is no File.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  if contents = read?(engine, path)\n  else\n    path.die(\"no file at path\")\n  end\n  contents.onto(stack)\nend\ntarget.at(\"disk:write\", \"( Cq/B Fp -- ): (over)writes content of file at File path\\n with Content quote/Byteslice. Dies if File path doesn't\\n exist or doesn't point to a file.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  content = stack.drop.a(Quote | Byteslice)\n  if write?(engine, content, path)\n  else\n    path.die(\"no file at path\")\n  end\nend\n"}},{"html_id":"join(engine,base:Quote,child:Quote):Quote-instance-method","name":"join","doc":"Returns path quote which is the result of joining\n*base* path and *child* path quotes using the\nplatform-specific path separator.","summary":"<p>Returns path quote which is the result of joining <em>base</em> path and <em>child</em> path quotes using the platform-specific path separator.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"args_string":"(engine, base : Quote, child : Quote) : Quote","args_html":"(engine, base : <a href=\"../../Novika/Quote.html\">Quote</a>, child : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":40,"url":null},"def":{"name":"join","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"mkdir(engine,path:Quote)-instance-method","name":"mkdir","doc":"Creates an empty directory at *path*, including any\nnon-existing intermediate directories. Does nothing\nif *path* already exists.","summary":"<p>Creates an empty directory at <em>path</em>, including any non-existing intermediate directories.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":52,"url":null},"def":{"name":"mkdir","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"pwd(engine):Quote-instance-method","name":"pwd","doc":"Returns the working directory.","summary":"<p>Returns the working directory.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":43,"url":null},"def":{"name":"pwd","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"read?(engine,path:Quote):Quote|Nil-instance-method","name":"read?","doc":"Reads and returns the contents of file at *path*. Returns\nnil if there is no file at *path*.","summary":"<p>Reads and returns the contents of file at <em>path</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Quote | Nil","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/capabilities/disk.cr","line_number":64,"url":null},"def":{"name":"read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Quote | ::Nil","visibility":"Public","body":""}},{"html_id":"touch(engine,path:Quote)-instance-method","name":"touch","doc":"Creates an empty file at *path*. Does nothing if *path*\nalready exists.","summary":"<p>Creates an empty file at <em>path</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":47,"url":null},"def":{"name":"touch","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"write?(engine,content:Quote,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nquote. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> quote.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Quote, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../Novika/Quote.html\">Quote</a>, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":69,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"write?(engine,content:Byteslice,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nbyteslice. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> byteslice.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Byteslice, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../Novika/Byteslice.html\">Byteslice</a>, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":74,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IFrontend","path":"Novika/Capabilities/IFrontend.html","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/frontend.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Frontend","kind":"class","full_name":"Novika::Capabilities::Impl::Frontend","name":"Frontend"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"frontend\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes information about the language frontend\""}}],"instance_methods":[{"html_id":"capabilities(engine):Block-instance-method","name":"capabilities","doc":"Returns a list block of capabilities provided by the frontend.","summary":"<p>Returns a list block of capabilities provided by the frontend.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Block","args_html":"(engine) : <a href=\"../../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":21,"url":null},"def":{"name":"capabilities","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Block","visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":23,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"novika:version\", \"( -- Vq ): leaves Version of the frontend as a quote.\") do |engine, stack|\n  (version(engine)).onto(stack)\nend\ntarget.at(\"novika:capabilities\", \"( -- Lb ): lists the ids of capabilities provided by the\\n frontend in List block.\\n\\n```\\n\\\"Yours may differ!\\\"\\nnovika:capabilities leaves: [ [ 'essential' 'colors' 'console' ] ]\\n```\") do |engine, stack|\n  (capabilities(engine)).onto(stack)\nend\n"}},{"html_id":"version(engine):Quote-instance-method","name":"version","doc":"Returns version of the frontend.","summary":"<p>Returns version of the frontend.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":18,"url":null},"def":{"name":"version","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IInk","path":"Novika/Capabilities/IInk.html","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/ink.cr","line_number":14,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NO_SYSTEM_ECHO_ERROR","name":"NO_SYSTEM_ECHO_ERROR","value":"\"with...Echo words need 'echo' from capability 'system', but this capability is not available\""}],"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Ink","kind":"class","full_name":"Novika::Capabilities::Impl::Ink","name":"Ink"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"doc":"Enables colorful output using `withColorAppendEcho` and friends.\n\nExposed vocabulary:\n\n* `withEchoFg`, generic implementation\n* `withEchoBg`, generic implementation\n* `dropEchoFg`, generic implementation\n* `dropEchoBg`, generic implementation\n* `withColorAppendEcho`, implemented by `with_color_append_echo`\n* `withEmphasisAppendEcho`, implemented by `with_emphasis_append_echo`\n* `withReverseAppendEcho`, generic implementation; when no\n  colors given by the use, `with_reverse_append_echo` is used.","summary":"<p>Enables colorful output using <code>withColorAppendEcho</code> and friends.</p>","class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":20,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"ink\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":28,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":24,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"enables colorful output using 'withColorAppendEcho' and friends\""}}],"instance_methods":[{"html_id":"bg:Array(Novika::Color)-instance-method","name":"bg","doc":"Echo background color stack.","summary":"<p>Echo background color stack.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":36,"url":null},"def":{"name":"bg","visibility":"Public","body":"@bg"}},{"html_id":"bg=(bg:Array(Novika::Color))-instance-method","name":"bg=","doc":"Echo background color stack.","summary":"<p>Echo background color stack.</p>","abstract":false,"args":[{"name":"bg","external_name":"bg","restriction":"::Array(::Novika::Color)"}],"args_string":"(bg : Array(Novika::Color))","args_html":"(bg : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Color.html\">Novika::Color</a>))","location":{"filename":"src/novika/capabilities/ink.cr","line_number":36,"url":null},"def":{"name":"bg=","args":[{"name":"bg","external_name":"bg","restriction":"::Array(::Novika::Color)"}],"visibility":"Public","body":"@bg = bg"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","doc":"Holds whether printing with colors is enabled (and desired).\n\nDefaults to `Novika.colorful?`.","summary":"<p>Holds whether printing with colors is enabled (and desired).</p>","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":41,"url":null},"def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"enabled?:Bool-instance-method","name":"enabled?","doc":"Holds whether printing with colors is enabled (and desired).\n\nDefaults to `Novika.colorful?`.","summary":"<p>Holds whether printing with colors is enabled (and desired).</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":41,"url":null},"def":{"name":"enabled?","return_type":"Bool","visibility":"Public","body":"if (value = @enabled).nil?\n  @enabled = (Novika.colorful?)\nelse\n  value\nend"}},{"html_id":"fg:Array(Novika::Color)-instance-method","name":"fg","doc":"Echo foreground color stack.","summary":"<p>Echo foreground color stack.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":33,"url":null},"def":{"name":"fg","visibility":"Public","body":"@fg"}},{"html_id":"fg=(fg:Array(Novika::Color))-instance-method","name":"fg=","doc":"Echo foreground color stack.","summary":"<p>Echo foreground color stack.</p>","abstract":false,"args":[{"name":"fg","external_name":"fg","restriction":"::Array(::Novika::Color)"}],"args_string":"(fg : Array(Novika::Color))","args_html":"(fg : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Color.html\">Novika::Color</a>))","location":{"filename":"src/novika/capabilities/ink.cr","line_number":33,"url":null},"def":{"name":"fg=","args":[{"name":"fg","external_name":"fg","restriction":"::Array(::Novika::Color)"}],"visibility":"Public","body":"@fg = fg"}},{"html_id":"inject(intotarget)-instance-method","name":"inject","doc":"Injects the colors vocabulary into *target*.","summary":"<p>Injects the colors vocabulary into <em>target</em>.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":62,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(\"withEchoFg\", \"( C -- ): pushes Color form onto the echo foreground\\n color stack.\") do |_, stack|\n  fg << (stack.drop.a(Color))\nend\ntarget.at(\"withEchoBg\", \"( C -- ): pushes Color form onto the echo background\\n color stack.\") do |_, stack|\n  bg << (stack.drop.a(Color))\nend\ntarget.at(\"dropEchoFg\", \"( -- ): drops a color from the echo foreground color stack.\") do\n  fg.pop?\nend\ntarget.at(\"dropEchoBg\", \"( -- ): drops a color from the echo background color stack.\") do\n  bg.pop?\nend\ntarget.at(\"withReverseAppendEcho\", \"( F -- ): appends Form with foreground and background\\n colors swapped with each other (background color is set\\n to foreground color, and vice versa).\\n\\nNote: if unsupported by the output stream, will print\\nForm as-is.\") do |engine, stack|\n  form = stack.drop\n  if enabled? && (fg.last? && bg.last?)\n    with_color_append_echo(engine, bg.last, fg.last, form)\n  else\n    with_reverse_append_echo(engine, form)\n  end\nend\ntarget.at(\"withEmphasisAppendEcho\", \"( F -- ): same as `withColorAppendEcho`, but also emphasizes\\n echo of Form. Bold style is used by default, but implementors\\n may choose e.g. italic.\") do |engine, stack|\n  form = stack.drop\n  if enabled?\n    with_emphasis_append_echo(engine, fg.last?, bg.last?, form)\n  else\n    if system = capabilities[ISystem]?\n      system.append_echo(engine, form)\n    else\n      form.die(NO_SYSTEM_ECHO_ERROR)\n    end\n  end\nend\ntarget.at(\"withColorAppendEcho\", \"( F -- ): appends Form with last color from the echo\\n foreground color stack set as foreground color, and\\n last color from the echo background stack set as background\\n color, to the standard output stream.\\n\\nNote: some implementations (particularly Novika's default\\nimplementation) choose to restrict foreground and background\\ncolors to system's basic 16 colors for compatibility &\\nportability. If you want more cross-platform control over\\ncolors (and pretty much everything else), take a look at\\nconsole capability.\") do |engine, stack|\n  form = stack.drop\n  if enabled? && (fg.last? || bg.last?)\n    with_color_append_echo(engine, fg.last?, bg.last?, form)\n  else\n    if system = capabilities[ISystem]?\n      system.append_echo(engine, form)\n    else\n      form.die(NO_SYSTEM_ECHO_ERROR)\n    end\n  end\nend\n"}},{"html_id":"with_color_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_color_append_echo","doc":"Appends *form* with *fg* foreground color (if any) and\n*bg* background color (if any) to the standard output\nstream. One of *fg*, *bg* is guaranteed to be non-nil.","summary":"<p>Appends <em>form</em> with <em>fg</em> foreground color (if any) and <em>bg</em> background color (if any) to the standard output stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":46,"url":null},"def":{"name":"with_color_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"with_emphasis_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_emphasis_append_echo","doc":"Same as `with_color_append_echo`, but also emphasizes\necho of *form*. Bold style is used by default, but\nimplementors may choose e.g. italic.","summary":"<p>Same as <code><a href=\"../../Novika/Capabilities/IInk.html#with_color_append_echo%28engine%2Cfg%3AColor%7CNil%2Cbg%3AColor%7CNil%2Cform%3AForm%29-instance-method\">#with_color_append_echo</a></code>, but also emphasizes echo of <em>form</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":51,"url":null},"def":{"name":"with_emphasis_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"with_reverse_append_echo(engine,form:Form)-instance-method","name":"with_reverse_append_echo","doc":"Appends *form* with inverse style (background color is\nset to foreground color, and vice versa).\n\nNote: if both foreground and background colors are set\nby the user, `with_color_append_echo` is preferred over\nthis method.","summary":"<p>Appends <em>form</em> with inverse style (background color is set to foreground color, and vice versa).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":59,"url":null},"def":{"name":"with_reverse_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/Impl","path":"Novika/Capabilities/Impl.html","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl","abstract":false,"locations":[{"filename":"src/novika/capabilities/impl/colors.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/console.cr","line_number":5,"url":null},{"filename":"src/novika/capabilities/impl/disk.cr","line_number":3,"url":null},{"filename":"src/novika/capabilities/impl/essential.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/ink.cr","line_number":3,"url":null},{"filename":"src/novika/capabilities/impl/nki.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/system.cr","line_number":9,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"types":[{"html_id":"novika/Novika/Capabilities/Impl/Colors","path":"Novika/Capabilities/Impl/Colors.html","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/colors.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"colors\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes vocabulary for working with colors\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"rgb\", \"( R G B -- Cf ): creates a Color form from three decimals\\n Red (0-255), Green (0-255), and Blue (0-255).\\n\\n```\\n36 255 255 rgb toQuote leaves: 'rgb(36, 255 ,255)'\\n```'\") do |_, stack|\n  b = ((stack.drop.a(Decimal)).in(0..255)).posint\n  g = ((stack.drop.a(Decimal)).in(0..255)).posint\n  r = ((stack.drop.a(Decimal)).in(0..255)).posint\n  (Color.rgb(r, g, b)).onto(stack)\nend\ntarget.at(\"getRGB\", \"( Cf -- R G B ): leaves Red, Green, Blue values for a\\n Color form.\\n\\n```\\n0 25 3 rgb \\\"rgb(0, 25, 3)\\\" getRGB leaves: [ 0 25 3 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  r, g, b = color.rgb\n  r.onto(stack)\n  g.onto(stack)\n  b.onto(stack)\nend\ntarget.at(\"hsl\", \"( H S L -- Cf ): creates a Color form from three decimals\\n Hue (0-360, degrees), Saturation (0-100, percents),\\n Lightness (0-100, percents).\\n\\nSince color forms are stored in RGB, the HSL color is\\nfirst converted into RGB.\\n\\n```\\n206 35 46 hsl toQuote leaves: 'rgb(76, 123, 158)'\\n```\") do |_, stack|\n  l = ((stack.drop.a(Decimal)).in(0..100)).posint\n  s = ((stack.drop.a(Decimal)).in(0..100)).posint\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  (Color.hsl(h, s, l)).onto(stack)\nend\ntarget.at(\"getHSL\", \"( Cf -- H S L ): leaves Hue, Saturation, Lightness for\\n a Color form.\\n\\n```\\n206 35 46 hsl \\\"rgb(76, 123, 158)\\\" getHSL leaves: [ 206 35 46 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  h, s, l = color.hsl\n  h.onto(stack)\n  s.onto(stack)\n  l.onto(stack)\nend\ntarget.at(\"hsv\", \"( H S V -- Cf ): creates a Color form from three decimals\\n Hue (0-360, degrees), Saturation (0-100, percents),\\n Value (0-100, percents).\\n\\nSince color forms are stored in RGB, the HSV color is\\nfirst converted into RGB.\\n\\n```\\n120 100 100 hsv toQuote leaves: 'rgb(0, 255, 0)'\\n```\") do |_, stack|\n  v = ((stack.drop.a(Decimal)).in(0..100)).posint\n  s = ((stack.drop.a(Decimal)).in(0..100)).posint\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  (Color.hsv(h, s, v)).onto(stack)\nend\ntarget.at(\"getHSV\", \"( Cf -- H S V ): leaves Hue, Saturation, Value for a\\n Color form.\\n\\n```\\n180 100 50 hsv \\\"rgb(0,128,128)\\\" getHSV leaves: [ 180 100 50 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  h, s, v = color.hsv\n  h.onto(stack)\n  s.onto(stack)\n  v.onto(stack)\nend\ntarget.at(\"lch\", \"( L C H -- Cf ): creates a Color form from three decimals\\n Lightness (0-100), Chroma (0-132), Hue (0-360).\\n\\nSince color forms are stored as RGB, the LCH color is\\nfirst converted into RGB.\\n\\nLCH colors are tricky to implement but very fun to use.\\nThat's why they're in Novika's standard library.\\n\\nCIELAB encloses more colors than sRGB, so some conversion\\nimprecisions *are* to be expected because some colors just\\nfall out of sRGB gamut (lossiness is especially noticeable\\nin LCH -> RGB -> LCH conversions, but it stabilizes on the\\nlast step because the last step's LCH is guraranteed to be\\ninside the sRGB gamut).\\n\\nAny color out of the sRGB gamut is brought into the sRGB\\ngamut by lowering chroma until it's in the sRGB bounds.\\n\\nHere is a 'good' conversion, meaning it nicely closes\\non itself:\\n\\n```\\n78 74 133 lch $: color\\n\\ncolor toQuote leaves: 'rgb(122, 215, 85)'\\ncolor getLCH leaves: [ 78 74 133 ]\\ncolor getLCH lch toQuote leaves: 'rgb(122, 215, 85)''\\n\\\"And so on...\\\"\\n```\\n\\nAnd here is a bad conversion. At first, though, for it\\ndoes stabilize after a few rounds as it falls firmly\\ninto the sRGB color space.\\n\\n```\\n74 107 26 lch $: color\\ncolor toQuote leaves: 'rgb(255, 154, 151)'\\n\\n\\\"Note how many chroma units we lose! Plus, Lab and\\n LCH have hue shift on chroma changes, hence 26 -> 25.\\\"\\ncolor getLCH leaves: [ 74 41 25 ]\\n\\ncolor getLCH lch toQuote leaves: 'rgb(255, 154, 152)'\\n\\ncolor getLCH lch getLCH leaves: [ 74 41 25 ]\\n\\\"... and so on, conversion had stabilized ...\\\"\\n```\\n\\nYou don't necessarily have to think about this, because\\nthe resulting colors do look very similar, differing in\\npoints rather than magnitudes. Just be aware that the\\nconversion method used by this word and `getLCH` is lossy\\nin some cases.\") do |_, stack|\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  c = ((stack.drop.a(Decimal)).in(0..132)).posint\n  l = ((stack.drop.a(Decimal)).in(0..100)).posint\n  (Color.lch(l, c, h)).onto(stack)\nend\ntarget.at(\"getLCH\", \"( Cf -- L C H ): leaves Lightness, Chroma, Hue for a Color\\n form. Please read documentation for `lch` to understand\\n why `a b c lch getLCH` might not leave `a b c`.\\n\\n```\\n78 74 133 lch toQuote leaves: 'rgb(122, 215, 85)'\\n78 74 133 lch getLCH leaves: [ 78 74 133 ]\\n\\n74 107 26 lch toQuote leaves: 'rgb(255, 154, 152)'\\n\\n\\\"Chroma lowered to fit into sRGB. Lab and LCH have hue\\n shift on chroma changes, 26 -> 25\\\"\\n74 107 26 lch getLCH leaves: [ 74 41 25 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  l, c, h = color.lch\n  l.onto(stack)\n  c.onto(stack)\n  h.onto(stack)\nend\ntarget.at(\"withAlpha\", \"( Cf A -- Cf' ): leaves Color form with alpha channel\\n set to Alpha (0-255).\\n\\n```\\n0 25 3 rgb toQuote leaves: 'rgb(0, 25, 3)'\\n0 25 3 rgb 100 withAlpha toQuote leaves: 'rgba(0, 25, 3, 100)'\\n```\") do |_, stack|\n  alpha = ((stack.drop.a(Decimal)).in(0..255)).posint\n  color = stack.drop.a(Color)\n  color.a = alpha\n  color.onto(stack)\nend\ntarget.at(\"getAlpha\", \"( Cf -- A ): leaves Alpha for the given Color form.\\n\\n```\\n0 25 3 rgb getAlpha leaves: 255 \\\"Opaque = 255\\\"\\n0 25 3 rgb 100 withAlpha getAlpha leaves: 100\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  color.a.onto(stack)\nend\ntarget.at(\"fromPalette\", \"( Cf Pb -- Cc ): leaves the Closest color form to Color from\\n a Palette block. How close the color is is determined by\\n distance: the Closest color is that color in Palette block\\n to which Color has least (minimum) distance.\\n\\n```\\n[ 0 0 0 rgb\\n  255 0 0 rgb\\n  0 255 0 rgb\\n  0 0 255 rgb\\n  255 255 255 rgb\\n] vals $: pal\\n\\n0 0 0 rgb pal fromPalette toQuote leaves: 'rgb(0, 0, 0)'\\n76 175 80 rgb pal fromPalette \\\"greenish\\\" toQuote leaves: 'rgb(0, 255, 0)'\\n220 237 200 rgb pal fromPalette \\\"very light green\\\" toQuote leaves: 'rgb(255, 255, 255)'\\n74 20 140 rgb pal fromPalette \\\"very dark purple\\\" toQuote leaves: 'rgb(255, 0, 0)'\\n```\") do |_, stack|\n  palette = stack.drop.a(Block)\n  color = stack.drop.a(Color)\n  colors = [] of Color\n  palette.each do |pcolor|\n    colors << (pcolor.a(Color))\n  end\n  (color.closest(colors)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Console","path":"Novika/Capabilities/Impl/Console.html","kind":"class","full_name":"Novika::Capabilities::Impl::Console","name":"Console","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/console.cr","line_number":6,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"append_echo(engine,x:Decimal,y:Decimal,fg:Color,bg:Color,quote:Quote)-instance-method","name":"append_echo","doc":"Appends echo of *quote* colorized with *fg* and *bg*\ncolors at the given *x* and *y* position (in columns,\nrows).","summary":"<p>Appends echo of <em>quote</em> colorized with <em>fg</em> and <em>bg</em> colors at the given <em>x</em> and <em>y</em> position (in columns, rows).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color, quote : Quote)","args_html":"(engine, x : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>, quote : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":208,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nxi = x.to_i\nyi = y.to_i\nif (xi.in?(0...Termbox.width)) && (yi.in?(0...Termbox.height))\n  Termbox.print(xi, yi, fg, bg, quote.string[...(Termbox.width - xi)])\nend\n"}},{"html_id":"change(engine,x:Decimal,y:Decimal,fg:Color,bg:Color)-instance-method","name":"change","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color)","args_html":"(engine, x : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":199,"url":null},"def":{"name":"change","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nxi = x.to_i\nyi = y.to_i\nif (xi.in?(0...Termbox.width)) && (yi.in?(0...Termbox.height))\n  Termbox.change(xi, yi, fg, bg)\nend\n"}},{"html_id":"clear(engine,fg:Color,bg:Color)-instance-method","name":"clear","doc":"Clears the console with *fg* and *bg* colors.","summary":"<p>Clears the console with <em>fg</em> and <em>bg</em> colors.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, fg : Color, bg : Color)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":221,"url":null},"def":{"name":"clear","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nTermbox.clear(fg, bg)\nTermbox.clear\n"}},{"html_id":"colors_256(engine)-instance-method","name":"colors_256","doc":"Enables the 256-color output mode.","summary":"<p>Enables the 256-color output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":21,"url":null},"def":{"name":"colors_256","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = M256_A\nTermbox.set_output_mode(Termbox::OutputMode::M256)\n"}},{"html_id":"colors_compat(engine)-instance-method","name":"colors_compat","doc":"Enables the compatibility color (8-color) output mode.","summary":"<p>Enables the compatibility color (8-color) output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":26,"url":null},"def":{"name":"colors_compat","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = M8_A\nTermbox.set_output_mode(Termbox::OutputMode::Normal)\n"}},{"html_id":"colors_truecolor(engine)-instance-method","name":"colors_truecolor","doc":"Enables the truecolor output mode.","summary":"<p>Enables the truecolor output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":31,"url":null},"def":{"name":"colors_truecolor","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = nil\nTermbox.set_output_mode(Termbox::OutputMode::Truecolor)\n"}},{"html_id":"get_char_pressed(engine):Quote-instance-method","name":"get_char_pressed","doc":"Leaves char quote for the key that was pressed.\nUsually a lowercase or uppercase letter; but also may\nlook like `'\\\\n'` or `'\\\\t'`, etc.)\n\nIn case the key that was pressed cannot be represented\nby the means of a quote, or if the user did not press\nany key, an empty quote is left in place of Char\nquote.","summary":"<p>Leaves char quote for the key that was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":110,"url":null},"def":{"name":"get_char_pressed","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"if event = @event.as?(Termbox::Event::KeyEvent)\nelse\n  return Quote.new(\"\")\nend\nif char = event.char\n  return Quote.new(char)\nend\nkey = event.key.not_nil!\ncase key\nwhen .ctrl_tilde?\n  char = '~'\nwhen .ctrl_2?\n  char = '2'\nwhen .ctrl_a?\n  char = 'a'\nwhen .ctrl_b?\n  char = 'b'\nwhen .ctrl_c?\n  char = 'c'\nwhen .ctrl_d?\n  char = 'd'\nwhen .ctrl_e?\n  char = 'e'\nwhen .ctrl_f?\n  char = 'f'\nwhen .ctrl_g?\n  char = 'g'\nwhen .ctrl_h?\n  char = 'h'\nwhen .tab?\n  char = '\\t'\nwhen .ctrl_i?\n  char = 'i'\nwhen .ctrl_j?\n  char = 'j'\nwhen .ctrl_k?\n  char = 'k'\nwhen .ctrl_l?\n  char = 'l'\nwhen .enter?\n  char = '\\n'\nwhen .ctrl_m?\n  char = 'm'\nwhen .ctrl_n?\n  char = 'n'\nwhen .ctrl_o?\n  char = 'o'\nwhen .ctrl_p?\n  char = 'p'\nwhen .ctrl_q?\n  char = 'q'\nwhen .ctrl_r?\n  char = 'r'\nwhen .ctrl_s?\n  char = 's'\nwhen .ctrl_t?\n  char = 't'\nwhen .ctrl_u?\n  char = 'u'\nwhen .ctrl_v?\n  char = 'v'\nwhen .ctrl_w?\n  char = 'w'\nwhen .ctrl_x?\n  char = 'x'\nwhen .ctrl_y?\n  char = 'y'\nwhen .ctrl_z?\n  char = 'z'\nwhen .esc?\n  char = '\\e'\nwhen .ctrl_lsq_bracket?\n  char = '['\nwhen .ctrl_3?\n  char = '3'\nwhen .ctrl_4?\n  char = '4'\nwhen .ctrl_backslash?\n  char = '\\\\'\nwhen .ctrl_5?\n  char = '5'\nwhen .ctrl_rsq_bracket?\n  char = ']'\nwhen .ctrl_6?\n  char = '6'\nwhen .ctrl_7?\n  char = '7'\nwhen .ctrl_slash?\n  char = '/'\nwhen .ctrl_underscore?\n  char = '_'\nwhen .space?\n  char = ' '\nwhen .ctrl_8?\n  char = '8'\nwhen .f1?\n  char = '1'\nwhen .f2?\n  char = '2'\nwhen .f3?\n  char = '3'\nwhen .f4?\n  char = '4'\nwhen .f5?\n  char = '5'\nwhen .f6?\n  char = '6'\nwhen .f7?\n  char = '7'\nwhen .f8?\n  char = '8'\nwhen .f9?\n  char = '9'\nwhen .f10?\n  char = \"10\"\nwhen .f11?\n  char = \"11\"\nwhen .f12?\n  char = \"12\"\nelse\n  return Quote.new(\"\")\nend\nQuote.new(char)\n"}},{"html_id":"had_alt_pressed?(engine):Boolean-instance-method","name":"had_alt_pressed?","doc":"Returns boolean for whether the ALT key was pressed.","summary":"<p>Returns boolean for whether the ALT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":56,"url":null},"def":{"name":"had_alt_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && event.mod.alt?]\n"}},{"html_id":"had_backspace_pressed?(engine):Boolean-instance-method","name":"had_backspace_pressed?","doc":"Returns boolean for whether the Backspace key\nwas pressed.","summary":"<p>Returns boolean for whether the Backspace key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":80,"url":null},"def":{"name":"had_backspace_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed? do |key|\n  key.backspace? || key.backspace2?\nend"}},{"html_id":"had_char_pressed?(engine):Boolean-instance-method","name":"had_char_pressed?","doc":"Returns boolean for whether EXCLUSIVELY a printable\ncharacter key was pressed (no CTRL, ALT, etc.) Whether\nthe SHIFT key was pressed or not is ignored.","summary":"<p>Returns boolean for whether EXCLUSIVELY a printable character key was pressed (no CTRL, ALT, etc.) Whether the SHIFT key was pressed or not is ignored.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":106,"url":null},"def":{"name":"had_char_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"Boolean[!(!(@event.as?(Termbox::Event::KeyEvent)).try do |__arg5|\n  __arg5.char.try(&.printable?)\nend)]"}},{"html_id":"had_ctrl_pressed?(engine):Boolean-instance-method","name":"had_ctrl_pressed?","doc":"leaves Boolean for whether the CTRL key was pressed.","summary":"<p>leaves Boolean for whether the CTRL key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":50,"url":null},"def":{"name":"had_ctrl_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && event.mod.ctrl?]\n"}},{"html_id":"had_delete_pressed?(engine):Boolean-instance-method","name":"had_delete_pressed?","doc":"Returns boolean for whether the DELETE key was pressed.","summary":"<p>Returns boolean for whether the DELETE key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_delete_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.delete?)"}},{"html_id":"had_down_pressed?(engine):Boolean-instance-method","name":"had_down_pressed?","doc":"Returns boolean for whether the DOWN ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the DOWN ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":102,"url":null},"def":{"name":"had_down_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_down?)"}},{"html_id":"had_end_pressed?(engine):Boolean-instance-method","name":"had_end_pressed?","doc":"Returns boolean for whether the END key was pressed.","summary":"<p>Returns boolean for whether the END key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_end_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.end?)"}},{"html_id":"had_fn_pressed?(engine):Boolean-instance-method","name":"had_fn_pressed?","doc":"Returns boolean for whether one of the function\nkeys F1-F12 was pressed.","summary":"<p>Returns boolean for whether one of the function keys F1-F12 was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":68,"url":null},"def":{"name":"had_fn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed? do |key|\n  case key\n  when .f1?, .f2?, .f3?, .f4?, .f5?, .f6?, .f7?, .f8?, .f9?, .f10?, .f11?, .f12?\n    true\n  end\nend"}},{"html_id":"had_home_pressed?(engine):Boolean-instance-method","name":"had_home_pressed?","doc":"Returns boolean for whether the HOME key was pressed.","summary":"<p>Returns boolean for whether the HOME key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_home_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.home?)"}},{"html_id":"had_insert_pressed?(engine):Boolean-instance-method","name":"had_insert_pressed?","doc":"Returns boolean for whether the INSERT key was pressed.","summary":"<p>Returns boolean for whether the INSERT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_insert_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.insert?)"}},{"html_id":"had_key_pressed?(engine):Boolean-instance-method","name":"had_key_pressed?","doc":"Returns boolean for whether any key was pressed.","summary":"<p>Returns boolean for whether any key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":44,"url":null},"def":{"name":"had_key_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[!(!event)]\n"}},{"html_id":"had_left_pressed?(engine):Boolean-instance-method","name":"had_left_pressed?","doc":"Returns boolean for whether the LEFT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the LEFT ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":90,"url":null},"def":{"name":"had_left_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_left?)"}},{"html_id":"had_pgdn_pressed?(engine):Boolean-instance-method","name":"had_pgdn_pressed?","doc":"Returns boolean for whether the PAGE DOWN key was pressed.","summary":"<p>Returns boolean for whether the PAGE DOWN key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_pgdn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.pgdn?)"}},{"html_id":"had_pgup_pressed?(engine):Boolean-instance-method","name":"had_pgup_pressed?","doc":"Returns boolean for whether the PAGE UP key was pressed.","summary":"<p>Returns boolean for whether the PAGE UP key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_pgup_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.pgup?)"}},{"html_id":"had_right_pressed?(engine):Boolean-instance-method","name":"had_right_pressed?","doc":"Returns boolean for whether the RIGHT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the RIGHT ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":94,"url":null},"def":{"name":"had_right_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_right?)"}},{"html_id":"had_shift_pressed?(engine):Boolean-instance-method","name":"had_shift_pressed?","doc":"Returns boolean for whether the SHIFT key was pressed.","summary":"<p>Returns boolean for whether the SHIFT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":62,"url":null},"def":{"name":"had_shift_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && (event.char.try(&.uppercase?) || event.mod.shift?)]\n"}},{"html_id":"had_up_pressed?(engine):Boolean-instance-method","name":"had_up_pressed?","doc":"Returns boolean for whether the UP ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the UP ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":98,"url":null},"def":{"name":"had_up_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_up?)"}},{"html_id":"off(engine)-instance-method","name":"off","doc":"Disables the Console API.","summary":"<p>Disables the Console API.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":17,"url":null},"def":{"name":"off","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.disable"}},{"html_id":"on(engine)-instance-method","name":"on","doc":"Enables the Console API.","summary":"<p>Enables the Console API.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":13,"url":null},"def":{"name":"on","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.enable"}},{"html_id":"present(engine)-instance-method","name":"present","doc":"Syncs the internal buffer with console.","summary":"<p>Syncs the internal buffer with console.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":217,"url":null},"def":{"name":"present","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.present"}},{"html_id":"read_key(engine,timeout:Decimal)-instance-method","name":"read_key","doc":"Peeks or waits for input. Refreshes the input state.\n\n* Negative *timeout* must wait indefinitely for input,\n  and after receiving input refresh the state.\n\n* Zero *timeout* must refresh the input state without\n  waiting for input.\n\n* Positive *timeout* must wait for input in a window\n  *timeout* milliseconds long, and refresh the input\n  state after receiving input.","summary":"<p>Peeks or waits for input.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"args_string":"(engine, timeout : Decimal)","args_html":"(engine, timeout : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":40,"url":null},"def":{"name":"read_key","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"visibility":"Public","body":"@event = Termbox.peek?(timeout.to_i)"}},{"html_id":"size(engine):Tuple(Decimal,Decimal)-instance-method","name":"size","doc":"Returns the console width (in columns) and height (in rows).","summary":"<p>Returns the console width (in columns) and height (in rows).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Tuple(Decimal, Decimal)","args_html":"(engine) : Tuple(<a href=\"../../../Novika/Decimal.html\">Decimal</a>, <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":36,"url":null},"def":{"name":"size","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"::Tuple(Decimal, Decimal)","visibility":"Public","body":"{Decimal.new(Termbox.width), Decimal.new(Termbox.height)}"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Disk","path":"Novika/Capabilities/Impl/Disk.html","kind":"class","full_name":"Novika::Capabilities::Impl::Disk","name":"Disk","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/disk.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"can_read?(engine,path:Quote):Boolean-instance-method","name":"can_read?","doc":"Returns whether *path* exists and is readable.","summary":"<p>Returns whether <em>path</em> exists and is readable.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":5,"url":null},"def":{"name":"can_read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.readable?(path.string)]"}},{"html_id":"copy(engine,src:Quote,dst:Quote):Bool-instance-method","name":"copy","doc":"Copies source *src* (quote path to a file, symlink, or\ndirectory) to destination *dst* (also a quote).\n\nIf *src* is a directory, copies it recursively.\n\nReturns whether the operation was successful.","summary":"<p>Copies source <em>src</em> (quote path to a file, symlink, or directory) to destination <em>dst</em> (also a quote).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"args_string":"(engine, src : Quote, dst : Quote) : Bool","args_html":"(engine, src : <a href=\"../../../Novika/Quote.html\">Quote</a>, dst : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":47,"url":null},"def":{"name":"copy","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if File.exists?(src.string)\nelse\n  return false\nend\nFileUtils.cp_r(src.string, dst.string)\ntrue\n"}},{"html_id":"dir_empty?(engine,path:Quote):Boolean|Nil-instance-method","name":"dir_empty?","doc":"Returns whether directory pointed to by *path* is empty.\nReturns nil if *path* does not point to a directory, or\nif *path* does not exist.","summary":"<p>Returns whether directory pointed to by <em>path</em> is empty.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean | Nil","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a> | Nil","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":25,"url":null},"def":{"name":"dir_empty?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean | ::Nil","visibility":"Public","body":"if File.directory?(path.string)\n  Boolean[Dir.empty?(path.string)]\nend"}},{"html_id":"has?(engine,path:Quote):Boolean-instance-method","name":"has?","doc":"Returns whether *path* exists.","summary":"<p>Returns whether <em>path</em> exists.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":9,"url":null},"def":{"name":"has?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.exists?(path.string)]"}},{"html_id":"has_dir?(engine,path:Quote):Boolean-instance-method","name":"has_dir?","doc":"Returns whether *path* exists and points to a directory.","summary":"<p>Returns whether <em>path</em> exists and points to a directory.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":17,"url":null},"def":{"name":"has_dir?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[Dir.exists?(path.string)]"}},{"html_id":"has_file?(engine,path:Quote):Boolean-instance-method","name":"has_file?","doc":"Returns whether *path* exists and points to a file.","summary":"<p>Returns whether <em>path</em> exists and points to a file.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":13,"url":null},"def":{"name":"has_file?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.file?(path.string)]"}},{"html_id":"has_symlink?(engine,path:Quote):Boolean-instance-method","name":"has_symlink?","doc":"Returns whether *path* exists and points to a symlink.","summary":"<p>Returns whether <em>path</em> exists and points to a symlink.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":21,"url":null},"def":{"name":"has_symlink?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.symlink?(path.string)]"}},{"html_id":"join(engine,base:Quote,child:Quote):Quote-instance-method","name":"join","doc":"Returns path quote which is the result of joining\n*base* path and *child* path quotes using the\nplatform-specific path separator.","summary":"<p>Returns path quote which is the result of joining <em>base</em> path and <em>child</em> path quotes using the platform-specific path separator.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"args_string":"(engine, base : Quote, child : Quote) : Quote","args_html":"(engine, base : <a href=\"../../../Novika/Quote.html\">Quote</a>, child : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":29,"url":null},"def":{"name":"join","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"Quote.new(File.join(base.string, child.string))"}},{"html_id":"mkdir(engine,path:Quote)-instance-method","name":"mkdir","doc":"Creates an empty directory at *path*, including any\nnon-existing intermediate directories. Does nothing\nif *path* already exists.","summary":"<p>Creates an empty directory at <em>path</em>, including any non-existing intermediate directories.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":41,"url":null},"def":{"name":"mkdir","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":"if File.exists?(path.string)\n  return\nend\nFileUtils.mkdir_p(path.string)\n"}},{"html_id":"pwd(engine):Quote-instance-method","name":"pwd","doc":"Returns the working directory.","summary":"<p>Returns the working directory.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":33,"url":null},"def":{"name":"pwd","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"Quote.new(Dir.current)"}},{"html_id":"read?(engine,path:Quote):Quote|Nil-instance-method","name":"read?","doc":"Reads and returns the contents of file at *path*. Returns\nnil if there is no file at *path*.","summary":"<p>Reads and returns the contents of file at <em>path</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Quote | Nil","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":55,"url":null},"def":{"name":"read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Quote | ::Nil","visibility":"Public","body":"if File.file?(path.string)\n  Quote.new(File.read(path.string))\nend"}},{"html_id":"touch(engine,path:Quote)-instance-method","name":"touch","doc":"Creates an empty file at *path*. Does nothing if *path*\nalready exists.","summary":"<p>Creates an empty file at <em>path</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":37,"url":null},"def":{"name":"touch","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":"File.touch(path.string)"}},{"html_id":"write?(engine,content:Quote,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nquote. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> quote.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Quote, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../../Novika/Quote.html\">Quote</a>, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":59,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if (File.file?(path.string)) && (File.writable?(path.string))\nelse\n  return false\nend\nFile.write(path.string, content.string)\ntrue\n"}},{"html_id":"write?(engine,content:Byteslice,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nbyteslice. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> byteslice.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Byteslice, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../../Novika/Byteslice.html\">Byteslice</a>, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":67,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if (File.file?(path.string)) && (File.writable?(path.string))\nelse\n  return false\nend\nFile.open(path.string, \"wb\") do |handle|\n  content.write_to(handle)\nend\ntrue\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Essential","path":"Novika/Capabilities/Impl/Essential.html","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/essential.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"essential\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes essential native code vocabulary, such as 'hydrate' and 'new'\""}}],"instance_methods":[{"html_id":"inject(intotarget)-instance-method","name":"inject","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(Word.new(\"true\"), True.new)\ntarget.at(Word.new(\"false\"), False.new)\ntarget.at(\"prototype\", \"( B -- P ): leaves the Prototype of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.prototype.onto(stack)\nend\ntarget.at(\"parent\", \"( B -- P ): leaves the Parent of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  if parent = block.parent?\n  else\n    block.die(\"no parent for block\")\n  end\n  parent.onto(stack)\nend\ntarget.at(\"address\", \"( B -- A ): leaves pointer Address of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  (Decimal.new(block.object_id)).onto(stack)\nend\ntarget.at(\"conts\", \"( -- Cb ): pushes the Continuations block.\") do |engine, stack|\n  engine.conts.onto(stack)\nend\ntarget.at(\"cont\", \"( -- Cb ): pushes the Continuation block.\") do |engine, stack|\n  engine.cont.onto(stack)\nend\ntarget.at(\"newContinuation\", \"( S B -- C ): creates a Continuation from a Stack and\\n a Block.\") do |_, stack|\n  Engine.cont(block: stack.drop.a(Block), stack: stack.drop.a(Block)).onto(stack)\nend\ntarget.at(\"getContBlock\", \"( C -- Cb ): leaves the Code block of a Continuation.\") do |_, stack|\n  cont = stack.drop.a(Block)\n  (cont.at(Engine::C_BLOCK_AT)).onto(stack)\nend\ntarget.at(\"getContStack\", \"( C -- Sb ): leaves the Stack block of a Continuation.\") do |_, stack|\n  cont = stack.drop.a(Block)\n  (cont.at(Engine::C_STACK_AT)).onto(stack)\nend\ntarget.at(\"this\", \"( -- B ): pushes the Block it's opened in.\\n\\n```\\n[ this ] open echo\\n\\\"STDOUT: [ this ]⏎ (instance of `[ this ]`)\\\"\\n```\") do |engine, stack|\n  engine.block.onto(stack)\nend\ntarget.at(\"stack\", \"( -- S ): pushes the Stack it's opened in.\\n\\n```\\nstack dup echo\\n\\\"STDOUT: [ ⭮ ]⏎\\\"\\n\\n'foo' <<\\nstack echo\\n\\\"STDOUT: [ ⭮ 'foo' ]⏎\\\"\\n```\") do |_, stack|\n  stack.onto(stack)\nend\ntarget.at(\"ahead\", \"( -- B ): leaves the block that will be executed after\\n `this` finishes.\\n\\n```\\n100 [ ahead 1 inject ] open + leaves: 101 \\\"(i.e. 100 1 +)\\\"\\n```\") do |engine, stack|\n  cont = engine.conts.at(engine.conts.count - 2)\n  cont = (cont.as?(Block)) || (cont.die(\"malformed continuation\"))\n  ahead = cont.at(Engine::C_BLOCK_AT)\n  ahead.onto(stack)\nend\ntarget.at(\"resume\", \"( B -- ): closes blocks all the way up to, but not\\n including, Block.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  conts = engine.conts\n  found = false\n  while !(conts.tape.empty? || (found = block.same?(engine.block)))\n    conts.drop\n  end\n  if found\n  else\n    block.die(\"resume: no such block in continuations\")\n  end\nend\ntarget.at(\"dup\", \"( F -- F F ): duplicates the Form before cursor.\\n\\n```\\n'hello' dup leaves: [ 'hello' 'hello' ]\\n\\n[ 1 2 3 ] (dup 2 |to) $: block\\nblock toQuote leaves: '[ 1 2 | 3 ]'\\nblock [ dup ] hydrate\\nblock toQuote leaves: '[ 1 2 2 | 3 ]'\\n```\") do |_, stack|\n  stack.dupe\nend\ntarget.at(\"drop\", \"( F -- ): drops the Form before cursor.\\n\\n```\\n'hello' drop leaves: [ ]\\n\\n[ 1 2 3 ] (dup 2 |to) $: block\\nblock toQuote leaves: '[ 1 2 | 3 ]'\\nblock [ drop ] hydrate\\nblock toQuote leaves: '[ 1 | 3 ]'\\n```\") do |_, stack|\n  stack.drop\nend\ntarget.at(\"swap\", \"( A B -- B A ): swaps two Forms before cursor.\\n\\n```\\n1 2 swap leaves: [ 2 1 ]\\n\\n[ 1 2 3 ] (dup 2 |to) $: block\\nblock toQuote leaves: '[ 1 2 | 3 ]'\\nblock [ swap ] hydrate\\nblock toQuote leaves: '[ 2 1 | 3 ]'\\n```\") do |_, stack|\n  stack.swap\nend\ntarget.at(\"hydrate\", \"( S F -- ): opens (evaluates) Form with Stack set as the\\n active stack. If Form is not a block, it is added to\\n Stack (equivalent to `<<`), If Form is a block, its\\n instance is opened. To open a block without creating\\n an instance of it (unsafe), use `hydrate!`.\") do |engine, stack|\n  form = stack.drop\n  new_stack = stack.drop.a(Block)\n  engine.schedule(form, new_stack)\nend\ntarget.at(\"hydrate!\", \"( S F -- ): opens (evaluates) Form with Stack set as the\\n active stack. If Form is not a block, the behavior is\\n the same as in `hydrate`. If Form is a block, performs\\n unsafe hydration (hydrates without making an instance\\n of the block). For a safer alternative, see `hydrate`.\\n Use if you know what you're doing, or if you're ready\\n to make an instance yourself.\\n\\nDetails: `hydrate!` is considered unsafe because hydration\\nartifacts are exposed to the user and/or its blocks. The\\ncontents of a block after hydration may differ from its\\ncontents before unsafe hydration. Indeed, `hydrate!` is\\nalmost as unsafe as pushing into `conts`; the only benefit\\nit provides is that it is able to catch infinite/very\\ndeep recursion.\") do |engine, stack|\n  form = stack.drop\n  new_stack = stack.drop.a(Block)\n  engine.schedule!(form, new_stack)\nend\ntarget.at(\"open\", \"( F -- F' ): opens Form in the active stack. Equivalent\\n to `stack F hydrate`.\\n\\n```\\n100 open leaves: 100\\n\\n1 [ 2 + ] open leaves: 3\\n```\") do |engine, stack|\n  form = stack.drop\n  engine.schedule(form, stack)\nend\ntarget.at(\"do\", \"( F -- ): opens Form with an empty stack activated, and\\n disposed when Form has been evaluated.\\n\\n```\\n[ 'Hi!' echo ] do\\n\\\"STDOUT: Hi!⏎\\\"\\n```\") do |engine, stack|\n  form = stack.drop\n  engine.schedule(form, Block.new)\nend\ntarget.at(\"new\", \"( B -- I ): leaves an Instance of a Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.instance.onto(stack)\nend\ntarget.at(\"sel\", \"( D A B -- A/B ): selects A (Determiner is truthy) or B\\n (Determiner is falsey)\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  det = stack.drop\n  (det.sel(a, b)).onto(stack)\nend\ntarget.at(\"br\", \"( D T F -- ? ): opens True/False forms depending on\\n Determiner being true/false.\") do |engine, stack|\n  b = stack.drop\n  a = stack.drop\n  det = stack.drop\n  engine.schedule(det.sel(a, b), stack)\nend\ntarget.at(\"<\", \"( A B -- S ): leaves whether A is smaller than (less than) B.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  Boolean[a < b].onto(stack)\nend\ntarget.at(\"same?\", \"( F1 F2 -- true/false ): leaves whether two Forms are the\\n same (by reference for block, by value for any other form).\\n\\n```\\n1 2 same? leaves: false\\n1 1 same? leaves: true\\n\\n'hello' 'hello world' same? leaves: false\\n'hello' 'hello' same? leaves: true\\n\\n\\\"etc...\\\"\\n\\n[ 1 2 + ] $: b1\\n[ 1 2 + ] $: b2\\n\\nb1 b2 same? leaves: false \\\"They're different blocks, content doesn't matter!\\\"\\n\\nb1 b1 same? leaves: true\\nb2 b2 same? leaves: true\\n```\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  (Boolean.same?(a, b)).onto(stack)\nend\ntarget.at(\"=\", \"( F1 F2 -- true/false ): leaves whether two Forms are equal by\\n content (they may or may not be the same forms reference-wise,\\n i.e., those for which `same?` would leave true).\\n\\n```\\n1 2 = leaves: false\\n1 1 = leaves: true\\n\\n'hello' 'hello world' = leaves: false\\n'hello' 'hello' = leaves: true\\n\\n\\\"etc...\\\"\\n\\n[ 1 2 + ] $: b1\\n[ 1 2 + ] $: b2\\n\\nb1 b2 = leaves: true \\\"They're equal by content!\\\"\\n\\nb1 b1 = leaves: true\\nb2 b2 = leaves: true\\n\\n\\\"Supports self-reference:\\\"\\n[ ] $: b3\\nb3 b3 shove\\nb3 b3 = leaves: true\\n(b3 first) b3 = leaves: true\\n\\\"etc...\\\"\\n```\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  Boolean[a == b].onto(stack)\nend\ntarget.at(\"anyof?\", \"( F B -- true/false ): leaves whether any form in Block is\\n equal (via `=`) to Form.\\n\\n```\\n1 [ 1 2 3 ] anyof? leaves: true\\n'hello' [ 'hello' 'world' 1 ] anyof? leaves: true\\n'hello' [ 1 2 3 ] anyof? leaves: false\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = stack.drop\n  Boolean[form.in?(block)].onto(stack)\nend\ntarget.at(\"uppercase?\", \"( Q -- true/false ): leaves whether Quote is all-uppercase.\\n If Quote is empty, leaves false.\\n\\n```\\n'' uppercase? leaves: false\\n'A' uppercase? leaves: true\\n'hello' uppercase? leaves: false\\n'Hello' uppercase? leaves: false\\n'HELLO' uppercase? leaves: true\\n'HELLO WORLD' uppercase? leaves: false\\n```\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  string = quote.string\n  case string.size\n  when 0\n    isup = false\n  when 1\n    isup = string[0].uppercase?\n  else\n    isup = true\n    string.each_char do |char|\n      if char.uppercase?\n      else\n        isup = false\n        break\n      end\n    end\n  end\n  Boolean[isup].onto(stack)\nend\ntarget.at(\"toUppercase\", \"( Q -- Uq ): leaves all- Uppercase quote for Quote: converts\\n lowercase character(s) in Quote to uppercase. If Quote is empty,\\n leaves empty quote.\\n\\n```\\n'' toUppercase leaves: ''\\n'hello' toUppercase leaves: 'HELLO'\\n'hello world' toUppercase? leaves: 'HELLO WORLD'\\n```\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  (Quote.new(quote.string.upcase)).onto(stack)\nend\ntarget.at(\"block?\", \"( F -- true/false ): leaves whether Form is a block.\") do |_, stack|\n  Boolean[stack.drop.is_a?(Block)].onto(stack)\nend\ntarget.at(\"asBlock\", \"( F -- B ): asserts that Form is a Block, dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asBlock\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n[] asBlock leaves: [ [] \\\"(the same block)\\\" ]\\n```\") do |_, stack|\n  stack.top.a(Block)\nend\ntarget.at(\"word?\", \"( F -- true/false ): leaves whether Form is a word form,\\n or a block that implements '__word__'.\\n\\n```\\n#foo word? leaves: true\\n\\n[ #foo $: __word__ this ] open word? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Word) || (form.is_a?(Block) && (form.can_be?(Word)))].onto(stack)\nend\ntarget.at(\"private?\", \"( W -- ): leaves whether Word is prefixed by one or more\\n '_', meaning it is conventionally considered private.\\n\\n```\\n#hello private? leaves: false\\n#_hello private? leaves: true\\n#_ private? leaves: false \\\"Beware!\\\"\\n```\") do |_, stack|\n  Boolean[(stack.drop.a(Word)).private?].onto(stack)\nend\ntarget.at(\"toWord\", \"( F -- W ): converts Form into Word.\\n  1. If Form is a word, behaves as noop\\n  2. If Form is a quote, dies only if quote contains\\n     Unicode whitespace characters or is itself empty.\\n  3. If Form is a quoted word, peels off **all** quoting\") do |_, stack|\n  form = stack.drop.a((Word | QuotedWord) | Quote)\n  case form\n  in Word\n    form.onto(stack)\n  in QuotedWord\n    form.to_word.onto(stack)\n  in Quote\n    string = form.string\n    if string.empty?\n      form.die(\"toWord: quote argument is empty\")\n    else\n      if string.each_char.any?(&.whitespace?)\n        form.die(\"toWord: quote argument contains whitespace\")\n      end\n    end\n    (Word.new(form.string)).onto(stack)\n  end\nend\ntarget.at(\"asWord\", \"( F -- W ): asserts that Form is a Word form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asWord\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n#foo asWord leaves: [ foo ]\\n```\\n\\n`__word__` hook can make a block usable in place of a word,\\nprovided its definition leaves a word or a block which\\nimplements '__word__':\\n\\n```\\n[ $: x x $: __word__ this ] @: a\\n#foo a asWord \\\"beware: leaves instance of a\\\"\\n#boo a a asWord \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Word)\nend\ntarget.at(\"quotedWord?\", \"( F -- true/false ): leaves whether Form is a quoted word\\n form, or a block that implements '__quotedWord__'.\\n\\n```\\n##foo quotedWord? leaves: true\\n[ ##foo $: __quotedWord__ this ] open quotedWord? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(QuotedWord) || (form.is_a?(Block) && (form.can_be?(QuotedWord)))].onto(stack)\nend\ntarget.at(\"asQuotedWord\", \"( F -- Qw ): asserts that Form is a Quoted word form,\\n dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asQuotedWord\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n##foo asQuotedWord leaves: #foo\\n```\\n\\n`__quotedWord__` hook can make a block usable in place of\\na quoted word, provided its definition leaves a quoted\\nword or a block that implements `__quotedWord__`:\\n\\n```\\n[ $: x x $: __quotedWord__ this ] @: a\\n##foo a asQuotedWord \\\"beware: leaves instance of a\\\"\\n##boo a a asQuotedWord \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(QuotedWord)\nend\ntarget.at(\"decimal?\", \"( F -- true/false ): leaves whether Form is a decimal form,\\n or a block that implements '__decimal__'.\\n\\n```\\n123 decimal? leaves: true\\n[ 123 $: __decimal__ this ] open decimal? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Decimal) || (form.is_a?(Block) && (form.can_be?(Decimal)))].onto(stack)\nend\ntarget.at(\"toQuotedWord\", \"( Qw/W -- #Qw/#W ): adds a layer of \\\"quoting\\\" to Quoted\\n word or Word.\\n\\n```\\n\\\"Note that in quoted word literals (here on the left hand\\n side) one layer of quoting is 'eaten off' by the parser!\\\"\\n\\n#foo toQuotedWord leaves: #foo\\n##foo toQuotedWord leaves: ##foo\\n```\") do |_, stack|\n  form = stack.drop.a(Word | QuotedWord)\n  form.to_quoted_word.onto(stack)\nend\ntarget.at(\"asDecimal\", \"( F -- D ): asserts that Form is a Decimal form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n'foo' asDecimal\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n100 asDecimal leaves: 100\\n```\\n\\n`__decimal__` hook can make a block usable in place of a\\ndecimal, provided its definition leaves a decimal or a\\nblock that implements `__decimal__`:\\n\\n```\\n[ $: x x $: __decimal__ this ] @: a\\n100 a asDecimal \\\"beware: leaves an instance of a\\\"\\n200 a a asDecimal \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Decimal)\nend\ntarget.at(\"quote?\", \"( F -- true/false ): leaves whether Form is a quote form,\\n or a block that implements '__quote__'.\\n\\n```\\n'foo' quote? leaves: true\\n[ 'foo' $: __quote__ this ] open quote? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Quote) || (form.is_a?(Block) && (form.can_be?(Quote)))].onto(stack)\nend\ntarget.at(\"asQuote\", \"( F -- Q ): asserts that Form is a Quote form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asQuote\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n'foo' asQuote leaves: 'foo'\\n```\\n\\n`__quote__` hook can make a block usable in place of a\\nquote, provided its definition leaves a quote or a block\\nthat implements `__quote__`:\\n\\n```\\n[ $: x x $: __quote__ this ] @: a\\n'foo' a asQuote \\\"beware: leaves instance of a\\\"\\n'boo' a a asQuote \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Quote)\nend\ntarget.at(\"boolean?\", \"( F -- true/false ): leaves whether Form is a boolean form,\\n or a block that implements '__boolean__'.\\n\\n```\\ntrue boolean? leaves: true\\n[ true $: __boolean__ this ] open boolean? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Boolean) || (form.is_a?(Block) && (form.can_be?(Boolean)))].onto(stack)\nend\ntarget.at(\"asBoolean\", \"( F -- B ): asserts that Form is a Boolean form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asBoolean\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\ntrue asBoolean leaves: true\\nfalse asBoolean leaves: false\\n```\\n\\n`__boolean__` hook can make a block usable in place of a\\nboolean, provided its definition leaves a boolean or a\\nblock that implements `__boolean__`:\\n\\n```\\n[ $: x x $: __boolean__ this ] @: a\\ntrue a asBoolean \\\"beware: leaves an instance of a\\\"\\ntrue a a asBoolean \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Boolean)\nend\ntarget.at(\"builtin?\", \"( F -- true/false ): leaves whether Form is a builtin form.\") do |_, stack|\n  Boolean[stack.drop.is_a?(Builtin)].onto(stack)\nend\ntarget.at(\"asBuiltin\", \"( F -- B ): asserts Form is a Builtin, dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n'foo' asBuiltin\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n#+ here asBuiltin toQuote leaves: '[ native code ]'\\n```\") do |_, stack|\n  stack.top.a(Builtin)\nend\ntarget.at(\"color?\", \"( F -- true/false ): leaves whether Form is a color form,\\n or a block that implements '__color__'.\\n\\n```\\n0 0 0 rgb color? leaves: true\\n[ 0 0 0 rgb $: __color__ this ] open color? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Color) || (form.is_a?(Block) && (form.can_be?(Color)))].onto(stack)\nend\ntarget.at(\"asColor\", \"( F -- C ): asserts that Form is a Color form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asColor\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n0 0 0 rgb asColor toQuote leaves: 'rgb(0, 0, 0)'\\n```\\n\\n`__color__` hook can make a block usable in place of a\\ncolor, provided its definition leaves a color or a block\\nthat implements `__color__`:\\n\\n```\\n[ $: x x $: __color__ this ] @: a\\n0 0 0 rgb a asColor \\\"beware: leaves an instance of a\\\"\\n0 0 0 rgb a a asColor \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Color)\nend\ntarget.at(\"byteslice?\", \"( F -- true/false ): leaves whether Form is a byteslice\\n form, or a block that implements '__byteslice__'.\\n\\n```\\n'hello world' toByteslice byteslice? leaves: true\\n[ [ 'Hi!' toByteslice ] $: __byteslice__ this ] open byteslice? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Byteslice) || (form.is_a?(Block) && (form.can_be?(Byteslice)))].onto(stack)\nend\ntarget.at(\"asByteslice\", \"( F -- B ): asserts that Form is a Byteslice form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asByteslice\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n'hello world' toByteslice asByteslice leaves: '[byteslice, consists of 11 mutable byte(s)]'\\n```\\n\\n`__byteslice__` hook can make a block usable in place of\\na byteslice, provided its definition leaves a byteslice\\nor a block that implements `__byteslice__`:\\n\\n```\\n[ $: x x $: __byteslice__ this ] @: a\\n'foo' toByteslice a asByteslice \\\"beware: leaves an instance of a\\\"\\n'foo' toByteslice a a asByteslice \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Byteslice)\nend\ntarget.at(\"pushes\", \"( B N F -- ): creates a definition for Name in Block that\\n pushes Form when resolved there.\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  block = stack.drop.a(Block)\n  block.at(name, Entry.new(form))\nend\ntarget.at(\"opens\", \"( B N F -- ): creates a definition for Name in Block that\\n opens Form when resolved there.\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  block = stack.drop.a(Block)\n  block.at(name, OpenEntry.new(form))\nend\ntarget.at(\"entry:submit\", \"( Ss N F -- ): replaces the value form of an existing\\n definition for Name in Submittable store (usually a block)\\n to Form. Does not change whether the definition opens\\n or pushes.\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  submittable = stack.drop.a(ISubmittableStore)\n  submittable.submit(name, form)\nend\ntarget.at(\"entry:exists?\", \"( Rs N -- true/false ): leaves whether Readable store\\n (usually a block) can fetch value for Name.\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  Boolean[store.has_form_for?(name)].onto(stack)\nend\ntarget.at(\"entry:fetch\", \"( Rs N -- F ): leaves the value Form with the given Name\\n in Readable store (usually a block). Does not open the\\n value form. Dies if Store does not contain an entry\\n for Name.\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  (store.form_for(name)).onto(stack)\nend\ntarget.at(\"entry:fetch?\", \"( Rs N -- F true / false ): leaves the value Form with the\\n given Name in Readable store (usually a block) if an entry\\n for Name exists there, and/or a boolean indicating the\\n latter: `true` (exists), or `false` (does not exist).\\n\\n```\\n[ ] $: a\\na #x 100 pushes\\n\\na #x entry:fetch? leaves: [ 100 true ]\\na #y entry:fetch? leaves: [ false ]\\n```\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  if form = store.form_for?(name)\n    form.onto(stack)\n  end\n  Boolean[!(!form)].onto(stack)\nend\ntarget.at(\"entry:open\", \"( Rs C N -- ... ): resolves Name in Readable store and *opens*\\n it if it is an opener, assuming Caller to be the opener block.\") do |_, stack|\n  name = stack.drop.a(Word)\n  caller = stack.drop.a(Block)\n  store = stack.drop.a(IReadableStore)\n  if store.is_a?(Block)\n  else\n    form = store.form_for(name)\n    form.onto(stack)\n    next\n  end\n  entry = store.entry_for(name)\n  if entry.is_a?(OpenEntry)\n    caller.inject(Word.new(\"open\"))\n  end\n  entry.onto(stack)\nend\ntarget.at(\"entry:flatFetch?\", \"( B N -- F true / false ): leaves the value Form under\\n Name in Block's dictionary followed by `true`, or `false`\\n if no such entry is in Block. Block hierarchy is not\\n traversed (only the Block's own dictionary is looked at).\") do |_, stack|\n  name = stack.drop\n  block = stack.drop.a(Block)\n  if form = block.flat_at?(name)\n    form.onto(stack)\n  end\n  Boolean[!(!form)].onto(stack)\nend\ntarget.at(\"entry:isOpenEntry?\", \"( Rs N -- true/false ): leaves whether an entry with the\\n given Name in Readable store (usually a block) is an\\n open entry. Dies if Readable store has no entry with\\n the given Name.\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  Boolean[store.opens?(name)].onto(stack)\nend\ntarget.at(\"shallowCopy\", \"( B -- C ): makes a shallow copy (sub-blocks are not copied)\\n of Block's tape and dictionary, and leaves a Copy block with\\n the tape copy, dictionary copy set as its tape, dictionary.\\n\\n```\\n[ 1 2 3 ] $: a\\na shallowCopy $: b\\na #x 0 pushes\\nb #y 1 pushes\\nb 1 shove\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n\\\"STDOUT: [ 1 2 3 1 · ${y :: 1} ]⏎\\\"\\n```\") do |_, stack|\n  (stack.drop.a(Block)).shallow.onto(stack)\nend\ntarget.at(\"resub\", \"( O B -- ): replaces the substrate of Block with Other's\\n substrate. This is useful if you want to swap Block's\\n contents with Other's without changing Block's identity:\\n\\n```\\n[ 1 2 3 ] $: a\\n[ 'a' 'b' 'c' ] $: b\\nb #x 0 pushes\\nb echo\\n\\\"STDOUT: [ 'a' 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\na b resub\\nb echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n```\\n\\nNote that since *substrate* is replaced, not *tape*, the\\ncursor position is saved:\\n\\n```\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n\\\"STDOUT: [ 'a' 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\nb 2 |-\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n\\\"STDOUT: [ 'a' | 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\na b resub\\nb echo\\n\\\"STDOUT: [ 1 | 2 3 · ${x :: 0} ]⏎\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  other = stack.drop.a(Block)\n  block.resub(other)\nend\ntarget.at(\"fromLeft\", \"( B/Q/Bf I -- E ): leaves Index-th Element from the left\\n in Block, Quote, or Byteslice form.\\n\\n```\\n[ 1 2 3 ] 0 fromLeft leaves: 1\\n```\") do |_, stack|\n  index = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(index.to_i)).onto(stack)\nend\ntarget.at(\"fromRight\", \"( B/Q/Bf I -- E ): leaves Index-th Element from the right\\n in Block, Quote, or Byteslice form.\\n\\n```\\n[ 1 2 3 ] 0 fromRight leaves: 3\\n[ 1 2 3 ] 1 fromRight leaves: 2\\n[ 1 2 3 ] 2 fromRight leaves: 1\\n```\") do |_, stack|\n  index = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at((form.count - index.to_i) - 1)).onto(stack)\nend\ntarget.at(\"fromLeft*\", \"( B/Q/Bf N -- Eb/Rq/Rbf ): leaves Elements block (if given\\n a Block), Result quote (if given a Quote), or Result\\n byteslice form (if given a Byteslice form) with N forms/\\n chars/bytes from left in Block/Quote/Byteslice form.\\n If N is larger than Block/Quote/Byteslice form count,\\n it is made equal to Block/Quote/Byteslice form count.\\n Dies if N is negative.\\n\\n```\\n[ 1 2 3 ] 1 fromLeft* leaves: [ [ 1 ] ]\\n[ 1 2 3 ] 2 fromLeft* leaves: [ [ 1 2 ] ]\\n[ 1 2 3 ] 3 fromLeft* leaves: [ [ 1 2 3 ] ]\\n[ 1 2 3 ] 100 fromLeft* leaves: [ [ 1 2 3 ] ]\\n'hello' 3 fromLeft* leaves: 'hel'\\n```\") do |_, stack|\n  size = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(0, size.to_i - 1)).onto(stack)\nend\ntarget.at(\"fromRight*\", \"( B/Q/Bf N -- Fb/Rq/Rbf ): leaves Elements block (if given\\n a Block), Result quote (if given a Quote), or Result\\n byteslice form (if given a Byteslice form) with N forms/\\n chars/bytes from right in Block/Quote/Byteslice form.\\n If N is larger than Block/Quote/Byteslice form count,\\n it is made equal to Block/Quote/Byteslice form count.\\n Dies if N is negative.\\n\\n```\\n[ 1 2 3 ] 1 fromRight* leaves: [ [ 3 ] ]\\n[ 1 2 3 ] 2 fromRight* leaves: [ [ 2 3 ] ]\\n[ 1 2 3 ] 3 fromRight* leaves: [ [ 1 2 3 ] ]\\n[ 1 2 3 ] 100 fromRight* leaves: [ [ 1 2 3 ] ]\\n```\") do |_, stack|\n  size = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(form.count - size.to_i, form.count - 1)).onto(stack)\nend\ntarget.at(\"+\", \"( A B -- S ): leaves the Sum of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a + b)\nend\ntarget.at(\"-\", \"( A B -- D ): leaves the Difference of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a - b)\nend\ntarget.at(\"*\", \"( A B -- P ): leaves the Product of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a * b)\nend\ntarget.at(\"/\", \"( A B -- Q ): leaves the Quotient of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  if b.zero?\n    b.die(\"division by zero\")\n  end\n  stack.add(a / b)\nend\ntarget.at(\"mod\", \"( A B -- M ): leaves the Modulo of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  if b.zero?\n    b.die(\"modulo by zero\")\n  end\n  stack.add(a % b)\nend\ntarget.at(\"**\", \"( A B -- R ): raises A to the power B, leaves Result.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a ** b)\nend\ntarget.at(\"round\", \"( D -- Rd ): rounds Decimal towards the nearest integer,\\n leaves the corresoinding Rounded decimal. If both neighboring\\n integers are equidistant, rounds towards the even neighbor\\n (Banker's rounding).\\n\\n```\\n1 round leaves: 1\\n1.23 round leaves: 1\\n\\n1.5 round leaves: 2\\n1.67 round leaves: 2\\n\\n2.5 round leaves: 2 \\\"rounds towards the even neighbor\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.round.onto(stack)\nend\ntarget.at(\"floor\", \"( D -- Rd ): rounds Decimal *down* towards the nearest integer,\\n leaves the corresoinding Rounded decimal.\\n\\n```\\n1 floor leaves: 1\\n1.23 floor leaves: 1\\n\\n1.5 floor leaves: 1\\n1.67 floor leaves: 1\\n\\n2.5 floor leaves: 2\\n\\n-2.5 floor leaves: -3 \\\"rounds down!\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.floor.onto(stack)\nend\ntarget.at(\"ceil\", \"( D -- Rd ): rounds Decimal *up* towards the nearest integer,\\n leaves the corresoinding Rounded decimal.\\n\\n```\\n1 ceil leaves: 1\\n1.23 ceil leaves: 2\\n\\n1.5 ceil leaves: 2\\n1.67 ceil leaves: 2\\n\\n2.5 ceil leaves: 3\\n\\n-2.5 ceil leaves: -2 \\\"rounds up!\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.ceil.onto(stack)\nend\ntarget.at(\"trunc\", \"( D -- Rd ): rounds Decimal towards zero, leaves the resulting\\n Rounded decimal.\\n\\n```\\n1 trunc leaves: 1\\n1.23 trunc leaves: 1\\n1.5 trunc leaves: 1\\n1.67 trunc leaves: 1\\n2.5 trunc leaves: 2\\n\\n-2.3 trunc leaves:  -2\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.trunc.onto(stack)\nend\ntarget.at(\"sqrt\", \"( D -- R ): leaves the square Root of Decimal.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.sqrt.onto(stack)\nend\ntarget.at(\"cos\", \"( Air -- Dc ): leaves Decimal cosine of Angle in radians.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.rad_cos.onto(stack)\nend\ntarget.at(\"sin\", \"( Air -- Ds ): leaves Decimal sine of Angle in radians.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.rad_sin.onto(stack)\nend\ntarget.at(\"rand\", \"( -- Rd ): leaves a Random decimal between 0 and 1.\") do |_, stack|\n  (Decimal.new(rand)).onto(stack)\nend\ntarget.at(\"sliceQuoteAt\", \"( Q Sp -- Pb Pa ): for the given Quote, leaves the Part\\n before and Part after Slice point.\\n\\n```\\n'hello world' 2 sliceQuoteAt leaves: [ 'he' 'llo world' ]\\n```\") do |_, stack|\n  spt = stack.drop.a(Decimal)\n  quote = stack.drop.a(Quote)\n  qpre, qpost = quote.slice_at(spt.to_i)\n  qpre.onto(stack)\n  qpost.onto(stack)\nend\ntarget.at(\"count\", \"( B/Q/Bf -- N ): leaves N, the amount of elements/graphemes/\\n bytes in Block/Quote/Byteslice form.\") do |_, stack|\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (Decimal.new(form.count)).onto(stack)\nend\ntarget.at(\"chr\", \"( Uc -- Q ): leaves a quote that consists of a single\\n character with the given Unicode codepoint.\") do |_, stack|\n  ord = stack.drop.a(Decimal)\n  (Quote.new(ord.chr)).onto(stack)\nend\ntarget.at(\"ord\", \"( Q -- Uc ): leaves the Unicode codepoint for the first\\n character in Quote. Dies if Quote is empty.\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  if ord = quote.ord?\n  else\n    quote.die(\"ord: quote must contain at least one character\")\n  end\n  (Decimal.new(ord)).onto(stack)\nend\ntarget.at(\"|at\", \"( B -- N ): leaves N, the position of the cursor in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  cursor = Decimal.new(block.cursor)\n  cursor.onto(stack)\nend\ntarget.at(\"|to\", \"( B N -- ): moves the cursor in Block to N.\") do |_, stack|\n  cursor = stack.drop.a(Decimal)\n  block = stack.drop.a(Block)\n  block.to(cursor.to_i)\nend\ntarget.at(\"<|\", \"( -- ): moves stack cursor once to the left.\") do |_, stack|\n  stack.to(stack.cursor - 1)\nend\ntarget.at(\"|>\", \"( -- ): moves stack cursor once to the left.\") do |_, stack|\n  stack.to(stack.cursor + 1)\nend\ntarget.at(\"|slice\", \"( B -- Lh Rh ): slices Block at cursor. Leaves Left half\\n and Right half.\") do |_, stack|\n  block = stack.drop.a(Block)\n  lhs, rhs = block.slice\n  lhs.onto(stack)\n  rhs.onto(stack)\nend\ntarget.at(\"cherry\", \"( [ ... E | ... ]B ~> [ ... | ... ]B -- E ): drops Block\\n and Element before cursor in Block (and moves cursor back\\n once), leaves Element.\") do |_, stack|\n  (stack.drop.a(Block)).drop.onto(stack)\nend\ntarget.at(\"shove\", \"( [ ... | ... ]B E ~> [ ... E | ... ]B -- ): adds Element\\n before cursor in Block (and moves cursor forward once),\\n drops both.\") do |_, stack|\n  stack.drop.onto(stack.drop.a(Block))\nend\ntarget.at(\"shove*\", \"( [ ...bl | ...br ]B [ ...el | ...er ]Eb ~> [ ...bl ...el | ...br ]B -- ): adds\\n elements before cursor in Element block after the cursor in Block.\\n\\n```\\n[ 1 2 3 ] $: xs\\nxs [ 4 5 6 ] shove*\\nxs leaves: [ [ 1 2 3 4 5 6 \\\"|\\\" ] ]\\n\\n[ 1 2 3 ] $: ys\\nys 1 |to \\\"[ 1 | 2 3 ]\\\"\\nys [ 100 200 300 ] shove* \\\"[ 1 100 200 300 | 2 3 ]\\\"\\nys dup count |to\\nys leaves: [ [ 1 100 200 300 2 3 ] ]\\n```\") do |_, stack|\n  elems = stack.drop.a(Block)\n  block = stack.drop.a(Block)\n  block.paste(elems)\nend\ntarget.at(\"eject\", \"( [ ... | F ... ]B ~> [ ... | ... ]B -- F ): drops and\\n leaves the Form after cursor in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = block.eject\n  form.onto(stack)\nend\ntarget.at(\"inject\", \"( B F -- ): inserts Form to Block: adds Form to Block,\\n and moves cursor back again.\") do |_, stack|\n  form = stack.drop\n  block = stack.drop.a(Block)\n  block.inject(form)\nend\ntarget.at(\"thru\", \"( [ ... | F ... ] -> [ ... F | ... ] -- F ): moves cursor\\n after Form, and leaves Form. Dies if cursor is at the end.\\n\\nNote: prefer `thru` to `eject` because `eject` modifies\\nthe block, and that may cause a tape copy which uses up\\na bit of memory and resources. The difference would matter\\nonly in high load scenarios, though.\\n\\nNote: anything that *does not* `ahead inject` will be OK\\nwith `ahead thru`. And even if it does `ahead inject`,\\nstill, there are ways to overcome the problems from not\\n`ahead eject`ing.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.thru.onto(stack)\nend\ntarget.at(\"thruBlock\", \"( B -- Bf / [ Vf ] ): similar to `thru` for Block. If\\n form after cursor is a Block form, it is left. If it is\\n a Value form, then it is enclosed in a new block whose\\n parent is Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = block.thru\n  if form.is_a?(Block)\n    form.onto(stack)\n  else\n    child = Block.new(block)\n    child.add(form)\n    child.onto(stack)\n  end\nend\ntarget.at(\"top\", \"( [ ... F | ... ]B -- F ): leaves the top Form in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.top.onto(stack)\nend\ntarget.at(\"mergeDicts\", \"( Rb Db -- ): copies entries from Donor block's dictionary\\n to Recipient block's dictionary. Donor entries override\\n same-named entries in Recipient. Donor entries starting\\n with one or more underscores are not imported.\\n\\n```\\n[ ] $: a\\na #x 100 pushes\\na #_private 'Fool!' pushes\\n[ ] $: b\\nb #y 200 pushes\\n\\na b 2echo\\n\\\"STDOUT: [ · ${x :: 100} ${_private :: 'Fool!'} ]⏎\\\"\\n\\\"STDOUT: [ · ${y :: 200} ]⏎\\\"\\n\\nb a mergeDicts\\nb echo\\n\\\"STDOUT: [ · ${y :: 200} ${x :: 100} ]⏎\\\"\\n```\") do |_, stack|\n  donor = stack.drop.a(Block)\n  recpt = stack.drop.a(Block)\n  recpt.import!(from: donor)\nend\ntarget.at(\"sortUsing!\", \"( B Cb -- B ): leaves Block sorted inplace. Forms in Block\\n are compared using Comparator block.\\n\\nComparator block is opened with two forms on the stack; let's\\ncall them A and B. If Comparator block leaves a negative decimal\\n(conventionally `-1`), then `A < B`. If Comparator block leaves\\n`0`, then `A = B`. If Comparator block leaves a positive decimal\\n(conventionally `1`), then `A > B`.\\n\\nDies if Comparator block leaves any other (kind of) form.\\n\\nIgnores all forms but the topmost for Comparator block.\\n\\n\\n```\\n[ 3 2 1 ] [ - ] sortUsing leaves: [ 1 2 3 ]\\n```\") do |_, stack|\n  cmp = stack.drop.a(Block)\n  block = stack.top.a(Block)\n  block.sort_using! do |a, b|\n    ((Engine.exhaust(Engine.current.capabilities, cmp, Block[a, b])).top.a(Decimal)).to_i\n  end\nend\ntarget.at(\"getErrorDetails\", \"( Eo -- Dq ): leaves Details quote containing error details\\n of an Error object.\") do |_, stack|\n  error = stack.drop.a(Error)\n  (Quote.new(error.details)).onto(stack)\nend\ntarget.at(\"toQuote\", \"( F -- Qr ): leaves Quote representation of Form.\") do |_, stack|\n  stack.drop.to_quote.onto(stack)\nend\ntarget.at(\"toByteslice\", \"( Q -- B ): leaves immutable Byteslice for Quote.\") do |_, stack|\n  (stack.drop.a(Quote)).to_byteslice.onto(stack)\nend\ntarget.at(\"replaceAll\", \"( Sq Pq Q -- Rq ): replaces all instances of Pattern quote\\n in Source quote with Quote. Leaves the Resulting quote.\\n\\n```\\n'hello' 'l' 'y' replaceAll leaves: 'heyyo'\\n```\") do |_, stack|\n  repl = stack.drop.a(Quote)\n  pattern = stack.drop.a(Quote)\n  quote = stack.drop.a(Quote)\n  (quote.replace_all(pattern, repl)).onto(stack)\nend\ntarget.at(\"effect\", \"( F -- Eq ): leaves Effect quote for Form.\\n\\nIf Form is not a block nor a builtin, it is simply converted\\nto quote in the same way as `toQuote`.\\n\\nIf Form is a block or a builtin, an attempt is made at\\nextracting a stack effect expression from its comment.\\nIf the attempt fails, Form's description is left. If the\\nattempt was successful, the extracted stack effect quote\\nis added onto the stack as Effect quote.\\n\\n```\\n100 effect leaves: '100'\\ntrue effect leaves: 'true'\\n\\n[] effect leaves: 'a block'\\n[ \\\"Hello World\\\" ] effect leaves: 'a block'\\n[ \\\"( -- ) \\\"] effect leaves: '( -- )'\\n\\n#+ here effect leaves: '( A B -- S )' \\\"(yours may differ)\\\"\\n#map: here effect leaves: '( Lb B -- MLb )'\\n```\") do |_, stack|\n  (Quote.new(stack.drop.effect)).onto(stack)\nend\ntarget.at(\"die\", \"( D/Eo -- ): dies with Details quote/Error object.\") do |engine, stack|\n  form = stack.drop.a(Quote | Error)\n  case form\n  in Quote\n    raise(engine.die(form.string))\n  in Error\n    raise(form)\n  end\nend\ntarget.at(\"stitch\", \"( Q1 Q2 -- Q3 ): quote concatenation.\") do |_, stack|\n  b = stack.drop.a(Quote)\n  a = stack.drop.a(Quote)\n  stack.add(a.stitch(b))\nend\ntarget.at(\"ls\", \"( B -- Nb ): gathers all dictionary entry names into\\n Name block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  result = Block.new\n  block.ls.each do |form|\n    result.add(form)\n  end\n  result.onto(stack)\nend\ntarget.at(\"reparent\", \"( C P -- C ): changes the parent of Child to Parent. Checks\\n for cycles which can hang the interpreter, therefore is\\n O(N) where N is the amount of Parent's ancestors.\") do |_, stack|\n  parent = stack.drop.a(Block)\n  child = stack.top.a(Block)\n  current = parent\n  while current\n    if current.same?(child)\n      current.die(\"this reparent introduces a cycle\")\n    else\n      current = current.parent?\n    end\n  end\n  child.parent = parent\nend\ntarget.at(\"befriend\", \"( B F -- ): adds Friend to Block's friend list.\\n\\nFriends are asked for word entries after parents, grandparents\\netc. have failed to retrieve them. This recurses, e.g. friends\\nask their own friends and so on, until the entry is found.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\nb a befriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\n\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\n\\nb.x echo\\n\\\"STDOUT: 100⏎\\\"\\n\\nb.y echo\\n\\\"STDOUT: 200⏎\\\"\\n\\na #x [ 'I\\\\'ve changed!' echo ] opens\\n\\na.x\\n\\\"STDOUT: I've changed!⏎\\\"\\nb.x\\n\\\"STDOUT: I've changed!⏎\\\"\\n```\") do |_, stack|\n  friend = stack.drop.a(Block)\n  block = stack.drop.a(Block)\n  block.befriend(friend)\nend\ntarget.at(\"unfriend\", \"( B F -- ): removes Friend from Block's friend list. Does\\n nothing if Friend is not in the friend list. See `befriend`.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\na b unfriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\na.y echo\\n\\\"Sorry: no value form found for 'y'.\\\"\\n```\") do |_, stack|\n  friend = stack.drop.a(Block)\n  source = stack.drop.a(Block)\n  source.unfriend(friend)\nend\ntarget.at(\"friends\", \"( B -- Fl ): leaves Friend list of Block. See `befriend`.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\na friends count echo\\n\\\"STDOUT: 1⏎\\\"\\na friends first b same? echo\\n\\\"STDOUT: true⏎\\\"\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\na friends [ drop ] hydrate\\na friends count echo\\n\\\"STDOUT: 0⏎\\\"\\na.y echo\\n\\\"Sorry: no value form found for 'y'.\\\"\\n```\") do |_, stack|\n  source = stack.drop.a(Block)\n  (Block.with(source.friends, leaf: source.friends.empty?)).onto(stack)\nend\ntarget.at(\"slurp\", \"( B Q -- B ): parses Quote and adds all forms from Quote\\n to Block.\") do |_, stack|\n  source = stack.drop.a(Quote)\n  block = stack.top.a(Block)\n  block.slurp(source.string)\nend\ntarget.at(\"orphan\", \"( -- O ): Leaves an Orphan (a parent-less block).\") do |_, stack|\n  Block.new.onto(stack)\nend\ntarget.at(\"orphan?\", \"( B -- true/false ): leaves whether Block is an orphan\") do |_, stack|\n  Boolean[!(stack.drop.a(Block)).parent?].onto(stack)\nend\ntarget.at(\"toOrphan\", \"( B -- B ): makes Block an orphan (destroys the link with\\n its parent).\\n\\n```\\n0 $: x\\n[ ] $: b\\nb . x echo\\n\\\"STDOUT: 0⏎\\\"\\n\\nb toOrphan leaves: [ [ ] ]\\n. x\\n\\\"Sorry: no value form found for 'x'\\\"\\\"\\n```\") do |_, stack|\n  (stack.top.a(Block)).parent = nil\nend\ntarget.at(\"toTape\", \"( B -- Tb ): leaves Tape block for Block. Useful for e.g.\\n comparing two blocks only for tape contents, when Block may\\n have dictionary entries.\\n\\nLookup hierarchy is destroyed: Tape block is an orphan.\\n\\n```\\n[ 1 2 3 ] $: a\\na #x 0 pushes\\na a toTape 2echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.to_tape_block.onto(stack)\nend\ntarget.at(\"desc\", \"( F -- Dq ): leaves the Description quote of the given Form.\\n\\n```\\n100 desc leaves: 'decimal number 100'\\n'foobar' desc leaves: 'quote \\\\\\\\'foobar\\\\\\\\''\\n[ 1 2 3 ] desc leaves: 'a block'\\n[ \\\"I am a block\\\" 1 2 3 ] desc leaves: 'I am a block'\\ntrue desc leaves: 'boolean true'\\n```\") do |_, stack|\n  quote = Quote.new(stack.drop.desc)\n  quote.onto(stack)\nend\ntarget.at(\"typedesc\", \"( F -- Dq ): leaves the type Description quote of the\\n given Form.\\n\\n```\\n100 typedesc leaves: 'decimal'\\n'foobar' typedesc leaves: 'quote'\\n[ 1 2 3 ] typedesc leaves: 'block'\\n[ \\\"I am a block\\\" 1 2 3 ] typedesc leaves: 'block'\\ntrue typedesc leaves: 'boolean'\\n```\") do |_, stack|\n  quote = Quote.new(stack.drop.class.typedesc)\n  quote.onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/FFI","path":"Novika/Capabilities/Impl/FFI.html","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"ffi\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes words for working with foreign functions, structs, and unions\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"ffi:library?\", \"( F -- true/false ): leaves whether Form is a foreign\\n library form.\\n\\n```\\n'foo' ffi:getLibrary ffi:library? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(Library)].onto(stack)\nend\ntarget.at(\"ffi:layout?\", \"( F -- true/false ): leaves whether Form is a foreign\\n layout form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:layout? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(StructLayoutForm)].onto(stack)\nend\ntarget.at(\"ffi:struct&?\", \"( F -- true/false ): leaves whether Form is a struct\\n reference view form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct& $: point&\\npoint& ffi:struct&? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.reference?)].onto(stack)\nend\ntarget.at(\"ffi:struct~?\", \"( F -- true/false ): leaves whether Form is an inline\\n struct view form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct~ $: point~\\npoint~ ffi:struct~? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.inline?)].onto(stack)\nend\ntarget.at(\"ffi:union?\", \"( F -- true/false ): leaves whether Form is a union\\n view form.\\n\\n```\\n[ chr char ord u8 ] ffi:createLayout $: quux\\n\\nquux ffi:allocateUnion $: quuxU\\nquuxU ffi:union? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.union?)].onto(stack)\nend\ntarget.at(\"ffi:hole?\", \"( F -- true/false ): leaves whether Form is a hole.\\n\\n```\\n#i32 ffi:hole $: intHole\\n\\nintHole ffi:hole? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(Hole)].onto(stack)\nend\ntarget.at(\"ffi:getLibrary?\", \"( I -- Lf true / false ): leaves Library form followed by true\\n if dynamic library with the given Id exists and was loaded &\\n retrieved successfully; otherwise, leaves false.\\n\\nOpening Library form allows one to expose functions from the\\nunderlying dynamic library (.so on Linux, .dll on Windows,\\n.dylib on Mac). See FFI documentation on GitHub Wiki for more\\ndetails and examples.\\n\\n```\\n'SDL2' ffi:getLibrary? leaves: [ \\\"[foreign library]\\\" true ]\\n'random-nonexisting-library' ffi:getLibrary? leaves: false\\n```\") do |engine, stack|\n  id = stack.drop.a(Quote)\n  if library = engine.capabilities.load_library?(id.string)\n    library.onto(stack)\n  end\n  Boolean[!(!library)].onto(stack)\nend\ntarget.at(\"ffi:getLibrary\", \"( I -- Lf ): leaves Library form if dynamic library with the\\n given Id exists and was loaded & retrieved successfully;\\n otherwise, dies.\\n\\nOpening Library form allows one to expose functions from the\\nunderlying dynamic library (.so on Linux, .dll on Windows,\\n.dylib on Mac). See FFI documentation on GitHub Wiki for more\\ndetails and examples.\\n\\n```\\n'SDL2' ffi:getLibrary ffi:library? leaves: true\\n'random-nonexisting-library' ffi:getLibrary \\\"Dies: no such library\\\"\\n```\") do |engine, stack|\n  id = stack.drop.a(Quote)\n  if library = engine.capabilities.load_library?(id.string)\n  else\n    id.die(\"no such library\")\n  end\n  library.onto(stack)\nend\ntarget.at(\"ffi:createLayout\", \"( Lb -- Slf ): parses Layout block and leaves the resulting\\n Struct layout form.\\n\\nStruct layouts are a generalization over structs (heap-\\nallocated and stack-allocated) and unions. They literally\\ndescribe how structs (unions) are layed out in memory.\\n\\nLayout block consists of *name words followed by type words*.\\nSee the example below. A reference to another struct layout\\ncan be made in Layout block using the prefixes `&` (heap-\\nallocated struct, i.e., pointer to struct), `~` (inline or\\nstack-allocated struct), and `?` (stack-allocated union).\\n\\nInline struct cycles are forbidden. Union cycles are forbidden.\\nEither could be hidden behind a reference/pointer.\\n\\nLayout block is parsed lazily (on first use, e.g., by `toQuote`,\\n`allocateStruct` variants, `=`, etc.) Therefore, you can define\\nself-referential structs, mutually referential structs, and\\nreference layouts that are defined later.\\n\\nSee FFI documentation on GitHub Wiki for a list of available\\ntypes and the corresponding C types.\\n\\n```\\n[ x f32\\n  y f32\\n] ffi:createLayout $: point\\n\\n[ datum ~point    \\\"<- inline struct\\\"\\n  next &pointNode \\\"<- struct reference\\\"\\n] ffi:createLayout $: pointNode\\n\\n[ asPoint &point\\n  asPointNode ~pointNode\\n] ffi:createLayout $: pointNodeUnion\\n\\n[ type u8\\n  value ?pointNodeUnion \\\"<- stack-allocated union\\\"\\n] ffi:createLayout $: pointNodeOrPoint\\n```\") do |engine, stack|\n  decl = stack.drop.a(Block)\n  this = engine.block\n  names = [] of Word\n  types = [] of Word\n  cur, nxt = names, types\n  decl.each do |form|\n    if form.is_a?(Word)\n    else\n      form.die(\"only words (for field name and for field type) are allowed in struct layout declaration\")\n    end\n    cur << form\n    cur, nxt = nxt, cur\n  end\n  if names.size == types.size\n  else\n    decl.die(\"malformed struct layout: missing field name or type\")\n  end\n  if names.empty?\n    decl.die(\"struct layout must have at least one field\")\n  end\n  (StructLayoutForm.new(this, names, types, decl.prototype.comment?)).onto(stack)\nend\n{% for method, desc in {inline: {\"~\", :InlineStruct, \"Isv\", \"Inline struct\"}, reference: {\"&\", :StructReference, \"Srv\", \"Struct reference\"}} %}\n\n        {% sign, cls, ann, qual = desc %}\n\n        target.at(\"ffi:allocateStruct{{ sign.id }}\", <<-END\n        ( Slf -- {{ ann.id }} ): allocates {{ qual.id }} view for the\n         given Struct layout form. If the struct is no longer in\n         use, it is freed by the GC automatically.\n\n        This word is **unsafe**: the resulting {{ qual.id }} view is\n        in an undefined state (may contain junk) before you (or the\n        C code you pass it to) fills it with good values. Showing\n        the struct view left by this word to clients may expose your\n        program to a whole class of security vulnerabilities.\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        point ffi:allocateStruct{{ sign.id }} $: point{{ sign.id }}\n        point{{ sign.id }} #x 123 entry:submit\n        point{{ sign.id }} #y 456 entry:submit\n        point{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=123_i32, y=456_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          form = stack.drop.a(StructLayoutForm)\n          view = form.layout.{{ method.id }}.make!\n          StructViewForm.new(view).onto(stack)\n        end\n\n        target.at(\"ffi:buildStruct{{ sign.id }}\", <<-END\n        ( Eb Slf -- {{ ann.id }} ): allocates and fills {{ qual.id }}\n         view with entries by asking Entry block for them.\n\n        If Entry block is missing an entry matching a field that\n        Struct layout form declares, and that field is of type\n        `pointer` or struct reference (`&`), `none` (C nullptr)\n        is used as the value. Dies if Entry block is missing\n        matching entry or entries for fields of other types.\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        100 $: x\n        200 $: y\n\n        \"Note: `this` has entries called `x` and `y`. `point` has\n         fields called `x` and `y`. A match!\"\n        this point ffi:buildStruct{{ sign.id }} $: point{{ sign.id }}\n\n        point{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=100_i32, y=200_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          layout_form = stack.drop.a(StructLayoutForm)\n          block = stack.drop.a(Block)\n          layout = layout_form.layout\n          view = layout.{{ method.id }}.make!\n          layout.each_desc_with_index do |desc|\n            entry = block.entry_for? Word.new(desc.id)\n            if entry\n              entry_stack = Engine.exhaust(capabilities, entry)\n              view[desc.id] = desc.type.from(entry_stack.top)\n            elsif desc.type.is_a?(Novika::FFI::UntypedPointer.class) || desc.type.is_a?(Novika::FFI::StructReferenceType)\n              view[desc.id] = Novika::FFI::UntypedPointer.none\n            else\n              block.die(\n                \"block is missing field '#{desc.id}'. Note that none (C nullptr) \\\n                 as default value is only supported for untyped pointers (`pointer`) \\\n                 and struct references (`&name`)\")\n            end\n          end\n          StructViewForm.new(view).onto(stack)\n        end\n\n        target.at(\"ffi:asStruct{{ sign.id }}\", <<-END\n        ( A Slf -- {{ ann.id }} ): creates and leaves {{ qual.id }} view\n         for the given Address, according to Struct layout form.\n\n        This word is **unsafe**: it does not check whether Address\n        points at something that is layed out according to Struct\n        layout form. Passing 0 (none aka null pointer) for Address\n        will lead to segfault. Passing Address that is outside of\n        your program's memory will lead to segfault. Passing Address\n        that *is* in the bounds of your program's memory, but one\n        not pointing at a struct in accordance with Struct layout\n        form, will lead to undefined behavior (most likely junk\n        values in {{ qual.id }} view).\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        100 $: x\n        200 $: y\n        this point ffi:buildStruct{{ sign.id }} $: point{{ sign.id }}\n\n        point{{ sign.id }} ffi:addressof $: addr\n\n        addr point ffi:asStruct{{ sign.id }} $: addrPoint{{ sign.id }}\n        addrPoint{{ sign.id }}.x leaves: x\n        addrPoint{{ sign.id }}.y leaves: y\n        addrPoint{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=100_i32, y=200_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          layout_form = stack.drop.a(StructLayoutForm)\n          pointer = stack.drop.a(Decimal)\n          view = Novika::FFI::{{ cls.id }}View.new(layout_form.layout, Pointer(Void).new(pointer.to_u64))\n          StructViewForm.new(view).onto(stack)\n        end\n      {% end %}\ntarget.at(\"ffi:allocateUnion\", \"( Slf -- Uv ): allocates Union view for the given Struct\\n layout form.\\n\\nThis word is **unsafe**: the resulting Union view is in\\nan undefined (uninitialized) state (may be zeroed out,\\ncontain junk, or both) before you (or the C code you pass\\nit to) fills it with good values. Showing the uninitialized\\nunion to clients may expose your program to a whole class\\nof security vulnerabilities.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\nquux ffi:allocateUnion $: quuxUnion\\nquuxUnion #chr 'A' entry:submit\\nquuxUnion.ord leaves: 65\\n\\n\\\"Union toQuote avoids printing values, because that could\\n cause a segfault/overflow in some cases, and would mostly\\n output junk anyway.\\\"\\nquuxUnion toQuote leaves: '(⋃ ⟪chr=char, ord=u8⟫)'\\n```\") do |_, stack|\n  form = stack.drop.a(StructLayoutForm)\n  view = form.layout.union.make!\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:buildUnion\", \"( Eb Slf -- Uv ): allocates and fills Union view with an\\n entry by asking Entry block for any *one* entry out of\\n those specified in Struct layout form, in the order they\\n are specified in Struct layout form. If the union is no\\n longer in use, it is freed by the GC automatically.\\n\\nEntry block must have at least one of the Struct layout\\nform's fields defined. Otherwise, this word dies.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\n[ 'A' $: chr\\n  this quux ffi:buildUnion\\n] val $: unionByChr\\n\\n[ 66 $: ord\\n  this quux ffi:buildUnion\\n] val $: unionByOrd\\n\\n[ 'A' $: chr\\n  123 $: ord\\n  this quux ffi:buildUnion\\n] val $: unionBoth\\n\\nunionByChr.ord leaves: 65\\nunionByOrd.chr leaves: 'B'\\n\\n\\\"'chr' is defined first, therefore, it is used rather\\n than 'ord'\\\"\\nunionBoth.chr leaves: 'A'\\nunionBoth.ord leaves: 65\\n```\") do |_, stack|\n  form = stack.drop.a(StructLayoutForm)\n  block = stack.drop.a(Block)\n  layout = form.layout\n  view = layout.union.make!\n  had_entry = false\n  layout.each_desc_with_index do |desc|\n    entry = block.entry_for?(Word.new(desc.id))\n    if entry\n      entry_stack = Engine.exhaust(capabilities, entry)\n      view[desc.id] = desc.type.from(entry_stack.top)\n      had_entry = true\n      break\n    end\n  end\n  if had_entry\n  else\n    block.die(\"block must have one of the union's fields defined\")\n  end\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:asUnion\", \"( A Slf -- Uv ): creates and leaves a Union view for the\\n given Address, according to Struct layout form.\\n\\nThis word is **unsafe**: it does not check whether Address\\npoints at something that is layed out according to Struct\\nlayout form. Passing 0 (none aka null pointer) for Address\\nwill lead to segfault. Passing Address that points outside\\nof your program's memory will lead to segfault. Passing\\nAddress that *is* in the bounds of your program's memory,\\nbut one not pointing at a union in accordance with Struct\\nlayout form, will lead to undefined behavior (most likely\\njunk values in Union view). Showing ill-formed results of\\nthis word to clients may expose your program to a whole\\nclass of security vulnerabilities.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\n'A' $: chr\\n\\nthis quux ffi:buildUnion $: quuxUnion\\n\\nquuxUnion ffi:addressof $: addr\\n\\naddr quux ffi:asUnion $: addrUnion\\naddrUnion.chr leaves: 'A'\\naddrUnion.ord leaves: 65\\n```\") do |_, stack|\n  layout_form = stack.drop.a(StructLayoutForm)\n  pointer = stack.drop.a(Decimal)\n  view = Novika::FFI::UnionView.new(layout_form.layout, Pointer(Void).new(pointer.to_u64))\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:hole\", \"( T/Oh -- H ): allocates garbage-collected memory for Hole\\n that will hold a value of the given Type. If Other hole\\n is passed, wraps that Other hole instead (this could be\\n useful in C situations like `int**`)\\n\\nHoles are (just a bit) safer way of letting C write to a\\nmemory location. You first create the hole, then pass it\\nto C, then read from the hole by opening it.\\n\\nNote: this word is **unsafe**: since we cannot check whether\\nthe hole was written to, reading from hole (opening it) before\\nwriting to it will result in undefined behavior.\\n\\n```\\n\\\"\\\"\\\"\\nvoid outputCInt(int* x)\\n{\\n  *x = 123;\\n}\\n\\\"\\\"\\\"\\n\\n#i32 ffi:hole $: intBox\\n\\nintBox outputCInt\\nintBox open leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word | Hole)\n  type = case typename\n  in Hole\n    Novika::FFI::UntypedPointer.new(typename.address)\n  in Word\n    (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  end\n  (Hole.new(type)).onto(stack)\nend\ntarget.at(\"ffi:box\", \"( F T -- A ): allocates garbage-collected memory for Type, and\\n writes Form there. Form must be of (or convertible to) Type;\\n otherwise, this word dies. Leaves Address of the beginning of\\n the allocated memory.\\n\\n```\\n123 #i32 ffi:box $: ptr\\nptr #i32 ffi:unbox leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  form = stack.drop\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  pointer = (type.from(form)).box\n  (Decimal.new(pointer.address)).onto(stack)\nend\ntarget.at(\"ffi:unbox\", \"( A T -- F ): interprets whatever Address points at as a\\n value of the given Type, and leaves the matching Form.\\n Inverse of `ffi:box`.\\n\\nThis word is **unsafe**: it does not check whether Address\\npoints at something that is of the given Type. Passing 0\\n(none aka null pointer) for Address will lead to segfault.\\nPassing Address that points outside of your program's memory\\nwill lead to segfault. Passing Address that *is* in the bounds\\nof your program's memory, but one not pointing at a value of\\nthe given Type, will lead to undefined behavior (most likely\\njunk value of Form). Showing ill-formed results of this word to\\nclients, or letting clients control Address or Type, may expose\\nyour program to a whole class of security vulnerabilities.\\n\\n```\\n123 #i32 ffi:box $: ptr\\nptr #i32 ffi:unbox leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  address = stack.drop.a(Decimal)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  base = Pointer(Void).new(address.to_u64)\n  form = (type.unbox(base)).to_form?.not_nil!\n  form.onto(stack)\nend\ntarget.at(\"ffi:unsafeWrite\", \"( A F T -- ): interprets Form as that of the given Type,\\n and writes it at Address.\\n\\nThis word is **unsafe**: it does not check whether Address\\ncan be written to, whether there is enough memory to fully\\nwrite Form, etc. Passing 0 (none aka null pointer) for Address\\nwill lead to segfault. Passing Address that points outside\\nof your program's memory will lead to segfault. Passing Address\\nthat *is* in the bounds of your program's memory and can\\nbe written to may lead to undefined behavior.\\n\\n```\\n#i32 ffi:hole $: myHole\\nmyHole ffi:addressof $: holeAddr\\nholeAddr 123 #i32 ffi:unsafeWrite\\nmyHole open leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  form = stack.drop\n  address = stack.drop.a(Decimal)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  value = type.from(form)\n  base = Pointer(Void).new(address.to_u64)\n  value.write_to!(base)\nend\ntarget.at(\"ffi:viewLayout\", \"( Svf -- Slf ): leaves Struct layout form for the given\\n Struct view form (an inline struct view, struct reference\\n view, or union view).\\n\\n```\\n[ x f32 y f32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct& $: point&\\npoint ffi:allocateStruct~ $: point~\\npoint ffi:allocateUnion $: pointU\\n\\npoint& ffi:viewLayout leaves: point\\npoint~ ffi:viewLayout leaves: point\\npointU ffi:viewLayout leaves: point\\n```\") do |_, stack|\n  view = stack.drop.a(StructViewForm)\n  view.layout.onto(stack)\nend\ntarget.at(\"ffi:sizeof\", \"( T -- B ): leaves the size of Type, in Bytes.\\n\\n```\\n#u8  ffi:sizeof leaves: 1\\n#u16 ffi:sizeof leaves: 2\\n#u32 ffi:sizeof leaves: 4\\n#u64 ffi:sizeof leaves: 8\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  (Decimal.new(type.sizeof)).onto(stack)\nend\ntarget.at(\"ffi:addressof\", \"( Svf/H -- A ): leaves Address of the given Struct view form\\n (an inline struct view, struct reference view, or union view),\\n or Hole in memory.\\n\\n```\\n#i32 ffi:hole $: myHole\\nmyHole ffi:addressof $: holeAddr\\nholeAddr 123 #i32 ffi:unsafeWrite\\nmyHole open leaves: 123\\n```\") do |_, stack|\n  form = stack.drop.a(Hole | StructViewForm)\n  (Decimal.new(form.address)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Frontend","path":"Novika/Capabilities/Impl/Frontend.html","kind":"class","full_name":"Novika::Capabilities::Impl::Frontend","name":"Frontend","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"capabilities(engine):Block-instance-method","name":"capabilities","doc":"Returns a list block of capabilities provided by the frontend.","summary":"<p>Returns a list block of capabilities provided by the frontend.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Block","args_html":"(engine) : <a href=\"../../../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":7,"url":null},"def":{"name":"capabilities","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Block","visibility":"Public","body":"list = Block.new\ncapabilities.enabled.each do |klass|\n  list.add(Quote.new(klass.id))\nend\nlist\n"}},{"html_id":"version(engine):Quote-instance-method","name":"version","doc":"Returns version of the frontend.","summary":"<p>Returns version of the frontend.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":3,"url":null},"def":{"name":"version","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"Quote.new(Novika::VERSION)"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Ink","path":"Novika/Capabilities/Impl/Ink.html","kind":"class","full_name":"Novika::Capabilities::Impl::Ink","name":"Ink","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/ink.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COMPAT","name":"COMPAT","value":"{Color.rgb(0, 0, 0) => :black, Color.rgb(128, 0, 0) => :red, Color.rgb(0, 128, 0) => :green, Color.rgb(128, 128, 0) => :yellow, Color.rgb(0, 0, 128) => :blue, Color.rgb(128, 0, 128) => :magenta, Color.rgb(0, 128, 128) => :cyan, Color.rgb(192, 192, 192) => :light_gray, Color.rgb(128, 128, 128) => :dark_gray, Color.rgb(255, 0, 0) => :light_red, Color.rgb(0, 255, 0) => :light_green, Color.rgb(255, 255, 0) => :light_yellow, Color.rgb(0, 0, 255) => :light_blue, Color.rgb(255, 0, 255) => :light_magenta, Color.rgb(0, 255, 255) => :light_cyan, Color.rgb(255, 255, 255) => :white}"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"with_color_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_color_append_echo","doc":"Appends *form* with *fg* foreground color (if any) and\n*bg* background color (if any) to the standard output\nstream. One of *fg*, *bg* is guaranteed to be non-nil.","summary":"<p>Appends <em>form</em> with <em>fg</em> foreground color (if any) and <em>bg</em> background color (if any) to the standard output stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":42,"url":null},"def":{"name":"with_color_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"string = form.to_quote.string\ncolorful = string.colorize\nif fg\n  colorful = colorful.fore(COMPAT[fg.closest(COMPAT.keys)])\nend\nif bg\n  colorful = colorful.back(COMPAT[bg.closest(COMPAT.keys)])\nend\nappend_echo(engine, colorful)\n"}},{"html_id":"with_emphasis_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_emphasis_append_echo","doc":"Same as `with_color_append_echo`, but also emphasizes\necho of *form*. Bold style is used by default, but\nimplementors may choose e.g. italic.","summary":"<p>Same as <code><a href=\"../../../Novika/Capabilities/Impl/Ink.html#with_color_append_echo%28engine%2Cfg%3AColor%7CNil%2Cbg%3AColor%7CNil%2Cform%3AForm%29-instance-method\">#with_color_append_echo</a></code>, but also emphasizes echo of <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":30,"url":null},"def":{"name":"with_emphasis_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"string = form.to_quote.string\ncolorful = string.colorize.bold\nif fg\n  colorful = colorful.fore(COMPAT[fg.closest(COMPAT.keys)])\nend\nif bg\n  colorful = colorful.back(COMPAT[bg.closest(COMPAT.keys)])\nend\nappend_echo(engine, colorful)\n"}},{"html_id":"with_reverse_append_echo(engine,form:Form)-instance-method","name":"with_reverse_append_echo","doc":"Appends *form* with inverse style (background color is\nset to foreground color, and vice versa).\n\nNote: if both foreground and background colors are set\nby the user, `with_color_append_echo` is preferred over\nthis method.","summary":"<p>Appends <em>form</em> with inverse style (background color is set to foreground color, and vice versa).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":38,"url":null},"def":{"name":"with_reverse_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"append_echo(engine, form.to_quote.string.colorize.reverse)"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Nki","path":"Novika/Capabilities/Impl/Nki.html","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/nki.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"nki\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes words to capture, read, and manipulate Novika images\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"nki:toBlock\", \"( Bf -- B ): leaves Block for the given Byteslice form,\\n assumed to contain a well-formed Novika image created\\n with `nki:captureAll`, `nki:captureNeighborhood`, or\\n otherwise. Dies if Byteslice form is an invalid Novika\\n image, or isn't a Novika image.\\n\\nFor code example, see `nki:captureNeighborhood`.\") do |engine, stack|\n  bytes = stack.drop.a(Byteslice)\n  begin\n    image = bytes.to_io.read_bytes(Image)\n  rescue error : BinData::ReadingVerificationException\n    bytes.die(\"apparently, this byteslice is not a Novika image\")\n  end\n  (image.to_block(engine.capabilities)).onto(stack)\nend\ntarget.at(\"nki:captureAll\", \"( B -- Bf ): thoroughly, recursively captures entire\\n hierarchy of Block (its parents, prototype, friends,\\n tape, and dictionary), and leaves the resulting Novika\\n image as a Byteslice form.\\n\\nArchives image payload using Gzip, fast.\\n\\nIf you're a visual type of person, imagine this word and\\nall related facilities as a kind of \\\"mold\\\", which carefully,\\nin an ordered fashion \\\"fills up\\\" a maze, until all paths\\nwere explored and all exits found.\\n\\nFor code example, see `nki:captureNeighborhood`.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipFast, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhood\", \"( B -- Bf ): like `nki:captureAll`, but rather than\\n capturing all reachable blocks, captures only Block's\\n neighborhood. Leaves the resulting Byteslice form.\\n\\nArchives image payload using Gzip, fast.\\n\\nWe store each block in Block's tape and dictionary in\\na list, then ask that block to do the same. When recursion\\nfinishes, the resulting list is called *block neighborhood*.\\n\\nParent, friends, and prototype of the given block are\\nreconstructed *if and only if they are in the block\\nneighborhood*.\\n\\n```\\n[ 1 2 3 ] nki:captureNeighborhood $: imgN\\n\\nimgN toQuote leaves: '[byteslice, consists of 111 byte(s)]' \\\"yours may differ!\\\"\\nimgN nki:toBlock leaves: [ [ 1 2 3 ] ]\\n\\n\\\"As opposed to nki:captureAll, which will capture EVERYTHING\\n it can reach:\\\"\\n[ 1 2 3 ] nki:captureAll $: imgA\\n\\nimgA toQuote leaves: '[byteslice, consists of 38298 byte(s)]' \\\"yours may differ!\\\"\\n\\n\\\"Note: [ 1 2 3 ] lives in a parallel universe now, with\\n its own friends, prototypes, toplevel block, and so on!\\n It doesn't have any links whatsoever to the whoever-it-was\\n that called nki:captureAll!\\\"\\nimgA nki:toBlock leaves: [ [ 1 2 3 ] ]\\n```\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipFast, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllRaw\", \"( B -- Bf ): same as `nki:captureAll`, but doesn't archive\\n image payload. May yield very large Byteslice forms.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::None, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodRaw\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but doesn't\\n archive image payload. May yield large Byteslice forms.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::None, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllGzipBest\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Gzip, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipBest, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodGzipBest\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Gzip, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipBest, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllBrotliFast\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Brotli, fast.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliFast, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodBrotliFast\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Brotli, fast.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliFast, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllBrotliBest\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Brotli, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliBest, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodBrotliBest\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Brotli, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliBest, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/System","path":"Novika/Capabilities/Impl/System.html","kind":"class","full_name":"Novika::Capabilities::Impl::System","name":"System","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"},"ancestors":[{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/system.cr","line_number":10,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"append_echo(engine,form:Form)-instance-method","name":"append_echo","doc":"Enquotes and appends *form* to the standard output stream.","summary":"<p>Enquotes and appends <em>form</em> to the standard output stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":11,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"print(form.to_quote.string)"}},{"html_id":"bye(engine,code:Decimal)-instance-method","name":"bye","doc":"Ends the program with the given exit *code*.","summary":"<p>Ends the program with the given exit <em>code</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"args_string":"(engine, code : Decimal)","args_html":"(engine, code : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":43,"url":null},"def":{"name":"bye","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"visibility":"Public","body":"exit(code.to_i)"}},{"html_id":"monotonic(engine):Decimal-instance-method","name":"monotonic","doc":"Returns a reading from the monotonic clock, in milliseconds.","summary":"<p>Returns a reading from the monotonic clock, in milliseconds.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Decimal","args_html":"(engine) : <a href=\"../../../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":35,"url":null},"def":{"name":"monotonic","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(Time.monotonic.total_milliseconds)"}},{"html_id":"nap(engine,millis:Decimal)-instance-method","name":"nap","doc":"Sleeps for the given amount of *millis*econds.","summary":"<p>Sleeps for the given amount of <em>millis</em>econds.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"args_string":"(engine, millis : Decimal)","args_html":"(engine, millis : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":39,"url":null},"def":{"name":"nap","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"visibility":"Public","body":"sleep(millis.to_i.milliseconds)"}},{"html_id":"readline(engine,prompt:Form):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline","doc":"Enquotes and prints *prompt* to STDOUT. Waits for the\nuser to answer, enquotes the answer (if any) and returns\nit together with a status boolean.\n\nIf the user answered with EOF (e.g. CTRL-D), status bool\nis false and answer quote is nil. Else, answer quote\ncontains the answer and status bool is true.","summary":"<p>Enquotes and prints <em>prompt</em> to STDOUT.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"args_string":"(engine, prompt : Form) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, prompt : <a href=\"../../../Novika/Form.html\">Form</a>) : Tuple(<a href=\"../../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":15,"url":null},"def":{"name":"readline","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":"string = prompt.to_quote.string\nanswer = nil\n{% if flag?(:novika_readline) %}\n        buffer = Linenoise.linenoise(string.to_unsafe)\n        unless buffer.null?\n          answer = String.new(buffer)\n          Linenoise.linenoise_free(buffer)\n        end\n      {% else %}\n        print string\n        answer = gets\n      {% end %}\n{answer ? Quote.new(answer) : nil, Boolean[!(!answer)]}\n"}},{"html_id":"report_error(engine,error:Error)-instance-method","name":"report_error","doc":"Reports abound an *error* to the standard error stream.","summary":"<p>Reports abound an <em>error</em> to the standard error stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"args_string":"(engine, error : Error)","args_html":"(engine, error : <a href=\"../../../Novika/Error.html\">Error</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":31,"url":null},"def":{"name":"report_error","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"visibility":"Public","body":"error.report(STDERR)"}}]}]},{"html_id":"novika/Novika/Capabilities/ISystem","path":"Novika/Capabilities/ISystem.html","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/system.cr","line_number":8,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/System","kind":"class","full_name":"Novika::Capabilities::Impl::System","name":"System"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":11,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"system\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":19,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":15,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes all sorts of OS-related vocabulary, such as 'echo' and 'nap'\""}}],"instance_methods":[{"html_id":"append_echo(engine,form:Form)-instance-method","name":"append_echo","doc":"Enquotes and appends *form* to the standard output stream.","summary":"<p>Enquotes and appends <em>form</em> to the standard output stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":24,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"bye(engine,code:Decimal)-instance-method","name":"bye","doc":"Ends the program with the given exit *code*.","summary":"<p>Ends the program with the given exit <em>code</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"args_string":"(engine, code : Decimal)","args_html":"(engine, code : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":45,"url":null},"def":{"name":"bye","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":47,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"appendEcho\", \"( F -- ): enquotes and appends Form to the standard\\n output stream.\") do |engine, stack|\n  append_echo(engine, stack.drop)\nend\ntarget.at(\"readLine\", \"( Pf -- Aq true / false ): enquotes and prints Prompt\\n form to the standard output stream. Waits for the user\\n to answer, enquotes the answer and leaves it.\\n\\nIf user answered the prompt, leaves Answer quote followed\\nby boolean true. Otherwise, leaves boolean false.\\n\\n```\\n'What is your name? ' readLine => echo\\n\\n\\\"INPUT: What is your name? John Doe⏎\\\"\\n\\\"STDOUT: John Doe⏎\\\"\\n\\n\\\"INPUT: What is your name? <Ctrl-D>\\\"\\n\\\"[Program exits]\\\"\\n```\") do |engine, stack|\n  answer, status = readline(engine, stack.drop)\n  if answer\n    answer.onto(stack)\n  end\n  status.onto(stack)\nend\ntarget.at(\"reportError\", \"( Eo -- ): reports about an error to the standard error\\n stream, given an Error object.\\n\\nYou can obtain an error object by, e.g., catching it\\nin `__died__`.\") do |engine, stack|\n  error = stack.drop.a(Error)\n  report_error(engine, error)\nend\ntarget.at(\"monotonic\", \"( -- R ): leaves a Reading from the monotonic clock to\\n measure elapsed time, in milliseconds.\\n\\nValues from the monotonic clock and wall clock are not\\ncomparable. Monotonic clock should be independent from\\ndiscontinuous jumps in the system time, such as leap\\nseconds, time zone adjustments or manual changes to the\\ncomputer's clock.\\n\\n```\\nmonotonic $: start\\n20 nap\\nmonotonic $: end\\nend start - echo\\n\\\"STDOUT: 20⏎ (approximately)\\\"\\n```\") do |engine, stack|\n  (monotonic(engine)).onto(stack)\nend\ntarget.at(\"nap\", \"( D -- ): sleeps a Duration of time, given in *milliseconds*.\") do |engine, stack|\n  millis = stack.drop.a(Decimal)\n  nap(engine, millis)\nend\ntarget.at(\"bye\", \"( Ec -- ): ends the program with the given decimal Exit code.\") do |engine, stack|\n  code = stack.drop.a(Decimal)\n  bye(engine, code)\nend\n"}},{"html_id":"monotonic(engine):Decimal-instance-method","name":"monotonic","doc":"Returns a reading from the monotonic clock, in milliseconds.","summary":"<p>Returns a reading from the monotonic clock, in milliseconds.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Decimal","args_html":"(engine) : <a href=\"../../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/capabilities/system.cr","line_number":42,"url":null},"def":{"name":"monotonic","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Decimal","visibility":"Public","body":""}},{"html_id":"nap(engine,millis:Decimal)-instance-method","name":"nap","doc":"Sleeps for the given amount of *millis*econds.","summary":"<p>Sleeps for the given amount of <em>millis</em>econds.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"args_string":"(engine, millis : Decimal)","args_html":"(engine, millis : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":39,"url":null},"def":{"name":"nap","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"readline(engine,prompt:Form):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline","doc":"Enquotes and prints *prompt* to STDOUT. Waits for the\nuser to answer, enquotes the answer (if any) and returns\nit together with a status boolean.\n\nIf the user answered with EOF (e.g. CTRL-D), status bool\nis false and answer quote is nil. Else, answer quote\ncontains the answer and status bool is true.","summary":"<p>Enquotes and prints <em>prompt</em> to STDOUT.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"args_string":"(engine, prompt : Form) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, prompt : <a href=\"../../Novika/Form.html\">Form</a>) : Tuple(<a href=\"../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":33,"url":null},"def":{"name":"readline","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":""}},{"html_id":"report_error(engine,error:Error)-instance-method","name":"report_error","doc":"Reports abound an *error* to the standard error stream.","summary":"<p>Reports abound an <em>error</em> to the standard error stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"args_string":"(engine, error : Error)","args_html":"(engine, error : <a href=\"../../Novika/Error.html\">Error</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":36,"url":null},"def":{"name":"report_error","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"visibility":"Public","body":""}}]}]},{"html_id":"novika/Novika/Capability","path":"Novika/Capability.html","kind":"module","full_name":"Novika::Capability","name":"Capability","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":31,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/Capabilities/Impl/Colors","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors"},{"html_id":"novika/Novika/Capabilities/Impl/Essential","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential"},{"html_id":"novika/Novika/Capabilities/Impl/FFI","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI"},{"html_id":"novika/Novika/Capabilities/Impl/Nki","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki"},{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Merges instance-side and class-side interfaces to a Novika\ncapability. Automatically includes `ICapabilityClass` and\n`ICapability` for you.","summary":"<p>Merges instance-side and class-side interfaces to a Novika capability.</p>"},{"html_id":"novika/Novika/CapabilityCollection","path":"Novika/CapabilityCollection.html","kind":"class","full_name":"Novika::CapabilityCollection","name":"CapabilityCollection","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capability.cr","line_number":66,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A collection of language capability implementations.\n\nCapability implementations can indirectly (by id) interact\nwith each other by sharing the capability collection they're\nmembers of.\n\n```\n# (!) Compile with -Dnovika_console\n\ncaps = CapabilityCollection.new\n\n# Add capability classes:\ncaps << Capabilities::Impl::Essential\ncaps << Capabilities::Impl::System\ncaps << Capabilities::Impl::Console\n\n# Enable capabilities. At this point you kinda don't know\n# which implementation is used under the hood, so you\n# need to refer to the capability by its id.\ncaps.enable(\"essential\")\ncaps.enable(\"system\")\ncaps.enable(\"console\")\n\nblock = Block.new(caps.block)\nblock.slurp(\"console:on 1000 nap console:off\")\n\nEngine.exhaust(block, caps)\n```","summary":"<p>A collection of language capability implementations.</p>","class_methods":[{"html_id":"available:Array(ICapabilityClass)-class-method","name":"available","doc":"Lists *all* available (registered) capability classes.\n\nFor a capability class to be registered (available), it\nshould be the last subclass of a `Capability` includer\n(subclass depth is irrelevant), or have no subclasses\nand directly include `Capability`.","summary":"<p>Lists <em>all</em> available (registered) capability classes.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":251,"url":null},"def":{"name":"available","return_type":"Array(ICapabilityClass)","visibility":"Public","body":"{% if true %}\n        [{% for capability in Capability.includers %}\n          {% subclasses = capability.all_subclasses %}\n          {% if (!capability.abstract?) && subclasses.empty? %}\n            {{ capability }},\n          {% else %}{% if subclass = subclasses.reject(&.abstract?).last %}\n            {{ subclass }},\n          {% end %}{% end %}\n        {% end %}] of ICapabilityClass\n      {% end %}"}},{"html_id":"with_available-class-method","name":"with_available","doc":"Creates a capability collection, and adds *all* available\ncapabilities (see `CapabilityCollection.available`). Does\nnot enable any of them.\n\nReturns the resulting capability collection.","summary":"<p>Creates a capability collection, and adds <em>all</em> available capabilities (see <code><a href=\"../Novika/CapabilityCollection.html#available%3AArray%28ICapabilityClass%29-class-method\">CapabilityCollection.available</a></code>).</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":239,"url":null},"def":{"name":"with_available","visibility":"Public","body":"caps = CapabilityCollection.new\navailable.each do |cap|\n  caps << cap\nend\ncaps\n"}},{"html_id":"with_default-class-method","name":"with_default","doc":"Creates a capability collection, and adds capabilities that\nare on by default. Doesn't enable any. Returns the resulting\ncapability collection.","summary":"<p>Creates a capability collection, and adds capabilities that are on by default.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":225,"url":null},"def":{"name":"with_default","visibility":"Public","body":"caps = CapabilityCollection.new\navailable.each do |cap|\n  if cap.on_by_default?\n  else\n    next\n  end\n  caps << cap\nend\ncaps\n"}}],"constructors":[{"html_id":"new(parent:Block|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"}],"args_string":"(parent : Block | Nil = nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/capability.cr","line_number":72,"url":null},"def":{"name":"new","args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(cls:ICapabilityClass)-instance-method","name":"<<","doc":"Adds a capability class *cls* to this collection.","summary":"<p>Adds a capability class <em>cls</em> to this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"ICapabilityClass"}],"args_string":"(cls : ICapabilityClass)","args_html":"(cls : <a href=\"../Novika/ICapabilityClass.html\">ICapabilityClass</a>)","location":{"filename":"src/novika/capability.cr","line_number":212,"url":null},"def":{"name":"<<","args":[{"name":"cls","external_name":"cls","restriction":"ICapabilityClass"}],"visibility":"Public","body":"@classes[cls.id] = cls"}},{"html_id":"<<(library:Library)-instance-method","name":"<<","doc":"Adds a *library* to this collection. Overwrites any previous\nlibrary with the same id.","summary":"<p>Adds a <em>library</em> to this collection.</p>","abstract":false,"args":[{"name":"library","external_name":"library","restriction":"Library"}],"args_string":"(library : Library)","args_html":"(library : <a href=\"../Novika/Library.html\">Library</a>)","location":{"filename":"src/novika/capability.cr","line_number":218,"url":null},"def":{"name":"<<","args":[{"name":"library","external_name":"library","restriction":"Library"}],"visibility":"Public","body":"@libraries[library.id] = library"}},{"html_id":"[]?(cls:T.class):T|NilforallT-instance-method","name":"[]?","doc":"Returns the instance of the given capability class *cls*,\nif such instance can be found in this collection. Otherwise,\nreturns nil.","summary":"<p>Returns the instance of the given capability class <em>cls</em>, if such instance can be found in this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class) : T | Nil forall T","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : T | Nil forall T","location":{"filename":"src/novika/capability.cr","line_number":154,"url":null},"def":{"name":"[]?","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"return_type":"T | ::Nil","visibility":"Public","body":"@objects[cls.id]?.try do |__arg1|\n  __arg1.as(T)\nend"}},{"html_id":"block:Block-instance-method","name":"block","doc":"Returns the *capability block*: a block managed by this\ncollection, which includes the vocabulary injected by\nthe enabled capabilities.","summary":"<p>Returns the <em>capability block</em>: a block managed by this collection, which includes the vocabulary injected by the enabled capabilities.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":70,"url":null},"def":{"name":"block","return_type":"Block","visibility":"Public","body":"@block"}},{"html_id":"enable(id:String):Bool-instance-method","name":"enable","doc":"Enables a capability with the given *id*.\n\nTo enable a capability means to create an instance of the\ncorresponding implementation class, and use that instance\nto inject the capability vocabulary into this collection's\n*capabilities block*, `block`. You can then access `block`\nand e.g. inherit from it to access the vocabulary of the\nenabled capabilities.\n\nDoes nothing if the capability is already enabled.\nDoes nothing if there is no capability with the given id.\n\nReturns whether there is a capability with the given *id*.","summary":"<p>Enables a capability with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Bool","args_html":"(id : <a href=\"../String.html\">String</a>) : Bool","location":{"filename":"src/novika/capability.cr","line_number":116,"url":null},"def":{"name":"enable","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if @objects.has_key?(id)\n  return true\nend\nif cap = get_capability_class?(id)\nelse\n  return false\nend\nobject = cap.new(self)\nobject.inject(block)\n@objects[id] = object\ntrue\n"}},{"html_id":"enable_all-instance-method","name":"enable_all","doc":"Enables all capabilities unconditionally.\n\nReturns self.","summary":"<p>Enables all capabilities unconditionally.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":145,"url":null},"def":{"name":"enable_all","visibility":"Public","body":"@classes.each_key do |k|\n  enable(k)\nend\nself\n"}},{"html_id":"enable_default-instance-method","name":"enable_default","doc":"Enables all capabilities that respond with true when sent\n`ICapabilityClass#on_by_default?`.\n\nFor capabilities that respond with false, you'll need to\ntarget them explicitly with `enable(id)`, or use `enable_all`\ninstead of `enable_default`.\n\nReturns self.","summary":"<p>Enables all capabilities that respond with true when sent <code><a href=\"../Novika/ICapabilityClass.html#on_by_default%3F%3ABool-instance-method\">ICapabilityClass#on_by_default?</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":136,"url":null},"def":{"name":"enable_default","visibility":"Public","body":"@classes.each do |k, v|\n  if v.on_by_default?\n    enable(k)\n  end\nend\nself\n"}},{"html_id":"enabled-instance-method","name":"enabled","doc":"Returns an array of capabilities that are enabled in this\ncollection at the moment.","summary":"<p>Returns an array of capabilities that are enabled in this collection at the moment.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":81,"url":null},"def":{"name":"enabled","visibility":"Public","body":"@objects.values.map(&.class)"}},{"html_id":"fetch(cls:T.class,&:T->U):U|NilforallT,U-instance-method","name":"fetch","doc":"Yields the capability instance of the given capability\nclass *cls* to the block, if such instance can be found\nin this collection.\n\nReturns the result of the block, or nil.","summary":"<p>Yields the capability instance of the given capability class <em>cls</em> to the block, if such instance can be found in this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class, & : T -> U) : U | Nil forall T, U","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>, & : T -> U) : U | Nil forall T, U","location":{"filename":"src/novika/capability.cr","line_number":205,"url":null},"def":{"name":"fetch","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> U)"},"return_type":"U | ::Nil","visibility":"Public","body":"if impl = self[cls]?\n  yield impl\nend"}},{"html_id":"get_capability_class?(id:String)-instance-method","name":"get_capability_class?","doc":"Returns the capability class with the given *id*. Returns nil\nif there is no such capability class in this collection.","summary":"<p>Returns the capability class with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":166,"url":null},"def":{"name":"get_capability_class?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@classes[id]?"}},{"html_id":"get_library?(id:String)-instance-method","name":"get_library?","doc":"Returns the library with the given *id*. Returns nil if there\nis no such library in this collection.","summary":"<p>Returns the library with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":160,"url":null},"def":{"name":"get_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@libraries[id]?"}},{"html_id":"has_capability?(id:String)-instance-method","name":"has_capability?","doc":"Returns whether this collection includes a capability with\nthe given *id*.","summary":"<p>Returns whether this collection includes a capability with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":93,"url":null},"def":{"name":"has_capability?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@classes.has_key?(id)"}},{"html_id":"has_capability_enabled?(id:String)-instance-method","name":"has_capability_enabled?","doc":"Returns whether this collection has the capability with\nthe given *id* enabled.","summary":"<p>Returns whether this collection has the capability with the given <em>id</em> enabled.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":87,"url":null},"def":{"name":"has_capability_enabled?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@objects.has_key?(id)"}},{"html_id":"has_library?(id:String)-instance-method","name":"has_library?","doc":"Returns whether this collection includes a library with\nthe given *id*.","summary":"<p>Returns whether this collection includes a library with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":99,"url":null},"def":{"name":"has_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@libraries.has_key?(id)"}},{"html_id":"load_library?(id:String):Library|Nil-instance-method","name":"load_library?","doc":"Tries to load a library (aka shared object) with the given\n*id*. Returns the resulting `Library` object, or nil.\n\nThe library object is cached: further calls to `load_library?`\nand `get_library?` will return that library object.","summary":"<p>Tries to load a library (aka shared object) with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/capability.cr","line_number":190,"url":null},"def":{"name":"load_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Library | ::Nil","visibility":"Public","body":"@libraries.fetch(id) do\n  @load_library_callbacks.each do |callback|\n    if library = callback.call(id)\n      return @libraries[id] = library\n    end\n  end\nend"}},{"html_id":"on_load_library?(&callback:String->Library|Nil)-instance-method","name":"on_load_library?","doc":"Subscribes *callback* to library load requests, so that\nwhenever the runtime needs a library, *callback* gets a\nchance to be invoked and load it.\n\n*callback* is only going to be invoked if all previously\ndefined callbacks failed (returned nil).\n\n*callback* should return a `Library` if it successfully\nloaded it; otherwise, it should return nil.","summary":"<p>Subscribes <em>callback</em> to library load requests, so that whenever the runtime needs a library, <em>callback</em> gets a chance to be invoked and load it.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":181,"url":null},"def":{"name":"on_load_library?","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(String -> Library | ::Nil)"},"visibility":"Public","body":"@load_library_callbacks << callback"}}]},{"html_id":"novika/Novika/CapabilityRequest","path":"Novika/CapabilityRequest.html","kind":"struct","full_name":"Novika::CapabilityRequest","name":"CapabilityRequest","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":95,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds information about a capability request.","summary":"<p>Holds information about a capability request.</p>","constructors":[{"html_id":"new(resolver:RunnableResolver,id:String,manual:Bool)-class-method","name":"new","abstract":false,"args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"id","external_name":"id","restriction":"::String"},{"name":"manual","external_name":"manual","restriction":"::Bool"}],"args_string":"(resolver : RunnableResolver, id : String, manual : Bool)","args_html":"(resolver : <a href=\"../Novika/RunnableResolver.html\">RunnableResolver</a>, id : <a href=\"../String.html\">String</a>, manual : Bool)","location":{"filename":"src/novika/resolver.cr","line_number":107,"url":null},"def":{"name":"new","args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"id","external_name":"id","restriction":"::String"},{"name":"manual","external_name":"manual","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resolver, id, manual)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if root == other.root\nelse\n  return false\nend\nif id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"allowed?(always_ask=false,&:self->Bool):Bool-instance-method","name":"allowed?","doc":"Returns whether this capability request is allowed by the user.\n\nThis capability request is always allowed if it is provided\nmanually.\n\nIf not, tries reading the permissions file in the Novika\nenvironment directory. If the user had made the decision\nalready, returns that decision. Otherwise, yields, assuming\nthe block will ask the user to decide. If the return value\nof the block is true, it is written as the decision to the\npermissions file. The decision is returned.\n\n*always_ask* can be used to force the user to decide with the\nhelp of the block, regardless of what is in the permissions\nfile. The new decision will then be written to the\npermissions file.\n\nIf the permissions file is invalid for some reason, it\nis left intact; in such case, the user will have to decide\nanew every time, as if there was no permissions file at all.","summary":"<p>Returns whether this capability request is allowed by the user.</p>","abstract":false,"args":[{"name":"always_ask","default_value":"false","external_name":"always_ask","restriction":""}],"args_string":"(always_ask = false, & : self -> Bool) : Bool","args_html":"(always_ask = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> Bool) : Bool","location":{"filename":"src/novika/resolver.cr","line_number":131,"url":null},"def":{"name":"allowed?","args":[{"name":"always_ask","default_value":"false","external_name":"always_ask","restriction":""}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self -> Bool)"},"return_type":"Bool","visibility":"Public","body":"if manual?\n  return true\nend\n@resolver.permissions do |io|\n  rows = CSV.parse(io)\n  valid = rows.all? do |row|\n    (row.size == 3) && (row[2].in?(PERMISSION_NO, PERMISSION_YES))\n  end\n  if valid && always_ask\n    rows.reject! do |__arg0|\n      root = __arg0[0]\n      id = __arg0[1]\n      {root, id} == {@root.to_s, @id}\n    end\n  else\n    if valid\n      rows.each do |__arg1|\n        root = __arg1[0]\n        id = __arg1[1]\n        perm = __arg1[2]\n        if {root, id} == {@root.to_s, @id}\n          return perm == PERMISSION_YES\n        end\n      end\n    end\n  end\n  perm = yield self\n  if valid\n  else\n    return perm\n  end\n  io.rewind\n  CSV.build(io) do |csv|\n    rows.each do |row|\n      csv.row(row)\n    end\n    if perm\n      csv.row(@root, @id, PERMISSION_YES)\n    end\n  end\n  return perm\nend\nfalse\n"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = root.hash(hasher)\nhasher = id.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of the capability.","summary":"<p>Returns the identifier of the capability.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":101,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"manual?:Bool-instance-method","name":"manual?","doc":"Returns whether the request was typed in maually (true),\nor picked up from a .nk.lib or .nk.app file (false).","summary":"<p>Returns whether the request was typed in maually (true), or picked up from a .nk.lib or .nk.app file (false).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":105,"url":null},"def":{"name":"manual?","return_type":"Bool","visibility":"Public","body":"@manual"}},{"html_id":"root:Path-instance-method","name":"root","doc":"Returns the path to the folder for which the capability\nwas requested.","summary":"<p>Returns the path to the folder for which the capability was requested.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":98,"url":null},"def":{"name":"root","return_type":"Path","visibility":"Public","body":"@root"}}]},{"html_id":"novika/Novika/CaptureMode","path":"Novika/CaptureMode.html","kind":"enum","full_name":"Novika::CaptureMode","name":"CaptureMode","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":24,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"CaptureAll","name":"CaptureAll","value":"0"},{"id":"CaptureNeighborhood","name":"CaptureNeighborhood","value":"1"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"capture_all?-instance-method","name":"capture_all?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":25,"url":null},"def":{"name":"capture_all?","visibility":"Public","body":"self == CaptureAll"}},{"html_id":"capture_neighborhood?-instance-method","name":"capture_neighborhood?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":26,"url":null},"def":{"name":"capture_neighborhood?","visibility":"Public","body":"self == CaptureNeighborhood"}}]},{"html_id":"novika/Novika/Classifier","path":"Novika/Classifier.html","kind":"struct","full_name":"Novika::Classifier","name":"Classifier","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/classifier.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"`Classifier` brings *unclassified forms* to life.\n\n`Classifier` assigns types to fragments of Novika code\nconveniently called *unclassified forms*: this\nunclassified form is a decimal, this one is a word, that\none is a quote.\n\nUnclassified forms are given to `Classifier` by `Scissors`,\nan object dedicated to cutting a big blob of Novika code\ninto smaller fragments.\n\n`Scissors` and `Classifier` are designed to work in\ntandem. Separating one from the other is possible and will\nwork, but is not recommended unless you have read the source\ncode of both.","summary":"<p><code><a href=\"../Novika/Classifier.html\">Classifier</a></code> brings <em>unclassified forms</em> to life.</p>","constructors":[{"html_id":"new(source:String,block:Novika::Block)-class-method","name":"new","doc":"Initializes a classifier from the given *source* string and\nNovika *block*.\n\n*block* is treated as the ceiling (toplevel) block for\n*source*, meaning you can't close it in *source*, and\nit doesn't need to be open.","summary":"<p>Initializes a classifier from the given <em>source</em> string and Novika <em>block</em>.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"block","external_name":"block","restriction":"Novika::Block"}],"args_string":"(source : String, block : Novika::Block)","args_html":"(source : <a href=\"../String.html\">String</a>, block : <a href=\"../Novika/Block.html\">Novika::Block</a>)","location":{"filename":"src/novika/classifier.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"block","external_name":"block","restriction":"Novika::Block"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source, block)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"block:Novika::Block-instance-method","name":"block","doc":"Returns the block used by this classifier.","summary":"<p>Returns the block used by this classifier.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":21,"url":null},"def":{"name":"block","visibility":"Public","body":"@block"}},{"html_id":"bytes:Pointer(UInt8)-instance-method","name":"bytes","doc":"Returns the source code byte pointer used by this classifier.","summary":"<p>Returns the source code byte pointer used by this classifier.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":18,"url":null},"def":{"name":"bytes","visibility":"Public","body":"@bytes"}},{"html_id":"classify(start,count,dot):Nil-instance-method","name":"classify","doc":"Classifies the subrange starting at byte index *start*,\nand *count* bytes long. *dot* is the byte index of `'.'`.\n\nThese three arguments are assumed to come from `Scissors#cut`.\n\nThis method does practically no bounds checks, is unsafe\nand must be worked with carefully.","summary":"<p>Classifies the subrange starting at byte index <em>start</em>, and <em>count</em> bytes long.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""},{"name":"dot","external_name":"dot","restriction":""}],"args_string":"(start, count, dot) : Nil","args_html":"(start, count, dot) : Nil","location":{"filename":"src/novika/classifier.cr","line_number":207,"url":null},"def":{"name":"classify","args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""},{"name":"dot","external_name":"dot","restriction":""}],"return_type":"Nil","visibility":"Public","body":"if count.zero?\n  return\nend\nbyte = @bytes[start]\ncase byte\nwhen '['\n  nest\nwhen ']'\n  unnest\nwhen '#'\n  if count > 1\n    add(Novika::QuotedWord.new(build_raw(start + 1, count - 1)))\n  else\n    add(Novika::Word.new(\"#\"))\n  end\nwhen '\\''\n  add(Novika::Quote.new(build_quote(start + 1, count - 2)))\nwhen '\"'\n  if block.has_comment?\n    return\n  end\n  if block.count.zero?\n  else\n    return\n  end\n  block.describe_with?(build_comment(start + 1, count - 2))\nelse\n  e = (start + count) - 1\n  if dot\n  else\n    frag = build_raw(start, count)\n    if decimal?(start, e, sign: true)\n      add(Novika::Decimal.new(frag))\n    else\n      if number_with_base = number_with_base?(frag)\n        number, base = number_with_base\n        add(Novika::Decimal.new(number.to_big_i(base)))\n      else\n        add(Novika::Word.new(frag))\n      end\n    end\n    return\n  end\n  if ((start < dot && dot < e) && (decimal?(start, dot - 1, sign: true))) && (decimal?(dot + 1, e))\n    add(Novika::Decimal.new(build_raw(start, count)))\n  else\n    classify(start, dot - start, dot: nil)\n    add(Novika::Word.new(\".\"))\n    classify(dot + 1, e - dot)\n  end\nend\n"}},{"html_id":"classify(start,count)-instance-method","name":"classify","doc":"Classifies the subrange starting at byte index *start*,\nand *count* bytes long.","summary":"<p>Classifies the subrange starting at byte index <em>start</em>, and <em>count</em> bytes long.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""}],"args_string":"(start, count)","args_html":"(start, count)","location":{"filename":"src/novika/classifier.cr","line_number":287,"url":null},"def":{"name":"classify","args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""}],"visibility":"Public","body":"dot = nil\nstart.upto((start + count) - 1) do |index|\n  if @bytes[index] === '.'\n    dot = index\n    break\n  end\nend\nclassify(start, count, dot)\n"}},{"html_id":"end-instance-method","name":"end","doc":"Ends classification. Makes sure all blocks are closed\n(have their corresponding `]`).","summary":"<p>Ends classification.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":300,"url":null},"def":{"name":"end","visibility":"Public","body":"if @ceiling.same?(@block)\nelse\n  @block.die(\"missing ']'\")\nend"}}]},{"html_id":"novika/Novika/Color","path":"Novika/Color.html","kind":"struct","full_name":"Novika::Color","name":"Color","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/color.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"class_methods":[{"html_id":"rgb(r,g,b)-class-method","name":"rgb","doc":"Creates a `Color` from *r*ed (0 <= h <= 255), *g*reen\n(0 <= g <= 255), *b*lue (0 <= b <= 255) channel values.","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>r</em>ed (0 &lt;= h &lt;= 255), <em>g</em>reen (0 &lt;= g &lt;= 255), <em>b</em>lue (0 &lt;= b &lt;= 255) channel values.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":""},{"name":"g","external_name":"g","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(r, g, b)","args_html":"(r, g, b)","location":{"filename":"src/novika/forms/color.cr","line_number":88,"url":null},"def":{"name":"rgb","args":[{"name":"r","external_name":"r","restriction":""},{"name":"g","external_name":"g","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"rgb(Decimal.new(r), Decimal.new(g), Decimal.new(b))"}},{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":63,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"color\""}}],"constructors":[{"html_id":"hsl(h:Decimal,s:Decimal,l:Decimal):Color-class-method","name":"hsl","doc":"Creates a `Color` from *h*ue (0 <= h <= 360, degrees),\n*s*aturation (0 <= s <= 100, percents), and *l*ightness\n(0 <= l <= 100, percents).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>h</em>ue (0 &lt;= h &lt;= 360, degrees), <em>s</em>aturation (0 &lt;= s &lt;= 100, percents), and <em>l</em>ightness (0 &lt;= l &lt;= 100, percents).</p>","abstract":false,"args":[{"name":"h","external_name":"h","restriction":"Decimal"},{"name":"s","external_name":"s","restriction":"Decimal"},{"name":"l","external_name":"l","restriction":"Decimal"}],"args_string":"(h : Decimal, s : Decimal, l : Decimal) : Color","args_html":"(h : <a href=\"../Novika/Decimal.html\">Decimal</a>, s : <a href=\"../Novika/Decimal.html\">Decimal</a>, l : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":95,"url":null},"def":{"name":"hsl","args":[{"name":"h","external_name":"h","restriction":"Decimal"},{"name":"s","external_name":"s","restriction":"Decimal"},{"name":"l","external_name":"l","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"h = h.to_f64\ns = s.to_f64\nl = l.to_f64\ns = s / 100\nl = l / 100\nc = (1 - ((2 * l) - 1).abs) * s\nx = c * (1 - (((h / 60) % 2) - 1).abs)\nm = l - (c / 2)\nif h.in?(0...60)\n  rp, gp, bp = {c, x, 0}\nelse\n  if h.in?(60...120)\n    rp, gp, bp = {x, c, 0}\n  else\n    if h.in?(120...180)\n      rp, gp, bp = {0, c, x}\n    else\n      if h.in?(180...240)\n        rp, gp, bp = {0, x, c}\n      else\n        if h.in?(240...300)\n          rp, gp, bp = {x, 0, c}\n        else\n          if h.in?(300...360)\n            rp, gp, bp = {c, 0, x}\n          end\n        end\n      end\n    end\n  end\nend\nnew(Decimal.new(((rp.not_nil! + m) * 255).round), Decimal.new(((gp.not_nil! + m) * 255).round), Decimal.new(((bp.not_nil! + m) * 255).round))\n"}},{"html_id":"hsv(h,s,v):Color-class-method","name":"hsv","doc":"Creates a `Color` from *h*ue (0 <= h <= 360, degrees),\n*s*aturation (0 <= s <= 100, percents), and *v*alue\n(0 <= v <= 100, percents).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>h</em>ue (0 &lt;= h &lt;= 360, degrees), <em>s</em>aturation (0 &lt;= s &lt;= 100, percents), and <em>v</em>alue (0 &lt;= v &lt;= 100, percents).</p>","abstract":false,"args":[{"name":"h","external_name":"h","restriction":""},{"name":"s","external_name":"s","restriction":""},{"name":"v","external_name":"v","restriction":""}],"args_string":"(h, s, v) : Color","args_html":"(h, s, v) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":155,"url":null},"def":{"name":"hsv","args":[{"name":"h","external_name":"h","restriction":""},{"name":"s","external_name":"s","restriction":""},{"name":"v","external_name":"v","restriction":""}],"return_type":"Color","visibility":"Public","body":"h = h.to_f64\ns = s.to_f64\nv = v.to_f64\ns = s / 100\nv = v / 100\nc = v * s\nx = c * (1 - (((h / 60) % 2) - 1).abs)\nm = v - c\nif h.in?(0...60)\n  rp, gp, bp = {c, x, 0}\nelse\n  if h.in?(60...120)\n    rp, gp, bp = {x, c, 0}\n  else\n    if h.in?(120...180)\n      rp, gp, bp = {0, c, x}\n    else\n      if h.in?(180...240)\n        rp, gp, bp = {0, x, c}\n      else\n        if h.in?(240...300)\n          rp, gp, bp = {x, 0, c}\n        else\n          if h.in?(300...360)\n            rp, gp, bp = {c, 0, x}\n          end\n        end\n      end\n    end\n  end\nend\nnew(Decimal.new(((rp.not_nil! + m) * 255).round), Decimal.new(((gp.not_nil! + m) * 255).round), Decimal.new(((bp.not_nil! + m) * 255).round))\n"}},{"html_id":"lch(l:Decimal,c:Decimal,h:Decimal):Color-class-method","name":"lch","doc":"Creates a `Color` from *l*ightness (0-100), *c*hroma\n(0-132), *h*ue (0-360).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>l</em>ightness (0-100), <em>c</em>hroma (0-132), <em>h</em>ue (0-360).</p>","abstract":false,"args":[{"name":"l","external_name":"l","restriction":"Decimal"},{"name":"c","external_name":"c","restriction":"Decimal"},{"name":"h","external_name":"h","restriction":"Decimal"}],"args_string":"(l : Decimal, c : Decimal, h : Decimal) : Color","args_html":"(l : <a href=\"../Novika/Decimal.html\">Decimal</a>, c : <a href=\"../Novika/Decimal.html\">Decimal</a>, h : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":215,"url":null},"def":{"name":"lch","args":[{"name":"l","external_name":"l","restriction":"Decimal"},{"name":"c","external_name":"c","restriction":"Decimal"},{"name":"h","external_name":"h","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"l = l.to_f64\nc = c.to_f64\nh = h.to_f64\nr, g, b = LCH.lch2rgb(l, c, h)\nnew(Decimal.new(r), Decimal.new(g), Decimal.new(b))\n"}},{"html_id":"rgb(r:Decimal,g:Decimal,b:Decimal):Color-class-method","name":"rgb","doc":"Creates a `Color` from *r*ed (0 <= h <= 255), *g*reen\n(0 <= g <= 255), *b*lue (0 <= b <= 255) channel values.","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>r</em>ed (0 &lt;= h &lt;= 255), <em>g</em>reen (0 &lt;= g &lt;= 255), <em>b</em>lue (0 &lt;= b &lt;= 255) channel values.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"Decimal"},{"name":"g","external_name":"g","restriction":"Decimal"},{"name":"b","external_name":"b","restriction":"Decimal"}],"args_string":"(r : Decimal, g : Decimal, b : Decimal) : Color","args_html":"(r : <a href=\"../Novika/Decimal.html\">Decimal</a>, g : <a href=\"../Novika/Decimal.html\">Decimal</a>, b : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":83,"url":null},"def":{"name":"rgb","args":[{"name":"r","external_name":"r","restriction":"Decimal"},{"name":"g","external_name":"g","restriction":"Decimal"},{"name":"b","external_name":"b","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"new(r, g, b)"}}],"instance_methods":[{"html_id":"a:Decimal-instance-method","name":"a","doc":"Holds alpha channel value decimal (0-255).\n\nYou can mutate this to set alpha, but do remember that\n`Color` is a struct.","summary":"<p>Holds alpha channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":20,"url":null},"def":{"name":"a","return_type":"Decimal","visibility":"Public","body":"@a"}},{"html_id":"a=(a:Decimal)-instance-method","name":"a=","doc":"Holds alpha channel value decimal (0-255).\n\nYou can mutate this to set alpha, but do remember that\n`Color` is a struct.","summary":"<p>Holds alpha channel value decimal (0-255).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Decimal"}],"args_string":"(a : Decimal)","args_html":"(a : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/forms/color.cr","line_number":20,"url":null},"def":{"name":"a=","args":[{"name":"a","external_name":"a","restriction":"Decimal"}],"visibility":"Public","body":"@a = a"}},{"html_id":"b:Decimal-instance-method","name":"b","doc":"Returns blue channel value decimal (0-255).","summary":"<p>Returns blue channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":14,"url":null},"def":{"name":"b","return_type":"Decimal","visibility":"Public","body":"@b"}},{"html_id":"closest(palette:Array(Color))-instance-method","name":"closest","doc":"Returns the color closest to this color from *palette*.\n\nHow close one color is to another is determined by their\ndistance in an HSV-backed coordinate system.","summary":"<p>Returns the color closest to this color from <em>palette</em>.</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"Array(Color)"}],"args_string":"(palette : Array(Color))","args_html":"(palette : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Color.html\">Color</a>))","location":{"filename":"src/novika/forms/color.cr","line_number":55,"url":null},"def":{"name":"closest","args":[{"name":"palette","external_name":"palette","restriction":"Array(Color)"}],"visibility":"Public","body":"h, s, v = hsv\npalette.min_by do |other|\n  h1, s1, v1 = other.hsv\n  (((h1 - h).to_f64 ** 2) + ((s1 - s).to_f64 ** 2)) + ((v1 - v).to_f64 ** 2)\nend\n"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/color.cr","line_number":67,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"g:Decimal-instance-method","name":"g","doc":"Returns green channel value decimal (0-255).","summary":"<p>Returns green channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":11,"url":null},"def":{"name":"g","return_type":"Decimal","visibility":"Public","body":"@g"}},{"html_id":"hsl:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"hsl","doc":"Returns a tuple with H, S, L of this color.","summary":"<p>Returns a tuple with H, S, L of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":31,"url":null},"def":{"name":"hsl","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"h, s, l = Color.rgb2hsl(r.to_f64, g.to_f64, b.to_f64)\n{Decimal.new(h), Decimal.new(s), Decimal.new(l)}\n"}},{"html_id":"hsv:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"hsv","doc":"Returns a tuple with H, S, V of this color.","summary":"<p>Returns a tuple with H, S, V of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":38,"url":null},"def":{"name":"hsv","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"h, s, v = Color.rgb2hsv(r.to_f64, g.to_f64, b.to_f64)\n{Decimal.new(h), Decimal.new(s), Decimal.new(v)}\n"}},{"html_id":"lch:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"lch","doc":"Returns a tuple with L, C, H of this color.","summary":"<p>Returns a tuple with L, C, H of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":45,"url":null},"def":{"name":"lch","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"l, c, h = LCH.rgb2lch(r.to_i, g.to_i, b.to_i)\n{Decimal.new(l.round), Decimal.new(c.round), Decimal.new(h.round)}\n"}},{"html_id":"r:Decimal-instance-method","name":"r","doc":"Returns red channel value decimal (0-255).","summary":"<p>Returns red channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":8,"url":null},"def":{"name":"r","return_type":"Decimal","visibility":"Public","body":"@r"}},{"html_id":"rgb:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"rgb","doc":"Returns a tuple of R, G, B channel values.","summary":"<p>Returns a tuple of R, G, B channel values.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":26,"url":null},"def":{"name":"rgb","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"{r, g, b}"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/color.cr","line_number":71,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"a255 = Decimal.new(255)\nio << \"rgb\"\nif a == a255\nelse\n  io << \"a\"\nend\n(((((io << \"(\") << r) << \", \") << g) << \", \") << b\nif a == a255\nelse\n  (io << \", \") << a\nend\nio << \")\"\n"}}]},{"html_id":"novika/Novika/ColorSnapshot","path":"Novika/ColorSnapshot.html","kind":"class","full_name":"Novika::ColorSnapshot","name":"ColorSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":95,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ColorSnapshot]","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: r, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: g, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: b, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: a, cls: UInt8, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Color)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Color"}],"args_string":"(form : Color)","args_html":"(form : <a href=\"../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/image.cr","line_number":116,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Color"}],"visibility":"Public","body":"color = new\ncolor.r = form.r.to_u8\ncolor.g = form.g.to_u8\ncolor.b = form.b.to_u8\ncolor.a = form.a.to_u8\ncolor\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":96,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"a:UInt8-instance-method","name":"a","doc":"Holds alpha channel value, a u8 0-255.","summary":"<p>Holds alpha channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"a","return_type":"UInt8","visibility":"Public","body":"@a"}},{"html_id":"a=(a:UInt8)-instance-method","name":"a=","doc":"Holds alpha channel value, a u8 0-255.","summary":"<p>Holds alpha channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"UInt8"}],"args_string":"(a : UInt8)","args_html":"(a : UInt8)","def":{"name":"a=","args":[{"name":"a","external_name":"a","restriction":"UInt8"}],"visibility":"Public","body":"@a = a"}},{"html_id":"b:UInt8-instance-method","name":"b","doc":"Holds blue channel value, a u8 0-255.","summary":"<p>Holds blue channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"b","return_type":"UInt8","visibility":"Public","body":"@b"}},{"html_id":"b=(b:UInt8)-instance-method","name":"b=","doc":"Holds blue channel value, a u8 0-255.","summary":"<p>Holds blue channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"args_string":"(b : UInt8)","args_html":"(b : UInt8)","def":{"name":"b=","args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"visibility":"Public","body":"@b = b"}},{"html_id":"g:UInt8-instance-method","name":"g","doc":"Holds green channel value, a u8 0-255.","summary":"<p>Holds green channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"g","return_type":"UInt8","visibility":"Public","body":"@g"}},{"html_id":"g=(g:UInt8)-instance-method","name":"g=","doc":"Holds green channel value, a u8 0-255.","summary":"<p>Holds green channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"args_string":"(g : UInt8)","args_html":"(g : UInt8)","def":{"name":"g=","args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"visibility":"Public","body":"@g = g"}},{"html_id":"r:UInt8-instance-method","name":"r","doc":"Holds red channel value, a u8 0-255.","summary":"<p>Holds red channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"r","return_type":"UInt8","visibility":"Public","body":"@r"}},{"html_id":"r=(r:UInt8)-instance-method","name":"r=","doc":"Holds red channel value, a u8 0-255.","summary":"<p>Holds red channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"args_string":"(r : UInt8)","args_html":"(r : UInt8)","def":{"name":"r=","args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"visibility":"Public","body":"@r = r"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":110,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"color = Color.rgb(Decimal.new(r), Decimal.new(g), Decimal.new(b))\ncolor.a = Decimal.new(a)\ncolor\n"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Decimal","path":"Novika/Decimal.html","kind":"struct","full_name":"Novika::Decimal","name":"Decimal","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/decimal.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A representation for decimal numbers inside Novika.","summary":"<p>A representation for decimal numbers inside Novika.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":26,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"decimal\""}}],"constructors":[{"html_id":"new(val:BigDecimal)-class-method","name":"new","abstract":false,"args":[{"name":"val","external_name":"val","restriction":"BigDecimal"}],"args_string":"(val : BigDecimal)","args_html":"(val : BigDecimal)","location":{"filename":"src/novika/forms/decimal.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"val","external_name":"val","restriction":"BigDecimal"}],"visibility":"Public","body":"_ = allocate\n_.initialize(val)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(object:String|Number)-class-method","name":"new","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"String | Number"}],"args_string":"(object : String | Number)","args_html":"(object : <a href=\"../String.html\">String</a> | Number)","location":{"filename":"src/novika/forms/decimal.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"object","external_name":"object","restriction":"String | Number"}],"visibility":"Public","body":"_ = allocate\n_.initialize(object)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"%(other:Decimal):Decimal-instance-method","name":"%","doc":"Returns the remainder of this and *other* decimal numbers.","summary":"<p>Returns the remainder of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":74,"url":null},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"self - (other * (self / other).floor)"}},{"html_id":"*(other:Decimal):Decimal-instance-method","name":"*","doc":"Returns the product of this and *other* decimal numbers.","summary":"<p>Returns the product of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":64,"url":null},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val * other.val)"}},{"html_id":"**(other:Decimal):Decimal-instance-method","name":"**","doc":"Raises this decimal to the power of *other*.","summary":"<p>Raises this decimal to the power of <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":79,"url":null},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"if val.scale.zero? && other.val.scale.zero?\n  return Decimal.new(val ** other.val.to_i64)\nend\nDecimal.new(val.to_f64 ** other.to_f64)\n"}},{"html_id":"+(other:Decimal):Decimal-instance-method","name":"+","doc":"Returns the sum of this and *other* decimal numbers.","summary":"<p>Returns the sum of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":54,"url":null},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val + other.val)"}},{"html_id":"-(other:Decimal):Decimal-instance-method","name":"-","doc":"Returns the difference between this and *other* decimal numbers.","summary":"<p>Returns the difference between this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":59,"url":null},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val - other.val)"}},{"html_id":"/(other:Decimal):Decimal-instance-method","name":"/","doc":"Returns the quotient of this and *other* decimal numbers.","summary":"<p>Returns the quotient of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":69,"url":null},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val / other.val)"}},{"html_id":"<(other:Decimal):Bool-instance-method","name":"<","doc":"Returns whether this decimal is smaller than *other*.","summary":"<p>Returns whether this decimal is smaller than <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Bool","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : Bool","location":{"filename":"src/novika/forms/decimal.cr","line_number":93,"url":null},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Bool","visibility":"Public","body":"val < other.val"}},{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if val == other.val\nelse\n  return false\nend\ntrue\n"}},{"html_id":"ceil:Decimal-instance-method","name":"ceil","doc":"Rounds this decimal up.","summary":"<p>Rounds this decimal up.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":113,"url":null},"def":{"name":"ceil","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.ceil)"}},{"html_id":"chr:Char-instance-method","name":"chr","doc":"Returns the character corresponding to this decimal.","summary":"<p>Returns the character corresponding to this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":31,"url":null},"def":{"name":"chr","return_type":"Char","visibility":"Public","body":"to_i.chr"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/decimal.cr","line_number":20,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"decimal number \"\nto_s(io)\n"}},{"html_id":"floor:Decimal-instance-method","name":"floor","doc":"Rounds this decimal down.","summary":"<p>Rounds this decimal down.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":108,"url":null},"def":{"name":"floor","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.floor)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = val.hash(hasher)\nhasher\n"}},{"html_id":"i64?-instance-method","name":"i64?","doc":"Returns whether this decimal is in the bounds of `Int64`.","summary":"<p>Returns whether this decimal is in the bounds of <code>Int64</code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":36,"url":null},"def":{"name":"i64?","visibility":"Public","body":"val.scale.zero? && (Int64::MIN <= (__temp_59 = val) && __temp_59 <= Int64::MAX)"}},{"html_id":"in(range):Decimal-instance-method","name":"in","doc":"Asserts this decimal is in *range*. Dies if it isn't.","summary":"<p>Asserts this decimal is in <em>range</em>.</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":""}],"args_string":"(range) : Decimal","args_html":"(range) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":128,"url":null},"def":{"name":"in","args":[{"name":"range","external_name":"range","restriction":""}],"return_type":"Decimal","visibility":"Public","body":"if range.includes?(val)\n  return self\nend\ndie(\"decimal out of range: expected #{range.begin} to: #{range.end}, got: #{self}\")\n"}},{"html_id":"posint:Decimal-instance-method","name":"posint","doc":"Asserts this decimal is a positive integer (i.e., >= 0).\nDies if it isn't.","summary":"<p>Asserts this decimal is a positive integer (i.e., &gt;= 0).</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":136,"url":null},"def":{"name":"posint","return_type":"Decimal","visibility":"Public","body":"if val >= 0 && (val == val.to_big_i)\n  return self\nend\ndie(\"decimal is not a positive integer: #{self}\")\n"}},{"html_id":"rad_cos:Decimal-instance-method","name":"rad_cos","doc":"Treats this decimal as radians, and returns cosine.","summary":"<p>Treats this decimal as radians, and returns cosine.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":118,"url":null},"def":{"name":"rad_cos","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.cos(val))"}},{"html_id":"rad_sin:Decimal-instance-method","name":"rad_sin","doc":"Treats this decimal as radians, and returns cosine.","summary":"<p>Treats this decimal as radians, and returns cosine.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":123,"url":null},"def":{"name":"rad_sin","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.sin(val))"}},{"html_id":"round:Decimal-instance-method","name":"round","doc":"Rounds this decimal.","summary":"<p>Rounds this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":98,"url":null},"def":{"name":"round","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.round)"}},{"html_id":"sqrt:Decimal-instance-method","name":"sqrt","doc":"Returns the square root of this decimal.","summary":"<p>Returns the square root of this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":88,"url":null},"def":{"name":"sqrt","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.sqrt(val))"}},{"html_id":"to_f32(*args,**options)-instance-method","name":"to_f32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_f32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_f32(*args, **options)"}},{"html_id":"to_f32(*args,**options,&)-instance-method","name":"to_f32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_f32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_f32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_f64(*args,**options)-instance-method","name":"to_f64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_f64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_f64(*args, **options)"}},{"html_id":"to_f64(*args,**options,&)-instance-method","name":"to_f64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_f64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_f64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i:Int32-instance-method","name":"to_i","doc":"Downgrades this decimal into an integer (`Int32`). Dies\nif too large.","summary":"<p>Downgrades this decimal into an integer (<code>Int32</code>).</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":47,"url":null},"def":{"name":"to_i","return_type":"Int32","visibility":"Public","body":"begin\n  val.to_i\nrescue OverflowError\n  die(\"overflow when downgrading a decimal: this decimal is too big\")\nend"}},{"html_id":"to_i16(*args,**options)-instance-method","name":"to_i16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i16(*args, **options)"}},{"html_id":"to_i16(*args,**options,&)-instance-method","name":"to_i16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i16(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i32(*args,**options)-instance-method","name":"to_i32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i32(*args, **options)"}},{"html_id":"to_i32(*args,**options,&)-instance-method","name":"to_i32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i64(*args,**options)-instance-method","name":"to_i64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i64(*args, **options)"}},{"html_id":"to_i64(*args,**options,&)-instance-method","name":"to_i64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i8(*args,**options)-instance-method","name":"to_i8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i8(*args, **options)"}},{"html_id":"to_i8(*args,**options,&)-instance-method","name":"to_i8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_i8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i8(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/decimal.cr","line_number":142,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << (val.scale.zero? ? val.value : val)"}},{"html_id":"to_u16(*args,**options)-instance-method","name":"to_u16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u16(*args, **options)"}},{"html_id":"to_u16(*args,**options,&)-instance-method","name":"to_u16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u16(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u32(*args,**options)-instance-method","name":"to_u32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u32(*args, **options)"}},{"html_id":"to_u32(*args,**options,&)-instance-method","name":"to_u32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u64(*args,**options)-instance-method","name":"to_u64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u64(*args, **options)"}},{"html_id":"to_u64(*args,**options,&)-instance-method","name":"to_u64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u8(*args,**options)-instance-method","name":"to_u8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u8(*args, **options)"}},{"html_id":"to_u8(*args,**options,&)-instance-method","name":"to_u8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":16,"url":null},"def":{"name":"to_u8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u8(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"trunc:Decimal-instance-method","name":"trunc","doc":"Truncates this decimal.","summary":"<p>Truncates this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":103,"url":null},"def":{"name":"trunc","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.trunc)"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns whether this decimal is zero.","summary":"<p>Returns whether this decimal is zero.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":41,"url":null},"def":{"name":"zero?","return_type":"Bool","visibility":"Public","body":"val.zero?"}}]},{"html_id":"novika/Novika/Dict","path":"Novika/Dict.html","kind":"struct","full_name":"Novika::Dict","name":"Dict","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/IDict","kind":"module","full_name":"Novika::IDict","name":"IDict"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":46,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/IDict","kind":"module","full_name":"Novika::IDict","name":"IDict"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Default dictionary protocol implementation: default block\ndictionary implementation. Uses a hash map for storage.\n\nNote: setting or getting with blocks as keys performs a\nlinear scan for now. The semantics for this is unstable.","summary":"<p>Default dictionary protocol implementation: default block dictionary implementation.</p>","instance_methods":[{"html_id":"copy:IDict-instance-method","name":"copy","doc":"Returns a *shallow* copy of this dictionary.","summary":"<p>Returns a <em>shallow</em> copy of this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":99,"url":null},"def":{"name":"copy","return_type":"IDict","visibility":"Public","body":"Dict.new(@store.dup)"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Yields key, value forms in this dictionary.","summary":"<p>Yields key, value forms in this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":103,"url":null},"def":{"name":"each","yields":2,"block_arity":2,"visibility":"Public","body":"@store.each do |k, v|\n  yield k, v\nend"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this dictionary currently stores no entries.","summary":"<p>Returns whether this dictionary currently stores no entries.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":91,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"@store.empty?"}},{"html_id":"get(name:Form,&):Entry|Nil-instance-method","name":"get","doc":"Returns the entry corresponding to *name* form in this\ndictionary, or yields with *name* and returns the block\nresult.","summary":"<p>Returns the entry corresponding to <em>name</em> form in this dictionary, or yields with <em>name</em> and returns the block result.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form, &) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, &) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":69,"url":null},"def":{"name":"get","args":[{"name":"name","external_name":"name","restriction":"Form"}],"yields":1,"block_arity":1,"return_type":"Entry | ::Nil","visibility":"Public","body":"if name.is_a?(Block)\n  @store.each do |k, v|\n    if k == name\n    else\n      next\n    end\n    return v\n  end\n  return yield name\nend\n@store.fetch(name) do\n  yield name\nend\n"}},{"html_id":"has?(name:Form):Bool-instance-method","name":"has?","doc":"Returns whether this dictionary has an entry corresponding\nto *name* form.","summary":"<p>Returns whether this dictionary has an entry corresponding to <em>name</em> form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":81,"url":null},"def":{"name":"has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"@store.has_key?(name)"}},{"html_id":"import!(donor:IDict)-instance-method","name":"import!","doc":"Imports entries from *donor* dictionary into this dictionary.\n\nEntries whose names are preceded by one or more `_` are\nnot imported (they are considered private).","summary":"<p>Imports entries from <em>donor</em> dictionary into this dictionary.</p>","abstract":false,"args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"args_string":"(donor : IDict)","args_html":"(donor : <a href=\"../Novika/IDict.html\">IDict</a>)","location":{"filename":"src/novika/dict.cr","line_number":85,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"visibility":"Public","body":"donor.each do |k, v|\n  if k.is_a?(Word) && (k.id.prefixed_by?(\"_\"))\n  else\n    set(k, v)\n  end\nend"}},{"html_id":"names:Array(Form)-instance-method","name":"names","doc":"Lists all name forms stored in this dictionary.","summary":"<p>Lists all name forms stored in this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":95,"url":null},"def":{"name":"names","return_type":"Array(Form)","visibility":"Public","body":"@store.keys"}},{"html_id":"set(name:Form,entry:Entry):Entry-instance-method","name":"set","doc":"Assigns *name* form to *entry* in this dictionary.","summary":"<p>Assigns <em>name</em> form to <em>entry</em> in this dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/dict.cr","line_number":57,"url":null},"def":{"name":"set","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"Entry","visibility":"Public","body":"if name.is_a?(Block)\n  @store.each_key do |k|\n    if k == name\n    else\n      next\n    end\n    @store[k] = entry\n    return entry\n  end\nend\n@store[name] = entry\n"}},{"html_id":"to_dict:Dict-instance-method","name":"to_dict","doc":"Converts this dictionary to the standard `Dict` implementation\n(used in e.g. serialization).","summary":"<p>Converts this dictionary to the standard <code><a href=\"../Novika/Dict.html\">Dict</a></code> implementation (used in e.g.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":107,"url":null},"def":{"name":"to_dict","return_type":"Dict","visibility":"Public","body":"self"}}]},{"html_id":"novika/Novika/Engine","path":"Novika/Engine.html","kind":"class","full_name":"Novika::Engine","name":"Engine","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/engine.cr","line_number":79,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"C_BLOCK_AT","name":"C_BLOCK_AT","value":"0","doc":"Index of the code block in a continuation block.","summary":"<p>Index of the code block in a continuation block.</p>"},{"id":"C_STACK_AT","name":"C_STACK_AT","value":"1","doc":"Index of the stack block in a continuation block.","summary":"<p>Index of the stack block in a continuation block.</p>"},{"id":"MAX_CONTS","name":"MAX_CONTS","value":"1024","doc":"Maximum amount of scheduled continuations in `conts`. After\npassing this number, `Error` is raised to bring attention\nto such dangerous depth.","summary":"<p>Maximum amount of scheduled continuations in <code><a href=\"../Novika/Engine.html#conts%3ANovika%3A%3ABlock-instance-method\">#conts</a></code>.</p>"},{"id":"MAX_ENGINES","name":"MAX_ENGINES","value":"1024","doc":"Maximum number of engines that can be created.\n\nThis is for safety reasons only, particularly to prevent\ninfinite recursion in e.g. asserts which are called from\nCrystal rather than Novika, thereby circumventing `MAX_CONTS`\nchecks. See `Engine.count`.","summary":"<p>Maximum number of engines that can be created.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"An engine object is responsible for managing a *continuations block*.\n\nContinuations block consists of *continuatio**n** blocks*.\n\nCanonical continuation blocks themselves contain two blocks\n(see `Engine.cont`):\n\n- *Code block*, more commonly known as simply the block\n  (and as *active* block when its continuation is active,\n   i.e., when it's being evaluated),\n\n- *Stack block*, more commonly known as simply the stack\n  (and as *active* stack when its continuation is active,\n   i.e., when it's being evaluated).\n\n`Engine#schedule` is used to create a continuation block\ngiven a `Schedulable` object (usually a `Form`, and in rarer\ncases an `Entry`) and a stack block. It then adds the\ncontinuation block to the continuations block -- effectively\nscheduling it for execution *on the next exhaust loop cycle*.\n\nNote that there are two other methods linked with execution\nand implemented by all forms: `on_open`, and `on_parent_open`.\nThey *perform* whatever action the form wants rather than\nsimply *scheduling* it to be performed some time in the\nfuture. Namely, `on_open` is invoked whenever the form at\nhand is itself the target of opening (aka execution, aka\nevaluation), and `on_parent_open` is invoked when a block\ncontaining the form at hand (its parent block) is the target\nof opening.\n\nAn engine's *exhaust loop* is where most of the magic happens.\nIt is organized very much like the fetch-decode-execute cycle\nin CPUs.\n\nFor *fetch*, the engine finds the top (see `Block#top`)\ncontinuation block, then finds the top form on the code\nblock, and invokes the `on_parent_open` method on it.\n\nThis method is  analogous to *decoding* followed by *execution*.\nThe form is free to choose how it wants to make sense of itself,\ngiven an engine. Some forms (e.g. words) end up scheduling\nnew continuation blocks `on_parent_open`, making the engine\ngo through them first.\n\nAfter the cursor of the active block hits the end, `Engine`\ndrops (see `Block#drop`) the continuation block (thereby\n*closing* the code block).\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nblock = Block.new(caps.block).slurp(\"1 2 +\")\nstack = Block.new\n\nengine = Engine.new(caps)\nengine.schedule(block, stack)\nengine.exhaust\n\nputs stack # [ 3 ]\n\n# Or, shorter:\n\ncaps = CapabilityCollection.with_default.enable_all\nblock = Block.new(caps.block).slurp(\"1 2 +\")\n\nputs Engine.exhaust(caps, block) # [ 3 ]\n```","summary":"<p>An engine object is responsible for managing a <em>continuations block</em>.</p>","class_methods":[{"html_id":"cont(*,block,stack)-class-method","name":"cont","doc":"Creates and returns a canonical continuation block.\n\nA continuation block must include two blocks: the first is\ncalled simply the *block* (found at `C_BLOCK_AT`), and the\nsecond is called the *stack* block (found at `C_STACK_AT`).","summary":"<p>Creates and returns a canonical continuation block.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":""},{"name":"stack","external_name":"stack","restriction":""}],"args_string":"(*, block, stack)","args_html":"(*, block, stack)","location":{"filename":"src/novika/engine.cr","line_number":170,"url":null},"def":{"name":"cont","args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":""},{"name":"stack","external_name":"stack","restriction":""}],"splat_index":0,"visibility":"Public","body":"Block[block, stack]"}},{"html_id":"current-class-method","name":"current","doc":"Returns the current engine. Raises a BUG exception if\nthere is no current engine.","summary":"<p>Returns the current engine.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":109,"url":null},"def":{"name":"current","visibility":"Public","body":"@@stack.last? || (raise(\"BUG: there is no current engine\"))"}},{"html_id":"exhaust(capabilities:CapabilityCollection,schedulable,stack=nil):Block-class-method","name":"exhaust","doc":"Schedules *schedulable* and exhausts immediately. Returns the\nresulting *stack* (creates one if `nil`).\n\nUseful for when you need the result of *schedulable*\nimmediately.\n\nFor details see `Engine#schedule`.\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nresult = Engine.exhaust(caps, Block.new(caps.block).slurp(\"1 2 +\"))\nresult.top # 3 : Novika::Decimal\n```","summary":"<p>Schedules <em>schedulable</em> and exhausts immediately.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"args_string":"(capabilities : CapabilityCollection, schedulable, stack = nil) : Block","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, schedulable, stack = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/engine.cr","line_number":174,"url":null},"def":{"name":"exhaust","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"return_type":"Block","visibility":"Public","body":"stack || (stack = Block.new)\nEngine.new(capabilities) do |engine|\n  engine.schedule(schedulable, stack)\n  engine.exhaust\nend\nstack\n"}},{"html_id":"exhaust!(capabilities:CapabilityCollection,schedulable,stack=nil):Block-class-method","name":"exhaust!","doc":"Schedules *schedulable* and exhausts immediately. Returns the\nresulting *stack* (creates one if `nil`).\n\nUseful for when you need the result of *schedulable*\nimmediately.\n\nFor details see `Engine#schedule!`.\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nresult = Engine.exhaust(caps, Block.new(caps.block).slurp(\"1 2 +\"))\nresult.top # 3 : Novika::Decimal\n```","summary":"<p>Schedules <em>schedulable</em> and exhausts immediately.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"args_string":"(capabilities : CapabilityCollection, schedulable, stack = nil) : Block","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, schedulable, stack = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/engine.cr","line_number":174,"url":null},"def":{"name":"exhaust!","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"return_type":"Block","visibility":"Public","body":"stack || (stack = Block.new)\nEngine.new(capabilities) do |engine|\n  engine.schedule!(schedulable, stack)\n  engine.exhaust\nend\nstack\n"}},{"html_id":"pop(engine:Engine):Engine|Nil-class-method","name":"pop","doc":"Pops *engine* from the engine stack. Raises a BUG exception\n(and does not pop!) if the current engine is not *engine*\n(or if it is absent).","summary":"<p>Pops <em>engine</em> from the engine stack.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Engine | Nil","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <a href=\"../Novika/Engine.html\">Engine</a> | Nil","location":{"filename":"src/novika/engine.cr","line_number":135,"url":null},"def":{"name":"pop","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Engine | ::Nil","visibility":"Public","body":"if current.same?(engine)\nelse\n  raise(\"BUG: lost track of the engine stack: unexpected engine on top!\")\nend\n@@stack.pop\n"}},{"html_id":"push(caps:CapabilityCollection)-class-method","name":"push","doc":"Pushes a new engine with the given capability collection *caps*.\n\nMake sure that you `pop` it yourself or that you know what\nyou're doing!","summary":"<p>Pushes a new engine with the given capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/engine.cr","line_number":128,"url":null},"def":{"name":"push","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"push(new(caps))"}},{"html_id":"trackers-class-method","name":"trackers","doc":"Holds an array of exhaust tracker objects associated with\nall instances of `Engine`. These objects intercept forms\nbefore/after opening in `Engine#exhaust`. This e.g. allows\nfrontends to analyze/track forms and/or matching blocks.","summary":"<p>Holds an array of exhaust tracker objects associated with all instances of <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":103,"url":null},"def":{"name":"trackers","visibility":"Public","body":"@@trackers"}}],"constructors":[{"html_id":"new(capabilities:CapabilityCollection,&)-class-method","name":"new","doc":"Yields an instance of `Engine`.","summary":"<p>Yields an instance of <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"}],"args_string":"(capabilities : CapabilityCollection, &)","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, &)","location":{"filename":"src/novika/engine.cr","line_number":153,"url":null},"def":{"name":"new","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"}],"yields":1,"block_arity":1,"visibility":"Public","body":"engine = new(capabilities)\nEngine.push(engine)\nbegin\n  yield engine\nensure\n  Engine.pop(engine)\nend\n"}},{"html_id":"push(engine:Engine):Engine-class-method","name":"push","doc":"Pushes *engine* onto the engine stack.","summary":"<p>Pushes <em>engine</em> onto the engine stack.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Engine","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <a href=\"../Novika/Engine.html\">Engine</a>","location":{"filename":"src/novika/engine.cr","line_number":114,"url":null},"def":{"name":"push","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Engine","visibility":"Public","body":"if @@stack.size.in?(0..MAX_ENGINES)\nelse\n  raise(Error.new(\"bad engine stack depth: deep recursion in a __metaword__?\"))\nend\n@@stack << engine\nengine\n"}}],"instance_methods":[{"html_id":"block-instance-method","name":"block","doc":"Returns the block of the active continuation.","summary":"<p>Returns the block of the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":204,"url":null},"def":{"name":"block","visibility":"Public","body":"(cont.at(C_BLOCK_AT)).a(Block)"}},{"html_id":"capabilities:CapabilityCollection-instance-method","name":"capabilities","doc":"Returns the capability collection used by this engine.","summary":"<p>Returns the capability collection used by this engine.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":144,"url":null},"def":{"name":"capabilities","return_type":"CapabilityCollection","visibility":"Public","body":"@capabilities"}},{"html_id":"cont-instance-method","name":"cont","doc":"Returns the active continuation.","summary":"<p>Returns the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":199,"url":null},"def":{"name":"cont","visibility":"Public","body":"conts.top.a(Block)"}},{"html_id":"conts:Novika::Block-instance-method","name":"conts","doc":"Holds the continuations block (aka continuations stack).","summary":"<p>Holds the continuations block (aka continuations stack).</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":147,"url":null},"def":{"name":"conts","visibility":"Public","body":"@conts"}},{"html_id":"conts=(conts:Novika::Block)-instance-method","name":"conts=","doc":"Holds the continuations block (aka continuations stack).","summary":"<p>Holds the continuations block (aka continuations stack).</p>","abstract":false,"args":[{"name":"conts","external_name":"conts","restriction":"::Novika::Block"}],"args_string":"(conts : Novika::Block)","args_html":"(conts : <a href=\"../Novika/Block.html\">Novika::Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":147,"url":null},"def":{"name":"conts=","args":[{"name":"conts","external_name":"conts","restriction":"::Novika::Block"}],"visibility":"Public","body":"@conts = conts"}},{"html_id":"die(*args,**options)-instance-method","name":"die","doc":"See `Form#die`.","summary":"<p>See <code><a href=\"../Novika/Form.html#die%28details%3AString%29-instance-method\">Form#die</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/engine.cr","line_number":214,"url":null},"def":{"name":"die","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"block.die(*args, **options)"}},{"html_id":"die(*args,**options,&)-instance-method","name":"die","doc":"See `Form#die`.","summary":"<p>See <code><a href=\"../Novika/Form.html#die%28details%3AString%29-instance-method\">Form#die</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/engine.cr","line_number":214,"url":null},"def":{"name":"die","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"block.die(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"drop_until_death_handler?(avoid_prototype=nil)-instance-method","name":"drop_until_death_handler?","doc":"Returns the relevant death handler, or nil. Avoids\nhandlers whose prototype is *avoid_prototype*.\n\nTo find the relevant death handler, the continuations\nblock is inspected right-to-left (back-to-front); each\ncode block is then asked to retrieve `Word::DIED`\nusing `Block#at?`. Regardless of the result, the\ncontinuation block is then dropped.\n\nIf succeeded in retrieving `Word::DIED`, converts the\nresulting entry to block (does not distinguish between\nopeners and pushers). Returns that block.\n\nIf all continuations were exhausted and no `Hook.died`\nhad been found, returns nil.","summary":"<p>Returns the relevant death handler, or nil.</p>","abstract":false,"args":[{"name":"avoid_prototype","default_value":"nil","external_name":"avoid_prototype","restriction":""}],"args_string":"(avoid_prototype = nil)","args_html":"(avoid_prototype = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/engine.cr","line_number":271,"url":null},"def":{"name":"drop_until_death_handler?","args":[{"name":"avoid_prototype","default_value":"nil","external_name":"avoid_prototype","restriction":""}],"visibility":"Public","body":"while !conts.tape.empty?\n  entry = block.entry_for?(Hook.died)\n  conts.drop\n  if entry\n  else\n    next\n  end\n  handler = entry_to_death_handler_block(entry)\n  if avoid_prototype && (handler.prototype.same?(avoid_prototype))\n  else\n    return handler\n  end\nend"}},{"html_id":"execute(form:Form)-instance-method","name":"execute","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":285,"url":null},"def":{"name":"execute","args":[{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"begin\n  form.on_parent_open(self)\nrescue error : Error\n  error.conts || (error.conts = conts.instance)\n  if handler = drop_until_death_handler?(avoid_prototype: block.prototype)\n  else\n    raise(error)\n  end\n  schedule(handler, stack: conts.count.zero? ? Block[error] : stack.add(error))\nend"}},{"html_id":"exhaust-instance-method","name":"exhaust","doc":"Exhausts all scheduled continuations, starting from the\ntopmost (see `Block#top`) continuation in `conts`.","summary":"<p>Exhausts all scheduled continuations, starting from the topmost (see <code><a href=\"../Novika/Block.html#top%3AForm-instance-method\">Block#top</a></code>) continuation in <code><a href=\"../Novika/Engine.html#conts%3ANovika%3A%3ABlock-instance-method\">#conts</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":306,"url":null},"def":{"name":"exhaust","visibility":"Public","body":"while !conts.tape.empty?\n  while form = block.next?\n    Engine.trackers.each(&.on_form_begin(self, form))\n    execute(form)\n    Engine.trackers.each(&.on_form_end(self, form))\n  end\n  conts.drop\nend"}},{"html_id":"schedule(schedulable:Schedulable,stack:Block)-instance-method","name":"schedule","doc":"See `Schedulable#schedule`.","summary":"<p>See <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">Schedulable#schedule</a></code>.</p>","abstract":false,"args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(schedulable : Schedulable, stack : Block)","args_html":"(schedulable : <a href=\"../Novika/Schedulable.html\">Schedulable</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":238,"url":null},"def":{"name":"schedule","args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedulable.schedule(self, stack)"}},{"html_id":"schedule!(schedulable:Schedulable,stack:Block)-instance-method","name":"schedule!","doc":"See `Schedulable#schedule!`.","summary":"<p>See <code><a href=\"../Novika/Schedulable.html#schedule%21%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">Schedulable#schedule!</a></code>.</p>","abstract":false,"args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(schedulable : Schedulable, stack : Block)","args_html":"(schedulable : <a href=\"../Novika/Schedulable.html\">Schedulable</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":243,"url":null},"def":{"name":"schedule!","args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedulable.schedule!(self, stack)"}},{"html_id":"schedule!(other:Block)-instance-method","name":"schedule!","doc":"Main authorized point for adding continuations unsafely.\nReturns self.\n\nProvides protection from continuations stack overflow.\n\nAdding to `conts` (the unauthorized way) does not protect\none from continuations stack overflow, and therefore from\na memory usage explosion.","summary":"<p>Main authorized point for adding continuations unsafely.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block)","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":224,"url":null},"def":{"name":"schedule!","args":[{"name":"other","external_name":"other","restriction":"Block"}],"visibility":"Public","body":"if conts.count > MAX_CONTS\n  die(\"recursion or block open is too deep (> #{MAX_CONTS})\")\nend\ntap do\n  conts.add(other)\nend\n"}},{"html_id":"schedule!(*,block:Block,stack:Block)-instance-method","name":"schedule!","doc":"Schedules a continuation with the given *block* and *stack*.","summary":"<p>Schedules a continuation with the given <em>block</em> and <em>stack</em>.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":"Block"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(*, block : Block, stack : Block)","args_html":"(*, block : <a href=\"../Novika/Block.html\">Block</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":233,"url":null},"def":{"name":"schedule!","args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":"Block"},{"name":"stack","external_name":"stack","restriction":"Block"}],"splat_index":0,"visibility":"Public","body":"schedule!(Engine.cont(block: block, stack: stack))"}},{"html_id":"stack-instance-method","name":"stack","doc":"Returns the stack block of the active continuation.","summary":"<p>Returns the stack block of the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":209,"url":null},"def":{"name":"stack","visibility":"Public","body":"(cont.at(C_STACK_AT)).a(Block)"}}]},{"html_id":"novika/Novika/Entry","path":"Novika/Entry.html","kind":"class","full_name":"Novika::Entry","name":"Entry","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":114,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"subclasses":[{"html_id":"novika/Novika/OpenEntry","kind":"class","full_name":"Novika::OpenEntry","name":"OpenEntry"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a dictionary entry. Dictionary entries hold the\nvalue form.","summary":"<p>Represents a dictionary entry.</p>","constructors":[{"html_id":"new(form:Novika::Form)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"args_string":"(form : Novika::Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Novika::Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":120,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"visibility":"Public","body":"_ = allocate\n_.initialize(form)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif form == other.form\nelse\n  return false\nend\ntrue\n"}},{"html_id":"effect(*args,**options)-instance-method","name":"effect","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":124,"url":null},"def":{"name":"effect","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.effect(*args, **options)"}},{"html_id":"effect(*args,**options,&)-instance-method","name":"effect","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":124,"url":null},"def":{"name":"effect","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.effect(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"form:Form-instance-method","name":"form","doc":"Returns the form currently held by this entry.","summary":"<p>Returns the form currently held by this entry.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":118,"url":null},"def":{"name":"form","return_type":"Form","visibility":"Public","body":"@form"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = form.hash(hasher)\nhasher\n"}},{"html_id":"on_open(engine:Engine):Nil-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Nil","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : Nil","location":{"filename":"src/novika/dict.cr","line_number":127,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Nil","visibility":"Public","body":"onto(engine.stack)\nnil\n"}},{"html_id":"onto(*args,**options)-instance-method","name":"onto","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":124,"url":null},"def":{"name":"onto","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.onto(*args, **options)"}},{"html_id":"onto(*args,**options,&)-instance-method","name":"onto","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":124,"url":null},"def":{"name":"onto","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.onto(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"submit(form:Novika::Form):self-instance-method","name":"submit","doc":"Makes *form* the value form of this entry.","summary":"<p>Makes <em>form</em> the value form of this entry.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"args_string":"(form : Novika::Form) : self","args_html":"(form : <a href=\"../Novika/Form.html\">Novika::Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/dict.cr","line_number":134,"url":null},"def":{"name":"submit","args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"return_type":"self","visibility":"Public","body":"@form = form\nself\n"}}]},{"html_id":"novika/Novika/Error","path":"Novika/Error.html","kind":"class","full_name":"Novika::Error","name":"Error","abstract":false,"superclass":{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/error.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_TRACE","name":"MAX_TRACE","value":"64","doc":"How many trace entries to display at max.","summary":"<p>How many trace entries to display at max.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds and accepts information about an error.\n\nErrors are raised when a certain case is undesired, unhandleable,\nor otherwise inappropriate to some form of computation.\n\nErrors can be *handled* and *unhandled*. *Unhandled* errors\ngenerate an error `report` (generally to STDERR, but this\ndepends on the frontend). They are fatal for the program\nthey occur in.\n\n*Death handlers*, or *death traps*, when set up in code blocks\nand/or their relatives, allow errors to be *handled*. For this\nreason, errors are Novika `Form`s, and can be manipulated,\nreported, and inspected from Novika.","summary":"<p>Holds and accepts information about an error.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":39,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"error\""}}],"constructors":[{"html_id":"new(details:String,form:Novika::Form|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"details","external_name":"details","restriction":"::String"},{"name":"form","default_value":"nil","external_name":"form","restriction":"::Novika::Form | ::Nil"}],"args_string":"(details : String, form : Novika::Form | Nil = nil)","args_html":"(details : <a href=\"../String.html\">String</a>, form : <a href=\"../Novika/Form.html\">Novika::Form</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/error.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"details","external_name":"details","restriction":"::String"},{"name":"form","default_value":"nil","external_name":"form","restriction":"::Novika::Form | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(details, form)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"conts:Block|Nil-instance-method","name":"conts","doc":"Holds a reference to the continuations block at the time\nof death.","summary":"<p>Holds a reference to the continuations block at the time of death.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":30,"url":null},"def":{"name":"conts","return_type":"Block | ::Nil","visibility":"Public","body":"@conts"}},{"html_id":"conts=(conts:Block|Nil)-instance-method","name":"conts=","doc":"Holds a reference to the continuations block at the time\nof death.","summary":"<p>Holds a reference to the continuations block at the time of death.</p>","abstract":false,"args":[{"name":"conts","external_name":"conts","restriction":"Block | ::Nil"}],"args_string":"(conts : Block | Nil)","args_html":"(conts : <a href=\"../Novika/Block.html\">Block</a> | Nil)","location":{"filename":"src/novika/error.cr","line_number":30,"url":null},"def":{"name":"conts=","args":[{"name":"conts","external_name":"conts","restriction":"Block | ::Nil"}],"visibility":"Public","body":"@conts = conts"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/error.cr","line_number":35,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"error: '\") << details) << \"'\""}},{"html_id":"details:String-instance-method","name":"details","doc":"Returns a string describing the reasons of this error.","summary":"<p>Returns a string describing the reasons of this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":23,"url":null},"def":{"name":"details","return_type":"String","visibility":"Public","body":"@details"}},{"html_id":"form:Form-instance-method","name":"form","doc":"Returns the form that (speculatively) caused this error.","summary":"<p>Returns the form that (speculatively) caused this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":26,"url":null},"def":{"name":"form","return_type":"Form","visibility":"Public","body":"if (value = @form).nil?\n  ::raise(NilAssertionError.new(\"Novika::Error#form cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"form?:Form|Nil-instance-method","name":"form?","doc":"Returns the form that (speculatively) caused this error.","summary":"<p>Returns the form that (speculatively) caused this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":26,"url":null},"def":{"name":"form?","return_type":"Form | ::Nil","visibility":"Public","body":"@form"}},{"html_id":"report(io:IO)-instance-method","name":"report","doc":"Reports about this error to *io*.\n\nNote: Colorize is used for colors and emphasis. If you\ndo not want Colorize in *io*, you can temporarily disable\nit by setting `Colorize.enabled = false`.","summary":"<p>Reports about this error to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/error.cr","line_number":48,"url":null},"def":{"name":"report","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"if conts = self.conts\n  b = Math.max(0, conts.count - MAX_TRACE)\n  e = conts.count\n  if b.zero?\n  else\n    ((io << \"  │ … \") << (b - 1)) << \" continuation(s) omitted …\"\n    io.puts\n  end\n  (b...e).each do |index|\n    io << \"  ╿ due to \"\n    cont = (conts.at(index)).as?(Block)\n    code = cont.try do |__arg0|\n      (__arg0.at?(Engine::C_BLOCK_AT)).as?(Block)\n    end\n    if cont && code\n    else\n      io.puts(\"[malformed continuation]\")\n      next\n    end\n    if top = code.top?\n      ((io << \"'\") << (top || \"[nothing]\").colorize.bold) << \"', which was opened here:\"\n    else\n      io << \"the following block:\"\n    end\n    io.puts\n    io << \"  │  \"\n    code.spot(io)\n    io.puts\n  end\nend\nif form?\n  io.puts(\"  ╿ this form is invalid, and is the cause of death:\")\n  (io << \"  │  \") << form\n  io.puts\nend\n(io << \"Sorry: \".colorize.red.bold) << details\ncase details.byte_at?(details.bytesize - 1)\nwhen '!', '?', '.'\nelse\n  io << '.'\nend\nio.puts\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/error.cr","line_number":96,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[\") << details) << \"]\""}}]},{"html_id":"novika/Novika/False","path":"Novika/False.html","kind":"struct","full_name":"Novika::False","name":"False","abstract":false,"superclass":{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},"ancestors":[{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":50,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a falsey `Boolean`. `False` is the only falsey\nform in Novika.","summary":"<p>Represents a falsey <code><a href=\"../Novika/Boolean.html\">Boolean</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":55,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"true"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/boolean.cr","line_number":51,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"boolean false\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher"}},{"html_id":"sel(a,b)-instance-method","name":"sel","doc":"Selects either *a* or *b*. Novika defines `False` to be the\nonly form selecting *b*. All other forms select *a*.","summary":"<p>Selects either <em>a</em> or <em>b</em>.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/novika/forms/boolean.cr","line_number":59,"url":null},"def":{"name":"sel","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"b"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/boolean.cr","line_number":63,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"false\""}}]},{"html_id":"novika/Novika/FFI","path":"Novika/FFI.html","kind":"module","full_name":"Novika::FFI","name":"FFI","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"types":[{"html_id":"novika/Novika/FFI/Cchar","path":"Novika/FFI/Cchar.html","kind":"struct","full_name":"Novika::FFI::Cchar","name":"Cchar","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":368,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of C char (a u8).\nIn Novika, char is represented by a single-character quote.","summary":"<p>Type-side and value-side representation of C char (a u8).</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":396,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Quote)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/ffi.cr","line_number":384,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"form.first_byte?.try do |byte|\n  new(byte)\nend"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":388,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form.to_u8)"}},{"html_id":"matches?(value:Cchar)-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Cchar"}],"args_string":"(value : Cchar)","args_html":"(value : <a href=\"../../Novika/FFI/Cchar.html\">Cchar</a>)","location":{"filename":"src/novika/ffi.cr","line_number":417,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"Cchar"}],"visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":421,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":400,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"char\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":413,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"new((box.as(::Pointer(UInt8))).value)"}}],"constructors":[{"html_id":"new(char:UInt8)-class-method","name":"new","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"UInt8"}],"args_string":"(char : UInt8)","args_html":"(char : UInt8)","location":{"filename":"src/novika/ffi.cr","line_number":372,"url":null},"def":{"name":"new","args":[{"name":"char","external_name":"char","restriction":"UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(char)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":404,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, @char)).as(::Pointer(Void))"}},{"html_id":"to_crystal-instance-method","name":"to_crystal","doc":"Returns the corresponding Crystal character.","summary":"<p>Returns the corresponding Crystal character.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":376,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@char.chr"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":380,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Quote.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":392,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"'\") << to_crystal) << \"'\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":408,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt8))).value = @char\nbase\n"}}]},{"html_id":"novika/Novika/FFI/Cstr","path":"Novika/FFI/Cstr.html","kind":"struct","full_name":"Novika::FFI::Cstr","name":"Cstr","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":428,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of C string (a u8 pointer).\nIn Novika, C string is represented by a quote.","summary":"<p>Type-side and value-side representation of C string (a u8 pointer).</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":456,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Quote)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/ffi.cr","line_number":460,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"new(form.string)"}},{"html_id":"matches?(value:Cstr)-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Cstr"}],"args_string":"(value : Cstr)","args_html":"(value : <a href=\"../../Novika/FFI/Cstr.html\">Cstr</a>)","location":{"filename":"src/novika/ffi.cr","line_number":486,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"Cstr"}],"visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":490,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":464,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"cstr\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":481,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"handle = Pointer(UInt8).new((box.as(::Pointer(UInt64))).value)\nhandle.null? ? UntypedPointer.none : new(String.new(handle))\n"}}],"constructors":[{"html_id":"new(string:String)-class-method","name":"new","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":432,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @string == (other.@string)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":468,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"write_to!((Pointer(UInt64).malloc(1)).as(::Pointer(Void)))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @string.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:String-instance-method","name":"to_crystal","doc":"Returns the corresponding Crystal string.","summary":"<p>Returns the corresponding Crystal string.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":436,"url":null},"def":{"name":"to_crystal","return_type":"String","visibility":"Public","body":"@string"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":440,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Quote.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":452,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"\\\"\") << to_crystal) << \"\\\"\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":472,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"bytes = Pointer(UInt8).malloc(@string.bytesize + 1)\nbytes.copy_from(@string.to_unsafe, @string.bytesize)\nbytes[@string.bytesize + 1] = 0\n(base.as(::Pointer(UInt64))).value = bytes.address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/DefaultTypeParser","path":"Novika/FFI/DefaultTypeParser.html","kind":"struct","full_name":"Novika::FFI::DefaultTypeParser","name":"DefaultTypeParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":143,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Allows all parse-able types, from ints to `nothing` to\nstructs and unions.","summary":"<p>Allows all parse-able types, from ints to <code>nothing</code> to structs and unions.</p>"},{"html_id":"novika/Novika/FFI/F32","path":"Novika/FFI/F32.html","kind":"struct","full_name":"Novika::FFI::F32","name":"F32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":238,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Float32`.","summary":"<p>Type-side and value-side representation of <code>Float32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:F32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"F32"}],"args_string":"(value : F32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/F32.html\">F32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"F32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.float"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"f32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"F32.new((box.as(::Pointer(Float32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Float32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_f32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Float32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/F64","path":"Novika/FFI/F64.html","kind":"struct","full_name":"Novika::FFI::F64","name":"F64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":239,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Float64`.","summary":"<p>Type-side and value-side representation of <code>Float64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:F64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"F64"}],"args_string":"(value : F64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/F64.html\">F64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"F64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.double"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"f64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"F64.new((box.as(::Pointer(Float64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Float64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_f64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Float64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/FixedArityFunction","path":"Novika/FFI/FixedArityFunction.html","kind":"struct","full_name":"Novika::FFI::FixedArityFunction","name":"FixedArityFunction","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},"ancestors":[{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1037,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Calls a fixed-arity C function.","summary":"<p>Calls a fixed-arity C function.</p>","constructors":[{"html_id":"new(id:String,handle:Pointer(Void),argtypes:Array(ForeignType),return_type:ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"argtypes","external_name":"argtypes","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"args_string":"(id : String, handle : Pointer(Void), argtypes : Array(ForeignType), return_type : ForeignType)","args_html":"(id : <a href=\"../../String.html\">String</a>, handle : Pointer(Void), argtypes : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), return_type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":1040,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"argtypes","external_name":"argtypes","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, handle, argtypes, return_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1058,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":"args = Array(ForeignValue).new(@argtypes.size)\n@argtypes.reverse_each do |argtype|\n  arg = argtype.from(block.drop)\n  arg.must_be_of(argtype)\n  args.unshift(arg)\nend\n(call(args)).to_form?\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1038,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}}]},{"html_id":"novika/Novika/FFI/ForeignType","path":"Novika/FFI/ForeignType.html","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":28,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for Novika FFI types.","summary":"<p>Base type for Novika FFI types.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":30,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":""}},{"html_id":"from(form:Form):ForeignValue-instance-method","name":"from","doc":"Instantiates a foreign value of this foreign type from\nthe given *form*.\n\nDies if conversion is impossible.","summary":"<p>Instantiates a foreign value of this foreign type from the given <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : ForeignValue","args_html":"(form : <a href=\"../../Novika/Form.html\">Form</a>) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":48,"url":null},"def":{"name":"from","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"ForeignValue","visibility":"Public","body":"(from?(form)) || (raise(Error.new(\"could not convert #{form} to foreign type #{self}\")))"}},{"html_id":"from?(form:Form):ForeignValue|Nil-instance-method","name":"from?","doc":"Instantiates a foreign value of this foreign type from\nthe given *form*.\n\nReturns nil if conversion is impossible.","summary":"<p>Instantiates a foreign value of this foreign type from the given <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : ForeignValue | Nil","args_html":"(form : <a href=\"../../Novika/Form.html\">Form</a>) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":56,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"ForeignValue | ::Nil","visibility":"Public","body":""}},{"html_id":"matches?(value:ForeignValue):Bool-instance-method","name":"matches?","doc":"Returns whether this type corresponds to the given *value*.","summary":"<p>Returns whether this type corresponds to the given <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(value : ForeignValue) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":60,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"ForeignValue"}],"return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":40,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"(to_ffi_type.@type).value.size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":37,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":true,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":34,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/ForeignValue","path":"Novika/FFI/ForeignValue.html","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/Cchar","kind":"struct","full_name":"Novika::FFI::Cchar","name":"Cchar"},{"html_id":"novika/Novika/FFI/Cstr","kind":"struct","full_name":"Novika::FFI::Cstr","name":"Cstr"},{"html_id":"novika/Novika/FFI/F32","kind":"struct","full_name":"Novika::FFI::F32","name":"F32"},{"html_id":"novika/Novika/FFI/F64","kind":"struct","full_name":"Novika::FFI::F64","name":"F64"},{"html_id":"novika/Novika/FFI/I16","kind":"struct","full_name":"Novika::FFI::I16","name":"I16"},{"html_id":"novika/Novika/FFI/I32","kind":"struct","full_name":"Novika::FFI::I32","name":"I32"},{"html_id":"novika/Novika/FFI/I64","kind":"struct","full_name":"Novika::FFI::I64","name":"I64"},{"html_id":"novika/Novika/FFI/I8","kind":"struct","full_name":"Novika::FFI::I8","name":"I8"},{"html_id":"novika/Novika/FFI/Nothing","kind":"struct","full_name":"Novika::FFI::Nothing","name":"Nothing"},{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Novika/FFI/U16","kind":"struct","full_name":"Novika::FFI::U16","name":"U16"},{"html_id":"novika/Novika/FFI/U32","kind":"struct","full_name":"Novika::FFI::U32","name":"U32"},{"html_id":"novika/Novika/FFI/U64","kind":"struct","full_name":"Novika::FFI::U64","name":"U64"},{"html_id":"novika/Novika/FFI/U8","kind":"struct","full_name":"Novika::FFI::U8","name":"U8"},{"html_id":"novika/Novika/FFI/UntypedPointer","kind":"struct","full_name":"Novika::FFI::UntypedPointer","name":"UntypedPointer"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for Novika FFI values (both heap & stack allocated).","summary":"<p>Base type for Novika FFI values (both heap &amp; stack allocated).</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":7,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":""}},{"html_id":"must_be_of(type:ForeignType)-instance-method","name":"must_be_of","doc":"Raises if this value is not of the given `ForeignType` *type*.","summary":"<p>Raises if this value is not of the given <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code> <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(type : ForeignType)","args_html":"(type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":20,"url":null},"def":{"name":"must_be_of","args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"visibility":"Public","body":"if type.matches?(self)\n  return\nend\nraise(Error.new(\"#{type} is incompatible with #{self}\"))\n"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":17,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":true,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":11,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/Function","path":"Novika/FFI/Function.html","kind":"struct","full_name":"Novika::FFI::Function","name":"Function","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1026,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/FFI/FixedArityFunction","kind":"struct","full_name":"Novika::FFI::FixedArityFunction","name":"FixedArityFunction"},{"html_id":"novika/Novika/FFI/VariadicFunction","kind":"struct","full_name":"Novika::FFI::VariadicFunction","name":"VariadicFunction"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for C function call interfaces.","summary":"<p>Base type for C function call interfaces.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1026,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":true,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1033,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":1028,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":""}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1026,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/I16","path":"Novika/FFI/I16.html","kind":"struct","full_name":"Novika::FFI::I16","name":"I16","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":234,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int16`.","summary":"<p>Type-side and value-side representation of <code>Int16</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int16).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I16):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I16"}],"args_string":"(value : I16) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I16.html\">I16</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I16"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint16"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i16\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I16.new((box.as(::Pointer(Int16))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int16).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int16-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i16\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int16))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I32","path":"Novika/FFI/I32.html","kind":"struct","full_name":"Novika::FFI::I32","name":"I32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":235,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int32`.","summary":"<p>Type-side and value-side representation of <code>Int32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I32"}],"args_string":"(value : I32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I32.html\">I32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint32"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I32.new((box.as(::Pointer(Int32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I64","path":"Novika/FFI/I64.html","kind":"struct","full_name":"Novika::FFI::I64","name":"I64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":236,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int64`.","summary":"<p>Type-side and value-side representation of <code>Int64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I64"}],"args_string":"(value : I64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I64.html\">I64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint64"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I64.new((box.as(::Pointer(Int64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I8","path":"Novika/FFI/I8.html","kind":"struct","full_name":"Novika::FFI::I8","name":"I8","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":233,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int8`.","summary":"<p>Type-side and value-side representation of <code>Int8</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I8):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I8"}],"args_string":"(value : I8) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I8.html\">I8</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I8"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i8\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I8.new((box.as(::Pointer(Int8))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int8).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int8-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i8\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int8))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/InlineStructType","path":"Novika/FFI/InlineStructType.html","kind":"struct","full_name":"Novika::FFI::InlineStructType","name":"InlineStructType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":785,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of an inline struct, e.g. one returned\nfrom a function or passed as an argument, aka stack-allocated\nstructs (like Crystal `struct`).","summary":"<p><em>Type-side</em> representation of an inline struct, e.g.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":790,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"Pointer(Void).malloc(self.sizeof)"}},{"html_id":"matches?(view:InlineStructView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"InlineStructView"}],"args_string":"(view : InlineStructView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/InlineStructView.html\">InlineStructView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":806,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"InlineStructView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":786,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"padded_size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":802,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.struct(@layout.map_desc_with_index do |__arg2|\n  __arg2.type.to_ffi_type\nend)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":810,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"~\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":798,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"box.null? ? UntypedPointer.none : view_for(box)"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":794,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"InlineStructView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/InlineStructView","path":"Novika/FFI/InlineStructView.html","kind":"struct","full_name":"Novika::FFI::InlineStructView","name":"InlineStructView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":975,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of an inline struct, aka\nstack-allocated struct. Allows to read and write fields (see\n`StructView`). Similar to the `.` operator in C.","summary":"<p><em>Value-side</em> representation of an inline struct, aka stack-allocated struct.</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":976,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":986,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"~⟨\"\nsuper(io)\nio << \"⟩\"\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":980,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"@handle.move_to(base, @layout.padded_size)\nbase\n"}}]},{"html_id":"novika/Novika/FFI/Nothing","path":"Novika/FFI/Nothing.html","kind":"struct","full_name":"Novika::FFI::Nothing","name":"Nothing","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":330,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of void. All value-side\nmethods raise.","summary":"<p>Type-side and value-side representation of void.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":345,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be allocated\")"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":361,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.void"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":353,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"void\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":357,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"Nothing.new"}}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":330,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":334,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be boxed\")"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":330,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":342,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":349,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"(void)\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":338,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be written\")"}}]},{"html_id":"novika/Novika/FFI/StructFieldDesc","path":"Novika/FFI/StructFieldDesc.html","kind":"struct","full_name":"Novika::FFI::StructFieldDesc","name":"StructFieldDesc","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":500,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Holds the description of a struct field: its id (purely for\nconvenience), type (one of `ForeignType`s), and, most\nimportantly, *offset*.","summary":"<p>Holds the description of a struct field: its id (purely for convenience), type (one of <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code>s), and, most importantly, <em>offset</em>.</p>","constructors":[{"html_id":"new(id:String,type:ForeignType,offset:UInt64)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"type","external_name":"type","restriction":"ForeignType"},{"name":"offset","external_name":"offset","restriction":"UInt64"}],"args_string":"(id : String, type : ForeignType, offset : UInt64)","args_html":"(id : <a href=\"../../String.html\">String</a>, type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>, offset : UInt64)","location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"type","external_name":"type","restriction":"ForeignType"},{"name":"offset","external_name":"offset","restriction":"UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, type, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@id.clone, @type.clone, @offset.clone)"}},{"html_id":"copy_with(id_id=@id,type_type=@type,offset_offset=@offset)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_id","default_value":"@id","external_name":"id","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_offset","default_value":"@offset","external_name":"offset","restriction":""}],"args_string":"(id _id = @id, type _type = @type, offset _offset = @offset)","args_html":"(id _id = @id, type _type = @type, offset _offset = @offset)","location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"copy_with","args":[{"name":"_id","default_value":"@id","external_name":"id","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_offset","default_value":"@offset","external_name":"offset","restriction":""}],"visibility":"Public","body":"self.class.new(_id, _type, _offset)"}},{"html_id":"fetch!(base:Pointer(Void)):ForeignValue-instance-method","name":"fetch!","doc":"offset, assuming *base* points to the start of the struct this\nfield is a member of.\n\nThe latter is not enforced; therefore, this method is considered\n**unsafe**.","summary":"<p>offset, assuming <em>base</em> points to the start of the struct this field is a member of.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : ForeignValue","args_html":"(base : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":507,"url":null},"def":{"name":"fetch!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"type.unbox(Pointer(Void).new(base.address + offset))"}},{"html_id":"id:String-instance-method","name":"id","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"offset:UInt64-instance-method","name":"offset","abstract":false,"def":{"name":"offset","return_type":"UInt64","visibility":"Public","body":"@offset"}},{"html_id":"put!(base:Pointer(Void),value:ForeignValue)-instance-method","name":"put!","doc":"Writes *value* at *base* plus this field's offset, assuming\n*base* points to the start of the struct this field is a\nmember of.\n\nThe latter is not enforced; therefore, this method is considered\n**unsafe**.","summary":"<p>Writes <em>value</em> at <em>base</em> plus this field's offset, assuming <em>base</em> points to the start of the struct this field is a member of.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(base : Pointer(Void), value : ForeignValue)","args_html":"(base : Pointer(Void), value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":517,"url":null},"def":{"name":"put!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"value.must_be_of(type)\nvalue.write_to!(Pointer(Void).new(base.address + offset))\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":522,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((((io << \"(\") << type) << \" \") << id) << \")\""}},{"html_id":"type:ForeignType-instance-method","name":"type","abstract":false,"def":{"name":"type","return_type":"ForeignType","visibility":"Public","body":"@type"}}]},{"html_id":"novika/Novika/FFI/StructLayout","path":"Novika/FFI/StructLayout.html","kind":"class","full_name":"Novika::FFI::StructLayout","name":"StructLayout","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":551,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Allows to describe structs which can then be constructed,\nretrieved, read, and written to.\n\n```\npoint_s = StructLayout.new(\"Point\")\npoint_s.add(\"x\", F64)\npoint_s.add(\"y\", F64)\n\nrect_s = StructLayout.new(\"Rect\")\nrect_s.add(\"origin\", point_s.reference)\nrect_s.add(\"corner\", point_s.inline)\n\norigin = point_s.reference.make!\norigin[\"x\"] = F64.new(123)\norigin[\"y\"] = F64.new(456)\n\ncorner = point_s.inline.make!\ncorner[\"x\"] = F64.new(234)\ncorner[\"y\"] = F64.new(567)\n\nrect = rect_s.reference.make!\nrect[\"origin\"] = origin\nrect[\"corner\"] = corner\n```","summary":"<p>Allows to describe structs which can then be constructed, retrieved, read, and written to.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Creates an empty struct layout.","summary":"<p>Creates an empty struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":563,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns whether this and *other* layouts are the same\nlayout. Uses reference equality (like `same?`) rather\nthan deep equality.","summary":"<p>Returns whether this and <em>other</em> layouts are the same layout.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif object_id == other.object_id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"add(id,type:ForeignType)-instance-method","name":"add","doc":"Appends a field called *id*, of the given *type*, to this\nstruct's list of fields.\n\nSimilar to struct ids, *id* is irrelevant to FFI and is simply\n*one of* the ways to access struct fields.","summary":"<p>Appends a field called <em>id</em>, of the given <em>type</em>, to this struct's list of fields.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""},{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(id, type : ForeignType)","args_html":"(id, type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":605,"url":null},"def":{"name":"add","args":[{"name":"id","external_name":"id","restriction":""},{"name":"type","external_name":"type","restriction":"ForeignType"}],"visibility":"Public","body":"if type.is_a?(InlineStructType)\n  offset = add(type.padded_size, type.alignment)\nelse\n  offset = add(type.to_ffi_type)\nend\n@fields << (StructFieldDesc.new(id, type, offset))\n"}},{"html_id":"alignment:UInt64-instance-method","name":"alignment","doc":"Returns the alignment of this struct layout.","summary":"<p>Returns the alignment of this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":557,"url":null},"def":{"name":"alignment","return_type":"UInt64","visibility":"Public","body":"@alignment"}},{"html_id":"desc(index:Int32)-instance-method","name":"desc","doc":"Retrieves field description given the field's *index*.","summary":"<p>Retrieves field description given the field's <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","args_html":"(index : Int32)","location":{"filename":"src/novika/ffi.cr","line_number":642,"url":null},"def":{"name":"desc","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"visibility":"Public","body":"@fields[index]"}},{"html_id":"desc(id:String)-instance-method","name":"desc","doc":"Retrieves field description given the field's *id*entifier.\nRaises if no such field exists.","summary":"<p>Retrieves field description given the field's <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":654,"url":null},"def":{"name":"desc","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(desc?(id)) || (raise(\"BUG: no such field: #{id}\"))"}},{"html_id":"desc?(id:String)-instance-method","name":"desc?","doc":"Retrieves field description given the field's *id*entifier.\nReturns nil if no such field exists.","summary":"<p>Retrieves field description given the field's <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":648,"url":null},"def":{"name":"desc?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(index?(id)).try do |index|\n  @fields.unsafe_fetch(index)\nend"}},{"html_id":"each_desc_with_index(&)-instance-method","name":"each_desc_with_index","doc":"Yields field descriptions and their indices to the block.","summary":"<p>Yields field descriptions and their indices to the block.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":659,"url":null},"def":{"name":"each_desc_with_index","yields":2,"block_arity":2,"visibility":"Public","body":"@fields.each_with_index do |field, index|\n  yield field, index\nend"}},{"html_id":"field_count-instance-method","name":"field_count","doc":"Returns the amount of fields in this struct layout.","summary":"<p>Returns the amount of fields in this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":619,"url":null},"def":{"name":"field_count","visibility":"Public","body":"@fields.size"}},{"html_id":"has_field?(id:String)-instance-method","name":"has_field?","doc":"Returns whether this layout contains a field with the\ngiven *id*entifier.","summary":"<p>Returns whether this layout contains a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":625,"url":null},"def":{"name":"has_field?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@fields.any? do |__arg0|\n  __arg0.id == id\nend"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Returns whether this and *other* layouts are the same\nlayout. Uses reference equality (like `same?`) rather\nthan deep equality.","summary":"<p>Returns whether this and <em>other</em> layouts are the same layout.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = object_id.hash(hasher)\nhasher\n"}},{"html_id":"index(id:String)-instance-method","name":"index","doc":"Returns the index of a field with the given *id*entifier.\nDies if there is no such field.","summary":"<p>Returns the index of a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":637,"url":null},"def":{"name":"index","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(index?(id)) || (raise(\"BUG: no such field in struct layout: #{id}\"))"}},{"html_id":"index?(id:String)-instance-method","name":"index?","doc":"Returns the index of a field with the given *id*entifier,\nor nil if there is no such field.","summary":"<p>Returns the index of a field with the given <em>id</em>entifier, or nil if there is no such field.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":631,"url":null},"def":{"name":"index?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@fields.index() do |__arg1|\n  __arg1.id == id\nend"}},{"html_id":"inline-instance-method","name":"inline","doc":"Returns an inline struct type layed out according to this struct\nlayout. You can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.inline`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns an inline struct type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":683,"url":null},"def":{"name":"inline","visibility":"Public","body":"InlineStructType.new(self)"}},{"html_id":"map_desc_with_index(&)-instance-method","name":"map_desc_with_index","doc":"Yields field descriptions and their indices to the block.\nReturns an array of block results.","summary":"<p>Yields field descriptions and their indices to the block.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":665,"url":null},"def":{"name":"map_desc_with_index","yields":2,"block_arity":2,"visibility":"Public","body":"@fields.map_with_index do |field, index|\n  yield field, index\nend"}},{"html_id":"max_field_size:UInt64-instance-method","name":"max_field_size","doc":"Returns the maximum field size in this struct.","summary":"<p>Returns the maximum field size in this struct.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":560,"url":null},"def":{"name":"max_field_size","return_type":"UInt64","visibility":"Public","body":"@max_field_size"}},{"html_id":"padded_size:UInt64-instance-method","name":"padded_size","doc":"Returns the padded size of this struct. Simply put, this is how\nmuch bytes you'd need to allocate for this struct layout.","summary":"<p>Returns the padded size of this struct.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":554,"url":null},"def":{"name":"padded_size","return_type":"UInt64","visibility":"Public","body":"@padded_size"}},{"html_id":"reference-instance-method","name":"reference","doc":"Returns a struct reference type layed out according to this struct\nlayout. You can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.reference`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns a struct reference type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":674,"url":null},"def":{"name":"reference","visibility":"Public","body":"StructReferenceType.new(self)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":696,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"executed = exec_recursive(:to_s) do\n  io << \"⟪\"\n  @fields.join(io, \", \") do |field, io|\n    ((io << field.id) << \"=\") << field.type\n  end\n  io << \"⟫\"\nend\nif executed\nelse\n  io << \"[reflection]\"\nend\n"}},{"html_id":"union-instance-method","name":"union","doc":"Returns a union type layed out according to this struct layout.\nYou can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.union`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns a union type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":692,"url":null},"def":{"name":"union","visibility":"Public","body":"UnionType.new(self)"}}]},{"html_id":"novika/Novika/FFI/StructReferenceType","path":"Novika/FFI/StructReferenceType.html","kind":"struct","full_name":"Novika::FFI::StructReferenceType","name":"StructReferenceType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":750,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of a struct reference, aka struct\npointer, aka heap-allocated struct (like Crystal `class`).","summary":"<p><em>Type-side</em> representation of a struct reference, aka struct pointer, aka heap-allocated struct (like Crystal <code>class</code>).</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":751,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"matches?(pointer:UntypedPointer)-instance-method","name":"matches?","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":"UntypedPointer"}],"args_string":"(pointer : UntypedPointer)","args_html":"(pointer : <a href=\"../../Novika/FFI/UntypedPointer.html\">UntypedPointer</a>)","location":{"filename":"src/novika/ffi.cr","line_number":772,"url":null},"def":{"name":"matches?","args":[{"name":"pointer","external_name":"pointer","restriction":"UntypedPointer"}],"visibility":"Public","body":"pointer.none?"}},{"html_id":"matches?(view:StructReferenceView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"StructReferenceView"}],"args_string":"(view : StructReferenceView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/StructReferenceView.html\">StructReferenceView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":768,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"StructReferenceView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":764,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":776,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"&\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":759,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"handle = Pointer(Void).new((box.as(::Pointer(UInt64))).value)\nhandle.null? ? UntypedPointer.none : view_for(handle)\n"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":755,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"StructReferenceView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/StructReferenceView","path":"Novika/FFI/StructReferenceView.html","kind":"struct","full_name":"Novika::FFI::StructReferenceView","name":"StructReferenceView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":922,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of a struct reference, aka struct\npointer, aka heap-allocated struct. Allows to read and write\nfields (see `StructView`). Similar to the `->` operator in C.","summary":"<p><em>Value-side</em> representation of a struct reference, aka struct pointer, aka heap-allocated struct.</p>","instance_methods":[{"html_id":"==(other:StructReferenceView)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StructReferenceView"}],"args_string":"(other : StructReferenceView)","args_html":"(other : <a href=\"../../Novika/FFI/StructReferenceView.html\">StructReferenceView</a>)","location":{"filename":"src/novika/ffi.cr","line_number":950,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"StructReferenceView"}],"visibility":"Public","body":"if @handle == (other.@handle)\n  return true\nend\nif size == other.size\nelse\n  return false\nend\nresult = false\nexecuted = exec_recursive_by_handle(:==) do\n  result = super(other)\nend\nexecuted && result\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":923,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @handle.address)).as(::Pointer(Void))"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":960,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"executed = exec_recursive_by_handle(:to_s) do\n  io << \"&⟨\"\n  super(io)\n  io << \"⟩\"\nend\nif executed\nelse\n  io << \"[reflection]\"\nend\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":927,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @handle.address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/StructType","path":"Novika/FFI/StructType.html","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":714,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"subclasses":[{"html_id":"novika/Novika/FFI/InlineStructType","kind":"struct","full_name":"Novika::FFI::InlineStructType","name":"InlineStructType"},{"html_id":"novika/Novika/FFI/StructReferenceType","kind":"struct","full_name":"Novika::FFI::StructReferenceType","name":"StructReferenceType"},{"html_id":"novika/Novika/FFI/UnionType","kind":"struct","full_name":"Novika::FFI::UnionType","name":"UnionType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type of the *type* side of structs.","summary":"<p>Base type of the <em>type</em> side of structs.</p>","constructors":[{"html_id":"new(layout:StructLayout)-class-method","name":"new","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"StructLayout"}],"args_string":"(layout : StructLayout)","args_html":"(layout : <a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a>)","location":{"filename":"src/novika/ffi.cr","line_number":717,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"StructLayout"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"alignment(*args,**options)-instance-method","name":"alignment","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"alignment","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.alignment(*args, **options)"}},{"html_id":"alignment(*args,**options,&)-instance-method","name":"alignment","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"alignment","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.alignment(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"from?(form:StructViewForm)-instance-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"args_string":"(form : StructViewForm)","args_html":"(form : <a href=\"../../Novika/StructViewForm.html\">StructViewForm</a>)","location":{"filename":"src/novika/ffi.cr","line_number":727,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"visibility":"Public","body":"form.view"}},{"html_id":"make!:StructView-instance-method","name":"make!","doc":"Constructs a struct view for this struct type.\n\nThis method is **unsafe**: the resulting struct view's content\nis unmoderated. You'll need to fill all fields with values\nbefore the struct view could be considered well-defined.","summary":"<p>Constructs a struct view for this struct type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":739,"url":null},"def":{"name":"make!","return_type":"StructView","visibility":"Public","body":"view_for(Pointer(Void).malloc(@layout.padded_size))"}},{"html_id":"padded_size(*args,**options)-instance-method","name":"padded_size","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"padded_size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.padded_size(*args, **options)"}},{"html_id":"padded_size(*args,**options,&)-instance-method","name":"padded_size","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"padded_size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.padded_size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"references?(*args,**options)-instance-method","name":"references?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":732,"url":null},"def":{"name":"references?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.references?(*args, **options)"}},{"html_id":"references?(*args,**options,&)-instance-method","name":"references?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":732,"url":null},"def":{"name":"references?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.references?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":743,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << @layout"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":true,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":725,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/StructView","path":"Novika/FFI/StructView.html","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":853,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"subclasses":[{"html_id":"novika/Novika/FFI/InlineStructView","kind":"struct","full_name":"Novika::FFI::InlineStructView","name":"InlineStructView"},{"html_id":"novika/Novika/FFI/StructReferenceView","kind":"struct","full_name":"Novika::FFI::StructReferenceView","name":"StructReferenceView"},{"html_id":"novika/Novika/FFI/UnionView","kind":"struct","full_name":"Novika::FFI::UnionView","name":"UnionView"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type of the *value* side of structs.\n\nImplements `Indexable` and `Indexable::Mutable` over the fields in\nthe struct, allowing you to iterate, read, and change them (with\nsome casting from and to `ForeignValue` though.)","summary":"<p>Base type of the <em>value</em> side of structs.</p>","constructors":[{"html_id":"new(layout:Novika::FFI::StructLayout,handle:Pointer(Void))-class-method","name":"new","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(layout : Novika::FFI::StructLayout, handle : Pointer(Void))","args_html":"(layout : <a href=\"../../Novika/FFI/StructLayout.html\">Novika::FFI::StructLayout</a>, handle : Pointer(Void))","location":{"filename":"src/novika/ffi.cr","line_number":861,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout, handle)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:StructView)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StructView"}],"args_string":"(other : StructView)","args_html":"(other : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>)","location":{"filename":"src/novika/ffi.cr","line_number":912,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"StructView"}],"visibility":"Public","body":"equals?(other) do |a, b|\n  a == b\nend"}},{"html_id":"[](id:String)-instance-method","name":"[]","doc":"Returns the value of a field with the given *id*entifier.\nDies if there is no such field.","summary":"<p>Returns the value of a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":889,"url":null},"def":{"name":"[]","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"unsafe_fetch(@layout.index(id))"}},{"html_id":"[]=(id:String,value:ForeignValue)-instance-method","name":"[]=","doc":"Assigns *value* to a field with the given *id*entifier.","summary":"<p>Assigns <em>value</em> to a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(id : String, value : ForeignValue)","args_html":"(id : <a href=\"../../String.html\">String</a>, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":883,"url":null},"def":{"name":"[]=","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"unsafe_put(@layout.index(id), value)"}},{"html_id":"[]?(id:String)-instance-method","name":"[]?","doc":"Returns the value of a field with the given *id*entifier,\nor nil if there is no such field.","summary":"<p>Returns the value of a field with the given <em>id</em>entifier, or nil if there is no such field.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":895,"url":null},"def":{"name":"[]?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"if index = @layout.index?(id)\n  unsafe_fetch(index)\nend"}},{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the pointer address of the struct this view refers to.","summary":"<p>Returns the pointer address of the struct this view refers to.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":868,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@handle.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the pointer address of the struct this view refers to.","summary":"<p>Returns the pointer address of the struct this view refers to.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":868,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@handle.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"has_field?(*args,**options)-instance-method","name":"has_field?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":865,"url":null},"def":{"name":"has_field?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.has_field?(*args, **options)"}},{"html_id":"has_field?(*args,**options,&)-instance-method","name":"has_field?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":865,"url":null},"def":{"name":"has_field?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.has_field?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/novika/ffi.cr","line_number":916,"url":null},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @handle.hash(hasher)\nhasher\n"}},{"html_id":"layout:StructLayout-instance-method","name":"layout","doc":"Returns this view's struct layout.","summary":"<p>Returns this view's struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":859,"url":null},"def":{"name":"layout","return_type":"StructLayout","visibility":"Public","body":"@layout"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":870,"url":null},"def":{"name":"size","visibility":"Public","body":"@layout.field_count"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":901,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"StructViewForm.new(self)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":905,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@layout.each_desc_with_index do |desc, index|\n  ((io << desc.id) << \"=\") << (unsafe_fetch(index))\n  if index == (@layout.field_count - 1)\n  else\n    io << \", \"\n  end\nend"}},{"html_id":"unsafe_fetch(index:Int)-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","args_html":"(index : Int)","location":{"filename":"src/novika/ffi.cr","line_number":878,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"visibility":"Public","body":"(@layout.desc(index)).fetch!(@handle)"}},{"html_id":"unsafe_put(index:Int,value:ForeignValue)-instance-method","name":"unsafe_put","doc":"Sets the element at the given *index* to *value*, without doing any bounds\ncheck.\n\n`Indexable::Mutable` makes sure to invoke this method with *index* in\n`0...size`, so converting negative indices to positive ones is not needed\nhere.\n\nClients never invoke this method directly. Instead, they modify elements\nwith `#[]=(index, value)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Sets the element at the given <em>index</em> to <em>value</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(index : Int, value : ForeignValue)","args_html":"(index : Int, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":874,"url":null},"def":{"name":"unsafe_put","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"(@layout.desc(index)).put!(@handle, value)"}}]},{"html_id":"novika/Novika/FFI/TypeParser","path":"Novika/FFI/TypeParser.html","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":67,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/FFI/DefaultTypeParser","kind":"struct","full_name":"Novika::FFI::DefaultTypeParser","name":"DefaultTypeParser"},{"html_id":"novika/Novika/FFI/ValueTypeParser","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser"},{"html_id":"novika/Novika/StructLayoutParser","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"An object used to translate `Word`s (representing a foreign type)\ninto actual `ForeignType`s.","summary":"<p>An object used to translate <code><a href=\"../../Novika/Word.html\">Word</a></code>s (representing a foreign type) into actual <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code>s.</p>","constructors":[{"html_id":"new(this:Block,typename:Word)-class-method","name":"new","doc":"Initializes a parser object from *this*, a block that will be\nasked for word definitions in case they are needed, and\n*typename*, which is the word-to-be-parsed itself.","summary":"<p>Initializes a parser object from <em>this</em>, a block that will be asked for word definitions in case they are needed, and <em>typename</em>, which is the word-to-be-parsed itself.</p>","abstract":false,"args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"typename","external_name":"typename","restriction":"Word"}],"args_string":"(this : Block, typename : Word)","args_html":"(this : <a href=\"../../Novika/Block.html\">Block</a>, typename : <a href=\"../../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/ffi.cr","line_number":78,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"typename","external_name":"typename","restriction":"Word"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, typename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_inline_struct(form:StructLayoutForm):ForeignType-instance-method","name":"on_inline_struct","doc":"Inline struct-annotated struct layout middleware.","summary":"<p>Inline struct-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":92,"url":null},"def":{"name":"on_inline_struct","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.inline"}},{"html_id":"on_primitive(type:ForeignType):ForeignType-instance-method","name":"on_primitive","doc":"Primitive *type* middleware.","summary":"<p>Primitive <em>type</em> middleware.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(type : ForeignType) : ForeignType","args_html":"(type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":82,"url":null},"def":{"name":"on_primitive","args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"return_type":"ForeignType","visibility":"Public","body":"type"}},{"html_id":"on_struct_reference(form:StructLayoutForm):ForeignType-instance-method","name":"on_struct_reference","doc":"Struct reference-annotated struct layout middleware.","summary":"<p>Struct reference-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":97,"url":null},"def":{"name":"on_struct_reference","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.reference"}},{"html_id":"on_union(form:StructLayoutForm):ForeignType-instance-method","name":"on_union","doc":"Union-annotated struct layout middleware.","summary":"<p>Union-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":87,"url":null},"def":{"name":"on_union","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.union"}},{"html_id":"parse:ForeignType-instance-method","name":"parse","doc":"Performs the parsing. Returns the resulting type.","summary":"<p>Performs the parsing.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":102,"url":null},"def":{"name":"parse","return_type":"ForeignType","visibility":"Public","body":"case @typename.id\nwhen \"u8\"\n  return on_primitive(U8)\nwhen \"u16\"\n  return on_primitive(U16)\nwhen \"u32\"\n  return on_primitive(U32)\nwhen \"u64\"\n  return on_primitive(U64)\nwhen \"i8\"\n  return on_primitive(I8)\nwhen \"i16\"\n  return on_primitive(I16)\nwhen \"i32\"\n  return on_primitive(I32)\nwhen \"i64\"\n  return on_primitive(I64)\nwhen \"f32\"\n  return on_primitive(F32)\nwhen \"f64\"\n  return on_primitive(F64)\nwhen \"cstr\"\n  return on_primitive(Cstr)\nwhen \"char\"\n  return on_primitive(Cchar)\nwhen \"pointer\"\n  return on_primitive(UntypedPointer)\nwhen \"nothing\"\n  return on_primitive(Nothing)\nwhen .prefixed_by?('?')\n  handler = ->on_union(StructLayoutForm)\nwhen .prefixed_by?('~')\n  handler = ->on_inline_struct(StructLayoutForm)\nwhen .prefixed_by?('&')\n  handler = ->on_struct_reference(StructLayoutForm)\nelse\n  @typename.die(\"could not recognize foreign type. Did you mean ⸢~#{@typename}⸥ (inline struct), ⸢&#{@typename}⸥ (reference to struct), or ⸢?#{@typename}⸥ (union)?\")\nend\nraw = Word.new(@typename.id.lchop)\nform = @this.form_for(raw)\nif form.is_a?(StructLayoutForm)\nelse\n  @typename.die(\"expected struct layout to be value form, not: #{form.class.typedesc}\")\nend\nhandler.call(form)\n"}}],"types":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","path":"Novika/FFI/TypeParser/ForbidsNothing.html","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":69,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/ValueTypeParser","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser"},{"html_id":"novika/Novika/StructLayoutParser","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser"}],"namespace":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"doc":"If included, the parser would die upon encountering `nothing`.","summary":"<p>If included, the parser would die upon encountering <code>nothing</code>.</p>","instance_methods":[{"html_id":"on_primitive(type:Nothing.class)-instance-method","name":"on_primitive","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Nothing.class"}],"args_string":"(type : Nothing.class)","args_html":"(type : <span class=\"t\">Nothing</span>.<span class=\"k\">class</span>)","location":{"filename":"src/novika/ffi.cr","line_number":70,"url":null},"def":{"name":"on_primitive","args":[{"name":"type","external_name":"type","restriction":"Nothing.class"}],"visibility":"Public","body":"@typename.die(\"nothing is not a value type. Did you mean ⸢pointer⸥ (an untyped pointer)?\")"}}]}]},{"html_id":"novika/Novika/FFI/U16","path":"Novika/FFI/U16.html","kind":"struct","full_name":"Novika::FFI::U16","name":"U16","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":229,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt16`.","summary":"<p>Type-side and value-side representation of <code>UInt16</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt16).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U16):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U16"}],"args_string":"(value : U16) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U16.html\">U16</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U16"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint16"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u16\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U16.new((box.as(::Pointer(UInt16))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt16).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt16-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u16\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt16))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U32","path":"Novika/FFI/U32.html","kind":"struct","full_name":"Novika::FFI::U32","name":"U32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":230,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt32`.","summary":"<p>Type-side and value-side representation of <code>UInt32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U32"}],"args_string":"(value : U32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U32.html\">U32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint32"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U32.new((box.as(::Pointer(UInt32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U64","path":"Novika/FFI/U64.html","kind":"struct","full_name":"Novika::FFI::U64","name":"U64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":231,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt64`.","summary":"<p>Type-side and value-side representation of <code>UInt64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U64"}],"args_string":"(value : U64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U64.html\">U64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint64"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U64.new((box.as(::Pointer(UInt64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U8","path":"Novika/FFI/U8.html","kind":"struct","full_name":"Novika::FFI::U8","name":"U8","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":228,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt8`.","summary":"<p>Type-side and value-side representation of <code>UInt8</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U8):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U8"}],"args_string":"(value : U8) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U8.html\">U8</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U8"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u8\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U8.new((box.as(::Pointer(UInt8))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt8-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u8\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt8))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/UnionType","path":"Novika/FFI/UnionType.html","kind":"struct","full_name":"Novika::FFI::UnionType","name":"UnionType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":817,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of a union.","summary":"<p><em>Type-side</em> representation of a union.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":822,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"Pointer(Void).malloc(self.sizeof)"}},{"html_id":"matches?(view:UnionView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"UnionView"}],"args_string":"(view : UnionView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/UnionView.html\">UnionView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":838,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"UnionView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":818,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"@layout.max_field_size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":834,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":842,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"⋃\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":830,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"box.null? ? UntypedPointer.none : view_for(box)"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":826,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"UnionView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/UnionView","path":"Novika/FFI/UnionView.html","kind":"struct","full_name":"Novika::FFI::UnionView","name":"UnionView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":994,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of a union.","summary":"<p><em>Value-side</em> representation of a union.</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1010,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":995,"url":null},"def":{"name":"size","visibility":"Public","body":"@layout.field_count"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":1020,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"(⋃ \") << @layout) << \")\""}},{"html_id":"unsafe_fetch(index:Int)-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","args_html":"(index : Int)","location":{"filename":"src/novika/ffi.cr","line_number":1005,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"visibility":"Public","body":"desc = @layout.desc(index)\ndesc.type.unbox(@handle)\n"}},{"html_id":"unsafe_put(index:Int,value:ForeignValue)-instance-method","name":"unsafe_put","doc":"Sets the element at the given *index* to *value*, without doing any bounds\ncheck.\n\n`Indexable::Mutable` makes sure to invoke this method with *index* in\n`0...size`, so converting negative indices to positive ones is not needed\nhere.\n\nClients never invoke this method directly. Instead, they modify elements\nwith `#[]=(index, value)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Sets the element at the given <em>index</em> to <em>value</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(index : Int, value : ForeignValue)","args_html":"(index : Int, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":999,"url":null},"def":{"name":"unsafe_put","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"desc = @layout.desc(index)\nvalue.must_be_of(desc.type)\nvalue.write_to!(@handle)\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":1014,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"@handle.move_to(base, @layout.max_field_size)\nbase\n"}}]},{"html_id":"novika/Novika/FFI/UntypedPointer","path":"Novika/FFI/UntypedPointer.html","kind":"struct","full_name":"Novika::FFI::UntypedPointer","name":"UntypedPointer","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":242,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of pointers.","summary":"<p>Type-side and value-side representation of pointers.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":264,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Hole)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Hole"}],"args_string":"(form : Hole)","args_html":"(form : <a href=\"../../Novika/Hole.html\">Hole</a>)","location":{"filename":"src/novika/ffi.cr","line_number":268,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Hole"}],"visibility":"Public","body":"new(form.address)"}},{"html_id":"from?(form:StructViewForm)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"args_string":"(form : StructViewForm)","args_html":"(form : <a href=\"../../Novika/StructViewForm.html\">StructViewForm</a>)","location":{"filename":"src/novika/ffi.cr","line_number":272,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"visibility":"Public","body":"if view = form.view.as?(StructReferenceView)\nelse\n  raise(Error.new(\"cannot implicitly take pointer of struct view that is not a reference struct view\"))\nend\nnew(view.address)\n"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":282,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:UntypedPointer):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"UntypedPointer"}],"args_string":"(value : UntypedPointer) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/UntypedPointer.html\">UntypedPointer</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":317,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"UntypedPointer"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"none-class-method","name":"none","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":252,"url":null},"def":{"name":"none","visibility":"Public","body":"new(0)"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":321,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":305,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"pointer\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":309,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"if box.null?\n  raise(Error.new(\"attempt to unbox none (C nullptr)\"))\nend\nUntypedPointer.new((box.as(::Pointer(UInt64))).value)\n"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":248,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @address == (other.@address)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":286,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @address)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @address.hash(hasher)\nhasher\n"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":256,"url":null},"def":{"name":"none?","visibility":"Public","body":"@address.zero?"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":260,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(@address)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":295,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if none?\n  io << \"(none)\"\nelse\n  io << \"(0x\"\n  @address.to_s(io, base: 16)\n  io << \")\"\nend"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":290,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/ValueTypeParser","path":"Novika/FFI/ValueTypeParser.html","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"},{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":159,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Same as `DefaultTypeParser`, but forbids nothing.\n\n```\n# this : Block\n\nparser = ValueTypeParser.new(this, Word.new(\"i32\"))\nparser.parse # => I32\n\n# ...\n\nparser = ValueTypeParser.new(this, Word.new(\"nothing\"))\nparser.parse # Dies: nothing is not a value type.\n```","summary":"<p>Same as <code><a href=\"../../Novika/FFI/DefaultTypeParser.html\">DefaultTypeParser</a></code>, but forbids nothing.</p>"},{"html_id":"novika/Novika/FFI/VariadicFunction","path":"Novika/FFI/VariadicFunction.html","kind":"struct","full_name":"Novika::FFI::VariadicFunction","name":"VariadicFunction","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},"ancestors":[{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1070,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Calls a variadic C function.","summary":"<p>Calls a variadic C function.</p>","constructors":[{"html_id":"new(id:String,handle:Pointer(Void),fixed_arg_types:Array(ForeignType),var_arg_allowed:Array(ForeignType),return_type:ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"fixed_arg_types","external_name":"fixed_arg_types","restriction":"Array(ForeignType)"},{"name":"var_arg_allowed","external_name":"var_arg_allowed","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"args_string":"(id : String, handle : Pointer(Void), fixed_arg_types : Array(ForeignType), var_arg_allowed : Array(ForeignType), return_type : ForeignType)","args_html":"(id : <a href=\"../../String.html\">String</a>, handle : Pointer(Void), fixed_arg_types : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), var_arg_allowed : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), return_type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":1073,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"fixed_arg_types","external_name":"fixed_arg_types","restriction":"Array(ForeignType)"},{"name":"var_arg_allowed","external_name":"var_arg_allowed","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, handle, fixed_arg_types, var_arg_allowed, return_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1082,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":"var_args_block = block.drop.a(Block)\nnargs_total = @fixed_arg_types.size + var_args_block.count\nffi_args = Array(ForeignValue).new(nargs_total)\nffi_types = Array(Crystal::FFI::Type).new(nargs_total)\n@fixed_arg_types.reverse_each do |argtype|\n  ffi_types.unshift(argtype.to_ffi_type)\n  arg = argtype.from(block.drop)\n  arg.must_be_of(argtype)\n  ffi_args.unshift(arg)\nend\nvar_args_block.each do |form|\n  candidates = @var_arg_allowed.map do |type|\n    {type, type.from?(form)}\n  end.select do |_, value|\n    value\n  end\n  if candidates.size == 1\n  else\n    form.die(\"unable to convert to foreign value: too many or no type candidates for form. Make sure you've specified the corresponding foreign type in the variadic function's list of allowed types, and no conflicts between types exist (e.g. both i32 and i64; this is currently unsupported)\")\n  end\n  candidate = candidates[0]\n  candidate_type, candidate_value = candidate\n  candidate_value = candidate_value.not_nil!\n  ffi_types << candidate_type.to_ffi_type\n  ffi_args << candidate_value\nend\nffi_args.each do |arg|\n  case arg\n  when U8, U16, I8, I16\n    block.die(\"bad argtype in variadic call: promote to i32 first: #{arg}\")\n  when F32\n    block.die(\"bad argtype in variadic call: promote to f64 first: #{arg}\")\n  end\nend\ncif = Crystal::FFI::CallInterface.variadic(return_type: @return_type.to_ffi_type, arg_types: ffi_types, fixed_args: @fixed_arg_types.size)\ncargs = Pointer(::Pointer(Void)).malloc(ffi_args.size) do |index|\n  ffi_args[index].box\nend\ncreturn = Pointer(Void).malloc(@return_type.sizeof)\ncif.call(@handle, cargs, creturn)\n(@return_type.unbox(creturn)).to_form?\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1071,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}}]}]},{"html_id":"novika/Novika/Folder","path":"Novika/Folder.html","kind":"struct","full_name":"Novika::Folder","name":"Folder","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":12,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Specifies what a particular folder is, for Novika.","summary":"<p>Specifies what a particular folder is, for Novika.</p>","constructors":[{"html_id":"new(flags:Hash(String,Bool),path:Path,entry:Path|Nil=nil,files:Set(Path)=Set(Path).new,app:Path|Nil=nil,core:Bool=false,explicit:Bool=true)-class-method","name":"new","abstract":false,"args":[{"name":"flags","external_name":"flags","restriction":"Hash(String, Bool)"},{"name":"path","external_name":"path","restriction":"::Path"},{"name":"entry","default_value":"nil","external_name":"entry","restriction":"::Path | ::Nil"},{"name":"files","default_value":"Set(Path).new","external_name":"files","restriction":"::Set(::Path)"},{"name":"app","default_value":"nil","external_name":"app","restriction":"::Path | ::Nil"},{"name":"core","default_value":"false","external_name":"core","restriction":"::Bool"},{"name":"explicit","default_value":"true","external_name":"explicit","restriction":"::Bool"}],"args_string":"(flags : Hash(String, Bool), path : Path, entry : Path | Nil = nil, files : Set(Path) = Set(Path).new, app : Path | Nil = nil, core : Bool = false, explicit : Bool = true)","args_html":"(flags : Hash(<a href=\"../String.html\">String</a>, Bool), path : Path, entry : Path | Nil = <span class=\"n\">nil</span>, files : <a href=\"../Set.html\">Set</a>(Path) = <span class=\"t\">Set</span>(<span class=\"t\">Path</span>).new, app : Path | Nil = <span class=\"n\">nil</span>, core : Bool = <span class=\"n\">false</span>, explicit : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/novika/resolver.cr","line_number":39,"url":null},"def":{"name":"new","args":[{"name":"flags","external_name":"flags","restriction":"Hash(String, Bool)"},{"name":"path","external_name":"path","restriction":"::Path"},{"name":"entry","default_value":"nil","external_name":"entry","restriction":"::Path | ::Nil"},{"name":"files","default_value":"Set(Path).new","external_name":"files","restriction":"::Set(::Path)"},{"name":"app","default_value":"nil","external_name":"app","restriction":"::Path | ::Nil"},{"name":"core","default_value":"false","external_name":"core","restriction":"::Bool"},{"name":"explicit","default_value":"true","external_name":"explicit","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(flags, path, entry, files, app, core, explicit)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if path == other.path\nelse\n  return false\nend\nif explicit? == other.explicit?\nelse\n  return false\nend\ntrue\n"}},{"html_id":"app?:Path|Nil-instance-method","name":"app?","doc":"Returns the path to the app manifest file. If non-nil,\nthen this folder is considered a Novika app.","summary":"<p>Returns the path to the app manifest file.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":28,"url":null},"def":{"name":"app?","return_type":"Path | ::Nil","visibility":"Public","body":"@app"}},{"html_id":"core?:Bool-instance-method","name":"core?","doc":"Returns whether this folder is a core folder.\n\nA core folder is that which has the name 'core'.","summary":"<p>Returns whether this folder is a core folder.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":33,"url":null},"def":{"name":"core?","return_type":"Bool","visibility":"Public","body":"@core"}},{"html_id":"entry?:Path|Nil-instance-method","name":"entry?","doc":"Returns full path to the entry file, found inside this\nfolder. For example, given this folder is called `foo`,\nits entry file is going to be called `foo.nk`.\n\nReturns nil if there is no entry file.","summary":"<p>Returns full path to the entry file, found inside this folder.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":21,"url":null},"def":{"name":"entry?","return_type":"Path | ::Nil","visibility":"Public","body":"@entry"}},{"html_id":"explicit?:Bool-instance-method","name":"explicit?","doc":"Returns whether this folder was specified in the runnable\nlist, explicitly.","summary":"<p>Returns whether this folder was specified in the runnable list, explicitly.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":37,"url":null},"def":{"name":"explicit?","return_type":"Bool","visibility":"Public","body":"@explicit"}},{"html_id":"files:Set(Path)-instance-method","name":"files","doc":"Returns full paths to *files* found in this folder.","summary":"<p>Returns full paths to <em>files</em> found in this folder.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":24,"url":null},"def":{"name":"files","return_type":"Set(Path)","visibility":"Public","body":"@files"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = path.hash(hasher)\nhasher = explicit?.hash(hasher)\nhasher\n"}},{"html_id":"lib?-instance-method","name":"lib?","doc":"Returns the path to the lib manifest file. If non-nil,\nthen this folder is considered a Novika app.","summary":"<p>Returns the path to the lib manifest file.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":50,"url":null},"def":{"name":"lib?","visibility":"Public","body":"if app?\nelse\n  path / MANIFEST_LIB\nend"}},{"html_id":"manifest?-instance-method","name":"manifest?","doc":"Reads and returns the contents of '.nk.app' or '.nk.lib',\ndepending on the type of this folder (app or otherwise).\n\nReturns nil if neither exists.\n\nRuns the preprocessor on manifest content.\n\n* Preprocessor expressions are enclosed in `[]`s.\n* OS conditionals in preprocessor expressions are supported,\n  e.g. `library.[windows, linux, macos | dll, so, dylib]","summary":"<p>Reads and returns the contents of '.nk.app' or '.nk.lib', depending on the type of this folder (app or otherwise).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":64,"url":null},"def":{"name":"manifest?","visibility":"Public","body":"if (mpath = app? || lib?) && (File.readable?(mpath))\nelse\n  return\nend\ncontent = File.read(mpath)\ncontent.gsub(/\\[([^\\]\\n]+)\\]/) do |pexp|\n  case $~[1]\n  when /^\\s*(\\w+(?:\\s*,\\s*\\w+)*)\\s*\\|\\s*(\\w+(?:\\s*,\\s*\\w+)*)$/\n    flags = $~[1].split(/\\s*,\\s*/, remove_empty: true)\n    blocks = $~[2].split(/\\s*,\\s*/, remove_empty: true)\n    if flags.size == blocks.size\n    else\n      next pexp\n    end\n    branches = Hash.zip(flags, blocks)\n    branch = branches[\"_\"]?\n    @flags.each do |flag, state|\n      if state\n      else\n        next\n      end\n      if block = branches[flag]?\n      else\n        next\n      end\n      break branch = block\n    end\n    next branch || \"\"\n  end\n  pexp\nend\n"}},{"html_id":"path:Path-instance-method","name":"path","doc":"Returns the path to this folder.","summary":"<p>Returns the path to this folder.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":14,"url":null},"def":{"name":"path","return_type":"Path","visibility":"Public","body":"@path"}}]},{"html_id":"novika/Novika/ForeignFunction","path":"Novika/ForeignFunction.html","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin wrapper around `FFI::Function`.","summary":"<p>A thin wrapper around <code><a href=\"../Novika/FFI/Function.html\">FFI::Function</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":21,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign function\""}}],"constructors":[{"html_id":"new(library:Library,function:FFI::Function,comment:String|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"library","external_name":"library","restriction":"Library"},{"name":"function","external_name":"function","restriction":"FFI::Function"},{"name":"comment","external_name":"comment","restriction":"String | ::Nil"}],"args_string":"(library : Library, function : FFI::Function, comment : String | Nil)","args_html":"(library : <a href=\"../Novika/Library.html\">Library</a>, function : <a href=\"../Novika/FFI/Function.html\">FFI::Function</a>, comment : <a href=\"../String.html\">String</a> | Nil)","location":{"filename":"src/novika/forms/foreign.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"library","external_name":"library","restriction":"Library"},{"name":"function","external_name":"function","restriction":"FFI::Function"},{"name":"comment","external_name":"comment","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(library, function, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":25,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@comment ? io << @comment : to_s(io)"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":12,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"stack = engine.stack\nvalue = @function.call(stack)\nvalue.try(&.onto(stack))\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":29,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[foreign function: \") << @function.id) << \"]\""}}]},{"html_id":"novika/Novika/Form","path":"Novika/Form.html","kind":"module","full_name":"Novika::Form","name":"Form","abstract":false,"ancestors":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"locations":[{"filename":"src/novika/forms/form.cr","line_number":93,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Builtin","kind":"struct","full_name":"Novika::Builtin","name":"Builtin"},{"html_id":"novika/Novika/Byteslice","kind":"struct","full_name":"Novika::Byteslice","name":"Byteslice"},{"html_id":"novika/Novika/Color","kind":"struct","full_name":"Novika::Color","name":"Color"},{"html_id":"novika/Novika/Decimal","kind":"struct","full_name":"Novika::Decimal","name":"Decimal"},{"html_id":"novika/Novika/Error","kind":"class","full_name":"Novika::Error","name":"Error"},{"html_id":"novika/Novika/ForeignFunction","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction"},{"html_id":"novika/Novika/Hole","kind":"struct","full_name":"Novika::Hole","name":"Hole"},{"html_id":"novika/Novika/Library","kind":"class","full_name":"Novika::Library","name":"Library"},{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/QuotedWord","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord"},{"html_id":"novika/Novika/StructLayoutForm","kind":"struct","full_name":"Novika::StructLayoutForm","name":"StructLayoutForm"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"},{"html_id":"novika/Novika/Word","kind":"struct","full_name":"Novika::Word","name":"Word"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Form is an umbrella for words and blocks. Since some words\n(like numbers, quotes) are just too different from words as\nwe know them, they have their own types directly subordinate\nto Form.\n\nMake sure to override `self.typedesc` to avoid weird unrelated\nCrystal errors. Crystal breaks at class-level inheritance.","summary":"<p>Form is an umbrella for words and blocks.</p>","instance_methods":[{"html_id":"a(type:T.class):TforallT-instance-method","name":"a","doc":"Asserts that this form is of the given *type*. Dies if\nit's not.","summary":"<p>Asserts that this form is of the given <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) : T forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : T forall T","location":{"filename":"src/novika/forms/form.cr","line_number":141,"url":null},"def":{"name":"a","args":[{"name":"type","external_name":"type","restriction":"T.class"}],"return_type":"T","visibility":"Public","body":"self.is_a?(T) ? self : afail(T)"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/form.cr","line_number":109,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"a form\""}},{"html_id":"desc:String-instance-method","name":"desc","doc":"Returns a string description of this form.","summary":"<p>Returns a string description of this form.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":114,"url":null},"def":{"name":"desc","return_type":"String","visibility":"Public","body":"String.build do |io|\n  desc(io)\nend"}},{"html_id":"die(details:String)-instance-method","name":"die","doc":"Raises an `Error` providing *details*.","summary":"<p>Raises an <code><a href=\"../Novika/Error.html\">Error</a></code> providing <em>details</em>.</p>","abstract":false,"args":[{"name":"details","external_name":"details","restriction":"String"}],"args_string":"(details : String)","args_html":"(details : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":97,"url":null},"def":{"name":"die","args":[{"name":"details","external_name":"details","restriction":"String"}],"visibility":"Public","body":"raise(Error.new(details, form: self))"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor all forms except blocks and builtins, simply returns\ntheir string representation.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/form.cr","line_number":160,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"effect-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor all forms except blocks and builtins, simply returns\ntheir string representation.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":165,"url":null},"def":{"name":"effect","visibility":"Public","body":"String.build do |io|\n  effect(io)\nend"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":125,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"on_parent_open(engine)"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":130,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"onto(engine.stack)"}},{"html_id":"onto(block:Block):self-instance-method","name":"onto","doc":"Adds this form to *block*.","summary":"<p>Adds this form to <em>block</em>.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : self","args_html":"(block : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":135,"url":null},"def":{"name":"onto","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"tap do\n  block.add(self)\nend"}},{"html_id":"sel(a,b)-instance-method","name":"sel","doc":"Selects either *a* or *b*. Novika defines `False` to be the\nonly form selecting *b*. All other forms select *a*.","summary":"<p>Selects either <em>a</em> or <em>b</em>.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/novika/forms/form.cr","line_number":120,"url":null},"def":{"name":"sel","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"a"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":146,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"Quote.new(to_s)"}}]},{"html_id":"novika/Novika/Frontend","path":"Novika/Frontend.html","kind":"module","full_name":"Novika::Frontend","name":"Frontend","abstract":false,"locations":[{"filename":"src/common.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"err(message,io=STDERR)-instance-method","name":"err","doc":"Appends a \"sorry\" *message* to *io*","summary":"<p>Appends a &quot;sorry&quot; <em>message</em> to <em>io</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"args_string":"(message, io = STDERR)","args_html":"(message, io = <span class=\"t\">STDERR</span>)","location":{"filename":"src/common.cr","line_number":10,"url":null},"def":{"name":"err","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"visibility":"Public","body":"(((io << \"\\e[2K\\r\") << \"Sorry\".colorize.red.bold) << \"  \") << message"}},{"html_id":"errln(message,io=STDERR)-instance-method","name":"errln","doc":"Calls `err`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#err%28message%2Cio%3DSTDERR%29-instance-method\">#err</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"args_string":"(message, io = STDERR)","args_html":"(message, io = <span class=\"t\">STDERR</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"errln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"visibility":"Public","body":"err(message, io)\nio.puts\n"}},{"html_id":"note(message,io=STDOUT)-instance-method","name":"note","doc":"Appends a \"note\" *message* to *io*.","summary":"<p>Appends a &quot;note&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":20,"url":null},"def":{"name":"note","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"(((io << \"\\e[2K\\r\") << \" Note\".colorize.blue.bold) << \"  \") << message"}},{"html_id":"noteln(message,io=STDOUT)-instance-method","name":"noteln","doc":"Calls `note`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#note%28message%2Cio%3DSTDOUT%29-instance-method\">#note</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"noteln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"note(message, io)\nio.puts\n"}},{"html_id":"ok(message,io=STDOUT)-instance-method","name":"ok","doc":"Appends an \"ok\" *message* to *io*.","summary":"<p>Appends an &quot;ok&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":15,"url":null},"def":{"name":"ok","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"(((io << \"\\e[2K\\r\") << \"Ok\".colorize.green.bold) << \"  \") << message"}},{"html_id":"okln(message,io=STDOUT)-instance-method","name":"okln","doc":"Calls `ok`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#ok%28message%2Cio%3DSTDOUT%29-instance-method\">#ok</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"okln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"ok(message, io)\nio.puts\n"}},{"html_id":"wait(message,io=STDOUT)-instance-method","name":"wait","doc":"Appends a \"wait\" *message* to *io*.","summary":"<p>Appends a &quot;wait&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":5,"url":null},"def":{"name":"wait","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"(((io << \"\\e[2K\\r\") << \"Wait\".colorize.bold) << \"  \") << message"}},{"html_id":"wait(msg,*,okokmsg,&)-instance-method","name":"wait","doc":"Issues a `wait` message *msg*, yields, then follows with\nan OK message *okmsg*.","summary":"<p>Issues a <code><a href=\"../Novika/Frontend.html#wait%28message%2Cio%3DSTDOUT%29-instance-method\">#wait</a></code> message <em>msg</em>, yields, then follows with an OK message <em>okmsg</em>.</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"okmsg","external_name":"ok","restriction":""}],"args_string":"(msg, *, ok okmsg, &)","args_html":"(msg, *, ok okmsg, &)","location":{"filename":"src/common.cr","line_number":35,"url":null},"def":{"name":"wait","args":[{"name":"msg","external_name":"msg","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"okmsg","external_name":"ok","restriction":""}],"splat_index":1,"yields":0,"block_arity":0,"visibility":"Public","body":"wait(msg)\nyield\nokln(okmsg)\n"}},{"html_id":"waitln(message,io=STDOUT)-instance-method","name":"waitln","doc":"Calls `wait`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#wait%28message%2Cio%3DSTDOUT%29-instance-method\">#wait</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"waitln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"wait(message, io)\nio.puts\n"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI","path":"Novika/Frontend/CLI.html","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI","abstract":false,"locations":[{"filename":"src/cli.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/CLI","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"run(engine:Engine,toplevel:Block,path:Path):Block-instance-method","name":"run","doc":"Runs the file at *path* using *engine*. A new block is\ncreated for *path* as a child of *toplevel*.\n\nWords from the new block are imported into *toplevel*\nafter the engine successfully exhausts it.\n\nReturns *toplevel*.","summary":"<p>Runs the file at <em>path</em> using <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(engine : Engine, toplevel : Block, path : Path) : Block","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, toplevel : <a href=\"../../Novika/Block.html\">Block</a>, path : Path) : <a href=\"../../Novika/Block.html\">Block</a>","location":{"filename":"src/cli.cr","line_number":108,"url":null},"def":{"name":"run","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Block","visibility":"Public","body":"source = File.read(path)\nblock = (Block.new(toplevel)).slurp(source)\nblock.at(Word.new(\"__path__\"), Quote.new(path.parent.to_s))\nblock.at(Word.new(\"__file__\"), Quote.new(path.to_s))\nengine.schedule!(block, stack: Block.new)\nengine.exhaust\ntoplevel.import!(from: block)\n"}},{"html_id":"run(engine:Engine,toplevel:Block,folder:Folder)-instance-method","name":"run","doc":"Runs the given *folder*.\n\nIf *folder* is an app, all other files in it (if any) are\nrun first, then its entry file (again, only if it exists).\n\nIf *folder* is a lib, its entry file is run first (if it\nexists), followed by all other files.\n\nThe \"philosophy\" is as follows:\n\n* For apps, it's all other files contributing to the entry\n  file, which generally contains run instructions.\n\n* For libs, it's the lib's entry file contributing to all\n  other files -- allowing to share code in load order-\n  agnostic way.","summary":"<p>Runs the given <em>folder</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"folder","external_name":"folder","restriction":"Folder"}],"args_string":"(engine : Engine, toplevel : Block, folder : Folder)","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, toplevel : <a href=\"../../Novika/Block.html\">Block</a>, folder : <a href=\"../../Novika/Folder.html\">Folder</a>)","location":{"filename":"src/cli.cr","line_number":134,"url":null},"def":{"name":"run","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"folder","external_name":"folder","restriction":"Folder"}],"visibility":"Public","body":"if folder.app?\n  run(engine, toplevel, folder.files)\nend\nif entry = folder.entry?\n  run(engine, toplevel, entry)\nend\nif folder.app?\nelse\n  run(engine, toplevel, folder.files)\nend\n"}},{"html_id":"run(engine:Engine,toplevel:Block,paths:Set(Path))-instance-method","name":"run","doc":"Runs each of the *paths* (each is assumed to be a file).","summary":"<p>Runs each of the <em>paths</em> (each is assumed to be a file).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"paths","external_name":"paths","restriction":"Set(Path)"}],"args_string":"(engine : Engine, toplevel : Block, paths : Set(Path))","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, toplevel : <a href=\"../../Novika/Block.html\">Block</a>, paths : <a href=\"../../Set.html\">Set</a>(Path))","location":{"filename":"src/cli.cr","line_number":145,"url":null},"def":{"name":"run","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"paths","external_name":"paths","restriction":"Set(Path)"}],"visibility":"Public","body":"paths.each do |path|\n  run(engine, toplevel, path)\nend"}},{"html_id":"run(engine:Engine,toplevel:Block,folders:Set(Folder))-instance-method","name":"run","doc":"Runs each of the *folders*.","summary":"<p>Runs each of the <em>folders</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"folders","external_name":"folders","restriction":"Set(Folder)"}],"args_string":"(engine : Engine, toplevel : Block, folders : Set(Folder))","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, toplevel : <a href=\"../../Novika/Block.html\">Block</a>, folders : <a href=\"../../Set.html\">Set</a>(<a href=\"../../Novika/Folder.html\">Folder</a>))","location":{"filename":"src/cli.cr","line_number":150,"url":null},"def":{"name":"run","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"toplevel","external_name":"toplevel","restriction":"Block"},{"name":"folders","external_name":"folders","restriction":"Set(Folder)"}],"visibility":"Public","body":"folders.each do |folder|\n  run(engine, toplevel, folder)\nend"}},{"html_id":"start(args=ARGV,cwd=Path[ENV[\"NOVIKA_PATH\"]?||Dir.current])-instance-method","name":"start","doc":"Novika command-line frontend entry point.","summary":"<p>Novika command-line frontend entry point.</p>","abstract":false,"args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_PATH\"]? || Dir.current]","external_name":"cwd","restriction":""}],"args_string":"(args = ARGV, cwd = Path[ENV[\"NOVIKA_PATH\"]? || Dir.current])","args_html":"(args = <span class=\"t\">ARGV</span>, cwd = <span class=\"t\">Path</span>[<span class=\"t\">ENV</span>[<span class=\"s\">&quot;NOVIKA_PATH&quot;</span>]? <span class=\"o\">||</span> <span class=\"t\">Dir</span>.current])","location":{"filename":"src/cli.cr","line_number":292,"url":null},"def":{"name":"start","args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_PATH\"]? || Dir.current]","external_name":"cwd","restriction":""}],"visibility":"Public","body":"begin\n  if args.any?(/^\\-{0,2}(?:h(?:elp)?|\\?)$/)\n    help(STDOUT)\n    exit(0)\n  end\n  profiler = nil\n  args.reject! do |arg|\n    if status = arg =~ (/^\\-p(?::([1-9]\\d*))?$/)\n      profiler = Profiler.new($~[1]?.try(&.to_u64) || 16_u64)\n    end\n    status\n  end\n  profiler.try do |it|\n    Engine.trackers << it\n  end\n  caps = CapabilityCollection.with_available\n  caps.enable_default\n  resolver = RunnableResolver.new(args, caps, cwd)\n  if resolver.resolve?\n  else\n    help(STDOUT)\n    exit(0)\n  end\n  if resolver.apps.size > 1\n    resolver.apps.reject! do |app|\n      if (!app.core?) || app.explicit?\n        next\n      end\n      resolver.capabilities.reject! do |cap|\n        if cap.manual?\n          next\n        end\n        cap.root == app.path\n      end\n      true\n    end\n  end\n  if resolver.apps.size > 1\n    Frontend.errln(\"cannot determine which app to run (given apps: #{resolver.apps.join(\", \") do |__arg4|\n      __arg4.path.basename\n    end})\")\n    exit(1)\n  end\n  if resolver.unknowns.empty?\n  else\n    resolver.unknowns.each do |arg|\n      Frontend.errln(\"could not resolve runnable #{arg.colorize.bold}: it's not a file, directory, shared object, Novika app, or capability id\")\n    end\n    exit(1)\n  end\n  resolver.shared_objects.each do |shared_object|\n    id = shared_object.stem.lchop(\"lib\")\n    if caps.has_library?(id)\n      Frontend.errln(\"multiple libraries with the same id: #{id}\")\n      exit(1)\n    end\n    caps << (Library.new(id, shared_object))\n  end\n  caps.on_load_library? do |id|\n    Library.new?(id, resolver)\n  end\n  engine = Engine.push(caps)\n  toplevel = Block.new(caps.block)\n  resolver.capabilities.each do |req|\n    allowed = req.allowed? do\n      purpose = (caps.get_capability_class?(req.id)).not_nil!.purpose\n      print(\"[novika] Permit '#{req.root.basename}' to use #{req.id} (#{purpose})? [Y/n] \")\n      (gets.try(&.downcase)) == \"y\"\n    end\n    if allowed\n      caps.enable(req.id)\n    end\n  end\n  begin\n    run(engine, toplevel, resolver.folders)\n    run(engine, toplevel, resolver.files)\n    run(engine, toplevel, resolver.apps)\n  ensure\n    profiler.try do |it|\n      puts(it.to_table)\n    end\n  end\nrescue e : Error\n  e.report(STDERR)\n  exit(1)\nend"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler","path":"Novika/Frontend/CLI/Profiler.html","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/IExhaustTracker","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cli.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/IExhaustTracker","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker"}],"namespace":{"html_id":"novika/Novika/Frontend/CLI","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI"},"doc":"A crude sample-based profiler which is triggered on every\nform the engine tries to execute.\n\nCounts the amount of times a form was attempted to be open\nby the engine.\n\nYou can use `to_table` to convert a snapshot of data to a\n`Tablo::Table` table.","summary":"<p>A crude sample-based profiler which is triggered on every form the engine tries to execute.</p>","constructors":[{"html_id":"new(period:UInt64=32_u64)-class-method","name":"new","doc":"Initializes this profiler.\n\n*period* is the period between samples, in Engine loop\nticks. The less the value, the more samples are taken\nand the more precise the results are (but the program\nmay run slower).","summary":"<p>Initializes this profiler.</p>","abstract":false,"args":[{"name":"period","default_value":"32_u64","external_name":"period","restriction":"::UInt64"}],"args_string":"(period : UInt64 = 32_u64)","args_html":"(period : UInt64 = <span class=\"n\">32_u64</span>)","location":{"filename":"src/cli.cr","line_number":48,"url":null},"def":{"name":"new","args":[{"name":"period","default_value":"32_u64","external_name":"period","restriction":"::UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(period)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_form_begin(engine:Engine,form:Form)-instance-method","name":"on_form_begin","doc":"Invoked before *engine* opens the given *form*.","summary":"<p>Invoked before <em>engine</em> opens the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../../../Novika/Engine.html\">Engine</a>, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/cli.cr","line_number":60,"url":null},"def":{"name":"on_form_begin","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"if (@ticks - @start) >= @period\nelse\n  @ticks = @ticks + 1\n  return\nend\nkey = encode(form)\nprofile = @profiles[key]\nprofile.sample\n@profiles[key] = profile\n@start = @ticks\n@ticks = @ticks + 1\n"}},{"html_id":"to_table(cutoff=0.0001)-instance-method","name":"to_table","doc":"Assembles and returns the data from this profiler as\na `Tablo::Table`.\n\n*cutoff* specifies the ratio [0-1] below which profiles\nshould be rejected (i.e., too insignificant).","summary":"<p>Assembles and returns the data from this profiler as a <code>Tablo::Table</code>.</p>","abstract":false,"args":[{"name":"cutoff","default_value":"0.0001","external_name":"cutoff","restriction":""}],"args_string":"(cutoff = 0.0001)","args_html":"(cutoff = <span class=\"n\">0.0001</span>)","location":{"filename":"src/cli.cr","line_number":82,"url":null},"def":{"name":"to_table","args":[{"name":"cutoff","default_value":"0.0001","external_name":"cutoff","restriction":""}],"visibility":"Public","body":"nperiods = @ticks / @period\nrows = @profiles.values.reject! do |profile|\n  (profile.ratio(nperiods)) < cutoff\nend.unstable_sort! do |a, b|\n  b <=> a\nend.compact_map(&.to_row?(nperiods))\nrows << [\"(coverage: ticks, sampled-ticks%)\", @ticks, nperiods / @ticks]\nTablo::Table.new(rows) do |table|\n  table.add_column(\"Form (typedesc)\") do |row|\n    row[0]\n  end\n  table.add_column(\"No. of samples\") do |row|\n    row[1]\n  end\n  table.add_column(\"Of all samples, %\") do |row|\n    \"#{((row[2].as(Float64)) * 100).round(4)}%\"\n  end\n  table.shrinkwrap!(128)\nend\n"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler/Profile","path":"Novika/Frontend/CLI/Profiler/Profile.html","kind":"class","full_name":"Novika::Frontend::CLI::Profiler::Profile","name":"Profile","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cli.cr","line_number":20,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Frontend/CLI/Profiler","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler"},"doc":"Represents a profile entry.","summary":"<p>Represents a profile entry.</p>","constructors":[{"html_id":"new(str:String)-class-method","name":"new","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : <a href=\"../../../../String.html\">String</a>)","location":{"filename":"src/cli.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"str","external_name":"str","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(str)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:Profile)-instance-method","name":"<=>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Profile"}],"args_string":"(other : Profile)","args_html":"(other : <a href=\"../../../../Novika/Frontend/CLI/Profiler/Profile.html\">Profile</a>)","location":{"filename":"src/cli.cr","line_number":25,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Profile"}],"visibility":"Public","body":"@samples <=> (other.@samples)"}},{"html_id":"ratio(whole:Float64)-instance-method","name":"ratio","abstract":false,"args":[{"name":"whole","external_name":"whole","restriction":"Float64"}],"args_string":"(whole : Float64)","args_html":"(whole : Float64)","location":{"filename":"src/cli.cr","line_number":33,"url":null},"def":{"name":"ratio","args":[{"name":"whole","external_name":"whole","restriction":"Float64"}],"visibility":"Public","body":"@samples / whole"}},{"html_id":"sample-instance-method","name":"sample","abstract":false,"location":{"filename":"src/cli.cr","line_number":29,"url":null},"def":{"name":"sample","visibility":"Public","body":"@samples = @samples + 1"}},{"html_id":"to_row?(nperiods)-instance-method","name":"to_row?","abstract":false,"args":[{"name":"nperiods","external_name":"nperiods","restriction":""}],"args_string":"(nperiods)","args_html":"(nperiods)","location":{"filename":"src/cli.cr","line_number":37,"url":null},"def":{"name":"to_row?","args":[{"name":"nperiods","external_name":"nperiods","restriction":""}],"visibility":"Public","body":"[@str, @samples, @samples / nperiods]"}}]}]}]},{"html_id":"novika/Novika/Frontend/Nkas","path":"Novika/Frontend/Nkas.html","kind":"module","full_name":"Novika::Frontend::Nkas","name":"Nkas","abstract":false,"locations":[{"filename":"src/nkas.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/Nkas","kind":"module","full_name":"Novika::Frontend::Nkas","name":"Nkas"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"help(io)-instance-method","name":"help","doc":"Appends information about the tool to *io*.","summary":"<p>Appends information about the tool to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/nkas.cr","line_number":8,"url":null},"def":{"name":"help","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"nkas - Novika image assembler for Novika #{Novika::VERSION}\\n\\nSyntax:\\n\\n  nkas [switches] [runnables] <path/to/output/image.nki>\\n\\nSwitches:\\n\\n  -c  Compress with (default: do not compress)\\n    b:  Brotli\\n      f Compress quickly (fast)!\\n      b Compress thoroughly (best)!\\n    g:  Gzip\\n      f Compress quickly (fast)!\\n      b Compress thoroughly (best)!\\n\\nExample:\\n\\n  $ nkas -cb:b repl repl.nki\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Wrote repl.nki\\n\\n  $ nki repl.nki\\n  [starts the repl]\\n\\nRunnables:\\n\\n  In runnable treatment, this tool is fully compatible with\\n  the command-line frontend.\\n\\nPurpose:\\n\\n  A handy tool for packing Novika images e.g. to transfer\\n  them over the network, or distribute. Novika images can\\n  be run by the 'nki' tool which is a bit smaller feature-\\n  wise than the Novika command-line frontend.\\n\""}},{"html_id":"start(args=ARGV)-instance-method","name":"start","abstract":false,"args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""}],"args_string":"(args = ARGV)","args_html":"(args = <span class=\"t\">ARGV</span>)","location":{"filename":"src/nkas.cr","line_number":54,"url":null},"def":{"name":"start","args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""}],"visibility":"Public","body":"if args.size < 2\n  help(STDOUT)\n  exit(0)\nend\nimagepath = nil\ncompression = Novika::Image::CompressionType::None\nrunnables = ARGV.map_with_index do |arg, index|\n  if (index == (ARGV.size - 1)) && (arg.ends_with?(\".nki\"))\n    imagepath = arg\n    next\n  end\n  if arg =~ (/-c([bg]):([fb])/)\n    case {$~[1], $~[2]}\n    when {\"b\", \"f\"}\n      compression = Novika::Image::CompressionType::BrotliFast\n    when {\"b\", \"b\"}\n      compression = Novika::Image::CompressionType::BrotliBest\n    when {\"g\", \"f\"}\n      compression = Novika::Image::CompressionType::GzipFast\n    when {\"g\", \"b\"}\n      compression = Novika::Image::CompressionType::GzipBest\n    else\n      Frontend.errln(\"invalid compression option: #{arg}\")\n      exit(1)\n    end\n    next\n  end\n  arg\nend.compact\nif imagepath\nelse\n  Frontend.errln(\"Please provide a 'path/to/image.nki' as the last argument.\")\n  Frontend.noteln(\"This'll let us know where to save the image.\")\n  exit(1)\nend\ncaps = CapabilityCollection.with_available\ncaps.enable_default\nresolver = RunnableResolver.new(runnables, caps)\nif resolver.resolve?\nelse\n  help(STDOUT)\n  exit(0)\nend\nif resolver.apps.size > 1\n  names = resolver.apps.join(\", \") do |__arg0|\n    __arg0.path.basename\n  end\n  Frontend.errln(\"could not determine which app to pack (given apps: #{names})\")\n  Frontend.noteln(\"pick one or, if this doesn't seem right, create an issue!\")\n  exit(1)\nend\nif resolver.unknowns.empty?\nelse\n  resolver.unknowns.each do |arg|\n    Frontend.errln(\"could not resolve runnable #{arg.colorize.bold}: it's not a file, directory, app, or capability id\")\n  end\n  exit(1)\nend\nresolver.capabilities.each do |req|\n  caps.enable(req.id)\nend\npaths = [] of Path\nresolver.folders.each do |folder|\n  folder.entry?.try do |entry|\n    paths << entry\n  end\n  paths.concat(folder.files)\nend\nresolver.files.each do |file|\n  paths << file\nend\nresolver.apps.each do |app|\n  paths.concat(app.files)\n  app.entry?.try do |entry|\n    paths << entry\n  end\nend\nmod = Novika::Block.new\npaths.each do |file|\n  Frontend.wait(\"Bundling #{file}...\", ok: \"Bundled #{file}\") do\n    mod.slurp(File.read(file))\n  end\nend\nFile.open(img = ARGV[-1], \"w\") do |file|\n  Frontend.wait(\"Writing image #{img}...\", ok: \"Wrote image #{img}\") do\n    file.write_bytes(Novika::Image.new(mod, caps, compression))\n  end\nend\n"}}]},{"html_id":"novika/Novika/Frontend/Nki","path":"Novika/Frontend/Nki.html","kind":"module","full_name":"Novika::Frontend::Nki","name":"Nki","abstract":false,"locations":[{"filename":"src/nki.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/Nki","kind":"module","full_name":"Novika::Frontend::Nki","name":"Nki"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"help(io)-instance-method","name":"help","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/nki.cr","line_number":7,"url":null},"def":{"name":"help","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"nki - Novika image interpreter for Novika #{Novika::VERSION}\\n\\nSyntax:\\n\\n  nki [switches] <path/to/image.nki>\\n\\nSwitches:\\n\\n  -c  Interpret image as that of the continuations block\\n\\nExample:\\n\\n  $ nkas -cb:b repl repl.nki\\n  [assembles the repl]\\n\\n  $ nki repl.nki\\n  [starts the repl; the following REPL session demonstates\\n   the use of the '-c' switch]\\n  >>> 100 $: x\\n  >>> 200 $: y\\n  >>> 'repl-save00.nki' disk:touch\\n  >>> conts nki:captureAll\\n  \\\"Note! It is important to write to disk in the next REPL\\n   prompt, because otherwise, nki:captureAll will capture\\n   before pushing the image byteslice, and before your\\n   write command. In short, this leaves your REPL save in\\n   an 'unexpected' state.\\\"\\n  >>> 'repl-save00.nki' disk:write\\n  <Ctrl-D>\\n  $ nki -c repl-save00.nki\\n  >>> x y + echo\\n  300\\n\\nPurpose:\\n\\n  A tool aimed for being carried along with a Novika image,\\n  to be able to run/load it.\\n\""}},{"html_id":"start-instance-method","name":"start","abstract":false,"location":{"filename":"src/nki.cr","line_number":50,"url":null},"def":{"name":"start","visibility":"Public","body":"if ARGV.size < 1\n  help(STDOUT)\n  exit(0)\nend\nconts = ARGV.delete(\"-c\")\ncaps = Novika::CapabilityCollection.with_available\nfilepath = Path[ARGV[-1]].expand\nfiledir = filepath.parent\ncaps.on_load_library? do |id|\n  paths = {filedir, filedir / \"lib\"}\n  {% if flag?(:windows) %}\n        paths = paths.flat_map { |path| [path / \"#{id}.dll\", path / \"lib#{id}.dll\"] }\n      {% else %}{% if flag?(:unix) %}\n        paths = paths.flat_map { |path| [path / \"#{id}.so\", path / \"lib#{id}.so\"] }\n      {% else %}\n        next\n      {% end %}{% end %}\n  path = paths.each do |path|\n    if File.exists?(path)\n      break path\n    end\n  end\n  if path\n    Library.new(id, path)\n  end\nend\nFile.open(filepath, \"r\") do |infile|\n  begin\n    image = infile.read_bytes(Novika::Image)\n    block = image.to_block(caps)\n    engine = Novika::Engine.push(caps)\n    if conts\n      engine.conts = block\n      engine.exhaust\n    else\n      block.parent = Block.new(caps.block)\n      block.at(Word.new(\"__path__\"), Quote.new(filedir.to_s))\n      block.at(Word.new(\"__file__\"), Quote.new(filepath.to_s))\n      engine.schedule!(block, stack: Block.new)\n      engine.exhaust\n    end\n  rescue error : Novika::Error\n    error.report(STDERR)\n  rescue error : BinData::CustomException\n    Frontend.errln(\"This file doesn't seem like a valid Novika image: '#{ARGV[-1]}'\")\n    exit(1)\n  end\nend\n"}}]}]},{"html_id":"novika/Novika/FrozenBlock","path":"Novika/FrozenBlock.html","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":421,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock]","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 2, cls: Novika::FrozenBlock, onlyif: nil, verify: nil}, {type: \"basic\", name: id, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"group\", name: tape, cls: Tape, onlyif: -> do\n  has_tape\nend, verify: nil, value: nil}, {type: \"group\", name: dict, cls: Dict, onlyif: -> do\n  has_dict\nend, verify: nil, value: nil}, {type: \"group\", name: friends, cls: Friends, onlyif: -> do\n  has_friends\nend, verify: nil, value: nil}, {type: \"basic\", name: parent, cls: BlockRefSnapshot | ::Nil, onlyif: -> do\n  has_parent\nend, verify: nil, value: nil}, {type: \"basic\", name: prototype, cls: BlockRefSnapshot | ::Nil, onlyif: -> do\n  is_instance\nend, verify: nil, value: nil}, {type: \"string\", name: comment, cls: String, onlyif: -> do\n  has_comment\nend, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(id,tape,dict,friends,parent,prototype,comment)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""},{"name":"tape","external_name":"tape","restriction":""},{"name":"dict","external_name":"dict","restriction":""},{"name":"friends","external_name":"friends","restriction":""},{"name":"parent","external_name":"parent","restriction":""},{"name":"prototype","external_name":"prototype","restriction":""},{"name":"comment","external_name":"comment","restriction":""}],"args_string":"(id, tape, dict, friends, parent, prototype, comment)","args_html":"(id, tape, dict, friends, parent, prototype, comment)","location":{"filename":"src/novika/image.cr","line_number":487,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":""},{"name":"tape","external_name":"tape","restriction":""},{"name":"dict","external_name":"dict","restriction":""},{"name":"friends","external_name":"friends","restriction":""},{"name":"parent","external_name":"parent","restriction":""},{"name":"prototype","external_name":"prototype","restriction":""},{"name":"comment","external_name":"comment","restriction":""}],"visibility":"Public","body":"frozen = new\nfrozen.id = id\nfrozen.has_tape = !(!tape)\nif tape\n  frozen.tape.cursor = tape.cursor.to_u32\n  frozen.tape.substrate = [] of TypedSnapshot\n  tape.each do |form|\n    if ts = TypedSnapshot.new(form)\n      frozen.tape.substrate << ts\n    end\n  end\nend\nfrozen.has_dict = !(!dict)\nif dict\n  frozen.dict.entries = [] of FrozenEntry\n  dict.each do |key, entry|\n    frozen.dict.entries << (FrozenEntry.new(key, entry))\n  end\nend\nfrozen.has_friends = !(!friends)\nif friends\n  frozen.friends.refs = [] of BlockRefSnapshot\n  friends.each do |friend|\n    friend = friend.as(Block)\n    frozen.friends.refs << (BlockRefSnapshot.new(friend.object_id))\n  end\nend\nfrozen.has_parent = !(!parent)\nif parent\n  frozen.parent = BlockRefSnapshot.new(parent.object_id)\nend\nfrozen.is_instance = !(!prototype)\nif prototype\n  frozen.prototype = BlockRefSnapshot.new(prototype.object_id)\nend\nfrozen.has_comment = !(!comment)\nif comment\n  frozen.comment = comment\nend\nfrozen\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":422,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"comment:String-instance-method","name":"comment","doc":"Holds the string comment, if one exists.","summary":"<p>Holds the string comment, if one exists.</p>","abstract":false,"def":{"name":"comment","return_type":"String","visibility":"Public","body":"@comment"}},{"html_id":"comment=(comment:String)-instance-method","name":"comment=","doc":"Holds the string comment, if one exists.","summary":"<p>Holds the string comment, if one exists.</p>","abstract":false,"args":[{"name":"comment","external_name":"comment","restriction":"String"}],"args_string":"(comment : String)","args_html":"(comment : <a href=\"../String.html\">String</a>)","def":{"name":"comment=","args":[{"name":"comment","external_name":"comment","restriction":"String"}],"visibility":"Public","body":"@comment = comment"}},{"html_id":"dict:Novika::FrozenBlock::Dict-instance-method","name":"dict","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"def":{"name":"dict","visibility":"Public","body":"@dict"}},{"html_id":"dict=(dict:Novika::FrozenBlock::Dict)-instance-method","name":"dict=","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"dict","external_name":"dict","restriction":"::Novika::FrozenBlock::Dict"}],"args_string":"(dict : Novika::FrozenBlock::Dict)","args_html":"(dict : <a href=\"../Novika/FrozenBlock/Dict.html\">Novika::FrozenBlock::Dict</a>)","def":{"name":"dict=","args":[{"name":"dict","external_name":"dict","restriction":"::Novika::FrozenBlock::Dict"}],"visibility":"Public","body":"@dict = dict"}},{"html_id":"friends:Novika::FrozenBlock::Friends-instance-method","name":"friends","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"def":{"name":"friends","visibility":"Public","body":"@friends"}},{"html_id":"friends=(friends:Novika::FrozenBlock::Friends)-instance-method","name":"friends=","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"friends","external_name":"friends","restriction":"::Novika::FrozenBlock::Friends"}],"args_string":"(friends : Novika::FrozenBlock::Friends)","args_html":"(friends : <a href=\"../Novika/FrozenBlock/Friends.html\">Novika::FrozenBlock::Friends</a>)","def":{"name":"friends=","args":[{"name":"friends","external_name":"friends","restriction":"::Novika::FrozenBlock::Friends"}],"visibility":"Public","body":"@friends = friends"}},{"html_id":"has_comment:Bool-instance-method","name":"has_comment","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":437,"url":null},"def":{"name":"has_comment","return_type":"Bool","visibility":"Public","body":"@has_comment == 1"}},{"html_id":"has_comment=(has_comment:UInt8)-instance-method","name":"has_comment=","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"args":[{"name":"has_comment","external_name":"has_comment","restriction":"UInt8"}],"args_string":"(has_comment : UInt8)","args_html":"(has_comment : UInt8)","def":{"name":"has_comment=","args":[{"name":"has_comment","external_name":"has_comment","restriction":"UInt8"}],"visibility":"Public","body":"@has_comment = has_comment"}},{"html_id":"has_comment=(value:Bool)-instance-method","name":"has_comment=","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":437,"url":null},"def":{"name":"has_comment=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_comment = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_dict:Bool-instance-method","name":"has_dict","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":428,"url":null},"def":{"name":"has_dict","return_type":"Bool","visibility":"Public","body":"@has_dict == 1"}},{"html_id":"has_dict=(has_dict:UInt8)-instance-method","name":"has_dict=","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"args":[{"name":"has_dict","external_name":"has_dict","restriction":"UInt8"}],"args_string":"(has_dict : UInt8)","args_html":"(has_dict : UInt8)","def":{"name":"has_dict=","args":[{"name":"has_dict","external_name":"has_dict","restriction":"UInt8"}],"visibility":"Public","body":"@has_dict = has_dict"}},{"html_id":"has_dict=(value:Bool)-instance-method","name":"has_dict=","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":428,"url":null},"def":{"name":"has_dict=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_dict = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_friends:Bool-instance-method","name":"has_friends","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":430,"url":null},"def":{"name":"has_friends","return_type":"Bool","visibility":"Public","body":"@has_friends == 1"}},{"html_id":"has_friends=(has_friends:UInt8)-instance-method","name":"has_friends=","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"args":[{"name":"has_friends","external_name":"has_friends","restriction":"UInt8"}],"args_string":"(has_friends : UInt8)","args_html":"(has_friends : UInt8)","def":{"name":"has_friends=","args":[{"name":"has_friends","external_name":"has_friends","restriction":"UInt8"}],"visibility":"Public","body":"@has_friends = has_friends"}},{"html_id":"has_friends=(value:Bool)-instance-method","name":"has_friends=","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":430,"url":null},"def":{"name":"has_friends=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_friends = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_parent:Bool-instance-method","name":"has_parent","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":432,"url":null},"def":{"name":"has_parent","return_type":"Bool","visibility":"Public","body":"@has_parent == 1"}},{"html_id":"has_parent=(has_parent:UInt8)-instance-method","name":"has_parent=","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"args":[{"name":"has_parent","external_name":"has_parent","restriction":"UInt8"}],"args_string":"(has_parent : UInt8)","args_html":"(has_parent : UInt8)","def":{"name":"has_parent=","args":[{"name":"has_parent","external_name":"has_parent","restriction":"UInt8"}],"visibility":"Public","body":"@has_parent = has_parent"}},{"html_id":"has_parent=(value:Bool)-instance-method","name":"has_parent=","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":432,"url":null},"def":{"name":"has_parent=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_parent = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_tape:Bool-instance-method","name":"has_tape","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"has_tape","return_type":"Bool","visibility":"Public","body":"@has_tape == 1"}},{"html_id":"has_tape=(has_tape:UInt8)-instance-method","name":"has_tape=","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"args":[{"name":"has_tape","external_name":"has_tape","restriction":"UInt8"}],"args_string":"(has_tape : UInt8)","args_html":"(has_tape : UInt8)","def":{"name":"has_tape=","args":[{"name":"has_tape","external_name":"has_tape","restriction":"UInt8"}],"visibility":"Public","body":"@has_tape = has_tape"}},{"html_id":"has_tape=(value:Bool)-instance-method","name":"has_tape=","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"has_tape=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_tape = UInt8.new(value ? 1 : 0)"}},{"html_id":"id:UInt64-instance-method","name":"id","doc":"Block identifier (`BlockRefSnapshot`s will refer to\nthis frozen block by this identifier).","summary":"<p>Block identifier (<code><a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a></code>s will refer to this frozen block by this identifier).</p>","abstract":false,"def":{"name":"id","return_type":"UInt64","visibility":"Public","body":"@id"}},{"html_id":"id=(id:UInt64)-instance-method","name":"id=","doc":"Block identifier (`BlockRefSnapshot`s will refer to\nthis frozen block by this identifier).","summary":"<p>Block identifier (<code><a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a></code>s will refer to this frozen block by this identifier).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"@id = id"}},{"html_id":"is_instance:Bool-instance-method","name":"is_instance","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":435,"url":null},"def":{"name":"is_instance","return_type":"Bool","visibility":"Public","body":"@is_instance == 1"}},{"html_id":"is_instance=(is_instance:UInt8)-instance-method","name":"is_instance=","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"args":[{"name":"is_instance","external_name":"is_instance","restriction":"UInt8"}],"args_string":"(is_instance : UInt8)","args_html":"(is_instance : UInt8)","def":{"name":"is_instance=","args":[{"name":"is_instance","external_name":"is_instance","restriction":"UInt8"}],"visibility":"Public","body":"@is_instance = is_instance"}},{"html_id":"is_instance=(value:Bool)-instance-method","name":"is_instance=","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":435,"url":null},"def":{"name":"is_instance=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@is_instance = UInt8.new(value ? 1 : 0)"}},{"html_id":"parent:BlockRefSnapshot|Nil-instance-method","name":"parent","doc":"Holds a ref to the parent block, in case there is a parent.","summary":"<p>Holds a ref to the parent block, in case there is a parent.</p>","abstract":false,"def":{"name":"parent","return_type":"BlockRefSnapshot | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"parent=(parent:BlockRefSnapshot|Nil)-instance-method","name":"parent=","doc":"Holds a ref to the parent block, in case there is a parent.","summary":"<p>Holds a ref to the parent block, in case there is a parent.</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"BlockRefSnapshot | ::Nil"}],"args_string":"(parent : BlockRefSnapshot | Nil)","args_html":"(parent : <a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"BlockRefSnapshot | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"prototype:BlockRefSnapshot|Nil-instance-method","name":"prototype","doc":"Holds a ref to the block's prototype, in case it is\ndifferent from the block itself.","summary":"<p>Holds a ref to the block's prototype, in case it is different from the block itself.</p>","abstract":false,"def":{"name":"prototype","return_type":"BlockRefSnapshot | ::Nil","visibility":"Public","body":"@prototype"}},{"html_id":"prototype=(prototype:BlockRefSnapshot|Nil)-instance-method","name":"prototype=","doc":"Holds a ref to the block's prototype, in case it is\ndifferent from the block itself.","summary":"<p>Holds a ref to the block's prototype, in case it is different from the block itself.</p>","abstract":false,"args":[{"name":"prototype","external_name":"prototype","restriction":"BlockRefSnapshot | ::Nil"}],"args_string":"(prototype : BlockRefSnapshot | Nil)","args_html":"(prototype : <a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a> | Nil)","def":{"name":"prototype=","args":[{"name":"prototype","external_name":"prototype","restriction":"BlockRefSnapshot | ::Nil"}],"visibility":"Public","body":"@prototype = prototype"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"tape:Novika::FrozenBlock::Tape-instance-method","name":"tape","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"def":{"name":"tape","visibility":"Public","body":"@tape"}},{"html_id":"tape=(tape:Novika::FrozenBlock::Tape)-instance-method","name":"tape=","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"tape","external_name":"tape","restriction":"::Novika::FrozenBlock::Tape"}],"args_string":"(tape : Novika::FrozenBlock::Tape)","args_html":"(tape : <a href=\"../Novika/FrozenBlock/Tape.html\">Novika::FrozenBlock::Tape</a>)","def":{"name":"tape=","args":[{"name":"tape","external_name":"tape","restriction":"::Novika::FrozenBlock::Tape"}],"visibility":"Public","body":"@tape = tape"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/FrozenBlock/Dict","path":"Novika/FrozenBlock/Dict.html","kind":"class","full_name":"Novika::FrozenBlock::Dict","name":"Dict","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":459,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Dict]","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  entries.size\nend}, {type: \"array\", name: entries, cls: FrozenEntry, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of dictionary entries.","summary":"<p>Holds the amount of dictionary entries.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of dictionary entries.","summary":"<p>Holds the amount of dictionary entries.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"entries:Array(FrozenEntry)-instance-method","name":"entries","doc":"Holds dictionary entries.","summary":"<p>Holds dictionary entries.</p>","abstract":false,"def":{"name":"entries","return_type":"Array(FrozenEntry)","visibility":"Public","body":"@entries"}},{"html_id":"entries=(entries:Array(FrozenEntry))-instance-method","name":"entries=","doc":"Holds dictionary entries.","summary":"<p>Holds dictionary entries.</p>","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":"Array(FrozenEntry)"}],"args_string":"(entries : Array(FrozenEntry))","args_html":"(entries : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FrozenEntry.html\">FrozenEntry</a>))","def":{"name":"entries=","args":[{"name":"entries","external_name":"entries","restriction":"Array(FrozenEntry)"}],"visibility":"Public","body":"@entries = entries"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":459,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/FrozenBlock/Friends","path":"Novika/FrozenBlock/Friends.html","kind":"class","full_name":"Novika::FrozenBlock::Friends","name":"Friends","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":469,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Friends]","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  refs.size\nend}, {type: \"array\", name: refs, cls: BlockRefSnapshot, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of block friends.","summary":"<p>Holds the amount of block friends.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of block friends.","summary":"<p>Holds the amount of block friends.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":469,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"refs:Array(BlockRefSnapshot)-instance-method","name":"refs","doc":"Holds references to block friends.","summary":"<p>Holds references to block friends.</p>","abstract":false,"def":{"name":"refs","return_type":"Array(BlockRefSnapshot)","visibility":"Public","body":"@refs"}},{"html_id":"refs=(refs:Array(BlockRefSnapshot))-instance-method","name":"refs=","doc":"Holds references to block friends.","summary":"<p>Holds references to block friends.</p>","abstract":false,"args":[{"name":"refs","external_name":"refs","restriction":"Array(BlockRefSnapshot)"}],"args_string":"(refs : Array(BlockRefSnapshot))","args_html":"(refs : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a>))","def":{"name":"refs=","args":[{"name":"refs","external_name":"refs","restriction":"Array(BlockRefSnapshot)"}],"visibility":"Public","body":"@refs = refs"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/FrozenBlock/Tape","path":"Novika/FrozenBlock/Tape.html","kind":"class","full_name":"Novika::FrozenBlock::Tape","name":"Tape","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":448,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Tape]","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: cursor, cls: UInt32, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  substrate.size\nend}, {type: \"array\", name: substrate, cls: TypedSnapshot, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of items in tape's substrate.","summary":"<p>Holds the amount of items in tape's substrate.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of items in tape's substrate.","summary":"<p>Holds the amount of items in tape's substrate.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"cursor:UInt32-instance-method","name":"cursor","doc":"Holds the cursor position.","summary":"<p>Holds the cursor position.</p>","abstract":false,"def":{"name":"cursor","return_type":"UInt32","visibility":"Public","body":"@cursor"}},{"html_id":"cursor=(cursor:UInt32)-instance-method","name":"cursor=","doc":"Holds the cursor position.","summary":"<p>Holds the cursor position.</p>","abstract":false,"args":[{"name":"cursor","external_name":"cursor","restriction":"UInt32"}],"args_string":"(cursor : UInt32)","args_html":"(cursor : UInt32)","def":{"name":"cursor=","args":[{"name":"cursor","external_name":"cursor","restriction":"UInt32"}],"visibility":"Public","body":"@cursor = cursor"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":448,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"substrate:Array(TypedSnapshot)-instance-method","name":"substrate","doc":"Holds tape substrate.","summary":"<p>Holds tape substrate.</p>","abstract":false,"def":{"name":"substrate","return_type":"Array(TypedSnapshot)","visibility":"Public","body":"@substrate"}},{"html_id":"substrate=(substrate:Array(TypedSnapshot))-instance-method","name":"substrate=","doc":"Holds tape substrate.","summary":"<p>Holds tape substrate.</p>","abstract":false,"args":[{"name":"substrate","external_name":"substrate","restriction":"Array(TypedSnapshot)"}],"args_string":"(substrate : Array(TypedSnapshot))","args_html":"(substrate : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/TypedSnapshot.html\">TypedSnapshot</a>))","def":{"name":"substrate=","args":[{"name":"substrate","external_name":"substrate","restriction":"Array(TypedSnapshot)"}],"visibility":"Public","body":"@substrate = substrate"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Novika/FrozenEntry","path":"Novika/FrozenEntry.html","kind":"class","full_name":"Novika::FrozenEntry","name":"FrozenEntry","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":389,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenEntry]","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 1, cls: Novika::FrozenEntry, onlyif: nil, verify: nil}, {type: \"basic\", name: key, cls: TypedSnapshot | ::Nil, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: value, cls: TypedSnapshot | ::Nil, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(key:Form,entry:Entry)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(key : Form, entry : Entry)","args_html":"(key : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>)","location":{"filename":"src/novika/image.cr","line_number":411,"url":null},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"visibility":"Public","body":"frozen = new\nfrozen.key = TypedSnapshot.new(key)\nfrozen.value = TypedSnapshot.new(entry.form)\nfrozen.opens = entry.is_a?(OpenEntry)\nfrozen\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":390,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"key:TypedSnapshot|Nil-instance-method","name":"key","doc":"Holds the key form.","summary":"<p>Holds the key form.</p>","abstract":false,"def":{"name":"key","return_type":"TypedSnapshot | ::Nil","visibility":"Public","body":"@key"}},{"html_id":"key=(key:TypedSnapshot|Nil)-instance-method","name":"key=","doc":"Holds the key form.","summary":"<p>Holds the key form.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"TypedSnapshot | ::Nil"}],"args_string":"(key : TypedSnapshot | Nil)","args_html":"(key : <a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a> | Nil)","def":{"name":"key=","args":[{"name":"key","external_name":"key","restriction":"TypedSnapshot | ::Nil"}],"visibility":"Public","body":"@key = key"}},{"html_id":"melt(assembler,block)-instance-method","name":"melt","doc":"Defines the corresponding entry in *block*.","summary":"<p>Defines the corresponding entry in <em>block</em>.</p>","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""},{"name":"block","external_name":"block","restriction":""}],"args_string":"(assembler, block)","args_html":"(assembler, block)","location":{"filename":"src/novika/image.cr","line_number":405,"url":null},"def":{"name":"melt","args":[{"name":"assembler","external_name":"assembler","restriction":""},{"name":"block","external_name":"block","restriction":""}],"visibility":"Public","body":"k = key.not_nil!.to_form(assembler)\nv = value.not_nil!.to_form(assembler)\nblock.at(k, (opens ? OpenEntry : Entry).new(v))\n"}},{"html_id":"opens:Bool-instance-method","name":"opens","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"opens","return_type":"Bool","visibility":"Public","body":"@opens == 1"}},{"html_id":"opens=(opens:UInt8)-instance-method","name":"opens=","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"args":[{"name":"opens","external_name":"opens","restriction":"UInt8"}],"args_string":"(opens : UInt8)","args_html":"(opens : UInt8)","def":{"name":"opens=","args":[{"name":"opens","external_name":"opens","restriction":"UInt8"}],"visibility":"Public","body":"@opens = opens"}},{"html_id":"opens=(value:Bool)-instance-method","name":"opens=","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"opens=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@opens = UInt8.new(value ? 1 : 0)"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"value:TypedSnapshot|Nil-instance-method","name":"value","doc":"Holds the value form, unless the value form is a builtin.","summary":"<p>Holds the value form, unless the value form is a builtin.</p>","abstract":false,"def":{"name":"value","return_type":"TypedSnapshot | ::Nil","visibility":"Public","body":"@value"}},{"html_id":"value=(value:TypedSnapshot|Nil)-instance-method","name":"value=","doc":"Holds the value form, unless the value form is a builtin.","summary":"<p>Holds the value form, unless the value form is a builtin.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"TypedSnapshot | ::Nil"}],"args_string":"(value : TypedSnapshot | Nil)","args_html":"(value : <a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a> | Nil)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"TypedSnapshot | ::Nil"}],"visibility":"Public","body":"@value = value"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Hole","path":"Novika/Hole.html","kind":"struct","full_name":"Novika::Hole","name":"Hole","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":39,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holes are similar to Crystal's `uninitialized` or `out`, in that\nthey allow you to allocate memory for a type, pass a pointer to\nthat memory to e.g. a C function, and let that C function write\ninto the memory. The written value can then be retrieved by\nopening the hole.","summary":"<p>Holes are similar to Crystal's <code>uninitialized</code> or <code>out</code>, in that they allow you to allocate memory for a type, pass a pointer to that memory to e.g.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":65,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"hole\""}}],"constructors":[{"html_id":"new(type:FFI::ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"FFI::ForeignType"}],"args_string":"(type : FFI::ForeignType)","args_html":"(type : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":46,"url":null},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"FFI::ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pointer:FFI::UntypedPointer)-class-method","name":"new","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":"FFI::UntypedPointer"}],"args_string":"(pointer : FFI::UntypedPointer)","args_html":"(pointer : <a href=\"../Novika/FFI/UntypedPointer.html\">FFI::UntypedPointer</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":50,"url":null},"def":{"name":"new","args":[{"name":"pointer","external_name":"pointer","restriction":"FFI::UntypedPointer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pointer)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the address of this hole's content in memory.","summary":"<p>Returns the address of this hole's content in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":56,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@handle.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the address of this hole's content in memory.","summary":"<p>Returns the address of this hole's content in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":56,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@handle.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":69,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"handle:Pointer(Void)-instance-method","name":"handle","doc":"Returns a pointer to this hole's content.","summary":"<p>Returns a pointer to this hole's content.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":44,"url":null},"def":{"name":"handle","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":58,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"form = (@type.unbox(@handle)).to_form?\nform.try(&.onto(engine.stack))\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":73,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[\") << @type) << \" hole: 0x\"\naddress.to_s(io, base: 16)\nio << \"]\"\n"}}]},{"html_id":"novika/Novika/Hook","path":"Novika/Hook.html","kind":"module","full_name":"Novika::Hook","name":"Hook","abstract":false,"locations":[{"filename":"src/novika/hook.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Hook","kind":"module","full_name":"Novika::Hook","name":"Hook"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"as_boolean-instance-method","name":"as_boolean","doc":"Returns the block-to-boolean hook name.","summary":"<p>Returns the block-to-boolean hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":70,"url":null},"def":{"name":"as_boolean","visibility":"Public","body":"Word.new(\"__boolean__\")"}},{"html_id":"as_byteslice-instance-method","name":"as_byteslice","doc":"Returns the block-to-byteslice hook name.","summary":"<p>Returns the block-to-byteslice hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":80,"url":null},"def":{"name":"as_byteslice","visibility":"Public","body":"Word.new(\"__byteslice__\")"}},{"html_id":"as_color-instance-method","name":"as_color","doc":"Returns the block-to-color hook name.","summary":"<p>Returns the block-to-color hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":55,"url":null},"def":{"name":"as_color","visibility":"Public","body":"Word.new(\"__color__\")"}},{"html_id":"as_decimal-instance-method","name":"as_decimal","doc":"Returns the block-to-decimal hook name.","summary":"<p>Returns the block-to-decimal hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":65,"url":null},"def":{"name":"as_decimal","visibility":"Public","body":"Word.new(\"__decimal__\")"}},{"html_id":"as_quote-instance-method","name":"as_quote","doc":"Returns the block-to-quote hook name.","summary":"<p>Returns the block-to-quote hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":60,"url":null},"def":{"name":"as_quote","visibility":"Public","body":"Word.new(\"__quote__\")"}},{"html_id":"as_quoted_word-instance-method","name":"as_quoted_word","doc":"Returns the block-to-quoted word hook name.","summary":"<p>Returns the block-to-quoted word hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":75,"url":null},"def":{"name":"as_quoted_word","visibility":"Public","body":"Word.new(\"__quotedWord__\")"}},{"html_id":"as_word-instance-method","name":"as_word","doc":"Returns the block-to-word hook name.","summary":"<p>Returns the block-to-word hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":50,"url":null},"def":{"name":"as_word","visibility":"Public","body":"Word.new(\"__word__\")"}},{"html_id":"died:Word-instance-method","name":"died","doc":"Returns the death hook name.\n\nDeath hooks are used to catch deaths (known as exceptions\nin other languages) in current block or in blocks below the\ncurrent block (nested blocks).\n\nBy defining a death hook, you are basically wrapping the\ncontents of your block in an uncontrained (catch-all)\n`try ... catch` or `begin ... rescue`.\n\n```novika\n[ getErrorDetails echo ] @: __died__\n\n1 0 / \"STDOUT: division by zero⏎\"\n```","summary":"<p>Returns the death hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":19,"url":null},"def":{"name":"died","return_type":"Word","visibility":"Public","body":"Word.new(\"__died__\")"}},{"html_id":"on_cherry-instance-method","name":"on_cherry","doc":"Returns the on-cherry hook name.\n\nOn-cherry hooks trigger when the user tries to *cherry*\na form out of a block. This doesn't necessarily mean using\nthe word `cherry`, since e.g. the word `drop` and its\nimplicit counterpart *pop* is defined in terms of `cherry`.\n\nDefining an on-shove hook will allow you to change how\nyour block behaves when it's used as a stack and dropped/\npopped from, and how it behaves when it is `cherry`d.\n\nOn-shove hook is complemented by `on_shove` hook. See it\nto learn more.\n\nThe \"Hello, World\" of on-shove/on-cherry is defining a\n*controlled stack*.\n\n```novika\n[\n  [ ] $: _controlledStack\n\n  [ drop _controlledStack swap bi: ['Shove ' swap ~ echo] shove ] @: __shove__\n  [ drop _controlledStack cherry dup 'Cherry ' swap ~ echo ] @: __cherry__\n\n  [ _controlledStack echo ] @: print\n] obj $: master\n\nmaster [ 1 2 + ] there\nmaster.print\n\"STDOUT: Shove 1⏎\"\n\"STDOUT: Shove 2⏎\"\n\"STDOUT: Cherry 2⏎\"\n\"STDOUT: Cherry 1⏎\"\n\"STDOUT: Shove 3⏎\"\n\"STDOUT: [ 3 ]⏎\"\n```","summary":"<p>Returns the on-cherry hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":142,"url":null},"def":{"name":"on_cherry","visibility":"Public","body":"Word.new(\"__cherry__\")"}},{"html_id":"on_shove-instance-method","name":"on_shove","doc":"Returns the on-shove hook name.\n\nOn-shove hooks trigger when the user tries to `shove` a\nform into the block the hook is attached to. Note that\nthis doesn't necessarily mean literally using `shove`.\n\nFor instance, simply typing `1 2 3` will shove 1, 2, 3\nconsequtively onto the stack. The latter is known as\n*pushing*, since *shoving* is defined for a block-and-a-\nform pair, while *pushing* is defined for a stack-and-a-\nform-pair, where the stack is implicit.\n\nDefining an on-shove hook will allow you to change how\nyour block behaves when it's used as a stack and pushed\nto, and how it behaves when it is shoved into.\n\nOn-shove hook is complemented by `on_cherry`. See it to\nlearn more.","summary":"<p>Returns the on-shove hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":102,"url":null},"def":{"name":"on_shove","visibility":"Public","body":"Word.new(\"__shove__\")"}},{"html_id":"trap-instance-method","name":"trap","doc":"Returns the word trap hook name.\n\nWord traps catch undefined words. Note that during word\nresolution, word traps run *last*. That is, all parents\nand friends of the block you're trying to resolve a word\nin are searched, and only then traps are triggered in the\nappropriate order.\n\nTraps can be nested: if one trap fails to resolve a word,\nthen an outer trap is triggered.\n\nThe words *outer*, *inner*, *nested* etc. refer to the block\nparent hierarchy. Initially, this means the hierarchy is\nAST-like, but for reparented blocks (or blocks whose parent\nhierarchy is changed otherwise), different traps will be\ntriggered in case of an undefined word.\n\n```novika\n[ 'The following word is undefined: ' swap ~ echo ] @: __trap__\n\n1 2 + frobnicate \"STDOUT: The following word is undefined: frobnicate⏎\"\n```","summary":"<p>Returns the word trap hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":45,"url":null},"def":{"name":"trap","visibility":"Public","body":"Word.new(\"__trap__\")"}}]},{"html_id":"novika/Novika/ICapability","path":"Novika/ICapability.html","kind":"module","full_name":"Novika::ICapability","name":"ICapability","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":17,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/Capabilities/Impl/Colors","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors"},{"html_id":"novika/Novika/Capabilities/Impl/Essential","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential"},{"html_id":"novika/Novika/Capabilities/Impl/FFI","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI"},{"html_id":"novika/Novika/Capabilities/Impl/Nki","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki"},{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Instance-side (`include`) interface to a Novika capability.\nAll capability instances must be compatible with this module.","summary":"<p>Instance-side (<code>include</code>) interface to a Novika capability.</p>","constructors":[{"html_id":"new(capabilities)-class-method","name":"new","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":""}],"args_string":"(capabilities)","args_html":"(capabilities)","location":{"filename":"src/novika/capability.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"capabilities","external_name":"capabilities","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(capabilities)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"capabilities:CapabilityCollection-instance-method","name":"capabilities","doc":"Returns the collection this capability is a part of.","summary":"<p>Returns the collection this capability is a part of.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":19,"url":null},"def":{"name":"capabilities","return_type":"CapabilityCollection","visibility":"Public","body":"@capabilities"}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":true,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capability.cr","line_number":25,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/ICapabilityClass","path":"Novika/ICapabilityClass.html","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Class-side (`extend`) interface to a Novika capability. All\ncapability classes must be compatible with this module.","summary":"<p>Class-side (<code>extend</code>) interface to a Novika capability.</p>","instance_methods":[{"html_id":"id:String-instance-method","name":"id","doc":"Returns the frontend identifier of this capability class.","summary":"<p>Returns the frontend identifier of this capability class.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":6,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":""}},{"html_id":"on_by_default?:Bool-instance-method","name":"on_by_default?","doc":"Returns whether this capability class should be enabled automatically.","summary":"<p>Returns whether this capability class should be enabled automatically.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":12,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":""}},{"html_id":"purpose:String-instance-method","name":"purpose","doc":"Returns a short description on what this capability class provides.","summary":"<p>Returns a short description on what this capability class provides.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/IDict","path":"Novika/IDict.html","kind":"module","full_name":"Novika::IDict","name":"IDict","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Dict","kind":"struct","full_name":"Novika::Dict","name":"Dict"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Novika dictionary protocol. Objects or values that want\nto be Block dictionaries can implement this protocol to\nmake that possible.","summary":"<p>Novika dictionary protocol.</p>","instance_methods":[{"html_id":"copy:IDict-instance-method","name":"copy","doc":"Returns a *shallow* copy of this dictionary.","summary":"<p>Returns a <em>shallow</em> copy of this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":31,"url":null},"def":{"name":"copy","return_type":"IDict","visibility":"Public","body":""}},{"html_id":"each(&:Form,Form->)-instance-method","name":"each","doc":"Yields key, value forms in this dictionary.","summary":"<p>Yields key, value forms in this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":34,"url":null},"def":{"name":"each","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Form, Form ->)"},"visibility":"Public","body":""}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this dictionary currently stores no entries.","summary":"<p>Returns whether this dictionary currently stores no entries.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":25,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":""}},{"html_id":"get(name:Form,&:Form->Entry|Nil):Entry|Nil-instance-method","name":"get","doc":"Returns the entry corresponding to *name* form in this\ndictionary, or yields with *name* and returns the block\nresult.","summary":"<p>Returns the entry corresponding to <em>name</em> form in this dictionary, or yields with <em>name</em> and returns the block result.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form, & : Form -> Entry | Nil) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, & : <a href=\"../Novika/Form.html\">Form</a> -> <a href=\"../Novika/Entry.html\">Entry</a> | Nil) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":12,"url":null},"def":{"name":"get","args":[{"name":"name","external_name":"name","restriction":"Form"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Form -> Entry | ::Nil)"},"return_type":"Entry | ::Nil","visibility":"Public","body":""}},{"html_id":"has?(name:Form):Bool-instance-method","name":"has?","doc":"Returns whether this dictionary has an entry corresponding\nto *name* form.","summary":"<p>Returns whether this dictionary has an entry corresponding to <em>name</em> form.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":16,"url":null},"def":{"name":"has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"import!(donor:IDict)-instance-method","name":"import!","doc":"Imports entries from *donor* dictionary into this dictionary.\n\nEntries whose names are preceded by one or more `_` are\nnot imported (they are considered private).","summary":"<p>Imports entries from <em>donor</em> dictionary into this dictionary.</p>","abstract":true,"args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"args_string":"(donor : IDict)","args_html":"(donor : <a href=\"../Novika/IDict.html\">IDict</a>)","location":{"filename":"src/novika/dict.cr","line_number":22,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"visibility":"Public","body":""}},{"html_id":"names:Array(Form)-instance-method","name":"names","doc":"Lists all name forms stored in this dictionary.","summary":"<p>Lists all name forms stored in this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":28,"url":null},"def":{"name":"names","return_type":"Array(Form)","visibility":"Public","body":""}},{"html_id":"set(name:Form,entry:Entry):Entry-instance-method","name":"set","doc":"Assigns *name* form to *entry* in this dictionary.","summary":"<p>Assigns <em>name</em> form to <em>entry</em> in this dictionary.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/dict.cr","line_number":7,"url":null},"def":{"name":"set","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"Entry","visibility":"Public","body":""}},{"html_id":"to_dict:Dict-instance-method","name":"to_dict","doc":"Converts this dictionary to the standard `Dict` implementation\n(used in e.g. serialization).","summary":"<p>Converts this dictionary to the standard <code><a href=\"../Novika/Dict.html\">Dict</a></code> implementation (used in e.g.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":38,"url":null},"def":{"name":"to_dict","return_type":"Dict","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/IExhaustTracker","path":"Novika/IExhaustTracker.html","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker","abstract":false,"locations":[{"filename":"src/novika/engine.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"on_form_begin(engine:Engine,form:Form)-instance-method","name":"on_form_begin","doc":"Invoked before *engine* opens the given *form*.","summary":"<p>Invoked before <em>engine</em> opens the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":4,"url":null},"def":{"name":"on_form_begin","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"on_form_end(engine:Engine,form:Form)-instance-method","name":"on_form_end","doc":"Invoked after *engine* opened the given *form*.","summary":"<p>Invoked after <em>engine</em> opened the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":8,"url":null},"def":{"name":"on_form_end","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Image","path":"Novika/Image.html","kind":"class","full_name":"Novika::Image","name":"Image","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":893,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::Image]","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: signature, cls: String, onlyif: nil, verify: -> do\n  signature == \"NKI\"\nend, length: -> do\n  3\nend, value: nil, encoding: nil}, {type: \"bitfield\", name: 3, cls: Novika::Image, onlyif: nil, verify: nil}] of Nil","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"REMAINING","name":"REMAINING","value":"[{type: \"bytes\", name: payload, onlyif: nil, verify: nil}] of Nil","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(payload:ImagePayload,compression=CompressionType::GzipFast)-class-method","name":"new","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"ImagePayload"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""}],"args_string":"(payload : ImagePayload, compression = CompressionType::GzipFast)","args_html":"(payload : <a href=\"../Novika/ImagePayload.html\">ImagePayload</a>, compression = <span class=\"t\">CompressionType</span><span class=\"t\">::</span><span class=\"t\">GzipFast</span>)","location":{"filename":"src/novika/image.cr","line_number":958,"url":null},"def":{"name":"new","args":[{"name":"payload","external_name":"payload","restriction":"ImagePayload"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""}],"visibility":"Public","body":"image = new\nimage.compression = compression\nbuffer = IO::Memory.new\nwriter = case compression\nin .none?\n  buffer\nin .gzip_fast?\n  Compress::Gzip::Writer.new(buffer, Compress::Gzip::BEST_SPEED)\nin .gzip_best?\n  Compress::Gzip::Writer.new(buffer, Compress::Gzip::BEST_COMPRESSION)\nin .brotli_fast?\n  Compress::Brotli::Writer.new(buffer, options: Compress::Brotli::WriterOptions.new(quality: 4_u32))\nin .brotli_best?\n  Compress::Brotli::Writer.new(buffer, options: Compress::Brotli::WriterOptions.new(quality: 11_u32))\nend\nwriter.write_bytes(payload)\nwriter.close\nimage.payload = buffer.to_slice\nimage\n"}},{"html_id":"new(block:Block,caps:CapabilityCollection,compression=CompressionType::GzipFast,mode=CaptureMode::CaptureAll)-class-method","name":"new","doc":"Returns the `Image` formed with this block as the pivot\nblock. Needs access to the current capability collection,\n*caps*, to read which capabilities are going to be required\nto run the image.\n\nYou can optionally specify the *compression* method\nused. For a list of available compression methods, see\nthe `CompressionType` enum.\n\nYou can optionally specify *mode*. See `BlockVisitor::VisitMode`\nfor a list of available visit modes.","summary":"<p>Returns the <code><a href=\"../Novika/Image.html\">Image</a></code> formed with this block as the pivot block.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(block : Block, caps : CapabilityCollection, compression = CompressionType::GzipFast, mode = CaptureMode::CaptureAll)","args_html":"(block : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, compression = <span class=\"t\">CompressionType</span><span class=\"t\">::</span><span class=\"t\">GzipFast</span>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":1000,"url":null},"def":{"name":"new","args":[{"name":"block","external_name":"block","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"new(ImagePayload.new(block, caps, mode), compression)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":894,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"compression:CompressionType-instance-method","name":"compression","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"compression","return_type":"CompressionType","visibility":"Public","body":"CompressionType.new(@compression.to_i)"}},{"html_id":"compression=(compression:UInt8)-instance-method","name":"compression=","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"args":[{"name":"compression","external_name":"compression","restriction":"UInt8"}],"args_string":"(compression : UInt8)","args_html":"(compression : UInt8)","def":{"name":"compression=","args":[{"name":"compression","external_name":"compression","restriction":"UInt8"}],"visibility":"Public","body":"@compression = compression"}},{"html_id":"compression=(value:CompressionType)-instance-method","name":"compression=","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"CompressionType"}],"args_string":"(value : CompressionType)","args_html":"(value : <a href=\"../Novika/Image/CompressionType.html\">CompressionType</a>)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"compression=","args":[{"name":"value","external_name":"value","restriction":"CompressionType"}],"visibility":"Public","body":"@compression = (@compression.class.new(0)) | value.to_i"}},{"html_id":"payload:Bytes-instance-method","name":"payload","doc":"Holds the payload, which may or may not be compressed.","summary":"<p>Holds the payload, which may or may not be compressed.</p>","abstract":false,"def":{"name":"payload","return_type":"Bytes","visibility":"Public","body":"@payload"}},{"html_id":"payload=(payload:Bytes)-instance-method","name":"payload=","doc":"Holds the payload, which may or may not be compressed.","summary":"<p>Holds the payload, which may or may not be compressed.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Bytes"}],"args_string":"(payload : Bytes)","args_html":"(payload : Bytes)","def":{"name":"payload=","args":[{"name":"payload","external_name":"payload","restriction":"Bytes"}],"visibility":"Public","body":"@payload = payload"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"signature:String-instance-method","name":"signature","doc":"Holds Novika image signature, the string 'NKI'.","summary":"<p>Holds Novika image signature, the string 'NKI'.</p>","abstract":false,"def":{"name":"signature","return_type":"String","visibility":"Public","body":"@signature"}},{"html_id":"signature=(signature:String)-instance-method","name":"signature=","doc":"Holds Novika image signature, the string 'NKI'.","summary":"<p>Holds Novika image signature, the string 'NKI'.</p>","abstract":false,"args":[{"name":"signature","external_name":"signature","restriction":"String"}],"args_string":"(signature : String)","args_html":"(signature : <a href=\"../String.html\">String</a>)","def":{"name":"signature=","args":[{"name":"signature","external_name":"signature","restriction":"String"}],"visibility":"Public","body":"@signature = signature"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Reconstructs the pivot block and its hierarchy from this\nimage. Returns the resulting block.\n\nCapability collection *caps* is required to make sure all\nrequired capabilities are enabled/available.","summary":"<p>Reconstructs the pivot block and its hierarchy from this image.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":936,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"buffer = IO::Memory.new(payload)\nreader = case compression\nin .none?\n  buffer\nin .gzip_fast?, .gzip_best?\n  Compress::Gzip::Reader.new(buffer)\nin .brotli_fast?, .brotli_best?\n  Compress::Brotli::Reader.new(buffer)\nend\npayload = reader.read_bytes(ImagePayload)\nreader.close\npayload.to_block(caps)\n"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Image = Novika::Image.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capabilities(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capabilities","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_capabilities","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Capabilities = Novika::ImagePayload::Capabilities.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/Image/CompressionType","path":"Novika/Image/CompressionType.html","kind":"enum","full_name":"Novika::Image::CompressionType","name":"CompressionType","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":897,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0","doc":"No compression. May yield very large files.","summary":"<p>No compression.</p>"},{"id":"GzipFast","name":"GzipFast","value":"1","doc":"Use(s) fast but not best Gzip compression.","summary":"<p>Use(s) fast but not best Gzip compression.</p>"},{"id":"GzipBest","name":"GzipBest","value":"2","doc":"Use(s) best but not fast Gzip compression.","summary":"<p>Use(s) best but not fast Gzip compression.</p>"},{"id":"BrotliFast","name":"BrotliFast","value":"3","doc":"Use(s) fast but not best Brotli compression.\nGenerally slower than `GzipFast`, but almost\ncertainly will yield better results.","summary":"<p>Use(s) fast but not best Brotli compression.</p>"},{"id":"BrotliBest","name":"BrotliBest","value":"4","doc":"Use(s) best but not fast Brotli compression.\nGenerally slower than `GzipBest`, but almost\ncertainly will yield better results.","summary":"<p>Use(s) best but not fast Brotli compression.</p>"}],"namespace":{"html_id":"novika/Novika/Image","kind":"class","full_name":"Novika::Image","name":"Image"},"doc":"Lists all available payload compression types.","summary":"<p>Lists all available payload compression types.</p>","instance_methods":[{"html_id":"brotli_best?-instance-method","name":"brotli_best?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":915,"url":null},"def":{"name":"brotli_best?","visibility":"Public","body":"self == BrotliBest"}},{"html_id":"brotli_fast?-instance-method","name":"brotli_fast?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":910,"url":null},"def":{"name":"brotli_fast?","visibility":"Public","body":"self == BrotliFast"}},{"html_id":"gzip_best?-instance-method","name":"gzip_best?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":905,"url":null},"def":{"name":"gzip_best?","visibility":"Public","body":"self == GzipBest"}},{"html_id":"gzip_fast?-instance-method","name":"gzip_fast?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":902,"url":null},"def":{"name":"gzip_fast?","visibility":"Public","body":"self == GzipFast"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":899,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}}]}]},{"html_id":"novika/Novika/ImagePayload","path":"Novika/ImagePayload.html","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":800,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload]","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"MONTHLY","name":"MONTHLY","value":"VERSION_MATCH[3].to_u8","doc":"Monthly increment of the current Novika version.","summary":"<p>Monthly increment of the current Novika version.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"group\", name: ver, cls: Ver, onlyif: nil, verify: -> do\n  (ver.rev == 10) && ({ver.subrev, ver.yearly, ver.monthly} == {SUBREV, YEARLY, MONTHLY})\nend, value: nil}, {type: \"group\", name: capabilities, cls: Capabilities, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: pool, cls: BlockPool | ::Nil, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"SUBREV","name":"SUBREV","value":"VERSION_MATCH[1].to_u8","doc":"Subrevision (release) of the current Novika version.","summary":"<p>Subrevision (release) of the current Novika version.</p>"},{"id":"VERSION_MATCH","name":"VERSION_MATCH","value":"((/(\\d+)\\.(\\d+)\\.(\\d+)/).match(Novika::VERSION)).not_nil!"},{"id":"YEARLY","name":"YEARLY","value":"VERSION_MATCH[2].to_u8","doc":"Yearly increment of the current Novika version.","summary":"<p>Yearly increment of the current Novika version.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(pivot:Block,caps:CapabilityCollection,mode=CaptureMode::CaptureAll)-class-method","name":"new","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(pivot : Block, caps : CapabilityCollection, mode = CaptureMode::CaptureAll)","args_html":"(pivot : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":881,"url":null},"def":{"name":"new","args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"image = new\nimage.capabilities.required = caps.enabled.map do |fcls|\n  CapabilityId.new(fcls.id)\nend\nimage.pool = BlockPool.new(pivot, caps, mode)\nimage\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":801,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"capabilities:Novika::ImagePayload::Capabilities-instance-method","name":"capabilities","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"def":{"name":"capabilities","visibility":"Public","body":"@capabilities"}},{"html_id":"capabilities=(capabilities:Novika::ImagePayload::Capabilities)-instance-method","name":"capabilities=","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"::Novika::ImagePayload::Capabilities"}],"args_string":"(capabilities : Novika::ImagePayload::Capabilities)","args_html":"(capabilities : <a href=\"../Novika/ImagePayload/Capabilities.html\">Novika::ImagePayload::Capabilities</a>)","def":{"name":"capabilities=","args":[{"name":"capabilities","external_name":"capabilities","restriction":"::Novika::ImagePayload::Capabilities"}],"visibility":"Public","body":"@capabilities = capabilities"}},{"html_id":"pool:BlockPool|Nil-instance-method","name":"pool","doc":"Holds the block pool.","summary":"<p>Holds the block pool.</p>","abstract":false,"def":{"name":"pool","return_type":"BlockPool | ::Nil","visibility":"Public","body":"@pool"}},{"html_id":"pool=(pool:BlockPool|Nil)-instance-method","name":"pool=","doc":"Holds the block pool.","summary":"<p>Holds the block pool.</p>","abstract":false,"args":[{"name":"pool","external_name":"pool","restriction":"BlockPool | ::Nil"}],"args_string":"(pool : BlockPool | Nil)","args_html":"(pool : <a href=\"../Novika/BlockPool.html\">BlockPool</a> | Nil)","def":{"name":"pool=","args":[{"name":"pool","external_name":"pool","restriction":"BlockPool | ::Nil"}],"visibility":"Public","body":"@pool = pool"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Converts this image payload to a block, aided by *caps*.\n\nSee `Image#to_block`.","summary":"<p>Converts this image payload to a block, aided by <em>caps</em>.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":865,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"capabilities.required.each do |fid|\n  if caps.has_capability?(fid.id)\n  else\n    raise(Novika::Error.new(\"image requires capability '#{fid.id}', but it isn't available\"))\n  end\n  caps.enable(fid.id)\nend\npool.not_nil!.to_block(caps)\n"}},{"html_id":"ver:Novika::ImagePayload::Ver-instance-method","name":"ver","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"def":{"name":"ver","visibility":"Public","body":"@ver"}},{"html_id":"ver=(ver:Novika::ImagePayload::Ver)-instance-method","name":"ver=","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"ver","external_name":"ver","restriction":"::Novika::ImagePayload::Ver"}],"args_string":"(ver : Novika::ImagePayload::Ver)","args_html":"(ver : <a href=\"../Novika/ImagePayload/Ver.html\">Novika::ImagePayload::Ver</a>)","def":{"name":"ver=","args":[{"name":"ver","external_name":"ver","restriction":"::Novika::ImagePayload::Ver"}],"visibility":"Public","body":"@ver = ver"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/ImagePayload/Capabilities","path":"Novika/ImagePayload/Capabilities.html","kind":"class","full_name":"Novika::ImagePayload::Capabilities","name":"Capabilities","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":852,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload::Capabilities]","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  required.size\nend}, {type: \"array\", name: required, cls: CapabilityId, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"}],"namespace":{"html_id":"novika/Novika/ImagePayload","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload"},"doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of required capabilities.","summary":"<p>Holds the amount of required capabilities.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of required capabilities.","summary":"<p>Holds the amount of required capabilities.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":852,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::ImagePayload|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"args_string":"(parent : Novika::ImagePayload | Nil)","args_html":"(parent : <a href=\"../../Novika/ImagePayload.html\">Novika::ImagePayload</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"required:Array(CapabilityId)-instance-method","name":"required","doc":"Holds IDs of required capabilities (namely `ICapabilityClass.id`).","summary":"<p>Holds IDs of required capabilities (namely <code><a href=\"../../Novika/ICapabilityClass.html#id%3AString-instance-method\">ICapabilityClass.id</a></code>).</p>","abstract":false,"def":{"name":"required","return_type":"Array(CapabilityId)","visibility":"Public","body":"@required"}},{"html_id":"required=(required:Array(CapabilityId))-instance-method","name":"required=","doc":"Holds IDs of required capabilities (namely `ICapabilityClass.id`).","summary":"<p>Holds IDs of required capabilities (namely <code><a href=\"../../Novika/ICapabilityClass.html#id%3AString-instance-method\">ICapabilityClass.id</a></code>).</p>","abstract":false,"args":[{"name":"required","external_name":"required","restriction":"Array(CapabilityId)"}],"args_string":"(required : Array(CapabilityId))","args_html":"(required : <a href=\"../../Array.html\">Array</a>(CapabilityId))","def":{"name":"required=","args":[{"name":"required","external_name":"required","restriction":"Array(CapabilityId)"}],"visibility":"Public","body":"@required = required"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capabilities(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capabilities","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capabilities","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Capabilities = Novika::ImagePayload::Capabilities.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/ImagePayload/Ver","path":"Novika/ImagePayload/Ver.html","kind":"class","full_name":"Novika::ImagePayload::Ver","name":"Ver","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":827,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload::Ver]","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: rev, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: subrev, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  SUBREV\nend}, {type: \"basic\", name: yearly, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  YEARLY\nend}, {type: \"basic\", name: monthly, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  MONTHLY\nend}] of Nil","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"}],"namespace":{"html_id":"novika/Novika/ImagePayload","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload"},"doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"monthly:UInt8-instance-method","name":"monthly","doc":"Montly version increment:\n\n  0.0.5\n     ---","summary":"<p>Montly version increment:</p>","abstract":false,"def":{"name":"monthly","return_type":"UInt8","visibility":"Public","body":"@monthly"}},{"html_id":"monthly=(monthly:UInt8)-instance-method","name":"monthly=","doc":"Montly version increment:\n\n  0.0.5\n     ---","summary":"<p>Montly version increment:</p>","abstract":false,"args":[{"name":"monthly","external_name":"monthly","restriction":"UInt8"}],"args_string":"(monthly : UInt8)","args_html":"(monthly : UInt8)","def":{"name":"monthly=","args":[{"name":"monthly","external_name":"monthly","restriction":"UInt8"}],"visibility":"Public","body":"@monthly = monthly"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":827,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::ImagePayload|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"args_string":"(parent : Novika::ImagePayload | Nil)","args_html":"(parent : <a href=\"../../Novika/ImagePayload.html\">Novika::ImagePayload</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"rev:UInt8-instance-method","name":"rev","doc":"Revision number (this is revision 10).","summary":"<p>Revision number (this is revision 10).</p>","abstract":false,"def":{"name":"rev","return_type":"UInt8","visibility":"Public","body":"@rev"}},{"html_id":"rev=(rev:UInt8)-instance-method","name":"rev=","doc":"Revision number (this is revision 10).","summary":"<p>Revision number (this is revision 10).</p>","abstract":false,"args":[{"name":"rev","external_name":"rev","restriction":"UInt8"}],"args_string":"(rev : UInt8)","args_html":"(rev : UInt8)","def":{"name":"rev=","args":[{"name":"rev","external_name":"rev","restriction":"UInt8"}],"visibility":"Public","body":"@rev = rev"}},{"html_id":"subrev:UInt8-instance-method","name":"subrev","doc":"Subrevision (release) increment:\n\n   0.0.5\n  ---","summary":"<p>Subrevision (release) increment:</p>","abstract":false,"def":{"name":"subrev","return_type":"UInt8","visibility":"Public","body":"@subrev"}},{"html_id":"subrev=(subrev:UInt8)-instance-method","name":"subrev=","doc":"Subrevision (release) increment:\n\n   0.0.5\n  ---","summary":"<p>Subrevision (release) increment:</p>","abstract":false,"args":[{"name":"subrev","external_name":"subrev","restriction":"UInt8"}],"args_string":"(subrev : UInt8)","args_html":"(subrev : UInt8)","def":{"name":"subrev=","args":[{"name":"subrev","external_name":"subrev","restriction":"UInt8"}],"visibility":"Public","body":"@subrev = subrev"}},{"html_id":"yearly:UInt8-instance-method","name":"yearly","doc":"Yearly version increment:\n\n  0.0.5\n   ---","summary":"<p>Yearly version increment:</p>","abstract":false,"def":{"name":"yearly","return_type":"UInt8","visibility":"Public","body":"@yearly"}},{"html_id":"yearly=(yearly:UInt8)-instance-method","name":"yearly=","doc":"Yearly version increment:\n\n  0.0.5\n   ---","summary":"<p>Yearly version increment:</p>","abstract":false,"args":[{"name":"yearly","external_name":"yearly","restriction":"UInt8"}],"args_string":"(yearly : UInt8)","args_html":"(yearly : UInt8)","def":{"name":"yearly=","args":[{"name":"yearly","external_name":"yearly","restriction":"UInt8"}],"visibility":"Public","body":"@yearly = yearly"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Novika/IReadableStore","path":"Novika/IReadableStore.html","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":154,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Implementors act like a form-to-form mapping where entry\nkind (opens/pushes) is ignored (basically, a read-only,\nrestricted subset of block methods for dictionary access).\n\nImplementors can be targets of `entry:fetch`, `entry:fetch?`,\n`entry:exists?`, `entry:isOpenEntry?`.","summary":"<p>Implementors act like a form-to-form mapping where entry kind (opens/pushes) is ignored (basically, a read-only, restricted subset of block methods for dictionary access).</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":155,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"readable store\""}}],"instance_methods":[{"html_id":"form_for(name:Form):Form-instance-method","name":"form_for","doc":"Returns the value form for an entry with the given *name*, or\ndies if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or dies if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a>","location":{"filename":"src/novika/dict.cr","line_number":178,"url":null},"def":{"name":"form_for","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form","visibility":"Public","body":"(form_for?(name)) || (name.die(\"no value form for '#{name}'\"))"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":164,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":160,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"opens?(name:Form)-instance-method","name":"opens?","doc":"Returns whether *name* opens its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this block.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":169,"url":null},"def":{"name":"opens?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"pushes?(name:Form)-instance-method","name":"pushes?","doc":"Returns whether *name* pushes its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this block.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":174,"url":null},"def":{"name":"pushes?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/ISubmittableStore","path":"Novika/ISubmittableStore.html","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":184,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Implementors can be targets of `entry:submit`.","summary":"<p>Implementors can be targets of <code>entry:submit</code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":185,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"submittable store\""}}],"instance_methods":[{"html_id":"submit(name:Form,form:Form)-instance-method","name":"submit","doc":"Submits value *form* to an entry with the given *name*.\nDies if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":195,"url":null},"def":{"name":"submit","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"(submit?(name, form)) || (name.die(\"no entry to submit to\"))"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":191,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/LargeDecimalSnapshot","path":"Novika/LargeDecimalSnapshot.html","kind":"class","full_name":"Novika::LargeDecimalSnapshot","name":"LargeDecimalSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":151,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::LargeDecimalSnapshot]","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: repr, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Decimal)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":161,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"decimal = new\ndecimal.repr = form.to_s\ndecimal\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":152,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"repr:String-instance-method","name":"repr","doc":"Holds the string representation of the decimal value.","summary":"<p>Holds the string representation of the decimal value.</p>","abstract":false,"def":{"name":"repr","return_type":"String","visibility":"Public","body":"@repr"}},{"html_id":"repr=(repr:String)-instance-method","name":"repr=","doc":"Holds the string representation of the decimal value.","summary":"<p>Holds the string representation of the decimal value.</p>","abstract":false,"args":[{"name":"repr","external_name":"repr","restriction":"String"}],"args_string":"(repr : String)","args_html":"(repr : <a href=\"../String.html\">String</a>)","def":{"name":"repr=","args":[{"name":"repr","external_name":"repr","restriction":"String"}],"visibility":"Public","body":"@repr = repr"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":157,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Decimal.new(repr)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Library","path":"Novika/Library.html","kind":"class","full_name":"Novika::Library","name":"Library","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":306,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A library is a collection of foreign functions.\n\nA library form can be opened with a block of *function declarations*\nto be exposed. Each function declaration consists of the function's\nname and type signature. Exposed functions are then defined in the\nopener block.\n\nFor more details, see Novika's `ffi:getLibrary`.\n\nInternally, library objects are created by the frontend and fed\nto the capability collection `caps`. When needed, they are\nretrieved from this capability collection.","summary":"<p>A library is a collection of foreign functions.</p>","class_methods":[{"html_id":"new?(id:String,path:Path):Library|Nil-class-method","name":"new?","doc":"Initializes a library for the dynamic library at *path*,\nwith the given *id*entifier (it may be chosen arbitrarily).\n\nReturns nil if the library could not be loaded.","summary":"<p>Initializes a library for the dynamic library at <em>path</em>, with the given <em>id</em>entifier (it may be chosen arbitrarily).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(id : String, path : Path) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>, path : Path) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":366,"url":null},"def":{"name":"new?","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Library | ::Nil","visibility":"Public","body":"if handle = LibDl.dlopen(path.to_s, LibDl::RTLD_NOW)\nelse\n  return\nend\nnew(id, path, handle)\n"}},{"html_id":"new?(id:String,resolver:RunnableResolver):Library|Nil-class-method","name":"new?","doc":"Tries to find the library with the given *id* in the\nsystem-specific library directories and in the current\nworking directory.\n\nReturns nil if the library could not be found / loaded.","summary":"<p>Tries to find the library with the given <em>id</em> in the system-specific library directories and in the current working directory.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"}],"args_string":"(id : String, resolver : RunnableResolver) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>, resolver : <a href=\"../Novika/RunnableResolver.html\">RunnableResolver</a>) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":325,"url":null},"def":{"name":"new?","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"}],"return_type":"Library | ::Nil","visibility":"Public","body":"candidates = [] of String\n{% if flag?(:windows) %}\n        candidates << \"#{id}.dll\"\n        candidates << \"lib#{id}.dll\"\n      {% else %}{% if flag?(:darwin) %}\n        candidates << \"#{id}.dylib\"\n        candidates << \"lib#{id}.dylib\"\n      {% else %}{% if flag?(:unix) %}\n        candidates << \"#{id}.so\"\n        candidates << \"lib#{id}.so\"\n      {% else %}\n        return\n      {% end %}{% end %}{% end %}\nCrystal::Loader.default_search_paths.each do |search_path|\n  candidates.each do |candidate|\n    if library = Library.new?(id, Path[search_path] / candidate)\n      return library\n    end\n  end\nend\ncandidates.each do |candidate|\n  if path = resolver.expand_runnable_path?(Path[candidate])\n  else\n    next\n  end\n  if library = Library.new?(id, path)\n  else\n    next\n  end\n  return library\nend\n"}},{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":529,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign library\""}}],"constructors":[{"html_id":"new(id:String,path:Path):Library-class-method","name":"new","doc":"Initializes a library for the dynamic library at *path*,\nwith the given *id*entifier (may be chosen arbitrarily).\n\nMay die if LibDL fails to load the library.","summary":"<p>Initializes a library for the dynamic library at <em>path</em>, with the given <em>id</em>entifier (may be chosen arbitrarily).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(id : String, path : Path) : Library","args_html":"(id : <a href=\"../String.html\">String</a>, path : Path) : <a href=\"../Novika/Library.html\">Library</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":376,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Library","visibility":"Public","body":"(new?(id, path)) || (raise(Error.new(String.new(LibDl.dlerror))))"}}],"instance_methods":[{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":533,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"finalize-instance-method","name":"finalize","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":316,"url":null},"def":{"name":"finalize","visibility":"Public","body":"LibDl.dlclose(@handle)"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this library.","summary":"<p>Returns the identifier of this library.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":311,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":518,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"this = engine.block\nfdecls = engine.stack.drop.a(Block)\nfdecls.each do |fdecl|\n  parse_fdecl(this, fdecl.a(Block))\nend\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":537,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[foreign library: \") << id) << \"]\""}}]},{"html_id":"novika/Novika/OpenEntry","path":"Novika/OpenEntry.html","kind":"class","full_name":"Novika::OpenEntry","name":"OpenEntry","abstract":false,"superclass":{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},"ancestors":[{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":143,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A kind of entry that, when opened, in turn opens its\nvalue form.","summary":"<p>A kind of entry that, when opened, in turn opens its value form.</p>","instance_methods":[{"html_id":"on_open(*args,**options)-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"on_open","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.on_open(*args, **options)"}},{"html_id":"on_open(*args,**options,&)-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"on_open","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.on_open(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"schedule(*args,**options)-instance-method","name":"schedule","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"schedule","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.schedule(*args, **options)"}},{"html_id":"schedule(*args,**options,&)-instance-method","name":"schedule","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"schedule","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.schedule(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"schedule!(*args,**options)-instance-method","name":"schedule!","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"schedule!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.schedule!(*args, **options)"}},{"html_id":"schedule!(*args,**options,&)-instance-method","name":"schedule!","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":145,"url":null},"def":{"name":"schedule!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.schedule!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"novika/Novika/Quote","path":"Novika/Quote.html","kind":"module","full_name":"Novika::Quote","name":"Quote","abstract":false,"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":18,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EMPTY","name":"EMPTY","value":"StringQuote.new(\"\", count: 0, ascii_only: true)","doc":"The empty quote.","summary":"<p>The empty quote.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"including_types":[{"html_id":"novika/Novika/Quote/GraphemeQuote","kind":"struct","full_name":"Novika::Quote::GraphemeQuote","name":"GraphemeQuote"},{"html_id":"novika/Novika/Quote/StringQuote","kind":"struct","full_name":"Novika::Quote::StringQuote","name":"StringQuote"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Includers are Novika quotes, which are known as strings\nin most other programming languages.\n\nQuotes are optimized for the ASCII-only case. Also, they\ntreat single `String::Grapheme`s separately from strings\nof those, and cache grapheme counts here and there.\n\nThe slowest operations on quotes are `slice_at` and `at`\nover *non- ASCII* quotes. Both are currently O(N) in terms\nof iterations only; they do a lot of other work besides\niteration as well.\n\nWhen you are slow, being even more slower doesn't matter\nthat much anymore. This is the case with Novika.\n\nAnd yes, quotes do rely on the experimental grapheme API.","summary":"<p>Includers are Novika quotes, which are known as strings in most other programming languages.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":50,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(string:String,count=string.grapheme_size,ascii=string.ascii_only?)-class-method","name":"new","doc":"Creates a quote from *string*.\n\n*count* can be provided if the amount of graphemes in\n*string* is known.","summary":"<p>Creates a quote from <em>string</em>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"count","default_value":"string.grapheme_size","external_name":"count","restriction":""},{"name":"ascii","default_value":"string.ascii_only?","external_name":"ascii","restriction":""}],"args_string":"(string : String, count = string.grapheme_size, ascii = string.ascii_only?)","args_html":"(string : <a href=\"../String.html\">String</a>, count = string.grapheme_size, ascii = string.ascii_only?)","location":{"filename":"src/novika/forms/quote.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"count","default_value":"string.grapheme_size","external_name":"count","restriction":""},{"name":"ascii","default_value":"string.ascii_only?","external_name":"ascii","restriction":""}],"visibility":"Public","body":"if count == 1\n  string.each_grapheme do |it|\n    return GraphemeQuote.new(it)\n  end\nend\nStringQuote.new(string, count, ascii)\n"}},{"html_id":"new(grapheme:String::Grapheme)-class-method","name":"new","doc":"Creates a quote from *grapheme*.","summary":"<p>Creates a quote from <em>grapheme</em>.</p>","abstract":false,"args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"args_string":"(grapheme : String::Grapheme)","args_html":"(grapheme : String::Grapheme)","location":{"filename":"src/novika/forms/quote.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"visibility":"Public","body":"GraphemeQuote.new(grapheme)"}},{"html_id":"new(char:Char)-class-method","name":"new","doc":"Creates a quote from *char*.","summary":"<p>Creates a quote from <em>char</em>.</p>","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/novika/forms/quote.cr","line_number":42,"url":null},"def":{"name":"new","args":[{"name":"char","external_name":"char","restriction":"Char"}],"visibility":"Public","body":"new(String::Grapheme.new(char))"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":69,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":true,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":65,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"at(index:Int32):Quote-instance-method","name":"at","doc":"Returns the grapheme at *index* as `Quote`, or dies.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../Novika/Quote.html\">Quote</a></code>, or dies.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Quote","args_html":"(index : Int32) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":157,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":"(at?(index)) || (die(\"grapheme index out of bounds\"))"}},{"html_id":"at?(index:Int32):Quote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":true,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Quote | Nil","args_html":"(index : Int32) : <a href=\"../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":58,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Quote | ::Nil","visibility":"Public","body":""}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached count of graphemes in this quote\nvariant. Returns nil if there is no cached count.","summary":"<p>Returns the cached count of graphemes in this quote variant.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":76,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":""}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":72,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/quote.cr","line_number":46,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"quote '\") << string) << \"'\""}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.","summary":"<p>Returns whether this quote is empty.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":79,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":""}},{"html_id":"first_byte?:UInt8|Nil-instance-method","name":"first_byte?","doc":"Returns the first byte (or nil) in this quote.","summary":"<p>Returns the first byte (or nil) in this quote.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":101,"url":null},"def":{"name":"first_byte?","return_type":"UInt8 | ::Nil","visibility":"Public","body":"string.byte_at?(0)"}},{"html_id":"ord?:Int32|Nil-instance-method","name":"ord?","doc":"Returns the Unicode codepoint for the first character in\nthis quote, or nil if this quote is empty.","summary":"<p>Returns the Unicode codepoint for the first character in this quote, or nil if this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":107,"url":null},"def":{"name":"ord?","return_type":"Int32 | ::Nil","visibility":"Public","body":"if empty?\nelse\n  string[0].ord\nend"}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":true,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../Novika/Quote.html\">Quote</a>, repl : <a href=\"../Novika/Quote.html\">Quote</a>) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":83,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"slice_at(slicept:Int32):Tuple(Quote,Quote)-instance-method","name":"slice_at","doc":"Slices this quote into two quotes at *slicept*. Returns\nthe two resulting quotes. Dies if *slicept* is out\nof bounds.","summary":"<p>Slices this quote into two quotes at <em>slicept</em>.</p>","abstract":false,"args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"args_string":"(slicept : Int32) : Tuple(Quote, Quote)","args_html":"(slicept : Int32) : Tuple(<a href=\"../Novika/Quote.html\">Quote</a>, <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/forms/quote.cr","line_number":134,"url":null},"def":{"name":"slice_at","args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"return_type":"::Tuple(Quote, Quote)","visibility":"Public","body":"(slice_at?(slicept)) || (die(\"slicepoint is out of bounds: #{slicept}\"))"}},{"html_id":"slice_at?(slicept:Int32):Tuple(Quote,Quote)|Nil-instance-method","name":"slice_at?","doc":"Slices this quote into two quotes at *slicept*. Returns\nthe two resulting quotes. Returns nil if *slicept* is out\nof bounds.","summary":"<p>Slices this quote into two quotes at <em>slicept</em>.</p>","abstract":false,"args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"args_string":"(slicept : Int32) : Tuple(Quote, Quote) | Nil","args_html":"(slicept : Int32) : Tuple(<a href=\"../Novika/Quote.html\">Quote</a>, <a href=\"../Novika/Quote.html\">Quote</a>) | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":141,"url":null},"def":{"name":"slice_at?","args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"return_type":"::Tuple(Quote, Quote) | ::Nil","visibility":"Public","body":"size = count\nif size.zero?\n  return\nend\nif slicept.in?(0..size)\nelse\n  return\nend\nif slicept.zero?\n  {EMPTY, self}\nelse\n  if slicept == size\n    {self, EMPTY}\n  else\n    slice_at!(slicept, size)\n  end\nend\n"}},{"html_id":"stitch(other:Quote):Quote-instance-method","name":"stitch","doc":"Stitches (concatenates) this and *other* quote variants,\nand returns the resulting quote.","summary":"<p>Stitches (concatenates) this and <em>other</em> quote variants, and returns the resulting quote.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Quote","args_html":"(other : <a href=\"../Novika/Quote.html\">Quote</a>) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":113,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"if empty?\n  return other\nend\nif other.empty?\n  return self\nend\na = cached_count?\nb = other.cached_count?\nif a && b\n  StringQuote.new(string + other.string, count: a + b)\nelse\n  StringQuote.new(res = string + other.string, count: res.grapheme_size)\nend\n"}},{"html_id":"string:String-instance-method","name":"string","doc":"Converts this quote variant to `String`.","summary":"<p>Converts this quote variant to <code><a href=\"../String.html\">String</a></code>.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":55,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":""}},{"html_id":"to_byteslice-instance-method","name":"to_byteslice","doc":"Returns an immutable  `Byteslice` representation of\nthis quote.","summary":"<p>Returns an immutable  <code><a href=\"../Novika/Byteslice.html\">Byteslice</a></code> representation of this quote.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":96,"url":null},"def":{"name":"to_byteslice","visibility":"Public","body":"Byteslice.new(string.to_slice, mutable: false)"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":161,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"self"}}],"types":[{"html_id":"novika/Novika/Quote/GraphemeQuote","path":"Novika/Quote/GraphemeQuote.html","kind":"struct","full_name":"Novika::Quote::GraphemeQuote","name":"GraphemeQuote","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":302,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"}],"namespace":{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},"doc":"Quote type for a single grapheme (perceived character).","summary":"<p>Quote type for a single grapheme (perceived character).</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":311,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(grapheme:String::Grapheme)-class-method","name":"new","abstract":false,"args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"args_string":"(grapheme : String::Grapheme)","args_html":"(grapheme : String::Grapheme)","location":{"filename":"src/novika/forms/quote.cr","line_number":308,"url":null},"def":{"name":"new","args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"visibility":"Public","body":"_ = allocate\n_.initialize(grapheme)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":352,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"other.is_a?(GraphemeQuote) && (other.grapheme == grapheme)"}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":327,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":"b == e ? self : EMPTY"}},{"html_id":"at?(index:Int32):Quote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Quote | Nil","args_html":"(index : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":323,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Quote | ::Nil","visibility":"Public","body":"if index.zero?\n  self\nend"}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached count of graphemes in this quote\nvariant. Returns nil if there is no cached count.\n\nGrapheme quotes always return 1.","summary":"<p>Returns the cached count of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":341,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":"1"}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.\n\nGrapheme quotes always return 1.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":334,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":"1"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.\n\nGrapheme quotes always return false.","summary":"<p>Returns whether this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":348,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"grapheme:String::Grapheme-instance-method","name":"grapheme","doc":"Returns the grapheme.","summary":"<p>Returns the grapheme.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":306,"url":null},"def":{"name":"grapheme","return_type":"String::Grapheme","visibility":"Public","body":"@grapheme"}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../../Novika/Quote.html\">Quote</a>, repl : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":365,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"self == pattern ? repl : self"}},{"html_id":"stitch(other:StringQuote):Quote-instance-method","name":"stitch","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"args_string":"(other : StringQuote) : Quote","args_html":"(other : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":319,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"return_type":"Quote","visibility":"Public","body":"other.empty? ? self : super(other)"}},{"html_id":"string:String-instance-method","name":"string","doc":"Converts this quote variant to `String`.","summary":"<p>Converts this quote variant to <code><a href=\"../../String.html\">String</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":315,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":"grapheme.to_s"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/quote.cr","line_number":369,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"'\"\ngrapheme.to_s.dump_unquoted(io)\nio << \"'\"\n"}}]},{"html_id":"novika/Novika/Quote/StringQuote","path":"Novika/Quote/StringQuote.html","kind":"struct","full_name":"Novika::Quote::StringQuote","name":"StringQuote","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":167,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"}],"namespace":{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},"doc":"Quote type for multiple (two or more), or no graphemes.","summary":"<p>Quote type for multiple (two or more), or no graphemes.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":186,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(string:String,countcached_count:Int32|Nil=nil,ascii_only:Bool=string.ascii_only?)-class-method","name":"new","doc":"Creates a string quote from the given *string*.","summary":"<p>Creates a string quote from the given <em>string</em>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"cached_count","default_value":"nil","external_name":"count","restriction":"Int32 | ::Nil"},{"name":"ascii_only","default_value":"string.ascii_only?","external_name":"ascii_only","restriction":"::Bool"}],"args_string":"(string : String, count cached_count : Int32 | Nil = nil, ascii_only : Bool = string.ascii_only?)","args_html":"(string : <a href=\"../../String.html\">String</a>, count cached_count : Int32 | Nil = <span class=\"n\">nil</span>, ascii_only : Bool = string.ascii_only?)","location":{"filename":"src/novika/forms/quote.cr","line_number":182,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"cached_count","default_value":"nil","external_name":"count","restriction":"Int32 | ::Nil"},{"name":"ascii_only","default_value":"string.ascii_only?","external_name":"ascii_only","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string, cached_count, ascii_only)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":288,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"other.is_a?(StringQuote) && (string == other.string)"}},{"html_id":"ascii_only?:Bool-instance-method","name":"ascii_only?","doc":"Returns whether this string quote consists of ASCII\ncharacters only.","summary":"<p>Returns whether this string quote consists of ASCII characters only.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":179,"url":null},"def":{"name":"ascii_only?","return_type":"Bool","visibility":"Public","body":"@ascii_only"}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":241,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":"b = Math.max(b, 0)\ne = Math.min(e, count - 1)\nif (b == 0) && (e == (count - 1))\n  return self\nend\nif b == e\n  return (at?(b)).not_nil!\nend\nif ascii_only?\n  StringQuote.new((b..e).join do |index|\n    byte = (string.byte_at?(index)).not_nil!\n    byte < 128 ? byte.unsafe_chr : Char::REPLACEMENT\n  end, count: e - b, ascii_only: true)\nelse\n  StringQuote.new(String.build do |io|\n    string.each_grapheme.with_index do |grapheme, index|\n      if index < b\n        next\n      end\n      if index > e\n        break\n      end\n      io << grapheme\n    end\n  end, count: e - b, ascii_only: false)\nend\n"}},{"html_id":"at?(index:Int32):Quote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Quote | Nil","args_html":"(index : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":227,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Quote | ::Nil","visibility":"Public","body":"if index.negative?\n  return\nend\nif ascii_only?\n  if byte = string.byte_at?(index)\n  else\n    return\n  end\n  char = byte < 128 ? byte.unsafe_chr : Char::REPLACEMENT\n  return GraphemeQuote.new(String::Grapheme.new(char))\nend\nstring.each_grapheme.with_index do |it, idx|\n  if idx == index\n    return GraphemeQuote.new(it)\n  end\nend\n"}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached perceived character count in this\nstring quote, or nil.","summary":"<p>Returns the cached perceived character count in this string quote, or nil.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":175,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":"@cached_count"}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":280,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":"cached_count? || string.grapheme_size"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.","summary":"<p>Returns whether this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":284,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"string.empty?"}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../../Novika/Quote.html\">Quote</a>, repl : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":292,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"Quote.new(string.gsub(pattern.string, repl.string))"}},{"html_id":"stitch(other:StringQuote)-instance-method","name":"stitch","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"args_string":"(other : StringQuote)","args_html":"(other : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>)","location":{"filename":"src/novika/forms/quote.cr","line_number":271,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"visibility":"Public","body":"if ascii_only? && other.ascii_only?\nelse\n  return super(other)\nend\nStringQuote.new(res = string + other.string, count: res.bytesize, ascii_only: true)\n"}},{"html_id":"string:String-instance-method","name":"string","doc":"Returns the underlying string.","summary":"<p>Returns the underlying string.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":171,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":"@string"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/quote.cr","line_number":296,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"'\"\nstring.dump_unquoted(io)\nio << \"'\"\n"}}]}]},{"html_id":"novika/Novika/QuotedWord","path":"Novika/QuotedWord.html","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/words.cr","line_number":78,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Quoted words are words prefixed by '#': e.g., `#foo`. It\nlets you 'coat' a word: `#foo open` is the same as `foo`,\n`##foo open` is the same as `#foo`, etc. Levels of coating\nare peeled off like in an onion.","summary":"<p>Quoted words are words prefixed by '#': e.g., <code>#foo</code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":92,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quoted word\""}}],"constructors":[{"html_id":"new(id:String)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/words.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/words.cr","line_number":88,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"quoted word '\") << id) << \"'\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = id.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the underlying string id.","summary":"<p>Returns the underlying string id.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":83,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine):self-instance-method","name":"on_parent_open","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : self","args_html":"(engine) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/words.cr","line_number":117,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"self","visibility":"Public","body":"tap do\n  peel.onto(engine.stack)\nend"}},{"html_id":"peel-instance-method","name":"peel","doc":"\"Peels\" off a layer of quoting.\n\n```\nQuotedWord.new(\"#foo\").peel   # Word.new(\"foo\")\nQuotedWord.new(\"##foo\").peel  # QuotedWord.new(\"#foo\")\nQuotedWord.new(\"###foo\").peel # QuotedWord.new(\"##foo\")\n```","summary":"<p>&quot;Peels&quot; off a layer of quoting.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":108,"url":null},"def":{"name":"peel","visibility":"Public","body":"id.prefixed_by?('#') ? QuotedWord.new(id.lchop) : Word.new(id)"}},{"html_id":"to_quoted_word-instance-method","name":"to_quoted_word","doc":"Adds another layer of quoting. Opposite of `peel`.","summary":"<p>Adds another layer of quoting.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":97,"url":null},"def":{"name":"to_quoted_word","visibility":"Public","body":"QuotedWord.new(\"##{@id}\")"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/words.cr","line_number":121,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << '#') << id"}},{"html_id":"to_word:Word-instance-method","name":"to_word","doc":"Converts this quoted word to `Word`.","summary":"<p>Converts this quoted word to <code><a href=\"../Novika/Word.html\">Word</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":113,"url":null},"def":{"name":"to_word","return_type":"Word","visibility":"Public","body":"Word.new(id.lstrip('#'))"}}]},{"html_id":"novika/Novika/QuotedWordSnapshot","path":"Novika/QuotedWordSnapshot.html","kind":"class","full_name":"Novika::QuotedWordSnapshot","name":"QuotedWordSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":216,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::QuotedWordSnapshot]","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:QuotedWord)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"args_string":"(form : QuotedWord)","args_html":"(form : <a href=\"../Novika/QuotedWord.html\">QuotedWord</a>)","location":{"filename":"src/novika/image.cr","line_number":226,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"visibility":"Public","body":"qword = new\nqword.id = form.id\nqword\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":217,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated id (name) of the quoted block.","summary":"<p>Holds the 0-terminated id (name) of the quoted block.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated id (name) of the quoted block.","summary":"<p>Holds the 0-terminated id (name) of the quoted block.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":222,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"QuotedWord.new(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/QuoteSnapshot","path":"Novika/QuoteSnapshot.html","kind":"class","full_name":"Novika::QuoteSnapshot","name":"QuoteSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":173,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::QuoteSnapshot]","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: bytesize, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  content.bytesize\nend}, {type: \"string\", name: content, cls: String, onlyif: nil, verify: nil, length: -> do\n  bytesize\nend, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Quote)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/image.cr","line_number":186,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"quote = new\nquote.content = form.string\nquote\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":174,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"bytesize:UInt64-instance-method","name":"bytesize","doc":"Holds the size of quote content, in bytes.","summary":"<p>Holds the size of quote content, in bytes.</p>","abstract":false,"def":{"name":"bytesize","return_type":"UInt64","visibility":"Public","body":"@bytesize"}},{"html_id":"bytesize=(bytesize:UInt64)-instance-method","name":"bytesize=","doc":"Holds the size of quote content, in bytes.","summary":"<p>Holds the size of quote content, in bytes.</p>","abstract":false,"args":[{"name":"bytesize","external_name":"bytesize","restriction":"UInt64"}],"args_string":"(bytesize : UInt64)","args_html":"(bytesize : UInt64)","def":{"name":"bytesize=","args":[{"name":"bytesize","external_name":"bytesize","restriction":"UInt64"}],"visibility":"Public","body":"@bytesize = bytesize"}},{"html_id":"content:String-instance-method","name":"content","doc":"Holds the content string.","summary":"<p>Holds the content string.</p>","abstract":false,"def":{"name":"content","return_type":"String","visibility":"Public","body":"@content"}},{"html_id":"content=(content:String)-instance-method","name":"content=","doc":"Holds the content string.","summary":"<p>Holds the content string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String)","args_html":"(content : <a href=\"../String.html\">String</a>)","def":{"name":"content=","args":[{"name":"content","external_name":"content","restriction":"String"}],"visibility":"Public","body":"@content = content"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":182,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Quote.new(content)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/RunnableResolver","path":"Novika/RunnableResolver.html","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":207,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"`RunnableResolver`'s (or resolver's for short) main\nobjective is -- who'd have guessed it! -- to *resolve* a\nlist of *runnables* to the appropriate file paths,\n`Folder`s, apps, and capability requests.\n\nIt also puts them in different lists, so that it's a bit\neasier for you to take care of them, after resolver has\ndone its job.\n\nImmediately after `resolve?`, all `folders`, `apps`,\n`files`, and `capabilities` identified by this resolver\nare guaranteed to exist. If an all-time guarantee is\nrequired, you should establish watchers and diff the\narrays as appropriate.\n\n```\n# caps : CapabilityCollection\n\nresolver = RunnableResolver.new([\"repl\"], caps, Path[Dir.current], Path.home)\nunless resolver.resolve?\n  abort \"Failed to resolve!\"\nedn\n\nresolver.capabilities.each { |cap_id| caps.enable(cap_id) }\nresolver.unknowns.each { |unknown| puts \"Not a runnable, skip: #{unknown}\" }\n\n# resolver.folders.each { |folder| ... }\n# resolver.files.each { |file| ... }\n# resolver.apps.each { |file| ... }\n# Do whatever you want with them!\n```","summary":"<p><code><a href=\"../Novika/RunnableResolver.html\">RunnableResolver</a></code>'s (or resolver's for short) main objective is -- who'd have guessed it! -- to <em>resolve</em> a list of <em>runnables</em> to the appropriate file paths, <code><a href=\"../Novika/Folder.html\">Folder</a></code>s, apps, and capability requests.</p>","constructors":[{"html_id":"new(runnables:Array(String),caps:CapabilityCollection,cwd:Path=Path[Dir.current],userhome:Path=Path.home)-class-method","name":"new","doc":"Initializes a `RunnableResolver`.\n\n*runnables* is the list of runnables to resolve.\n\n*caps* is the capability collection that will be used to\nverify whether a runnable is a capability id.\n\n*cwd* specifies the directory that this resolver will\nconsider its current working directory.\n\n*userhome* is assumed to be user's home directory.\n\nDefaults for the last two are sane enough.","summary":"<p>Initializes a <code><a href=\"../Novika/RunnableResolver.html\">RunnableResolver</a></code>.</p>","abstract":false,"args":[{"name":"runnables","external_name":"runnables","restriction":"Array(String)"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"cwd","default_value":"Path[Dir.current]","external_name":"cwd","restriction":"::Path"},{"name":"userhome","default_value":"Path.home","external_name":"userhome","restriction":"::Path"}],"args_string":"(runnables : Array(String), caps : CapabilityCollection, cwd : Path = Path[Dir.current], userhome : Path = Path.home)","args_html":"(runnables : <a href=\"../Array.html\">Array</a>(<a href=\"../String.html\">String</a>), caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, cwd : Path = <span class=\"t\">Path</span>[<span class=\"t\">Dir</span>.current], userhome : Path = <span class=\"t\">Path</span>.home)","location":{"filename":"src/novika/resolver.cr","line_number":269,"url":null},"def":{"name":"new","args":[{"name":"runnables","external_name":"runnables","restriction":"Array(String)"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"cwd","default_value":"Path[Dir.current]","external_name":"cwd","restriction":"::Path"},{"name":"userhome","default_value":"Path.home","external_name":"userhome","restriction":"::Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(runnables, caps, cwd, userhome)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"apps:Set(Novika::Folder)-instance-method","name":"apps","doc":"Holds the folders this resolver identified as apps in\nthe initial list of runnables.\n\nThis is determined by the presence of `.nk.app`, in\nwhat would be otherwise considered a folder.","summary":"<p>Holds the folders this resolver identified as apps in the initial list of runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":213,"url":null},"def":{"name":"apps","visibility":"Public","body":"@apps"}},{"html_id":"capabilities:Set(Novika::CapabilityRequest)-instance-method","name":"capabilities","doc":"Holds capability requests identified in the initial list of\nrunnables by this resolver (those with manual set to true),\nas well as capabilities requested in lib or app manifests\n(those with manual set to false).\n\nNote: resolver uses the capability collection it is given in\na read-only manner. You will have to enable the capabilities\nyourself (if that's what you want to do).","summary":"<p>Holds capability requests identified in the initial list of runnables by this resolver (those with manual set to true), as well as capabilities requested in lib or app manifests (those with manual set to false).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":244,"url":null},"def":{"name":"capabilities","visibility":"Public","body":"@capabilities"}},{"html_id":"cwd:Path-instance-method","name":"cwd","doc":"Returns the current working directory for this resolver.\n\nMay change as resolution progresses.","summary":"<p>Returns the current working directory for this resolver.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":254,"url":null},"def":{"name":"cwd","return_type":"Path","visibility":"Public","body":"@cwd"}},{"html_id":"expand_runnable_path?(path:Path)-instance-method","name":"expand_runnable_path?","doc":"Tries to expand runnable *path* to that in the current\nworking directory, or, if it doesn't exist there, to\nthat in the Novika environment directory. If both do\nnot exist, returns nil.","summary":"<p>Tries to expand runnable <em>path</em> to that in the current working directory, or, if it doesn't exist there, to that in the Novika environment directory.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path)","args_html":"(path : Path)","location":{"filename":"src/novika/resolver.cr","line_number":333,"url":null},"def":{"name":"expand_runnable_path?","args":[{"name":"path","external_name":"path","restriction":"Path"}],"visibility":"Public","body":"(expand_in_cwd?(path)) || (expand_in_env?(path))"}},{"html_id":"files:Set(Path)-instance-method","name":"files","doc":"Holds paths to Novika files in the initial list of\nrunnables, as per this resolver.","summary":"<p>Holds paths to Novika files in the initial list of runnables, as per this resolver.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":217,"url":null},"def":{"name":"files","visibility":"Public","body":"@files"}},{"html_id":"folders:Set(Novika::Folder)-instance-method","name":"folders","doc":"Holds non-application folders in the initial list of\nrunnables, as per this resolver.","summary":"<p>Holds non-application folders in the initial list of runnables, as per this resolver.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":221,"url":null},"def":{"name":"folders","visibility":"Public","body":"@folders"}},{"html_id":"permissions(&)-instance-method","name":"permissions","doc":"Reads (creates, if necessary) a permissions file in the\nNovika environment directory. Yields IO to the block.","summary":"<p>Reads (creates, if necessary) a permissions file in the Novika environment directory.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":362,"url":null},"def":{"name":"permissions","yields":1,"block_arity":1,"visibility":"Public","body":"io = nil\nenv.try do |env|\n  if File.exists?(env / MANIFEST_PERMISSIONS)\n  else\n    File.touch(env / MANIFEST_PERMISSIONS)\n  end\n  io = File.open(env / MANIFEST_PERMISSIONS, \"r+\")\nend\nio || (io = IO::Memory.new)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"resolve?:Bool-instance-method","name":"resolve?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":483,"url":null},"def":{"name":"resolve?","return_type":"Bool","visibility":"Public","body":"if @runnables.empty? && ((!env_core) || (!cwd_core))\n  return false\nend\nenv_core.try do |dir|\n  load(dir, core: true, explicit: false)\nend\ncwd_core.try do |dir|\n  load(dir, core: true, app: app?(@cwd) ? @cwd / MANIFEST_APP : nil, explicit: false)\nend\n@runnables.each do |runnable|\n  resolve(runnable)\nend\ncapabilities.select(&.manual?).each do |cap|\n  capabilities.reject! do |other|\n    (cap.id == other.id) && (!other.manual?)\n  end\nend\nfolders.reject! do |folder|\n  folder.app?.tap do |app|\n    if app\n      apps << folder\n    end\n  end\nend\ntrue\n"}},{"html_id":"shared_objects:Set(Path)-instance-method","name":"shared_objects","doc":"Holds platform-specific, `dlopen`-able shared objects\n(.so in Linux, .dll in Windows, .dylib in MacOS), later\nconsumed by the FFI/library machinery.\n\nNote that we don't actually check whether they *are* shared\nobjects or are simply files with an .so (.dll, .dylib) file\nextension.\n\nMostly for safety, shared objects are not loaded automatically.\nYou need to list them by hand in the initial runnable list; or\nmanually ask capability ffi to get them, in code.","summary":"<p>Holds platform-specific, <code>dlopen</code>-able shared objects (.so in Linux, .dll in Windows, .dylib in MacOS), later consumed by the FFI/library machinery.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":234,"url":null},"def":{"name":"shared_objects","visibility":"Public","body":"@shared_objects"}},{"html_id":"unknowns:Set(String)-instance-method","name":"unknowns","doc":"Holds runnables which have not been identified. You\ncan handle them as you wish: as per this resolver,\nthey are unrelated to Novika.","summary":"<p>Holds runnables which have not been identified.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":249,"url":null},"def":{"name":"unknowns","visibility":"Public","body":"@unknowns"}}]},{"html_id":"novika/Novika/Schedulable","path":"Novika/Schedulable.html","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable","abstract":false,"locations":[{"filename":"src/novika/forms/form.cr","line_number":26,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Marks this object as schedulable in `Engine`.","summary":"<p>Marks this object as schedulable in <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","instance_methods":[{"html_id":"schedule(engine:Engine,stack:Block)-instance-method","name":"schedule","doc":"Safe `schedule`. Schedules this form for opening (aka\nexecution or evaluation) in *engine*, or opens it\nimmediately (see `ShouldOpenWhenScheduled`).\n\nSee `Engine` to learn about the difference between `schedule`,\n`on_open`, and `on_parent_open`.","summary":"<p>Safe <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">#schedule</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":81,"url":null},"def":{"name":"schedule","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedule!(engine, stack)"}},{"html_id":"schedule!(engine:Engine,stack:Block)-instance-method","name":"schedule!","doc":"Unsafe `schedule`. Use `schedule` unless you have instantiated\nthis form yourself, or know what you're doing.\n\nOverride this if you want to implement both safe `schedule`\nand unsafe `schedule!` for your form type: safe `schedule`\nsimply delegates to `schedule!` unless it is explicitly\noverridden.\n\nBy default, simply pushes this form onto *stack*.","summary":"<p>Unsafe <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">#schedule</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":71,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"onto(stack)"}}],"types":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","path":"Novika/Schedulable/ShouldOpenWhenScheduled.html","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled","abstract":false,"locations":[{"filename":"src/novika/forms/form.cr","line_number":52,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Builtin","kind":"struct","full_name":"Novika::Builtin","name":"Builtin"},{"html_id":"novika/Novika/ForeignFunction","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction"},{"html_id":"novika/Novika/Hole","kind":"struct","full_name":"Novika::Hole","name":"Hole"},{"html_id":"novika/Novika/Library","kind":"class","full_name":"Novika::Library","name":"Library"},{"html_id":"novika/Novika/QuotedWord","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord"}],"namespace":{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},"doc":"The includer should be a `Form`.\n\nIf the scheduled stack is the same as the active stack,\nthe includer form is simply opened (see `Form#on_open`)\nwithout any kind of scheduling or waiting for the engine\nto pick it up.\n\nHowever, if the scheduled stack is different from the\nactive stack, things get just a bit more difficult.\n\nNamely, a fictious block holding this form is created,\nand scheduled \"as normal\". Then, this form is also\nsimply opened.\n\nNote that we *do not* set the fictious block's cursor\nto 0. This handles the following two things.\n\nFirst, the engine won't try to open the includer form\nagain on the next interpreter loop cycle (remember we\nalready called `Form#on_open` on it).\n\nSecond, if *form* schedules something else, all will work\nas expected: first, this something will run, and then all\nthat's above, again, without re-running the includer form\nbecause the cursor is past it.","summary":"<p>The includer should be a <code><a href=\"../../Novika/Form.html\">Form</a></code>.</p>","instance_methods":[{"html_id":"schedule!(engine:Engine,stack:Block)-instance-method","name":"schedule!","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, stack : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":53,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"if stack.same?(engine.stack)\nelse\n  engine.schedule!(stack: stack, block: Block[self])\nend\non_open(engine)\n"}}]}]},{"html_id":"novika/Novika/Scissors","path":"Novika/Scissors.html","kind":"struct","full_name":"Novika::Scissors","name":"Scissors","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/scissors.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Scissors deal with cutting a source string into fragments,\nknown as *unclassified forms*. They are then fed to an\ninstance of `Classifier`, which determines whether an\nunclassified form is actually a decimal, quoted word,\nquote, etc. You can think of Scissors as a fancy split-\nby-whitespace.\n\n`Scissors` and `Classifier` are designed to work in tandem.\nSeparating one from the other is possible and will work, but is\nnot recommended unless you have read the source code of both.","summary":"<p>Scissors deal with cutting a source string into fragments, known as <em>unclassified forms</em>.</p>","class_methods":[{"html_id":"cut(source:String,&:Int32,Int32,Int32|Nil->)-class-method","name":"cut","doc":"Cuts *source* into a series of *unclassified forms*; yields\nstart byte index and byte length of each to the block.","summary":"<p>Cuts <em>source</em> into a series of <em>unclassified forms</em>; yields start byte index and byte length of each to the block.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String, & : Int32, Int32, Int32 | Nil -> )","args_html":"(source : <a href=\"../String.html\">String</a>, & : Int32, Int32, Int32 | Nil -> )","location":{"filename":"src/novika/scissors.cr","line_number":215,"url":null},"def":{"name":"cut","args":[{"name":"source","external_name":"source","restriction":"String"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Int32, Int32, Int32 | ::Nil ->)"},"visibility":"Public","body":"slicer = new(source)\nslicer.each do |start, count, dot|\n  yield start, count, dot\nend\n"}}],"constructors":[{"html_id":"new(source:String)-class-method","name":"new","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/scissors.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Cuts the source string into a series of *unclassified forms*;\nyields start byte index, byte length, and first dot `'.'` byte\nindex of each to the block.\n\nDot byte index is yielded to save an O(N) search, which would\nbe otherwise required since '.' is handled specially by several\nforms in Novika.","summary":"<p>Cuts the source string into a series of <em>unclassified forms</em>; yields start byte index, byte length, and first dot <code>'.'</code> byte index of each to the block.</p>","abstract":false,"location":{"filename":"src/novika/scissors.cr","line_number":128,"url":null},"def":{"name":"each","yields":3,"block_arity":3,"visibility":"Public","body":"state = String::Grapheme::Property::Start\nlast_prop = String::Grapheme::Property::Start\nwhile !at_end?\n  prop = String::Grapheme::Property.from(chr)\n  boundary, state = String::Grapheme.break?(last_prop, prop, state)\n  last_prop = prop\n  if boundary\n  else\n    thru\n    next\n  end\n  case it = chr\n  when .whitespace?\n    while chr.whitespace?\n      if length.zero?\n      else\n        yield start, length, @dot\n      end\n      advance\n      cut\n    end\n  when '\\'', '\"'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    if nthru?(it, amt: 3)\n      thru(endswith: it, amt: 3)\n      yield start + 2, length - 4, @dot\n    else\n      thru(endswith: it)\n      yield start, length, @dot\n    end\n    cut\n  when '[', ']'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    thru\n    yield start, length, @dot\n    cut\n  when '(', ')'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    thru\n    cut\n  when '.'\n    @dot || (@dot = @cursor)\n    thru\n  else\n    thru\n  end\nend\nif length.zero?\nelse\n  yield start, length, @dot\nend\n"}}]},{"html_id":"novika/Novika/SmallDecimalSnapshot","path":"Novika/SmallDecimalSnapshot.html","kind":"class","full_name":"Novika::SmallDecimalSnapshot","name":"SmallDecimalSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":130,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::SmallDecimalSnapshot]","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: value, cls: Int64, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Decimal)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":140,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"decimal = new\ndecimal.value = form.to_i64\ndecimal\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":131,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":136,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Decimal.new(value)"}},{"html_id":"value:Int64-instance-method","name":"value","doc":"Holds the i64 value.","summary":"<p>Holds the i64 value.</p>","abstract":false,"def":{"name":"value","return_type":"Int64","visibility":"Public","body":"@value"}},{"html_id":"value=(value:Int64)-instance-method","name":"value=","doc":"Holds the i64 value.","summary":"<p>Holds the i64 value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int64"}],"args_string":"(value : Int64)","args_html":"(value : Int64)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"Int64"}],"visibility":"Public","body":"@value = value"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Snapshot","path":"Novika/Snapshot.html","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot","abstract":true,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":38,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"system\"]","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::Snapshot]","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"PARTS","name":"PARTS","value":"[] of Nil","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"}],"subclasses":[{"html_id":"novika/Novika/BlockRefSnapshot","kind":"class","full_name":"Novika::BlockRefSnapshot","name":"BlockRefSnapshot"},{"html_id":"novika/Novika/BooleanSnapshot","kind":"class","full_name":"Novika::BooleanSnapshot","name":"BooleanSnapshot"},{"html_id":"novika/Novika/BuiltinSnapshot","kind":"class","full_name":"Novika::BuiltinSnapshot","name":"BuiltinSnapshot"},{"html_id":"novika/Novika/BytesliceSnapshot","kind":"class","full_name":"Novika::BytesliceSnapshot","name":"BytesliceSnapshot"},{"html_id":"novika/Novika/ColorSnapshot","kind":"class","full_name":"Novika::ColorSnapshot","name":"ColorSnapshot"},{"html_id":"novika/Novika/LargeDecimalSnapshot","kind":"class","full_name":"Novika::LargeDecimalSnapshot","name":"LargeDecimalSnapshot"},{"html_id":"novika/Novika/QuotedWordSnapshot","kind":"class","full_name":"Novika::QuotedWordSnapshot","name":"QuotedWordSnapshot"},{"html_id":"novika/Novika/QuoteSnapshot","kind":"class","full_name":"Novika::QuoteSnapshot","name":"QuoteSnapshot"},{"html_id":"novika/Novika/SmallDecimalSnapshot","kind":"class","full_name":"Novika::SmallDecimalSnapshot","name":"SmallDecimalSnapshot"},{"html_id":"novika/Novika/WordSnapshot","kind":"class","full_name":"Novika::WordSnapshot","name":"WordSnapshot"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":38,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"to_form(assembler:BlockAssembler)-instance-method","name":"to_form","doc":"Converts this snapshot to the corresponding form.","summary":"<p>Converts this snapshot to the corresponding form.</p>","abstract":true,"args":[{"name":"assembler","external_name":"assembler","restriction":"BlockAssembler"}],"args_string":"(assembler : BlockAssembler)","args_html":"(assembler : BlockAssembler)","location":{"filename":"src/novika/image.cr","line_number":40,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":"BlockAssembler"}],"visibility":"Public","body":""}}],"macros":[{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":38,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/SnapshotType","path":"Novika/SnapshotType.html","kind":"enum","full_name":"Novika::SnapshotType","name":"SnapshotType","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Word","name":"Word","value":"0_u8"},{"id":"BlockRef","name":"BlockRef","value":"1_u8"},{"id":"SmallDecimal","name":"SmallDecimal","value":"2_u8"},{"id":"LargeDecimal","name":"LargeDecimal","value":"3_u8"},{"id":"Quote","name":"Quote","value":"4_u8"},{"id":"QuotedWord","name":"QuotedWord","value":"5_u8"},{"id":"Boolean","name":"Boolean","value":"6_u8"},{"id":"Color","name":"Color","value":"7_u8"},{"id":"Builtin","name":"Builtin","value":"8_u8"},{"id":"Byteslice","name":"Byteslice","value":"9_u8"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds the type of a snapshot.\n\nMembers are sorted by their frequency in code (eyeballed),\nnot to say that it matters.","summary":"<p>Holds the type of a snapshot.</p>","instance_methods":[{"html_id":"block_ref?-instance-method","name":"block_ref?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":13,"url":null},"def":{"name":"block_ref?","visibility":"Public","body":"self == BlockRef"}},{"html_id":"boolean?-instance-method","name":"boolean?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":18,"url":null},"def":{"name":"boolean?","visibility":"Public","body":"self == Boolean"}},{"html_id":"builtin?-instance-method","name":"builtin?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":20,"url":null},"def":{"name":"builtin?","visibility":"Public","body":"self == Builtin"}},{"html_id":"byteslice?-instance-method","name":"byteslice?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":21,"url":null},"def":{"name":"byteslice?","visibility":"Public","body":"self == Byteslice"}},{"html_id":"color?-instance-method","name":"color?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":19,"url":null},"def":{"name":"color?","visibility":"Public","body":"self == Color"}},{"html_id":"large_decimal?-instance-method","name":"large_decimal?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":15,"url":null},"def":{"name":"large_decimal?","visibility":"Public","body":"self == LargeDecimal"}},{"html_id":"quote?-instance-method","name":"quote?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":16,"url":null},"def":{"name":"quote?","visibility":"Public","body":"self == Quote"}},{"html_id":"quoted_word?-instance-method","name":"quoted_word?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":17,"url":null},"def":{"name":"quoted_word?","visibility":"Public","body":"self == QuotedWord"}},{"html_id":"small_decimal?-instance-method","name":"small_decimal?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":14,"url":null},"def":{"name":"small_decimal?","visibility":"Public","body":"self == SmallDecimal"}},{"html_id":"word?-instance-method","name":"word?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":12,"url":null},"def":{"name":"word?","visibility":"Public","body":"self == Word"}}]},{"html_id":"novika/Novika/StructLayoutForm","path":"Novika/StructLayoutForm.html","kind":"struct","full_name":"Novika::StructLayoutForm","name":"StructLayoutForm","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":231,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin form wrapper around `FFI::StructLayout`. Lazily parses\na struct layout definition and keeps the corresponding\n`FFI::StructLayout` in sync.","summary":"<p>A thin form wrapper around <code><a href=\"../Novika/FFI/StructLayout.html\">FFI::StructLayout</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":279,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign struct layout\""}}],"constructors":[{"html_id":"new(this:Block,names:Array(Word),types:Array(Word),comment:Nil|String)-class-method","name":"new","doc":"Initializes a struct layout form. Names array *names* must\nbe created uniquely for this form, because it will be used\nas this struct layout form's identity during deep recursion\nchecks etc.\n\n*this* block is going to be used for lookup of user-defined\nstruct layouts (e.g. `&foobar`).","summary":"<p>Initializes a struct layout form.</p>","abstract":false,"args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"names","external_name":"names","restriction":"Array(Word)"},{"name":"types","external_name":"types","restriction":"Array(Word)"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"args_string":"(this : Block, names : Array(Word), types : Array(Word), comment : Nil | String)","args_html":"(this : <a href=\"../Novika/Block.html\">Block</a>, names : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Word.html\">Word</a>), types : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Word.html\">Word</a>), comment : Nil | <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":246,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"names","external_name":"names","restriction":"Array(Word)"},{"name":"types","external_name":"types","restriction":"Array(Word)"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, names, types, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(layout:Novika::FFI::StructLayout,comment:Nil|String)-class-method","name":"new","doc":"Initializes a struct layout form from the given *layout*.\nThe layout must contain at least one field.","summary":"<p>Initializes a struct layout form from the given <em>layout</em>.</p>","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"args_string":"(layout : Novika::FFI::StructLayout, comment : Nil | String)","args_html":"(layout : <a href=\"../Novika/FFI/StructLayout.html\">Novika::FFI::StructLayout</a>, comment : Nil | <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":252,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":291,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if layout == other.layout\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":283,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@comment ? io << @comment : to_s(io)"}},{"html_id":"layout(outerset=nil)-instance-method","name":"layout","doc":"Returns the underlying layout.","summary":"<p>Returns the underlying layout.</p>","abstract":false,"args":[{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":""}],"args_string":"(outerset = nil)","args_html":"(outerset = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":264,"url":null},"def":{"name":"layout","args":[{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":""}],"visibility":"Public","body":"if @layout.field_count > 0 || outerset.try(&.includes?(object_id))\n  return @layout\nend\nif this = @this\nelse\n  return @layout\nend\nif names = @names\nelse\n  return @layout\nend\nif types = @types\nelse\n  return @layout\nend\nnames.zip(types) do |name, typename|\n  parser = StructLayoutParser.new(this, typename, name, self, outerset)\n  @layout.add(name.id, parser.parse)\nend\n@layout\n"}},{"html_id":"object_id(*args,**options)-instance-method","name":"object_id","doc":"Since `StructLayoutForm` is a struct, it doesn't have its own\nobject id, and instead borrows it from the names array, which\nis assumed to be created personally for this struct layout form.","summary":"<p>Since <code><a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a></code> is a struct, it doesn't have its own object id, and instead borrows it from the names array, which is assumed to be created personally for this struct layout form.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":261,"url":null},"def":{"name":"object_id","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"(@names || (raise(\"BUG: bad state\"))).object_id(*args, **options)"}},{"html_id":"object_id(*args,**options,&)-instance-method","name":"object_id","doc":"Since `StructLayoutForm` is a struct, it doesn't have its own\nobject id, and instead borrows it from the names array, which\nis assumed to be created personally for this struct layout form.","summary":"<p>Since <code><a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a></code> is a struct, it doesn't have its own object id, and instead borrows it from the names array, which is assumed to be created personally for this struct layout form.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":261,"url":null},"def":{"name":"object_id","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"(@names || (raise(\"BUG: bad state\"))).object_id(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":287,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << layout"}}]},{"html_id":"novika/Novika/StructLayoutParser","path":"Novika/StructLayoutParser.html","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"},{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":164,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Parses types in struct layouts. Similar to `FFI::ValueTypeParser`,\nbut does some bookkeeping to stay away from deep recursion/ensure\nno cycles exist for inline structs/unions.","summary":"<p>Parses types in struct layouts.</p>","constructors":[{"html_id":"new(this,typename,field:Word,current:StructLayoutForm,outerset:Set(UInt64)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"this","external_name":"this","restriction":""},{"name":"typename","external_name":"typename","restriction":""},{"name":"field","external_name":"field","restriction":"Word"},{"name":"current","external_name":"current","restriction":"StructLayoutForm"},{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":"Set(UInt64) | ::Nil"}],"args_string":"(this, typename, field : Word, current : StructLayoutForm, outerset : Set(UInt64) | Nil = nil)","args_html":"(this, typename, field : <a href=\"../Novika/Word.html\">Word</a>, current : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>, outerset : <a href=\"../Set.html\">Set</a>(UInt64) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":167,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":""},{"name":"typename","external_name":"typename","restriction":""},{"name":"field","external_name":"field","restriction":"Word"},{"name":"current","external_name":"current","restriction":"StructLayoutForm"},{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":"Set(UInt64) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, typename, field, current, outerset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_inline_struct(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_inline_struct","doc":"Inline struct-annotated struct layout middleware.","summary":"<p>Inline struct-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":215,"url":null},"def":{"name":"on_inline_struct","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"check_cycles(form)\n(form.layout(@outerset)).inline\n"}},{"html_id":"on_struct_reference(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_struct_reference","doc":"Struct reference-annotated struct layout middleware.","summary":"<p>Struct reference-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":221,"url":null},"def":{"name":"on_struct_reference","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"add_to_outerset\n(form.layout(@outerset)).reference\n"}},{"html_id":"on_union(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_union","doc":"Union-annotated struct layout middleware.","summary":"<p>Union-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":209,"url":null},"def":{"name":"on_union","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"check_cycles(form)\n(form.layout(@outerset)).union\n"}}]},{"html_id":"novika/Novika/StructViewForm","path":"Novika/StructViewForm.html","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":85,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin wrapper around `FFI::StructView` and its descendants.\n\nThis form is a readable and submittable store, which means you\ncan read (e.g. `entry:fetch`) and submit (e.g. `entry:submit`)\nto exsisting entries.","summary":"<p>A thin wrapper around <code><a href=\"../Novika/FFI/StructView.html\">FFI::StructView</a></code> and its descendants.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":143,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign struct view\""}}],"constructors":[{"html_id":"new(view:Novika::FFI::StructView)-class-method","name":"new","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"::Novika::FFI::StructView"}],"args_string":"(view : Novika::FFI::StructView)","args_html":"(view : <a href=\"../Novika/FFI/StructView.html\">Novika::FFI::StructView</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"view","external_name":"view","restriction":"::Novika::FFI::StructView"}],"visibility":"Public","body":"_ = allocate\n_.initialize(view)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns whether this and *other* struct views are equal.\nPerforms deep, recursive equality based on the fields'\nvalues. Supports self-reference, mutual reference, etc.","summary":"<p>Returns whether this and <em>other</em> struct views are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":158,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @view == (other.@view)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the address of the underlying struct in memory.","summary":"<p>Returns the address of the underlying struct in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":97,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"view.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the address of the underlying struct in memory.","summary":"<p>Returns the address of the underlying struct in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":97,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"view.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":147,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":108,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":"if name.is_a?(Word)\n  @view[name.id]?.try(&.to_form?)\nend"}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/foreign.cr","line_number":104,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"name.is_a?(Word) ? @view.has_field?(name.id) : false"}},{"html_id":"inline?-instance-method","name":"inline?","doc":"Returns whether this view is an inline struct view.","summary":"<p>Returns whether this view is an inline struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":134,"url":null},"def":{"name":"inline?","visibility":"Public","body":"view.is_a?(FFI::InlineStructView)"}},{"html_id":"layout:StructLayoutForm-instance-method","name":"layout","doc":"Returns the struct layout of the underlying struct view.","summary":"<p>Returns the struct layout of the underlying struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":100,"url":null},"def":{"name":"layout","return_type":"StructLayoutForm","visibility":"Public","body":"StructLayoutForm.new(view.layout, comment: nil)"}},{"html_id":"opens?(name:Form)-instance-method","name":"opens?","doc":"Returns whether *name* opens its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":120,"url":null},"def":{"name":"opens?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":"false"}},{"html_id":"pushes?(name:Form)-instance-method","name":"pushes?","doc":"Returns whether *name* pushes its value form, as defined in\nthis block. Returns false if *name* is not defined in the\nthis block.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":124,"url":null},"def":{"name":"pushes?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":"has_form_for?(name)"}},{"html_id":"reference?-instance-method","name":"reference?","doc":"Returns whether this view is a struct reference view.","summary":"<p>Returns whether this view is a struct reference view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":129,"url":null},"def":{"name":"reference?","visibility":"Public","body":"view.is_a?(FFI::StructReferenceView)"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":112,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"if name.is_a?(Word)\nelse\n  return\nend\n(@view.layout.desc?(name.id)).try do |desc|\n  @view[name.id] = desc.type.from(form)\nend\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":151,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << @view"}},{"html_id":"union?-instance-method","name":"union?","doc":"Returns whether this view is a union view.","summary":"<p>Returns whether this view is a union view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":139,"url":null},"def":{"name":"union?","visibility":"Public","body":"view.is_a?(FFI::UnionView)"}},{"html_id":"view:FFI::StructView-instance-method","name":"view","doc":"Returns the underlying struct view.","summary":"<p>Returns the underlying struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":91,"url":null},"def":{"name":"view","return_type":"FFI::StructView","visibility":"Public","body":"@view"}}]},{"html_id":"novika/Novika/Substrate","path":"Novika/Substrate.html","kind":"module","full_name":"Novika::Substrate(T)","name":"Substrate","abstract":false,"locations":[{"filename":"src/novika/substrate.cr","line_number":17,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Substrate is a fast, low-level copy-on-write wrapper for\nan array.","summary":"<p>Substrate is a fast, low-level copy-on-write wrapper for an array.</p>","class_methods":[{"html_id":"[]-class-method","name":"[]","doc":"Initializes an empty substrate.","summary":"<p>Initializes an empty substrate.</p>","abstract":false,"location":{"filename":"src/novika/substrate.cr","line_number":19,"url":null},"def":{"name":"[]","visibility":"Public","body":"RealSubstrate(T).new"}},{"html_id":"[](*elements)-class-method","name":"[]","doc":"Initializes a substrate with *elements*.","summary":"<p>Initializes a substrate with <em>elements</em>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(*elements)","args_html":"(*elements)","location":{"filename":"src/novika/substrate.cr","line_number":24,"url":null},"def":{"name":"[]","args":[{"name":"elements","external_name":"elements","restriction":""}],"splat_index":0,"visibility":"Public","body":"for(elements.to_a)"}},{"html_id":"for(elements:Array(T))-class-method","name":"for","doc":"Initializes a substrate with *elements* as the underlying array.","summary":"<p>Initializes a substrate with <em>elements</em> as the underlying array.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"args_string":"(elements : Array(T))","args_html":"(elements : <a href=\"../Array.html\">Array</a>(T))","location":{"filename":"src/novika/substrate.cr","line_number":29,"url":null},"def":{"name":"for","args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"visibility":"Public","body":"RealSubstrate.new(elements)"}}],"instance_methods":[{"html_id":"==(other)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/substrate.cr","line_number":96,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"other.is_a?(Substrate) && (array == other.array)"}},{"html_id":"at!(index)-instance-method","name":"at!","doc":"Unsafely fetches the element at *index*.","summary":"<p>Unsafely fetches the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":37,"url":null},"def":{"name":"at!","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"array.unsafe_fetch(index)"}},{"html_id":"at?(index)-instance-method","name":"at?","doc":"Returns the element at *index*. Returns nil if *index* is\nout of bounds, i.e., *not* in `0 <= index < count`.","summary":"<p>Returns the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":48,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"if index.in?(0...count)\n  at!(index)\nend"}},{"html_id":"copy-instance-method","name":"copy","doc":"Returns a copy of this substrate.","summary":"<p>Returns a copy of this substrate.</p>","abstract":true,"location":{"filename":"src/novika/substrate.cr","line_number":79,"url":null},"def":{"name":"copy","visibility":"Public","body":""}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of elements in the array.","summary":"<p>Returns the amount of elements in the array.</p>","abstract":false,"location":{"filename":"src/novika/substrate.cr","line_number":42,"url":null},"def":{"name":"count","visibility":"Public","body":"array.size"}},{"html_id":"delete?(atindex)-instance-method","name":"delete?","doc":"Deletes the element at *index*. Returns nil if *index* is\nout of bounds (see `at?`).","summary":"<p>Deletes the element at <em>index</em>.</p>","abstract":true,"args":[{"name":"index","external_name":"at","restriction":""}],"args_string":"(at index)","args_html":"(at index)","location":{"filename":"src/novika/substrate.cr","line_number":73,"url":null},"def":{"name":"delete?","args":[{"name":"index","external_name":"at","restriction":""}],"visibility":"Public","body":""}},{"html_id":"each(*args,**options)-instance-method","name":"each","doc":"Same as `Array#each`.","summary":"<p>Same as <code>Array#each</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/substrate.cr","line_number":34,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"array.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","doc":"Same as `Array#each`.","summary":"<p>Same as <code>Array#each</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/substrate.cr","line_number":34,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"array.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"insert?(atindex,element)-instance-method","name":"insert?","doc":"Adds *element* before *index*. Returns nil if *index* is\nout of bounds (see  `at?`).","summary":"<p>Adds <em>element</em> before <em>index</em>.</p>","abstract":true,"args":[{"name":"index","external_name":"at","restriction":""},{"name":"element","external_name":"element","restriction":""}],"args_string":"(at index, element)","args_html":"(at index, element)","location":{"filename":"src/novika/substrate.cr","line_number":69,"url":null},"def":{"name":"insert?","args":[{"name":"index","external_name":"at","restriction":""},{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":""}},{"html_id":"map!(&:T->T|Nil)-instance-method","name":"map!","doc":"Replaces elements of this substrate with the result of the\nblock. If the result is nil, leaves the original element.","summary":"<p>Replaces elements of this substrate with the result of the block.</p>","abstract":true,"location":{"filename":"src/novika/substrate.cr","line_number":90,"url":null},"def":{"name":"map!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> T | ::Nil)"},"visibility":"Public","body":""}},{"html_id":"slice_at!(index)-instance-method","name":"slice_at!","doc":"Splits this substrate in two at *index*. Returns the two\nresulting substrates.\n\nThis method is unsafe: it does not check whether *index*\nis in bounds.","summary":"<p>Splits this substrate in two at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":57,"url":null},"def":{"name":"slice_at!","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"lhs = Array(T).new(index) do |i|\n  at!(i)\nend\nrhs = Array(T).new(count - index) do |j|\n  at!(index + j)\nend\n{RealSubstrate.new(lhs), RealSubstrate.new(rhs)}\n"}},{"html_id":"sort_using!(cmp:T,T->Int32)-instance-method","name":"sort_using!","doc":"Sorts elements of this substrate inplace, using a *cmp*\ncomparator proc for comparing two elements.","summary":"<p>Sorts elements of this substrate inplace, using a <em>cmp</em> comparator proc for comparing two elements.</p>","abstract":true,"args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"args_string":"(cmp : T, T -> Int32)","args_html":"(cmp : T, T -> Int32)","location":{"filename":"src/novika/substrate.cr","line_number":94,"url":null},"def":{"name":"sort_using!","args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"visibility":"Public","body":""}},{"html_id":"unsafe_paste(other:Substrate(T),index,other_start,other_insert_count)-instance-method","name":"unsafe_paste","doc":"Pastes *count* elements of other starting at *b*egin, to\n*dest* index in self, without doing any checks whatsoever.\n\nA lot of undefined behavior unless you are sure all\nnumbers are good.","summary":"<p>Pastes <em>count</em> elements of other starting at <em>b</em>egin, to <em>dest</em> index in self, without doing any checks whatsoever.</p>","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"Substrate(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"args_string":"(other : Substrate(T), index, other_start, other_insert_count)","args_html":"(other : <a href=\"../Novika/Substrate.html\">Substrate</a>(T), index, other_start, other_insert_count)","location":{"filename":"src/novika/substrate.cr","line_number":86,"url":null},"def":{"name":"unsafe_paste","args":[{"name":"other","external_name":"other","restriction":"Substrate(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Tape","path":"Novika/Tape.html","kind":"struct","full_name":"Novika::Tape(T)","name":"Tape","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/tape.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A `Substrate` with an integer cursor.","summary":"<p>A <code><a href=\"../Novika/Substrate.html\">Substrate</a></code> with an integer cursor.</p>","class_methods":[{"html_id":"[](*elements)-class-method","name":"[]","doc":"Initializes a tape with *elements*.","summary":"<p>Initializes a tape with <em>elements</em>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(*elements)","args_html":"(*elements)","location":{"filename":"src/novika/tape.cr","line_number":23,"url":null},"def":{"name":"[]","args":[{"name":"elements","external_name":"elements","restriction":""}],"splat_index":0,"visibility":"Public","body":"Tape.new(Substrate[*elements])"}},{"html_id":"for(elements:Array(T))-class-method","name":"for","doc":"Creates a tape from an existing array of *elements*, which\nwill be used as the underlying container for `Substrate`.\nThis means that all mutations of substrate will be performed\non the *elements* array, and vice versa.","summary":"<p>Creates a tape from an existing array of <em>elements</em>, which will be used as the underlying container for <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"args_string":"(elements : Array(T))","args_html":"(elements : <a href=\"../Array.html\">Array</a>(T))","location":{"filename":"src/novika/tape.cr","line_number":18,"url":null},"def":{"name":"for","args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"visibility":"Public","body":"Tape.new(Substrate.for(elements))"}}],"constructors":[{"html_id":"new(substrate:Substrate(T)=Substrate(T)[],cursor:Int32=substrate.count)-class-method","name":"new","abstract":false,"args":[{"name":"substrate","default_value":"Substrate(T)[]","external_name":"substrate","restriction":"Substrate(T)"},{"name":"cursor","default_value":"substrate.count","external_name":"cursor","restriction":"::Int32"}],"args_string":"(substrate : Substrate(T) = Substrate(T)[], cursor : Int32 = substrate.count)","args_html":"(substrate : <a href=\"../Novika/Substrate.html\">Substrate</a>(T) = <span class=\"t\">Substrate</span>(<span class=\"t\">T</span>)<span class=\"o\">[]</span>, cursor : Int32 = substrate.count)","location":{"filename":"src/novika/tape.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"substrate","default_value":"Substrate(T)[]","external_name":"substrate","restriction":"Substrate(T)"},{"name":"cursor","default_value":"substrate.count","external_name":"cursor","restriction":"::Int32"}],"visibility":"Public","body":"_ = Tape(T).allocate\n_.initialize(substrate, cursor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if substrate == other.substrate\nelse\n  return false\nend\nif cursor == other.cursor\nelse\n  return false\nend\ntrue\n"}},{"html_id":"add(element)-instance-method","name":"add","doc":"Adds *element* before the cursor, and advances the cursor.\nReturns the resulting tape.","summary":"<p>Adds <em>element</em> before the cursor, and advances the cursor.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/novika/tape.cr","line_number":57,"url":null},"def":{"name":"add","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"Tape.new((substrate.insert?(cursor, element)).not_nil!, cursor + 1)"}},{"html_id":"at?(*args,**options)-instance-method","name":"at?","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.at?(*args, **options)"}},{"html_id":"at?(*args,**options,&)-instance-method","name":"at?","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.at?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"copy-instance-method","name":"copy","doc":"Returns a shallow copy of this tape.","summary":"<p>Returns a shallow copy of this tape.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":133,"url":null},"def":{"name":"copy","visibility":"Public","body":"Tape.new(substrate.copy, cursor)"}},{"html_id":"count(*args,**options)-instance-method","name":"count","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"count","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.count(*args, **options)"}},{"html_id":"count(*args,**options,&)-instance-method","name":"count","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"count","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.count(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"cursor:Int32-instance-method","name":"cursor","doc":"Returns the cursor position.","summary":"<p>Returns the cursor position.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":9,"url":null},"def":{"name":"cursor","return_type":"Int32","visibility":"Public","body":"@cursor"}},{"html_id":"drop?-instance-method","name":"drop?","doc":"Removes the element before the cursor, and moves the cursor\nback once. Returns the resulting tape.","summary":"<p>Removes the element before the cursor, and moves the cursor back once.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":82,"url":null},"def":{"name":"drop?","visibility":"Public","body":"Tape.new((substrate.delete?(cursor - 1)) || (return), cursor - 1)"}},{"html_id":"each(*args,**options)-instance-method","name":"each","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"eject?-instance-method","name":"eject?","doc":"Drops and returns the element after cursor.","summary":"<p>Drops and returns the element after cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":92,"url":null},"def":{"name":"eject?","visibility":"Public","body":"element = (substrate.at?(cursor)) || (return)\n{Tape.new((substrate.delete?(cursor)).not_nil!, cursor), element}\n"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns whether this tape is empty (has no elements).","summary":"<p>Returns whether this tape is empty (has no elements).</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":31,"url":null},"def":{"name":"empty?","visibility":"Public","body":"count.zero?"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = substrate.hash(hasher)\nhasher = cursor.hash(hasher)\nhasher\n"}},{"html_id":"inject(element)-instance-method","name":"inject","doc":"Adds element after cursor without moving the cursor.","summary":"<p>Adds element after cursor without moving the cursor.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/novika/tape.cr","line_number":87,"url":null},"def":{"name":"inject","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"Tape.new((substrate.insert?(cursor, element)).not_nil!, cursor)"}},{"html_id":"map!(&)-instance-method","name":"map!","doc":"See `Substrate#map!`.","summary":"<p>See <code><a href=\"../Novika/Substrate.html#map%21%28%26%3AT-%3ET%7CNil%29-instance-method\">Substrate#map!</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":115,"url":null},"def":{"name":"map!","yields":1,"block_arity":1,"visibility":"Public","body":"Tape.new(substrate.map! do |form|\n  yield form\nend, cursor)"}},{"html_id":"next?-instance-method","name":"next?","doc":"Fetches the top element, and advances the cursor. Returns\nthe tuple `{tape, element}`, where *tape* is the resulting\ntape. Returns nil if cursor will be out of bounds.","summary":"<p>Fetches the top element, and advances the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":51,"url":null},"def":{"name":"next?","visibility":"Public","body":"if cursor < count\n  {Tape.new(substrate, cursor + 1), substrate.at!(cursor)}\nend"}},{"html_id":"paste(elements:Tape(T))-instance-method","name":"paste","doc":"Adds elements before cursor in *elements* to this tape.\nAdvances the cursor.","summary":"<p>Adds elements before cursor in <em>elements</em> to this tape.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Tape(T)"}],"args_string":"(elements : Tape(T))","args_html":"(elements : <a href=\"../Novika/Tape.html\">Tape</a>(T))","location":{"filename":"src/novika/tape.cr","line_number":63,"url":null},"def":{"name":"paste","args":[{"name":"elements","external_name":"elements","restriction":"Tape(T)"}],"visibility":"Public","body":"Tape.new(substrate.unsafe_paste(elements.substrate, index: cursor, other_start: 0, other_insert_count: elements.cursor), cursor + elements.cursor)"}},{"html_id":"resub(other)-instance-method","name":"resub","doc":"Replaces this tape's substrate with other. *cursor* is\nleft where it was in self if it fits, else is moved to\nthe end.","summary":"<p>Replaces this tape's substrate with other.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/tape.cr","line_number":108,"url":null},"def":{"name":"resub","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"substrate.deref\nTape.new(other.substrate.copy, Math.min(cursor, other.count))\n"}},{"html_id":"slice:Tuple(Tape(T),Tape(T))-instance-method","name":"slice","doc":"Slices this tape's substrate at cursor, returns the\ntwo resulting tape halves.","summary":"<p>Slices this tape's substrate at cursor, returns the two resulting tape halves.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":126,"url":null},"def":{"name":"slice","return_type":"::Tuple(Tape(T), Tape(T))","visibility":"Public","body":"lhs, rhs = substrate.slice_at!(cursor)\n{Tape.new(lhs), Tape.new(rhs)}\n"}},{"html_id":"sort_using!(cmp:T,T->Int32)-instance-method","name":"sort_using!","doc":"See `Substrate#sort_using!`","summary":"<p>See <code><a href=\"../Novika/Substrate.html#sort_using%21%28cmp%3AT%2CT-%3EInt32%29-instance-method\">Substrate#sort_using!</a></code></p>","abstract":false,"args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"args_string":"(cmp : T, T -> Int32)","args_html":"(cmp : T, T -> Int32)","location":{"filename":"src/novika/tape.cr","line_number":120,"url":null},"def":{"name":"sort_using!","args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"visibility":"Public","body":"Tape.new(substrate.sort_using!(cmp), cursor)"}},{"html_id":"swap?-instance-method","name":"swap?","doc":"Swaps two elements before the cursor.","summary":"<p>Swaps two elements before the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":74,"url":null},"def":{"name":"swap?","visibility":"Public","body":"if cursor < 2\n  return\nend\nTape.new(substrate.unsafe_swap(cursor - 2, cursor - 1), cursor)\n"}},{"html_id":"thru?-instance-method","name":"thru?","doc":"Returns the element after cursor and moves the cursor forward.","summary":"<p>Returns the element after cursor and moves the cursor forward.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":99,"url":null},"def":{"name":"thru?","visibility":"Public","body":"element = (substrate.at?(cursor)) || (return)\n{Tape.new(substrate, cursor + 1), element}\n"}},{"html_id":"to?(cursorposition)-instance-method","name":"to?","doc":"Moves the cursor to *position*. Returns the resulting tape\non success, nil if position is out of bounds (see `Substrate#at?`).","summary":"<p>Moves the cursor to <em>position</em>.</p>","abstract":false,"args":[{"name":"position","external_name":"cursor","restriction":""}],"args_string":"(cursor position)","args_html":"(cursor position)","location":{"filename":"src/novika/tape.cr","line_number":44,"url":null},"def":{"name":"to?","args":[{"name":"position","external_name":"cursor","restriction":""}],"visibility":"Public","body":"if position.in?(0..count)\n  Tape.new(substrate, position)\nend"}},{"html_id":"top?-instance-method","name":"top?","doc":"Returns the element before the cursor.","summary":"<p>Returns the element before the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":36,"url":null},"def":{"name":"top?","visibility":"Public","body":"if cursor.zero?\n  return\nend\nsubstrate.at!(cursor - 1)\n"}}]},{"html_id":"novika/Novika/True","path":"Novika/True.html","kind":"struct","full_name":"Novika::True","name":"True","abstract":false,"superclass":{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},"ancestors":[{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":32,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a truthy `Boolean`.","summary":"<p>Represents a truthy <code><a href=\"../Novika/Boolean.html\">Boolean</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":37,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"true"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/boolean.cr","line_number":33,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"boolean true\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/boolean.cr","line_number":41,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"true\""}}]},{"html_id":"novika/Novika/TypedSnapshot","path":"Novika/TypedSnapshot.html","kind":"class","full_name":"Novika::TypedSnapshot","name":"TypedSnapshot","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":287,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::TypedSnapshot]","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"enum\", name: type, cls: UInt8, onlyif: nil, verify: nil, value: nil, encoding: SnapshotType}, {type: \"basic\", name: snapshot, cls: Snapshot, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat=IO::ByteFormat::BigEndian)-class-method","name":"from_io","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":"IO::ByteFormat::BigEndian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = IO::ByteFormat::BigEndian)","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"t\">IO</span><span class=\"t\">::</span><span class=\"t\">ByteFormat</span><span class=\"t\">::</span><span class=\"t\">BigEndian</span>)","location":{"filename":"src/novika/image.cr","line_number":304,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":"IO::ByteFormat::BigEndian","external_name":"format","restriction":"IO::ByteFormat"}],"visibility":"Public","body":"type = SnapshotType.new(io.read_bytes(UInt8, format))\nsnapshot = case type\nin .block_ref?\n  io.read_bytes(BlockRefSnapshot, format)\nin .boolean?\n  io.read_bytes(BooleanSnapshot, format)\nin .color?\n  io.read_bytes(ColorSnapshot, format)\nin .small_decimal?\n  io.read_bytes(SmallDecimalSnapshot, format)\nin .large_decimal?\n  io.read_bytes(LargeDecimalSnapshot, format)\nin .quote?\n  io.read_bytes(QuoteSnapshot, format)\nin .word?\n  io.read_bytes(WordSnapshot, format)\nin .quoted_word?\n  io.read_bytes(QuotedWordSnapshot, format)\nin .builtin?\n  io.read_bytes(BuiltinSnapshot, format)\nin .byteslice?\n  io.read_bytes(BytesliceSnapshot, format)\nend\nnew(type, snapshot)\n"}}],"constructors":[{"html_id":"new(type:Novika::SnapshotType,snapshot:Novika::Snapshot)-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"::Novika::SnapshotType"},{"name":"snapshot","external_name":"snapshot","restriction":"::Novika::Snapshot"}],"args_string":"(type : Novika::SnapshotType, snapshot : Novika::Snapshot)","args_html":"(type : <a href=\"../Novika/SnapshotType.html\">Novika::SnapshotType</a>, snapshot : <a href=\"../Novika/Snapshot.html\">Novika::Snapshot</a>)","location":{"filename":"src/novika/image.cr","line_number":296,"url":null},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"::Novika::SnapshotType"},{"name":"snapshot","external_name":"snapshot","restriction":"::Novika::Snapshot"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type, snapshot)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(form:Block)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Block"}],"args_string":"(form : Block)","args_html":"(form : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/image.cr","line_number":325,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Block"}],"visibility":"Public","body":"new(SnapshotType::BlockRef, BlockRefSnapshot.new(form))"}},{"html_id":"new(form:Boolean)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"args_string":"(form : Boolean)","args_html":"(form : <a href=\"../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/image.cr","line_number":330,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"visibility":"Public","body":"new(SnapshotType::Boolean, BooleanSnapshot.new(form))"}},{"html_id":"new(form:Color)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Color"}],"args_string":"(form : Color)","args_html":"(form : <a href=\"../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/image.cr","line_number":335,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Color"}],"visibility":"Public","body":"new(SnapshotType::Color, ColorSnapshot.new(form))"}},{"html_id":"new(form:Decimal)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":340,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"if form.i64?\n  new(SnapshotType::SmallDecimal, SmallDecimalSnapshot.new(form))\nelse\n  new(SnapshotType::LargeDecimal, LargeDecimalSnapshot.new(form))\nend"}},{"html_id":"new(form:Quote)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/image.cr","line_number":349,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"new(SnapshotType::Quote, QuoteSnapshot.new(form))"}},{"html_id":"new(form:Word)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Word"}],"args_string":"(form : Word)","args_html":"(form : <a href=\"../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/image.cr","line_number":354,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Word"}],"visibility":"Public","body":"new(SnapshotType::Word, WordSnapshot.new(form))"}},{"html_id":"new(form:QuotedWord)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"args_string":"(form : QuotedWord)","args_html":"(form : <a href=\"../Novika/QuotedWord.html\">QuotedWord</a>)","location":{"filename":"src/novika/image.cr","line_number":359,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"visibility":"Public","body":"new(SnapshotType::QuotedWord, QuotedWordSnapshot.new(form))"}},{"html_id":"new(form:Builtin)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"args_string":"(form : Builtin)","args_html":"(form : <a href=\"../Novika/Builtin.html\">Builtin</a>)","location":{"filename":"src/novika/image.cr","line_number":364,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"visibility":"Public","body":"new(SnapshotType::Builtin, BuiltinSnapshot.new(form))"}},{"html_id":"new(form:Byteslice)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"args_string":"(form : Byteslice)","args_html":"(form : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/image.cr","line_number":369,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"visibility":"Public","body":"new(SnapshotType::Byteslice, BytesliceSnapshot.new(form))"}},{"html_id":"new(form:Library|ForeignFunction|StructViewForm|StructLayoutForm)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Library | ForeignFunction | StructViewForm | StructLayoutForm"}],"args_string":"(form : Library | ForeignFunction | StructViewForm | StructLayoutForm)","args_html":"(form : <a href=\"../Novika/Library.html\">Library</a> | <a href=\"../Novika/ForeignFunction.html\">ForeignFunction</a> | <a href=\"../Novika/StructViewForm.html\">StructViewForm</a> | <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>)","location":{"filename":"src/novika/image.cr","line_number":374,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Library | ForeignFunction | StructViewForm | StructLayoutForm"}],"visibility":"Public","body":"raise(Error.new(\"serialization of ffi capabilities is unsafe and disabled anyway. Try searializing 'how' you create FFI objects rather than 'what' objects you create\"))"}},{"html_id":"new(form)-class-method","name":"new","doc":"Raises: no overload for *form*.","summary":"<p>Raises: no overload for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":""}],"args_string":"(form)","args_html":"(form)","location":{"filename":"src/novika/image.cr","line_number":382,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":""}],"visibility":"Public","body":"raise(\"no overload for #{form.class}\")"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":288,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"snapshot:Snapshot-instance-method","name":"snapshot","doc":"Holds the `Snapshot` object.","summary":"<p>Holds the <code><a href=\"../Novika/Snapshot.html\">Snapshot</a></code> object.</p>","abstract":false,"def":{"name":"snapshot","return_type":"Snapshot","visibility":"Public","body":"@snapshot"}},{"html_id":"snapshot=(snapshot:Snapshot)-instance-method","name":"snapshot=","doc":"Holds the `Snapshot` object.","summary":"<p>Holds the <code><a href=\"../Novika/Snapshot.html\">Snapshot</a></code> object.</p>","abstract":false,"args":[{"name":"snapshot","external_name":"snapshot","restriction":"Snapshot"}],"args_string":"(snapshot : Snapshot)","args_html":"(snapshot : <a href=\"../Novika/Snapshot.html\">Snapshot</a>)","def":{"name":"snapshot=","args":[{"name":"snapshot","external_name":"snapshot","restriction":"Snapshot"}],"visibility":"Public","body":"@snapshot = snapshot"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","doc":"See `Snapshot#to_form`.","summary":"<p>See <code><a href=\"../Novika/Snapshot.html#to_form%28assembler%3ABlockAssembler%29-instance-method\">Snapshot#to_form</a></code>.</p>","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":300,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"@snapshot.to_form(assembler)"}},{"html_id":"type:SnapshotType-instance-method","name":"type","doc":"Holds the type of the `snapshot`.","summary":"<p>Holds the type of the <code><a href=\"../Novika/TypedSnapshot.html#snapshot%3ASnapshot-instance-method\">#snapshot</a></code>.</p>","abstract":false,"def":{"name":"type","return_type":"SnapshotType","visibility":"Public","body":"@type"}},{"html_id":"type=(type:SnapshotType)-instance-method","name":"type=","doc":"Holds the type of the `snapshot`.","summary":"<p>Holds the type of the <code><a href=\"../Novika/TypedSnapshot.html#snapshot%3ASnapshot-instance-method\">#snapshot</a></code>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"SnapshotType"}],"args_string":"(type : SnapshotType)","args_html":"(type : <a href=\"../Novika/SnapshotType.html\">SnapshotType</a>)","def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"SnapshotType"}],"visibility":"Public","body":"@type = type"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Word","path":"Novika/Word.html","kind":"struct","full_name":"Novika::Word","name":"Word","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/words.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Words open entries they're assigned to in the dictionary\nof their enclosing block.","summary":"<p>Words open entries they're assigned to in the dictionary of their enclosing block.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":17,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"word\""}}],"constructors":[{"html_id":"new(id:String)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/words.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/words.cr","line_number":13,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"word named '\") << id) << \"'\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = id.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the underlying string id.","summary":"<p>Returns the underlying string id.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":8,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/words.cr","line_number":30,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"if entry = engine.block.entry_for?(self)\n  entry.on_open(engine)\n  return self\nend\nblock = current = engine.block\nwhile block && (trap = block.entry_for?(Hook.trap))\n  form = trap.form\n  if form.is_a?(Block) && (form.prototype.same?(current.prototype))\n    block = block.parent?\n    next\n  end\n  engine.stack.add(Word.new(id))\n  trap.on_open(engine)\n  return self\nend\ndie(\"definition for #{self} not found in the enclosing block(s)\")\nself\n"}},{"html_id":"private?-instance-method","name":"private?","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":21,"url":null},"def":{"name":"private?","visibility":"Public","body":"id.prefixed_by?('_')"}},{"html_id":"to_quoted_word-instance-method","name":"to_quoted_word","doc":"Adds a level of quoting so this word becomes a quoted word.","summary":"<p>Adds a level of quoting so this word becomes a quoted word.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":26,"url":null},"def":{"name":"to_quoted_word","visibility":"Public","body":"QuotedWord.new(@id)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/words.cr","line_number":66,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if id.in?(\"true\", \"false\")\n  io << \"#\"\nend\nio << id\n"}}]},{"html_id":"novika/Novika/WordSnapshot","path":"Novika/WordSnapshot.html","kind":"class","full_name":"Novika::WordSnapshot","name":"WordSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":196,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::WordSnapshot]","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Word)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Word"}],"args_string":"(form : Word)","args_html":"(form : <a href=\"../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/image.cr","line_number":206,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Word"}],"visibility":"Public","body":"word = new\nword.id = form.id\nword\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":197,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated id (name) of the word.","summary":"<p>Holds the 0-terminated id (name) of the word.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated id (name) of the word.","summary":"<p>Holds the 0-terminated id (name) of the word.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":202,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Word.new(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Set","path":"Set.html","kind":"struct","full_name":"Set(T)","name":"Set","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika.cr","line_number":19,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"`Set` implements a collection of unordered values with no duplicates.\n\nAn `Enumerable` object can be converted to `Set` using the `#to_set` method.\n\n`Set` uses `Hash` as storage, so you must note the following points:\n\n* Equality of elements is determined according to `Object#==` and `Object#hash`.\n* `Set` assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state.\n\n### Example\n\n```\ns1 = Set{1, 2}\ns2 = [1, 2].to_set\ns3 = Set.new [1, 2]\ns1 == s2 # => true\ns1 == s3 # => true\ns1.add(2)\ns1.concat([6, 8])\ns1.subset_of? s2 # => false\ns2.subset_of? s1 # => true\n```","summary":"<p><code><a href=\"Set.html\">Set</a></code> implements a collection of unordered values with no duplicates.</p>","instance_methods":[{"html_id":"reject!(*args,**options)-instance-method","name":"reject!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika.cr","line_number":20,"url":null},"def":{"name":"reject!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@hash.reject!(*args, **options)"}},{"html_id":"reject!(*args,**options,&)-instance-method","name":"reject!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika.cr","line_number":20,"url":null},"def":{"name":"reject!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@hash.reject!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"novika/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika.cr","line_number":6,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nA string might end up being composed of bytes which form an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but every\nbyte that doesn't start a valid UTF-8 byte sequence is interpreted as though\nit encodes the Unicode replacement character (U+FFFD) by itself. For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.\n\nNote that this interpretation only applies to methods inside Crystal; calling\n`#to_slice` or `#to_unsafe`, e.g. when passing a string to a C library, will\nexpose the invalid UTF-8 byte sequences. In particular, `Regex`'s underlying\nengine may reject strings that are not valid UTF-8, or it may invoke undefined\nbehavior on invalid strings. If this is undesired, `#scrub` could be used to\nremove the offending byte sequences first.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"prefixed_by?(prefix:String):Bool-instance-method","name":"prefixed_by?","doc":"Returns whether this string starts with *prefix* but also\nhas other characters after it.","summary":"<p>Returns whether this string starts with <em>prefix</em> but also has other characters after it.</p>","abstract":false,"args":[{"name":"prefix","external_name":"prefix","restriction":"String"}],"args_string":"(prefix : String) : Bool","args_html":"(prefix : <a href=\"String.html\">String</a>) : Bool","location":{"filename":"src/novika.cr","line_number":9,"url":null},"def":{"name":"prefixed_by?","args":[{"name":"prefix","external_name":"prefix","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"bytesize > prefix.bytesize && (starts_with?(prefix))"}},{"html_id":"prefixed_by?(prefix:Char):Bool-instance-method","name":"prefixed_by?","doc":"Returns whether this string starts with *prefix* but also\nhas other characters after it.","summary":"<p>Returns whether this string starts with <em>prefix</em> but also has other characters after it.</p>","abstract":false,"args":[{"name":"prefix","external_name":"prefix","restriction":"Char"}],"args_string":"(prefix : Char) : Bool","args_html":"(prefix : Char) : Bool","location":{"filename":"src/novika.cr","line_number":14,"url":null},"def":{"name":"prefixed_by?","args":[{"name":"prefix","external_name":"prefix","restriction":"Char"}],"return_type":"Bool","visibility":"Public","body":"bytesize > 1 && (starts_with?(prefix))"}}]},{"html_id":"novika/Union","path":"Union.html","kind":"struct","full_name":"Union(*T)","name":"Union","abstract":false,"superclass":{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/form.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"doc":"A union type represents the possibility of a variable or an expression\nhaving more than one possible type at compile time.\n\nWhen invoking a method on a union type, the language checks that the\nmethod exists and can be resolved (typed) for each type in the union.\nFor this reason, adding instance methods to `Union` makes no sense and\nhas no effect. However, adding class method to `Union` is possible\nand can be useful. One example is parsing `JSON` into one of many\npossible types.\n\nUnion is special in that it is a generic type but instantiating it\nmight not return a union type:\n\n```\nUnion(Int32 | String)      # => (Int32 | String)\nUnion(Int32)               # => Int32\nUnion(Int32, Int32, Int32) # => Int32\n```","summary":"<p>A union type represents the possibility of a variable or an expression having more than one possible type at compile time.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","doc":"Joins union members' `Form#typedesc`.","summary":"<p>Joins union members' <code>Form#typedesc</code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":3,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"String.build do |io|\n  {% if true %}\n        {% for member, index in T %}\n          io << {{ member }}.typedesc\n          {% if index == (T.size - 1) %}\n          {% else %}{% if index == (T.size - 2) %}\n            {% if T.size == 2 %}\n              io << \" or \"\n            {% else %}\n              io << \", or \"\n            {% end %}\n          {% else %}\n            io << \", \"\n          {% end %}{% end %}\n        {% end %}\n      {% end %}\nend"}}]}]}})