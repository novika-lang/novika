crystal_doc_search_index_callback({"repository_name":"novika","body":"# Novika\n\n[![Gitter chat](https://badges.gitter.im/gitterHQ/gitter.png)](https://app.gitter.im/#/room/#novika-lang:gitter.im)\n\n<img src=\"img/logo.svg\" align=right>\n\n> A language that doesn't affect the way you think about programming, is not worth knowing.\n> ­— Alan J. Perlis\n\nNovika is a free-form, moldable, interpreted programming language.\n\n---\n\n**Table of contents:**\n\n- [Introduction](#introduction)\n- [Examples](#examples)\n- [Installing Novika](#installing-novika)\n- [Building Novika from source](#building-novika-from-source)\n- [Running the examples](#running-the-examples)\n- [Playing with the REPL](#playing-with-the-repl)\n- [On blocks](#on-blocks)\n- [Want to learn more?](#want-to-learn-more)\n- [Trade-offs, or why is Novika so slow?](#trade-offs-or-why-is-novika-so-slow)\n- [Contributing and internals](#contributing-and-internals)\n- [Contributors](#contributors)\n\n---\n\n## Introduction\n\nFirst and foremost, **Novika is weird**. Why not, though, being inspired by Lisp, Forth, Factor, Self, Red/Rebol, Smalltalk, and so on — the weird kids on the block.\n\nNovika is like simulating a house of LEGO blocks vs. simulating a house of huge concrete blocks, wood, and all that. The latter\nis much easier computationally, while the former offers unlimited flexibility. You can build only so much from huge concrete blocks,\nwood, chairs, and whatnot. With LEGO, it's another story — an infinite amount of possibilities before you.\n\nSemantically, Novika is like Lisp *A* set in motion by Lisp *B* with the possibility of bidirectional communication and control — but with objects, stacks, and so, so much more!\n\nAnd the syntax of Novika? Well, there is no syntax. That is to say, almost no syntax. Syntactically, Novika lies somewhere between Lisp and Forth. And Forth — Forth has no syntax.\n\n## Examples\n\nHello World:\n\n```novika\n'Hello World' echo\n```\n\n---\n\nFactorial. Note that parentheses `()` do not mean anything in Novika. They're like single-character comments.\n\n```novika\n(5 to: 1) product \"120\"\n```\n\n---\n\nFirst 100 Fizz buzz rounds:\n\n```novika\n1 to: 100 each: [\n  [ [ 15 /? ] 'FizzBuzz'\n    [  5 /? ] 'Buzz'\n    [  3 /? ] 'Fizz'\n  ] choose echo\n]\n```\n\n---\n\nSieve of Eratosthenes: prints prime numbers in `[2; 120]`.\n\n```novika\n2 to: 120 ||-> [ $: n (stack without: [ n /? ]) asStack n ] each: echo\n```\n\n---\n\n[Zigzag problem](https://leetcode.com/problems/zigzag-conversion/) from LeetCode, with the examples as tests. Observe the boundary between terseness and readability.\n\n```novika\n\"\"\"\nNot the mathy one but the naive one, because programming is\nnot math thank goodness!\n\"\"\"\n\n[ dup 1 = => [ drop ^ ]\n\n  collect: '' dup 1 |to $: grid\n\n  0 $: col\n\n  [ grid |: |> |atRightBound? asc desc sel ] $: desc\n  [ grid |: <| |afterFirst? desc asc sel (col 1 + =: col) ] $: asc\n  desc @: action\n\n  [ $: char grid |: [ char ~ ] ] @: put\n\n  each: [ put action =: action ]\n\n  grid join\n] @: convert\n\n\ndescribe 'Zigzag Conversion' [\n  in leetcode\n\n  it should 'follow the happy path' [\n    'A' 1 convert 'A' assert=\n    'A' 3 convert 'A' assert=\n    'HELLOWORLD' 1 convert 'HELLOWORLD' assert=\n  ]\n\n  it should 'convert given 3 rows' [\n    'PAYPALISHIRING' 3 convert 'PAHNAPLSIIGYIR' assert=\n  ]\n\n  it should 'convert given 4 rows' [\n    'PAYPALISHIRING' 4 convert 'PINALSIGYAHRPI' assert=\n  ]\n]\n\nrunTestsInGroup: leetcode\n```\n\n### What about something a bit more elaborate?\n\n- A snake game [example](https://github.com/novika-lang/novika/blob/rev10/examples/snake.new.nk)\n- A simple [documentation viewer](https://github.com/novika-lang/novika/blob/rev10/examples/docuview.nk)\n- A [prompt](https://github.com/novika-lang/novika/blob/rev10/examples/lch-prompt.nk) that blinks in colors from the LCH color space\n- A TDD-d [observable](https://github.com/novika-lang/novika/blob/rev10/examples/observable.nk)\n- A [live REPL interface](https://github.com/novika-lang/novika/blob/rev10/examples/mathrepl.nk) to a DSL for infix math expressions\n\n## Installing Novika\n\nThe fastest way to get started with Novika is to download and unpack the latest [nightly build](https://github.com/novika-lang/nightly-builds/releases/latest).\nNovika [releases](https://github.com/novika-lang/novika/releases/latest) are as unstable as nightlies, if not more so, so don't worry :zany_face:\n\n1. If you don't want to do a system-wide install, simply use `bin/novika` *while in the directory of the nightly/release*.\n\n2. Otherwise, move the `env` folder to your user's home directory, and rename it to `.novika`. Optionally, add `bin/novika` to your PATH.\n\n## Building Novika from source\n\nYou will need to have [Crystal](https://crystal-lang.org/install/) installed.\n\n1. Clone this repository:\n\n```\ngit clone https://github.com/novika-lang/novika.git\n```\n\n2. Go there:\n\n```\ncd novika\n```\n\n### Windows\n\n```\nshards build --without-development --release --progress --no-debug\n```\n\n### Linux\n\n```\nshards build --without-development --release --progress --no-debug -Dnovika_console -Dpreview_mt\n```\n\n### What do the `-D`s mean?\n\n* `-Dnovika_console`: use [termbox2.cr](https://github.com/homonoidian/termbox2.cr) as the backend for capability *console*.  Otherwise, *console* won't be available. Since [termbox2](https://github.com/termbox/termbox2) doesn't support Windows, you have to drop the flag when compiling for/under it.\n\n### What's next?\n\nYou can optionally add `bin/novika` to PATH, and/or create a symbolic link for `env` called `.novika` in your user's home directory, like so:\n\n```\nln -s /path/to/novika/repo/env /home/<your-user>/.novika\n```\n\nI'd recommend you to run the tests with `bin/novika tests`. If something seems wrong, [file an issue](https://github.com/novika-lang/novika/issues/new).\n\n## Running the examples\n\nTry to run one of the [examples](#examples). Some of them contain instructions on how you can run them. In general, you can use:\n\n```\nbin/novika path/to/example.nk\n```\n\nIf it's yelling at you in red that you need *console*, use:\n\n```\nbin/novika console path/to/example.nk\n```\n\n(unless you're on Windows; Novika on Windows doesn't support console yet)\n\n## Playing with the REPL\n\nTo run the REPL, use:\n\n```\nbin/novika repl\n```\n\nTo list all available words, use `la`:\n\n```\n>>> la\n```\n\nTo see documentation for a particular word, use `help` followed by the word that you're interested in:\n\n```\n>>> help toOrphan\n...\n>>> help 123\ndecimal number 123\n>>> help 'Who am I?'\nquote 'Who am I?'\n```\n\nTo get a string description of a thing's type, use `typedesc`:\n\n```\n>>> 123 typedesc\n... 'decimal' ...\n>>> ##foobar typedesc\n... 'quoted word' ...\n```\n\n\n## On blocks\n\nNovika is all about blocks! The name is pretty generic, and has little if any connection to \"blocks\" of mainstream programming languages.\n\n### Blocks are lists with a cursor\n\n<img src=\"img/blocks-are-lists-with-a-cursor.svg\" align=right width=512 />\n\nBlocks allow you to store different kinds of *forms* one after another. A form could be a number, a string, or even another block!\n\nIn this regard, a block is somewhat similar to a Python list or a Ruby array.\n\nMoreover, now taking the *cursor* into account, blocks seem a lot like text input fields but with *arbitrary constituents* rather than just characters.\n\nYou can move the cursor back and forth in a block. You can \"backspace\", insert, and so on, all this not only *empowering computation* but also *backed by computation*.\n\n<br clear=\"right\"/>\n\n```novika\n\"\"\"\n'Cut' the block in half at the cursor using |slice.\n\"\"\"\n[ 1 2 3 4 | 5 6 7 8 ] |slice leaves: [ [ 1 2 3 4 | ] [ 5 6 7 8 | ]  ]\n\n\"\"\"\nRemember where the cursor is, then slide it forward and double\neach 'top' number. Finally, move the cursor back to where it was.\n\"\"\"\n[ 1 2 3 4 | 5 6 7 8 ] |~> [ dup + ] leaves: [ [ 1 2 3 4 | 10 12 14 16 ] ]\n```\n\n### Blocks are dictionaries — and objects\n\n<img src=\"img/blocks-are-dictionaries.svg\" align=right width=512 />\n\nBlocks are dictionaries for themselves and for other blocks. The former is useful for *running* blocks, and the latter is useful for *connecting* blocks to each other — to form scopes, object hierarchies, and so on.\n\nAgain, you can imagine something like a Python dictionary or — even better — a JavaScript object.\n\nBlock dictionaries hold *entries*.\n\nWhen the key form is seen, looked up in the dictionary, and *opened*, *opener entries* (or *openers* for short) in turn *open* the value form (*open* is Novika-speak for \"run\", \"execute\", \"evaluate\").\n\nOn the other hand, *pusher* entries simply push their value form onto the stack.\n\n<br clear=\"right\"/>\n\n```novika\n100 $: x\n200 $: y\nx y + echo  \"STDOUT: 300⏎\"\n\n[ ${ x y } this ] @: newPoint\n\n100 200 newPoint $: A\n300 400 newPoint $: B\n\nA echo \"STDOUT: [ ${ x y } this · ${y :: 200} ${x :: 100} ]⏎\"\nB echo \"STDOUT: [ ${ x y } this · ${y :: 400} ${x :: 300} ]⏎\"\n\nA.x A.y 2echo \"STDOUT: 100⏎200⏎\"\nB.x B.y 2echo \"STDOUT: 300⏎400⏎\"\n```\n\n\n### Blocks are stacks\n\nAs simple as that: blocks are also stacks, you just have to look at them differently.\n\nApplying operations immediately before (or even after!) the cursor enables brevity often associated with stack-oriented programming languages. You can also move the cursor — this allows to avoid `rot`s and other nasty Forth-isms. Here is how `rot` can be implemented in Novika:\n\n```novika\n[ <| swap |> swap ] @: rot\n```\n\nLet's execute `1 2 3 rot` step-by-step, as if we were a Novika interpreter.\n\n1. Stack: `[ | ]`, block: `[ | 1 2 3 rot ]`\n2. Push `1`, stack: `[ 1 | ]`, block: `[ 1 | 2 3 rot ]`\n3. Push `2`, stack: `[ 1 2 | ]`, block: `[ 1 2 | 3 rot ]`\n4. Push `3`, stack: `[ 1 2 3 | ]`, block: `[ 1 2 3 | rot ]`\n5. Open `rot` with stack: `[ 1 2 3 | ]`: *instantiate* (basically copy) the block `[ <| swap |> swap ]`, and move the cursor to the beginning like so: `[ | <| swap |> swap ]`\n6. Open `<|`, stack: `[ 1 2 | 3 ]`, block: `[ <| | swap |> swap ]`\n7. Open `swap`, stack: `[ 2 1 | 3 ]`, block: `[ <| swap | |> swap ]`\n8. Open `|>`, stack: `[ 2 1 3 | ]`, block: `[ <| swap |> | swap ]`\n9. Open `swap`, stack: `[ 2 3 1 | ]`, block: `[ <| swap |> swap | ]`\n10. Cursor for block `[ <| swap |> swap | ]` is at end, close it!\n11. Cursor for block `[ 1 2 3 rot | ]` is at end, close it!\n12. No more blocks to run!\n\nVoilá! It does rotate: `1 2 3 -- 2 3 1`.\n\n<img src=\"img/blocks-are-stacks.svg\"  width=1024 />\n\n### Blocks are vertices\n\n<img src=\"img/blocks-are-vertices.svg\" align=right width=512 />\n\nScoping, inheritance, and composition are all achieved through block relationships in Novika. There are two kinds of relationships: *is a friend of*, and *is **the** parent of*.\n\n- Blocks can have only one *parent*, or no parents.\n- Blocks can have zero or more *friends*.\n\nBlocks can change their (and other blocks') relationships (i.e. edges) at runtime, thereby affecting how, which, and whose entries are looked up and opened.\n\nBlock relationships can be cyclic: already-queried blocks are simply skipped. For those interested, Novika entry lookup is a weird (mainly for historical reasons and for convenience) combination of DFS and BFS (I guess...)\n\nFor instance, first, *is the parent of* relationships of block A are traversed, followed by a traversal over A's friends, followed by a traversal over the friends of A's parents. Together they are known as *the first echelon* in Novika.\n\n*The second echelon* is parents, friends, and friends of parents of the first echelon. Novika lookup machinery (and machinery it is!) simply recurses on members of the second echelon; prior to that it queries each member for whatever it is interested in, and turns to recursion only when the query remains unanswered.\n\n<br clear=\"right\"/>\n\n```novika\n[ 100 $: x ] obj $: definesX\n[ 200 $: y ] obj $: definesY\n\n\"\"\"\nEstablish a cyclic relationship (parentheses are like comments,\nthey don't mean anything and don't have to be matched):\n\"\"\"\n(definesX -- definesY -- definesX) drop\n\ndefinesX.x leaves: 100\ndefinesX.y leaves: 200\n\ndefinesY.x leaves: 100\ndefinesY.y leaves: 200\n```\n\n### Blocks are code\n\nWhen you're writing Novika, you're writing blocks. It's like when you're writing Lisp, you're writing lists.\n\nAll Novika code you saw or will see is a block — or, rather, is *in* a block. The toplevel block is the one that holds your whole code and doesn't need to be enclosed in `[]`s. You can think of it as of the \"file\" block, that is, the block which encloses an entire file of Novika source code *implicitly*.\n\n```novika\nthis echo  \"STDOUT: [ this echo · ${__path__ :: '/path/to/folder'} ${__file__ :: '/path/to/folder/file.nk'} ]\"\n```\n\n### Blocks are continuations\n\nA Novika continuation is a block that consists of two blocks: the stack block, and the code block, like so: `[ [ …code… ] [ …stack… ] ]`. Many words exist that create, add, remove, or modify continuation blocks and continuations. Most of them are so-called *builtins*, which are bits of runnable native code as seen from Novika. Here are some examples:\n\n- [hydrate](https://novika-lang.github.io/words/#hydrate), as in:\n\n  ```novika\n  [ 1 2 ] [ + echo ] hydrate  \"STDOUT: 3\"\n  ```\n\n- [open](https://novika-lang.github.io/words/#open) — this is an ancient (and often used) word from which the term *to open* came. What is described as *opening* is in reality a form of *hydration*, but for historical reasons *opening* is used anyway.\n\n  ```novika\n  4 [ dup + ] open echo  \"STDOUT: 8\"\n  ```\n\n- [do](https://novika-lang.github.io/words/#do) — opens a block with a new empty (isolated) stack:\n\n  ```novika\n  1 2 [ stack echo ] do  \"STDOUT: [ ]\"\n  ```\n\n- And more, see the [words documentation](https://novika-lang.github.io/words) or env/core.\n\nStack blocks can be shared between two continuations (as in `open` or opener entries where the block you open shares the stack with the opener block). Code blocks can also be shared, but I have never needed this in practice so there's no word that does something like that in env/core.\n\nIn the code block, the cursor is kept immediately after the form that is being opened right now.\n\n- The current (active) continuation can be accessed using the word `cont`, as in:\n\n  ```novika\n  1 2 cont echo 3 4  \"STDOUT: [ [ 1 2 cont echo | 3 4 ] [ 1 2 ] ]\"\n  ```\n\n- The stack of the current continuation (dubbed the *active stack* or simply the stack) can be accessed using the word `stack`, as in:\n\n  ```novika\n  1 2 <| stack echo |> 3 4  \"STDOUT: [ 1 | 2 ]\"\n  ```\n\n- The code block of the current continuation (dubbed the *active block* or simply the block) can be accessed using the word `this`, as in:\n\n  ```novika\n  1 2 this echo 3 4  \"STDOUT: [ 1 2 this echo | 3 4 ]\"\n  ```\n\n- The code block of the previous continuation (and the one that will be *activated* when the current continuation finishes) can be accessed using the word `ahead`. This word is *crucial* for writing human-readable Novika, as in `1 to: 100 only: even? each: echo`:\n\n  ```novika\n  [ ahead echo ] @: sneakyPeaky\n\n  1 2 sneakyPeaky 3 4  \"STDOUT: [ 1 2 sneakyPeaky | 3 4 ]\"\n  ```\n\nFinally, the *continuations block* is a single large block that holds individual continuation blocks. The top continuation block is the one that is currently executed. Below is (roughly) what you'd get if you type `conts shallowCopy each: echo` in the REPL. Do not forget `shallowCopy`, or the language will gain consciousness — and this never ends well!! :)\n\n```novika\n[ [ … REPL code … · ${__path__ :: '/path/to/novika/env'} ${__file__ :: '/path/to/novika/env/repl/repl.nk'} ${_pgRoot :: a block} @{startSession :: a block} ] [ ] ]\n[ [ … More REPL code … · ${error :: false} ${pgStack :: a block} @{runLine :: ( Q -- )} ] [ ] ]\n[ [ ahead thruBlock loop ] [ ] ]\n[ [ new $: iterBody iterBody createLoop $: nextLoop $: breakLoop @: startLoop iterBody #break breakLoop opens iterBody #next nextLoop opens startLoop · ${iterBody :: a block} ${nextLoop :: a block} ${breakLoop :: a block} @{startLoop :: a block} ] [ ] ]\n[ [ this =: breakTo orphan loopBody hydrate! ] [ ] ]\n[ [ orphan iterBody hydrate | repeat ] [ ] ]\n[ [ '>>> ' readLine br: [ runLine ] [ 'Bye.' echo break ] ] [ ] ]\n[ [ ahead thruBlock ahead thruBlock br ] [ ] ]\n[ [ runLine ] [ ] ]\n[ [ … More REPL code … · ${line :: 'conts shallowCopy each: echo'} ${self :: ( Q -- )} ${durationMs :: 0} ${pgRootInstance :: a block} ${pgStackCopy :: a block} ] [ ] ]\n[ [ [ reportError #true =: error self resume ] @: __died__ [ pgStackCopy pgRootInstance line slurp hydrate! ] measure | =: durationMs · @{__died__ :: a block} ] [ ] ]\n[ [ monotonic $: t1 do | monotonic $: t2 t2 t1 - · ${t1 :: 35111923.17418} ] [ ] ]\n[ [ pgStackCopy pgRootInstance line slurp hydrate! ] [ ] ]\n[ [ conts shallowCopy each: echo ] [ 1 2 3 4 ] ]\n```\n\nDon't be scared, it's just a bunch of letters :)\n\n## Want to learn more?\n\n1. Explore files in `tests/` to see how various words can be used. Beware, however, that those are internal behavior tests — and most of the time, they aren't practical/particularly readable.\n2. Explore `help` messages of various words. A less up-to-date but more convenient way to do the same is to read word documentation [here](https://novika-lang.github.io/words/).\n3. Explore files in `env/core`, the language's standard library.\n4. Explore the [Wiki](https://github.com/novika-lang/novika/wiki).\n\nI know there aren't a lot of materials here nor anywhere that'd teach you the language. On the fundamental stuff, the language is so weird I can't even remember how it all came to be. And in general I have so much to say that I just don't know where to begin. Hopefully, there will be more stuff here someday.\n\nExplore Novika as if it were an alien spaceship that accidentally fell on Earth, full of weird little yellow rotating yukoos. The aliens did not write on every button what it will do when you press it. And even if they did, what kind of language would they be using?!\n\n## Trade-offs, or why is Novika so slow?\n\nOf course, I had to make some trade-offs to achieve such a peculiar arrangement!\n\n### Negative performance\n\n*Wait, what?*\n\nSee, good compilers/interpreters live well in the positives. That is to say they remove irrelevant runtime. Bad compilers and “normal” interpreters live near zero, at the very least getting rid of the notion of parsing.\n\nAnd what about Novika? Novika is deep in the negatives. Novika *parses* at runtime. Yup, you’ve heard it right.\n\nWaging wars with FFI will give you performance, sure (that is, will move you closer to zero from the negative side!) But then, why not simply use C, Rust, Crystal, or any other fancy-schmancy programming language — especially if you're doing something *serious*?\n\n### Readability\n\n*It's up to you.*\n\nMaybe you want your code to look cryptic — so your friends think you’re a hacker or something. Novika will not stand in your way.\n\nBut wait, why is that? Why is Novika not *designed* to be readable? Isn't that popular nowadays?\n\nSee, in Novika, it is easy to make your code readable — even natural language-like. This ease, however, degrades performance. That is, enforcing style or syntax degrades performance. Even if Novika someday gets a JIT, writing natural-language-like code will still impose a performance penalty, however minuscule it will be. The choice between complete, high-level control over the language and the machinery involved vs. performance is up to you.\n\n### Big projects\n\n*Never.*\n\nI have no clue what big projects are, or what they need. There are enough smart people in this world already, and I'm certainly not one of them.\n\nI would say Novika is an interesting experiment and a great personal project. Perhaps the language will grow into something bigger a few years from now. Most likely, however, it'll die. Maintaining a general-purpose programming language in the 21st century is hard ­— there's just so much it must be able to do! After all, we are not drawing rectangles at the speed of a snail today, are we?\n\n## Contributing and internals\n\nFirst of all, thank you for even getting this far! Even if you didn't read the whole document, thank you. Seriously :)\n\n### Where do I start?\n\n1. First of all, the documentation for rev10 (i.e., this implementation) is available [here](https://novika-lang.github.io/novika/).\n2. Try exploring [capabilities](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities) and their [implementations](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities/impl). This is where native code words like `dup` and `appendEcho` are defined. This is also a nice *starting point* to find bugs, optimize, add new stuff, etc. It's also one of the places where you can find typos, lack of documentation, and even some TODOs.\n3. Try looking through the [interpreter code](https://github.com/novika-lang/novika/tree/rev10/src/novika) in general. I do have a compulsion to write comments, so most of the code is documented. How well documented is not for me to decide, but documented it is.\n4. If you're someone who knows something about optimization, your eyes will hurt! Believe me :)\n\n### What happens where?\n\nWhen you do your `bin/novika hello.nk`, here's *roughly* the order in which various components get invoked:\n\n1. [The command-line interface](https://github.com/novika-lang/novika/blob/rev10/src/cli.cr) frontend is what greets you (or doesn't) and sets everything up.\n2. [Resolver](https://github.com/novika-lang/novika/blob/rev10/src/novika/resolver.cr) knows where everything is on the disk.\n3. [Capability collection](https://github.com/novika-lang/novika/blob/rev10/src/novika/capability.cr) allows to control the capabilities of this particular invokation of the language/capabilities of the language overall. For example, this component is aware of you droping the `-Dnovika_console` flag.\n4. [Capability interfaces and implementations](https://github.com/novika-lang/novika/tree/rev10/src/novika/capabilities) describe and implement those capabilities.\n5. [Scissors](https://github.com/novika-lang/novika/blob/rev10/src/novika/scissors.cr) cut the contents of `hello.nk` (or any other blob of source code) into pieces called *unclassified forms*\n6. [Classifier](https://github.com/novika-lang/novika/blob/rev10/src/novika/classifier.cr) classifies them, and shoves the resulting [forms](https://github.com/novika-lang/novika/tree/rev10/src/novika/forms) into a *file block*.\n7. [Blocks](https://github.com/novika-lang/novika/blob/rev10/src/novika/forms/block.cr) are *the* most important forms in Novika.\n8. [Engine](https://github.com/novika-lang/novika/blob/rev10/src/novika/engine.cr) [runs](https://github.com/novika-lang/novika/blob/db440e7f8ba4342a9eaacf77f76b6c59bc49528f/src/novika/engine.cr#L307) file blocks and all blocks \"subordinate\" to them. **This is the entrypoint for code execution, and one of the cornerstones of Novika**.\n9. [Errors](https://github.com/novika-lang/novika/blob/rev10/src/novika/error.cr) happen. Or don't.\n\nNote that most of these components interact with each other, making this list pretty pointless \"for science\".\n\n### Implementing features as a capability (in Crystal) vs. in Novika\n\nTL; DR: The rule of thumb for me is if something requires awareness of the\nuser's OS or isn't portable/`ffi`-compatible, it should be implemented as a\ncapability (meaning in Crystal).\n\nFor instance, networking, reading/writing files, building paths -- all of this\nrequires awareness of the underlying OS, due to different syscalls, permission\njugglery, and other slash-vs-backslash kinds of issues.\n\nNovika is a high-level interface -- you won't believe it, a *language*! Whether\nthe underlying (\"discussed\") objects are from the native code \"reality\" or\nconstructed with the means of the language, is completely irrelevant to\nthe end user, nor to Novika the High-Level Interface.\n\nAgain, Novika is a slightly different way of thinking, sure, but certainly\nnot an operating system!\n\nNote that e.g. SDL is cross-platform provided you put the dynamic libraries\nfor it in the proper place. Moreover, `ffi` is a capability and is cross-platform.\nSo it's perfectly valid to use `ffi`, the only requirement being that the library\nyou're `ffi`-ing is cross-platform.\n\nNovika code is supposed to be run in a sandbox of sorts, like JavaScript in the\nbrowser. The gatekeeper of sorts is called the *resolver* (perhaps I should\nrename it to gatekeeper though 💩).\n\nInside the sandbox, there is no information about the OS. However, the resolver\ndoes have access to this information, so you can branch in your `.nk.app` or `.nk.lib`\nlike so: `[ windows, linux |  myWindowsFile, myLinuxFile ].nk`.\n\nNow, I know the sandbox is \"breachy\", but I can't do anything about it! The\nworld is a dangerous place, huh?\n\n### And the usual procedure\n\n1. Fork it (<https://github.com/novika-lang/novika/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n* [homonoidian](https://github.com/homonoidian) - creator and maintainer\n","program":{"html_id":"novika/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"ancestors":[{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"},{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"}],"locations":[],"repository_name":"novika","program":true,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"extended_modules":[{"html_id":"novika/Spec/Expectations","kind":"module","full_name":"Spec::Expectations","name":"Expectations"},{"html_id":"novika/Spec/Methods","kind":"module","full_name":"Spec::Methods","name":"Methods"}],"class_methods":[{"html_id":"check_compressed_data(compressed_data:Slice,want:Slice)-class-method","name":"check_compressed_data","abstract":false,"args":[{"name":"compressed_data","external_name":"compressed_data","restriction":"Slice"},{"name":"want","external_name":"want","restriction":"Slice"}],"args_string":"(compressed_data : Slice, want : Slice)","args_html":"(compressed_data : Slice, want : Slice)","location":{"filename":"src/ext/brotli/spec/spec_helper.cr","line_number":4,"url":null},"def":{"name":"check_compressed_data","args":[{"name":"compressed_data","external_name":"compressed_data","restriction":"Slice"},{"name":"want","external_name":"want","restriction":"Slice"}],"visibility":"Public","body":"uncompressed = Compress::Brotli.decode(compressed_data)\nif uncompressed != want\n  fail((\"Data doesn't uncompress to the original value \\n\" + \"Length of original: #{want.size}\\n\") + \"Length of uncompressed: #{uncompressed.size}\")\nend\nuncompressed.should(eq(want))\n"}}],"types":[{"html_id":"novika/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika.cr","line_number":23,"url":null},{"filename":"src/novika/substrate.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nSee [`Array` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/array.html) in the language reference.\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","instance_methods":[{"html_id":"find(type:U.class):U|NilforallU-instance-method","name":"find","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"U.class"}],"args_string":"(type : U.class) : U | Nil forall U","args_html":"(type : <span class=\"t\">U</span>.<span class=\"k\">class</span>) : U | Nil forall U","location":{"filename":"src/novika.cr","line_number":24,"url":null},"def":{"name":"find","args":[{"name":"type","external_name":"type","restriction":"U.class"}],"return_type":"U | ::Nil","visibility":"Public","body":"needle = find do |__arg0|\n  __arg0.is_a?(U)\nend\nif needle\n  needle.as(U)\nend\n"}},{"html_id":"unsafe_concat(other:Array(T),index,other_start,other_insert_count)-instance-method","name":"unsafe_concat","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Array(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"args_string":"(other : Array(T), index, other_start, other_insert_count)","args_html":"(other : <a href=\"Array.html\">Array</a>(T), index, other_start, other_insert_count)","location":{"filename":"src/novika/substrate.cr","line_number":2,"url":null},"def":{"name":"unsafe_concat","args":[{"name":"other","external_name":"other","restriction":"Array(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"visibility":"Public","body":"resize_if_cant_insert(other_insert_count)\n(@buffer + index).move_to((@buffer + index) + other_insert_count, @size - index)\n(@buffer + index).copy_from(other.to_unsafe + other_start, other_insert_count)\n@size = @size + other_insert_count\nself\n"}}]},{"html_id":"novika/LibDl","path":"LibDl.html","kind":"alias","full_name":"LibDl","name":"LibDl","abstract":false,"locations":[{"filename":"src/ext/dlfcn.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"LibC","aliased_html":"LibC","const":false},{"html_id":"novika/Novika","path":"Novika.html","kind":"module","full_name":"Novika","name":"Novika","abstract":false,"locations":[{"filename":"src/novika.cr","line_number":48,"url":null},{"filename":"src/novika/capability.cr","line_number":1,"url":null},{"filename":"src/novika/dict.cr","line_number":1,"url":null},{"filename":"src/novika/engine.cr","line_number":1,"url":null},{"filename":"src/novika/error.cr","line_number":1,"url":null},{"filename":"src/novika/forms/block.cr","line_number":1,"url":null},{"filename":"src/novika/forms/boolean.cr","line_number":1,"url":null},{"filename":"src/novika/forms/builtin.cr","line_number":1,"url":null},{"filename":"src/novika/forms/byteslice.cr","line_number":1,"url":null},{"filename":"src/novika/forms/color.cr","line_number":3,"url":null},{"filename":"src/novika/forms/decimal.cr","line_number":1,"url":null},{"filename":"src/novika/forms/foreign.cr","line_number":3,"url":null},{"filename":"src/novika/forms/form.cr","line_number":24,"url":null},{"filename":"src/novika/forms/quote.cr","line_number":1,"url":null},{"filename":"src/novika/forms/words.cr","line_number":1,"url":null},{"filename":"src/novika/image.cr","line_number":6,"url":null},{"filename":"src/novika/object_pool.cr","line_number":1,"url":null},{"filename":"src/novika/substrate.cr","line_number":14,"url":null},{"filename":"src/novika/tape.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BlockMaps","name":"BlockMaps","value":"ObjectPool(BlockIdMap).new(create: -> do\n  BlockIdMap.new\nend, clear: ->(map : BlockIdMap) do\n  map.clear\nend)","doc":"A pool of `BlockIdMap` objects.\n\nYou generally don't need to touch this.","summary":"<p>A pool of <code><a href=\"Novika/BlockIdMap.html\">BlockIdMap</a></code> objects.</p>"},{"id":"EFFECT_PATTERN","name":"EFFECT_PATTERN","value":"/^(\\(\\s+(?:[^\\(\\)]*)\\--(?:[^\\(\\)]*)\\s+\\)):/","doc":"Regex that can be used to search for a pattern in `Block`\ncomments. Perfer `Form#effect` over matching by hand.","summary":"<p>Regex that can be used to search for a pattern in <code><a href=\"Novika/Block.html\">Block</a></code> comments.</p>"},{"id":"VERSION","name":"VERSION","value":"\"0.1.1\""}],"extended_modules":[{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"}],"instance_methods":[{"html_id":"colorful?:Bool-instance-method","name":"colorful?","doc":"Returns whether the output of Novika should be colorful.\n\nWhether this will be respected by general Novika code cannot\nbe guaranteed, but it is guaranteed to be respected by the\nCLI frontend.","summary":"<p>Returns whether the output of Novika should be colorful.</p>","abstract":false,"location":{"filename":"src/novika.cr","line_number":58,"url":null},"def":{"name":"colorful?","return_type":"Bool","visibility":"Public","body":"((STDOUT.tty? && STDERR.tty?) && (ENV[\"TERM\"]? != \"dumb\")) && (!(ENV.has_key?(\"NO_COLOR\")))"}}],"types":[{"html_id":"novika/Novika/Block","path":"Novika/Block.html","kind":"class","full_name":"Novika::Block","name":"Block","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/block.cr","line_number":338,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_COUNT_TO_S","name":"MAX_COUNT_TO_S","value":"128","doc":"Maximum amount of forms to display in block string representation.","summary":"<p>Maximum amount of forms to display in block string representation.</p>"},{"id":"MAX_NESTED_COUNT_TO_S","name":"MAX_NESTED_COUNT_TO_S","value":"12","doc":"Maximum amount of forms to display in string representation\nof *nested* blocks.","summary":"<p>Maximum amount of forms to display in string representation of <em>nested</em> blocks.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Blocks are fundamental to Novika.\n\nThey are a kind of AST node, they hold continuations and\nare continuations, they are arrays, stacks, and hash tables,\nall at the same time.\n\nIn this sense, blocks have *roles*. But any block can be\nany role, and change its role as often and whenever it\nwants or needs to.","summary":"<p>Blocks are fundamental to Novika.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":441,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"block\""}},{"html_id":"with(array:Array(Form),leaf:Bool|Nil=nil)-class-method","name":"with","doc":"Creates and returns an orphan block with *array* being\nits tape substrate's container. See `Tape.for`.","summary":"<p>Creates and returns an orphan block with <em>array</em> being its tape substrate's container.</p>","abstract":false,"args":[{"name":"array","external_name":"array","restriction":"Array(Form)"},{"name":"leaf","default_value":"nil","external_name":"leaf","restriction":"Bool | ::Nil"}],"args_string":"(array : Array(Form), leaf : Bool | Nil = nil)","args_html":"(array : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Form.html\">Form</a>), leaf : Bool | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":411,"url":null},"def":{"name":"with","args":[{"name":"array","external_name":"array","restriction":"Array(Form)"},{"name":"leaf","default_value":"nil","external_name":"leaf","restriction":"Bool | ::Nil"}],"visibility":"Public","body":"new(parent: nil, tape: Tape.for(array), leaf: leaf.nil? ? array.includes?(Block) : leaf)"}},{"html_id":"with(form1:Form,form2:Form)-class-method","name":"with","doc":"Double-*form* optimized version of `Block.with`.","summary":"<p>Double-<em>form</em> optimized version of <code><a href=\"../Novika/Block.html#with%28array%3AArray%28Form%29%2Cleaf%3ABool%7CNil%3Dnil%29-class-method\">Block.with</a></code>.</p>","abstract":false,"args":[{"name":"form1","external_name":"form1","restriction":"Form"},{"name":"form2","external_name":"form2","restriction":"Form"}],"args_string":"(form1 : Form, form2 : Form)","args_html":"(form1 : <a href=\"../Novika/Form.html\">Form</a>, form2 : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":420,"url":null},"def":{"name":"with","args":[{"name":"form1","external_name":"form1","restriction":"Form"},{"name":"form2","external_name":"form2","restriction":"Form"}],"visibility":"Public","body":"new(parent: nil, tape: Tape.for([form1, form2] of Form), leaf: !(form1.is_a?(Block) || form2.is_a?(Block)))"}},{"html_id":"with(form:Form)-class-method","name":"with","doc":"Single-*form* optimized version of `Block.with`.","summary":"<p>Single-<em>form</em> optimized version of <code><a href=\"../Novika/Block.html#with%28array%3AArray%28Form%29%2Cleaf%3ABool%7CNil%3Dnil%29-class-method\">Block.with</a></code>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":429,"url":null},"def":{"name":"with","args":[{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"new(parent: nil, tape: Tape.for([form] of Form), leaf: !form.is_a?(Block))"}}],"constructors":[{"html_id":"new(parent:Block|Nil=nil,prototype:Nil|Novika::Block=self,tape:Novika::Tape(Novika::Form)|Nil=nil,dict:Novika::IDict|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"},{"name":"prototype","default_value":"self","external_name":"prototype","restriction":"::Nil | ::Novika::Block"},{"name":"tape","default_value":"nil","external_name":"tape","restriction":"::Novika::Tape(::Novika::Form) | ::Nil"},{"name":"dict","default_value":"nil","external_name":"dict","restriction":"::Novika::IDict | ::Nil"}],"args_string":"(parent : Block | Nil = nil, prototype : Nil | Novika::Block = self, tape : Novika::Tape(Novika::Form) | Nil = nil, dict : Novika::IDict | Nil = nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>, prototype : Nil | <a href=\"../Novika/Block.html\">Novika::Block</a> = <span class=\"k\">self</span>, tape : <a href=\"../Novika/Tape.html\">Novika::Tape</a>(<a href=\"../Novika/Form.html\">Novika::Form</a>) | Nil = <span class=\"n\">nil</span>, dict : <a href=\"../Novika/IDict.html\">Novika::IDict</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":398,"url":null},"def":{"name":"new","args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"},{"name":"prototype","default_value":"self","external_name":"prototype","restriction":"::Nil | ::Novika::Block"},{"name":"tape","default_value":"nil","external_name":"tape","restriction":"::Novika::Tape(::Novika::Form) | ::Nil"},{"name":"dict","default_value":"nil","external_name":"dict","restriction":"::Novika::IDict | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent, prototype, tape, dict)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other):Bool-instance-method","name":"==","doc":"Loose equality: for two blocks to be loosely equal, their\ntapes and their dictionaries must be loosely equal.\n\nSupports recursive (reflection) equality, e.g.:\n\n```novika\n[ ] $: a\na a shove\na first a = \"=> true\"\n```","summary":"<p>Loose equality: for two blocks to be loosely equal, their tapes and their dictionaries must be loosely equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other) : Bool","args_html":"(other) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":1136,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"return_type":"Bool","visibility":"Public","body":"if other.is_a?(self)\nelse\n  return false\nend\nif same?(other)\n  return true\nend\nif count == other.count\nelse\n  return false\nend\nresult = false\nexecuted = exec_recursive(:==) do\n  result = true\n  if has_tape? || other.has_tape?\n    result && (result = tape == other.tape)\n  end\n  if has_dict? || other.has_dict?\n    result && (result = dict == other.dict)\n  end\nend\nexecuted && result\n"}},{"html_id":"a(type:T.class,_depth=0):TforallT-instance-method","name":"a","doc":"Converts this block into the given *type*. Code execution\nmay be required, hence the need for *engine*. If failed,\nsame as `Form#a`.","summary":"<p>Converts this block into the given <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"},{"name":"_depth","default_value":"0","external_name":"_depth","restriction":""}],"args_string":"(type : T.class, _depth = 0) : T forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, _depth = <span class=\"n\">0</span>) : T forall T","location":{"filename":"src/novika/forms/block.cr","line_number":1237,"url":null},"def":{"name":"a","args":[{"name":"type","external_name":"type","restriction":"T.class"},{"name":"_depth","default_value":"0","external_name":"_depth","restriction":""}],"return_type":"T","visibility":"Public","body":"if self.is_a?(T)\n  return self\nend\n(case T\nwhen Decimal.class\n  a?(Hook.as_decimal, type, _depth)\nwhen Quote.class\n  a?(Hook.as_quote, type, _depth)\nwhen Word.class\n  a?(Hook.as_word, type, _depth)\nwhen Color.class\n  a?(Hook.as_color, type, _depth)\nwhen Boolean.class\n  a?(Hook.as_boolean, type, _depth)\nwhen QuotedWord.class\n  a?(Hook.as_quoted_word, type, _depth)\nwhen Byteslice.class\n  a?(Hook.as_byteslice, type, _depth)\nend) || (afail(T))\n"}},{"html_id":"add(form:Form):self-instance-method","name":"add","doc":"Adds *form* to the tape.","summary":"<p>Adds <em>form</em> to the tape.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : self","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":628,"url":null},"def":{"name":"add","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"impl = ->(other : Form) do\n  if other.is_a?(Block)\n    self.leaf = false\n  end\n  self.tape = tape.add(other)\nend\nif hook = flat_at?(Hook.on_shove)\n  default = Builtin.new(\"__shove__\", desc: \"( F -- ): default __shove__ implementation. Pushes Form to\\n the block it was captured in.\") do |_, stack|\n    impl.call(stack.drop)\n  end\n  stack = Block.with(form, default)\n  Engine.exhaust(Engine.current.capabilities, hook, stack)\nelse\n  impl.call(form)\nend\nself\n"}},{"html_id":"at(b:Int32,e:Int32)-instance-method","name":"at","doc":"Returns a block of forms between *b* and *e*, both\ninclusive. Clamps *b* and *e* to bounds.","summary":"<p>Returns a block of forms between <em>b</em> and <em>e</em>, both inclusive.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32)","args_html":"(b : Int32, e : Int32)","location":{"filename":"src/novika/forms/block.cr","line_number":568,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"visibility":"Public","body":"if has_tape?\nelse\n  return Block.new\nend\nb = Math.max(b, 0)\ne = Math.min(e, count - 1)\nBlock.with((b..e).map do |index|\n  at(index)\nend)\n"}},{"html_id":"at(name:Form,entry:Entry):self-instance-method","name":"at","doc":"Binds *name* to *entry* in this block's dictionary.","summary":"<p>Binds <em>name</em> to <em>entry</em> in this block's dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : self","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":995,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"self","visibility":"Public","body":"tap do\n  dict.set(name, entry)\nend"}},{"html_id":"at(name:Form,form:Form):self-instance-method","name":"at","doc":"Binds *name* to *form* in this block's dictionary.","summary":"<p>Binds <em>name</em> to <em>form</em> in this block's dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form) : self","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1000,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"at(name, Entry.new(form))"}},{"html_id":"at(index:Int32):Form-instance-method","name":"at","doc":"Returns the form at *index* in the tape. Dies if *index*\nis out of bounds. See `Tape#at?`.","summary":"<p>Returns the form at <em>index</em> in the tape.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Form","args_html":"(index : Int32) : <a href=\"../Novika/Form.html\">Form</a>","location":{"filename":"src/novika/forms/block.cr","line_number":560,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"index out of bounds\")\nend\n(tape.at?(index)) || (die(\"index out of bounds\"))\n"}},{"html_id":"at(name:String,desc=\"abuiltin\",&code:Engine,Block->):self-instance-method","name":"at","doc":"Makes an `OpenEntry` called *name* for *code* wrapped\nin `Builtin`.","summary":"<p>Makes an <code><a href=\"../Novika/OpenEntry.html\">OpenEntry</a></code> called <em>name</em> for <em>code</em> wrapped in <code><a href=\"../Novika/Builtin.html\">Builtin</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"args_string":"(name : String, desc = \"a builtin\", &code : Engine, Block -> ) : self","args_html":"(name : <a href=\"../String.html\">String</a>, desc = <span class=\"s\">&quot;a builtin&quot;</span>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> ) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1011,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"return_type":"self","visibility":"Public","body":"at(Word.new(name), OpenEntry.new(Builtin.new(name, desc, code)))"}},{"html_id":"at(name:Word,desc=\"abuiltin\",&code:Engine,Block->):self-instance-method","name":"at","doc":"Makes an `OpenEntry` called *name* for *code* wrapped\nin `Builtin`.","summary":"<p>Makes an <code><a href=\"../Novika/OpenEntry.html\">OpenEntry</a></code> called <em>name</em> for <em>code</em> wrapped in <code><a href=\"../Novika/Builtin.html\">Builtin</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Word"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"args_string":"(name : Word, desc = \"a builtin\", &code : Engine, Block -> ) : self","args_html":"(name : <a href=\"../Novika/Word.html\">Word</a>, desc = <span class=\"s\">&quot;a builtin&quot;</span>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> ) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1006,"url":null},"def":{"name":"at","args":[{"name":"name","external_name":"name","restriction":"Word"},{"name":"desc","default_value":"\"a builtin\"","external_name":"desc","restriction":""}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"return_type":"self","visibility":"Public","body":"at(name, OpenEntry.new(Builtin.new(name.id, desc, code)))"}},{"html_id":"at?(index)-instance-method","name":"at?","doc":"Returns the form at *index*, or nil.","summary":"<p>Returns the form at <em>index</em>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/forms/block.cr","line_number":552,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"if has_tape?\nelse\n  return\nend\ntape.at?(index)\n"}},{"html_id":"befriend(other:Block):self-instance-method","name":"befriend","doc":"Adds *other* to the friendlist of this block.","summary":"<p>Adds <em>other</em> to the friendlist of this block.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block) : self","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":747,"url":null},"def":{"name":"befriend","args":[{"name":"other","external_name":"other","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"friends.add(other)\nself\n"}},{"html_id":"can_be?(type:T.class):BoolforallT-instance-method","name":"can_be?","doc":"Returns whether this block implements hook(s) needed\nfor behaving like *type*. See also: `a(type)`.","summary":"<p>Returns whether this block implements hook(s) needed for behaving like <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) : Bool forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Bool forall T","location":{"filename":"src/novika/forms/block.cr","line_number":1253,"url":null},"def":{"name":"can_be?","args":[{"name":"type","external_name":"type","restriction":"T.class"}],"return_type":"Bool","visibility":"Public","body":"if self.is_a?(T)\n  return true\nend\ncase T\nwhen Decimal.class\n  flat_has?(Hook.as_decimal)\nwhen Quote.class\n  flat_has?(Hook.as_quote)\nwhen Word.class\n  flat_has?(Hook.as_word)\nwhen Color.class\n  flat_has?(Hook.as_color)\nwhen Boolean.class\n  flat_has?(Hook.as_boolean)\nwhen QuotedWord.class\n  flat_has?(Hook.as_quoted_word)\nwhen Byteslice.class\n  flat_has?(Hook.as_byteslice)\nelse\n  false\nend\n"}},{"html_id":"clear_entries:self-instance-method","name":"clear_entries","doc":"Removes all owned dictionary entries in this block.","summary":"<p>Removes all owned dictionary entries in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1052,"url":null},"def":{"name":"clear_entries","return_type":"self","visibility":"Public","body":"dict.clear\nself\n"}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of forms in this block.","summary":"<p>Returns the amount of forms in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":526,"url":null},"def":{"name":"count","visibility":"Public","body":"has_tape? ? tape.count : 0"}},{"html_id":"cursor-instance-method","name":"cursor","doc":"Returns the cursor position in this block.","summary":"<p>Returns the cursor position in this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":521,"url":null},"def":{"name":"cursor","visibility":"Public","body":"has_tape? ? tape.cursor : 0"}},{"html_id":"delete_at(index:Int32):self-instance-method","name":"delete_at","doc":"Deletes the form at *index*. Does nothing if index is out\nof bounds.","summary":"<p>Deletes the form at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : self","args_html":"(index : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1034,"url":null},"def":{"name":"delete_at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"if delpt = tape.to?(index + 1)\nelse\n  return self\nend\nif delpt.drop?\nelse\n  return self\nend\nself.tape = (tape.to?(Math.min(cursor, delpt.count))).not_nil!\nself\n"}},{"html_id":"delete_entry(name:Form):self-instance-method","name":"delete_entry","doc":"Deletes the entry corresponding to *name* form from the\ndictionary of this block if it exists there. Otherwise,\ndoes nothing.","summary":"<p>Deletes the entry corresponding to <em>name</em> form from the dictionary of this block if it exists there.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : self","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1045,"url":null},"def":{"name":"delete_entry","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"dict.del(name)\nself\n"}},{"html_id":"delete_if(&:Form->Bool):self-instance-method","name":"delete_if","doc":"Yields forms from left to right until the block returns `true`\nfor one, then deletes that form. If the block does not return\n`true` for any form, does nothing.","summary":"<p>Yields forms from left to right until the block returns <code>true</code> for one, then deletes that form.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1018,"url":null},"def":{"name":"delete_if","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Form -> Bool)"},"return_type":"self","visibility":"Public","body":"index = nil\neach do |other|\n  index || (index = 0)\n  if yield other\n    break\n  end\n  index = index + 1\nend\nif index\nelse\n  return self\nend\ndelete_at(index)\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/block.cr","line_number":437,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << (prototype.comment? || \"a block\")"}},{"html_id":"describe_with?(comment:String,force=false):String|Nil-instance-method","name":"describe_with?","doc":"Sets the block comment of this block to *comment* in\ncase it doesn't have a comment already.\n\nSetting the comment can also be forced by making *force* true.","summary":"<p>Sets the block comment of this block to <em>comment</em> in case it doesn't have a comment already.</p>","abstract":false,"args":[{"name":"comment","external_name":"comment","restriction":"String"},{"name":"force","default_value":"false","external_name":"force","restriction":""}],"args_string":"(comment : String, force = false) : String | Nil","args_html":"(comment : <a href=\"../String.html\">String</a>, force = <span class=\"n\">false</span>) : <a href=\"../String.html\">String</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":463,"url":null},"def":{"name":"describe_with?","args":[{"name":"comment","external_name":"comment","restriction":"String"},{"name":"force","default_value":"false","external_name":"force","restriction":""}],"return_type":"String | ::Nil","visibility":"Public","body":"if force || (!comment?)\n  @comment = dedent(comment)\nend"}},{"html_id":"drop:Form-instance-method","name":"drop","doc":"Removes and returns the top form. Dies if none.","summary":"<p>Removes and returns the top form.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":695,"url":null},"def":{"name":"drop","return_type":"Form","visibility":"Public","body":"impl = -> do\n  top.tap do\n    self.tape = tape.drop? || (raise(\"unreachable\"))\n  end\nend\nif hook = flat_at?(Hook.on_cherry)\n  default = Builtin.new(\"__cherry__\", desc: \"( -- ): default __cherry__ implementation.\") do\n    impl.call\n  end\n  stack = Block.with(default)\n  (Engine.exhaust(Engine.current.capabilities, hook, stack)).top\nelse\n  impl.call\nend\n"}},{"html_id":"dupe:self-instance-method","name":"dupe","doc":"Duplicates the form before the cursor, dies if none.","summary":"<p>Duplicates the form before the cursor, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":673,"url":null},"def":{"name":"dupe","return_type":"self","visibility":"Public","body":"add(top)"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Yields all forms in this block, *going from left to right*.","summary":"<p>Yields all forms in this block, <em>going from left to right</em>.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":536,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"if has_tape?\nelse\n  return\nend\ntape.each do |form|\n  yield form\nend\n"}},{"html_id":"each_entry(&)-instance-method","name":"each_entry","doc":"Yields entry names and `Entry` objects from the dictionary\nof this block.","summary":"<p>Yields entry names and <code><a href=\"../Novika/Entry.html\">Entry</a></code> objects from the dictionary of this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":899,"url":null},"def":{"name":"each_entry","yields":2,"block_arity":2,"visibility":"Public","body":"if has_dict?\nelse\n  return\nend\ndict.each do |name, entry|\n  yield name, entry\nend\n"}},{"html_id":"each_entry_name(&)-instance-method","name":"each_entry_name","doc":"Yields entry name forms in this block's dictionary.","summary":"<p>Yields entry name forms in this block's dictionary.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":908,"url":null},"def":{"name":"each_entry_name","yields":1,"block_arity":1,"visibility":"Public","body":"each_entry do |name, _|\n  yield name\nend"}},{"html_id":"each_entry_value(&)-instance-method","name":"each_entry_value","doc":"Yields entry value forms in this block's dictionary.","summary":"<p>Yields entry value forms in this block's dictionary.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":915,"url":null},"def":{"name":"each_entry_value","yields":1,"block_arity":1,"visibility":"Public","body":"each_entry do |_, entry|\n  yield entry.form\nend"}},{"html_id":"each_friend(&)-instance-method","name":"each_friend","doc":"Yields friends of this block. Asserts each is a block,\notherwise, dies (e.g. the user may have mistakenly\nadded some other form).","summary":"<p>Yields friends of this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":735,"url":null},"def":{"name":"each_friend","yields":1,"block_arity":1,"visibility":"Public","body":"if has_friends?\nelse\n  return\nend\nfriends.reverse_each do |friend|\n  if friend.is_a?(Block)\n  else\n    die(\"expected a block, got #{friend.class.typedesc} for a friend\")\n  end\n  yield friend\nend\n"}},{"html_id":"each_neighbor(payload:Block->T|Nil,visited:BlockIdMap|Nil=nil)forallT-instance-method","name":"each_neighbor","doc":"Explores neighbor blocks of this block, calls *payload* with\neach such neighbor block. Records all neighbors it visited in\n*visited*.\n\n*Explicitly nested* (marked as *ExN1-2* in the diagram below)\nneighbor blocks are blocks found in the dictionary and tape of\nthis block (marked as *B* in the diagram below).\n\n*Implicitly nested* (marked as *ImN1-4* in the diagram below)\nneighbor blocks are blocks in the tapes and dictionaries of\nexplicitly nested neighbor blocks, and so on, recursively.\n\n```text\n┌───────────────────────────────────────┐\n│ B                                     │\n│  ┌───────────────┐ ┌───────────────┐  │\n│  │ ExN1          │ │ ExN2          │  │\n│  │ ┌────┐ ┌────┐ │ │ ┌────┐ ┌────┐ │  │\n│  │ │ImN1│ │ImN2│ │ │ │ImN3│ │ImN4│ │  │\n│  │ └────┘ └────┘ │ │ └────┘ └────┘ │  │\n│  │    ...    ... │ │    ...    ... │  │\n│  └───────────────┘ └───────────────┘  │\n│                                       │\n└───────────────────────────────────────┘\n```","summary":"<p>Explores neighbor blocks of this block, calls <em>payload</em> with each such neighbor block.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"args_string":"(payload : Block -> T | Nil, visited : BlockIdMap | Nil = nil) forall T","args_html":"(payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil, visited : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":856,"url":null},"def":{"name":"each_neighbor","args":[{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"visibility":"Public","body":"each do |form|\n  if form.is_a?(Block)\n  else\n    next\n  end\n  if visited.try(&.has_key?(form.object_id))\n    next\n  end\n  visited || (visited = BlockIdMap.new)\n  visited[form.object_id] = form\n  if payload.call(form)\n    return\n  end\n  form.each_neighbor(payload, visited)\nend\nif has_dict?\nelse\n  return\nend\ndict.each do |_, entry|\n  form = entry.form\n  if form.is_a?(Block)\n  else\n    next\n  end\n  if visited.try(&.has_key?(form.object_id))\n    next\n  end\n  visited || (visited = BlockIdMap.new)\n  visited[form.object_id] = form\n  if payload.call(form)\n    return\n  end\n  form.each_neighbor(payload, visited)\nend\n"}},{"html_id":"each_neighbor(visited:BlockIdMap|Nil=nil,&payload:Block->T|Nil)forallT-instance-method","name":"each_neighbor","doc":"Explores neighbor blocks of this block, calls *payload* with\neach such neighbor block. Records all neighbors it visited in\n*visited*.\n\n*Explicitly nested* (marked as *ExN1-2* in the diagram below)\nneighbor blocks are blocks found in the dictionary and tape of\nthis block (marked as *B* in the diagram below).\n\n*Implicitly nested* (marked as *ImN1-4* in the diagram below)\nneighbor blocks are blocks in the tapes and dictionaries of\nexplicitly nested neighbor blocks, and so on, recursively.\n\n```text\n┌───────────────────────────────────────┐\n│ B                                     │\n│  ┌───────────────┐ ┌───────────────┐  │\n│  │ ExN1          │ │ ExN2          │  │\n│  │ ┌────┐ ┌────┐ │ │ ┌────┐ ┌────┐ │  │\n│  │ │ImN1│ │ImN2│ │ │ │ImN3│ │ImN4│ │  │\n│  │ └────┘ └────┘ │ │ └────┘ └────┘ │  │\n│  │    ...    ... │ │    ...    ... │  │\n│  └───────────────┘ └───────────────┘  │\n│                                       │\n└───────────────────────────────────────┘\n```","summary":"<p>Explores neighbor blocks of this block, calls <em>payload</em> with each such neighbor block.</p>","abstract":false,"args":[{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"args_string":"(visited : BlockIdMap | Nil = nil, &payload : Block -> T | Nil) forall T","args_html":"(visited : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>, &payload : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil) forall T","location":{"filename":"src/novika/forms/block.cr","line_number":893,"url":null},"def":{"name":"each_neighbor","args":[{"name":"visited","default_value":"nil","external_name":"visited","restriction":"BlockIdMap | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"payload","external_name":"payload","restriction":"(Block -> T | ::Nil)"},"visibility":"Public","body":"each_neighbor(payload, visited)"}},{"html_id":"each_occurrence_of(pattern:Form,&)-instance-method","name":"each_occurrence_of","doc":"Yields occurrences of the given *pattern* found in this\nblock. Matching is done using loose equality  `==(other)`.","summary":"<p>Yields occurrences of the given <em>pattern</em> found in this block.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Form"}],"args_string":"(pattern : Form, &)","args_html":"(pattern : <a href=\"../Novika/Form.html\">Form</a>, &)","location":{"filename":"src/novika/forms/block.cr","line_number":1159,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"Form"}],"yields":1,"block_arity":1,"visibility":"Public","body":"index = 0\neach do |form|\n  if pattern == form\n    yield index\n  end\n  index = index + 1\nend\n"}},{"html_id":"each_relative_fetch(fetcher:Block->T|Nil,seen:BlockIdMap|Nil=nil,skip_self:Bool=false,history:Block|Nil=nil):T|NilforallT-instance-method","name":"each_relative_fetch","doc":"Explores this block's relatives, i.e., its vertical (parent) and\nhorizontal (friend) hierarchy, calls *fetcher* on each relative.\nThis process is also known as the exploration of the block graph,\nwhere this block is the origin of exploration.\n\nIf *fetcher* returns a value of type `T` (a non-nil) for the given\nblock, exploration terminates. If *fetcher* returns nil, exploration\ncontinues.\n\nThe order of exploration is roughly as follows:\n\n- The first echelon is explored: the parents, friends, and friends\n  of parents of this block are explored.\n\n- The second echelon is explored: the parents, friends, and\n  friends of parents of the blocks in first echelon are explored\n  by recursing on each, effectively allowing lookup that is unlimited\n  in terms of depth.\n\n*seen* can be used to disable exploration of specific blocks,\nalso blocking off the exploration of their relatives (if they\nwere not otherwise reached already).\n\n*skip_self* can be set to true to disable calling *fetcher* for\nthis block. Note that if this block is reached by other means\n(e.g. as in `self -- other -- self`), *fetcher* is still going\nto be called.\n\n*history*, a block, can optionally be provided. It will hold all\nexplored blocks leading to the \"discovery\" of `T`.","summary":"<p>Explores this block's relatives, i.e., its vertical (parent) and horizontal (friend) hierarchy, calls <em>fetcher</em> on each relative.</p>","abstract":false,"args":[{"name":"fetcher","external_name":"fetcher","restriction":"(Block -> T | ::Nil)"},{"name":"seen","default_value":"nil","external_name":"seen","restriction":"BlockIdMap | ::Nil"},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":"Bool"},{"name":"history","default_value":"nil","external_name":"history","restriction":"Block | ::Nil"}],"args_string":"(fetcher : Block -> T | Nil, seen : BlockIdMap | Nil = nil, skip_self : Bool = false, history : Block | Nil = nil) : T | Nil forall T","args_html":"(fetcher : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil, seen : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>, skip_self : Bool = <span class=\"n\">false</span>, history : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>) : T | Nil forall T","location":{"filename":"src/novika/forms/block.cr","line_number":792,"url":null},"def":{"name":"each_relative_fetch","args":[{"name":"fetcher","external_name":"fetcher","restriction":"(Block -> T | ::Nil)"},{"name":"seen","default_value":"nil","external_name":"seen","restriction":"BlockIdMap | ::Nil"},{"name":"skip_self","default_value":"false","external_name":"skip_self","restriction":"Bool"},{"name":"history","default_value":"nil","external_name":"history","restriction":"Block | ::Nil"}],"return_type":"T | ::Nil","visibility":"Public","body":"if skip_self && (!has_relatives?)\n  return\nend\nif history\nelse\n  v0 = skip_self ? nil : self\n  ilist = PIlist.make(self)\n  ilist.each(v0) do |fastpath|\n    if value = fetcher.call(fastpath)\n    else\n      next\n    end\n    return value\n  end\nend\nacquired = seen.nil?\nseen || (seen = BlockMaps.acquire)\nbegin\n  fetch = EachRelativeFetch.new(fetcher, seen, history)\n  fetch.on(self, ignore: ilist)\nensure\n  if acquired\n    BlockMaps.release(seen)\n  end\nend\n"}},{"html_id":"each_relative_fetch(*args,**kwargs,&fetcher:Block->T|Nil):T|NilforallT-instance-method","name":"each_relative_fetch","doc":"Explores this block's relatives, i.e., its vertical (parent) and\nhorizontal (friend) hierarchy, calls *fetcher* on each relative.\nThis process is also known as the exploration of the block graph,\nwhere this block is the origin of exploration.\n\nIf *fetcher* returns a value of type `T` (a non-nil) for the given\nblock, exploration terminates. If *fetcher* returns nil, exploration\ncontinues.\n\nThe order of exploration is roughly as follows:\n\n- The first echelon is explored: the parents, friends, and friends\n  of parents of this block are explored.\n\n- The second echelon is explored: the parents, friends, and\n  friends of parents of the blocks in first echelon are explored\n  by recursing on each, effectively allowing lookup that is unlimited\n  in terms of depth.\n\n*seen* can be used to disable exploration of specific blocks,\nalso blocking off the exploration of their relatives (if they\nwere not otherwise reached already).\n\n*skip_self* can be set to true to disable calling *fetcher* for\nthis block. Note that if this block is reached by other means\n(e.g. as in `self -- other -- self`), *fetcher* is still going\nto be called.\n\n*history*, a block, can optionally be provided. It will hold all\nexplored blocks leading to the \"discovery\" of `T`.","summary":"<p>Explores this block's relatives, i.e., its vertical (parent) and horizontal (friend) hierarchy, calls <em>fetcher</em> on each relative.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs, &fetcher : Block -> T | Nil) : T | Nil forall T","args_html":"(*args, **kwargs, &fetcher : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil) : T | Nil forall T","location":{"filename":"src/novika/forms/block.cr","line_number":827,"url":null},"def":{"name":"each_relative_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"block_arg":{"name":"fetcher","external_name":"fetcher","restriction":"(Block -> T | ::Nil)"},"return_type":"T | ::Nil","visibility":"Public","body":"each_relative_fetch(fetcher, *args, **kwargs)"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/block.cr","line_number":1273,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << (prototype.comment? =~ EFFECT_PATTERN ? $~[1] : \"a block\")"}},{"html_id":"eject:Form-instance-method","name":"eject","doc":"Drops and returns the form after the cursor. Dies if\ncursor is at the end.","summary":"<p>Drops and returns the form after the cursor.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":612,"url":null},"def":{"name":"eject","return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"eject out of bounds\")\nend\nself.tape, _ = tape.eject? || (die(\"eject out of bounds\"))\n"}},{"html_id":"entry_count-instance-method","name":"entry_count","doc":"Returns the amount of entries owned by (defined in) this block.","summary":"<p>Returns the amount of entries owned by (defined in) this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":531,"url":null},"def":{"name":"entry_count","visibility":"Public","body":"has_dict? ? dict.count : 0"}},{"html_id":"entry_for(name:Form):Entry-instance-method","name":"entry_for","doc":"Returns the dictionary entry for *name*, or dies.\n\nSee `each_relative` for a detailed description of lookup\norder etc.","summary":"<p>Returns the dictionary entry for <em>name</em>, or dies.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/forms/block.cr","line_number":942,"url":null},"def":{"name":"entry_for","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry","visibility":"Public","body":"(entry_for?(name)) || (die(\"no value form for '#{name}'\"))"}},{"html_id":"entry_for?(name:Form):Entry|Nil-instance-method","name":"entry_for?","doc":"Returns the dictionary entry for *name*, or nil.\n\nSee `each_relative` for a detailed description of lookup\norder etc.","summary":"<p>Returns the dictionary entry for <em>name</em>, or nil.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":950,"url":null},"def":{"name":"entry_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry | ::Nil","visibility":"Public","body":"if entry = flat_at?(name)\n  return entry\nend\neach_relative_fetch(skip_self: true, &.flat_at?(name))\n"}},{"html_id":"flat_at?(name:Form):Entry|Nil-instance-method","name":"flat_at?","doc":"Returns the dictionary entry corresponding to *name*.\nDoes not traverse the block hierarchy.","summary":"<p>Returns the dictionary entry corresponding to <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":980,"url":null},"def":{"name":"flat_at?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Entry | ::Nil","visibility":"Public","body":"if has_dict?\nelse\n  return\nend\ndict.get(name) do\nend\n"}},{"html_id":"flat_has?(name:Form):Bool-instance-method","name":"flat_has?","doc":"Returns whether this block's (and this block's only)\ndictionary has an entry corresponding to *name*.","summary":"<p>Returns whether this block's (and this block's only) dictionary has an entry corresponding to <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":988,"url":null},"def":{"name":"flat_has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"if has_dict?\nelse\n  return false\nend\ndict.has?(name)\n"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":962,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":"(entry_for?(name)).try(&.form)"}},{"html_id":"has_comment?:Bool-instance-method","name":"has_comment?","doc":"Returns whether this block has a comment.","summary":"<p>Returns whether this block has a comment.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":455,"url":null},"def":{"name":"has_comment?","return_type":"Bool","visibility":"Public","body":"!(!comment?)"}},{"html_id":"has_dict?:Bool-instance-method","name":"has_dict?","doc":"Returns whether this block has a dict.","summary":"<p>Returns whether this block has a dict.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":372,"url":null},"def":{"name":"has_dict?","return_type":"Bool","visibility":"Public","body":"!(!@dict)"}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":958,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"!(!each_relative_fetch do |block|\n  (block.flat_has?(name)) || nil\nend)"}},{"html_id":"has_friends?:Bool-instance-method","name":"has_friends?","doc":"Returns whether this block has any friends.","summary":"<p>Returns whether this block has any friends.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":723,"url":null},"def":{"name":"has_friends?","return_type":"Bool","visibility":"Public","body":"(!(!@friends)) && (!friends.count.zero?)"}},{"html_id":"has_relatives?:Bool-instance-method","name":"has_relatives?","doc":"Returns whether this block has a parent, friends, or both.","summary":"<p>Returns whether this block has a parent, friends, or both.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":728,"url":null},"def":{"name":"has_relatives?","return_type":"Bool","visibility":"Public","body":"(!(!parent?)) || has_friends?"}},{"html_id":"has_tape?:Bool-instance-method","name":"has_tape?","doc":"Returns whether this block has a tape.","summary":"<p>Returns whether this block has a tape.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":361,"url":null},"def":{"name":"has_tape?","return_type":"Bool","visibility":"Public","body":"!(!@tape)"}},{"html_id":"import!(fromdonor:Block):self-instance-method","name":"import!","doc":"Imports entries from *donor* to this block's dictionary\nby mutating this block's dictionary.","summary":"<p>Imports entries from <em>donor</em> to this block's dictionary by mutating this block's dictionary.</p>","abstract":false,"args":[{"name":"donor","external_name":"from","restriction":"Block"}],"args_string":"(from donor : Block) : self","args_html":"(from donor : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":578,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"from","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"dict.import!(donor.dict)\nself\n"}},{"html_id":"includes?(other:Form):Bool-instance-method","name":"includes?","doc":"Returns whether the tape of this block includes *other*,\nas per loose equality `==(other)`.","summary":"<p>Returns whether the tape of this block includes <em>other</em>, as per loose equality <code><a href=\"../Novika/Block.html#%3D%3D%28other%29%3ABool-instance-method\">#==(other)</a></code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Form"}],"args_string":"(other : Form) : Bool","args_html":"(other : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":1151,"url":null},"def":{"name":"includes?","args":[{"name":"other","external_name":"other","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"each do |form|\n  if other == form\n    return true\n  end\nend\nfalse\n"}},{"html_id":"inject(form:Form):self-instance-method","name":"inject","doc":"Adds *form* after the cursor.","summary":"<p>Adds <em>form</em> after the cursor.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : self","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":605,"url":null},"def":{"name":"inject","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"self","visibility":"Public","body":"self.tape = tape.inject(form)\nself\n"}},{"html_id":"instance(parentnew_parent:Block=self,shallow=false,__tr:BlockIdMap|Nil=nil):Block-instance-method","name":"instance","doc":"Creates and returns an instance of this block, under the\ngiven *parent*.","summary":"<p>Creates and returns an instance of this block, under the given <em>parent</em>.</p>","abstract":false,"args":[{"name":"new_parent","default_value":"self","external_name":"parent","restriction":"Block"},{"name":"shallow","default_value":"false","external_name":"shallow","restriction":""},{"name":"__tr","default_value":"nil","external_name":"__tr","restriction":"BlockIdMap | ::Nil"}],"args_string":"(parent new_parent : Block = self, shallow = false, __tr : BlockIdMap | Nil = nil) : Block","args_html":"(parent new_parent : <a href=\"../Novika/Block.html\">Block</a> = <span class=\"k\">self</span>, shallow = <span class=\"n\">false</span>, __tr : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/forms/block.cr","line_number":1169,"url":null},"def":{"name":"instance","args":[{"name":"new_parent","default_value":"self","external_name":"parent","restriction":"Block"},{"name":"shallow","default_value":"false","external_name":"shallow","restriction":""},{"name":"__tr","default_value":"nil","external_name":"__tr","restriction":"BlockIdMap | ::Nil"}],"return_type":"Block","visibility":"Public","body":"copy = self.class.new(parent: new_parent, tape: has_tape? ? tape.copy : nil, prototype: prototype)\nif leaf? || shallow\n  return copy\nend\n__tr || (__tr = BlockIdMap.new)\n__tr[object_id] = copy\ncopy.tape = copy.tape.map! do |form|\n  if form.is_a?(Block)\n  else\n    next\n  end\n  __tr[form.object_id]? || (form.instance(same?(form.parent?) ? copy : form, __tr: __tr))\nend\ncopy.leaf = false\ncopy\n"}},{"html_id":"next?:Form|Nil-instance-method","name":"next?","doc":"See `Tape#next?`.","summary":"<p>See <code><a href=\"../Novika/Tape.html#next%3F-instance-method\">Tape#next?</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":585,"url":null},"def":{"name":"next?","return_type":"Form | ::Nil","visibility":"Public","body":"if has_tape?\nelse\n  return\nend\nself.tape, _ = tape.next? || (return)\n"}},{"html_id":"on_open(engine:Engine,stack:Block=engine.stack):self-instance-method","name":"on_open","doc":"Schedules this block for execution in *engine* using the\nsafe scheduling method (see `Engine#schedule`). Optionally,\na *stack* block may be provided (otherwise, the *engine*'s\ncurrent stack is used).","summary":"<p>Schedules this block for execution in <em>engine</em> using the safe scheduling method (see <code><a href=\"../Novika/Engine.html#schedule%28schedulable%3ASchedulable%2Cstack%3ABlock%29-instance-method\">Engine#schedule</a></code>).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","default_value":"engine.stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block = engine.stack) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a> = engine.stack) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1062,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","default_value":"engine.stack","external_name":"stack","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"engine.schedule(self, stack)\nself\n"}},{"html_id":"opener?(name:Form):Bool-instance-method","name":"opener?","doc":"Returns whether *name* opens its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this store.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":970,"url":null},"def":{"name":"opener?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"entry_for(name).is_a?(OpenEntry)"}},{"html_id":"parent:Block|Nil-instance-method","name":"parent","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"def":{"name":"parent","return_type":"Block | ::Nil","visibility":"Public","body":"if (value = @parent).nil?\n  ::raise(NilAssertionError.new(\"Novika::Block#parent cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"parent=(parent:Block|Nil)-instance-method","name":"parent=","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Block | ::Nil"}],"args_string":"(parent : Block | Nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil)","location":{"filename":"src/novika/forms/block.cr","line_number":388,"url":null},"def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Block | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"parent?:Block|Nil|Nil-instance-method","name":"parent?","doc":"Holds a reference to the parent block (them all in a\nlinked list of ancestors).","summary":"<p>Holds a reference to the parent block (them all in a linked list of ancestors).</p>","abstract":false,"def":{"name":"parent?","return_type":"Block | ::Nil | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"paste(forms:Block)-instance-method","name":"paste","doc":"Mutably adds forms before the cursor in *forms* block's\ntape after the cursor in this block's tape.","summary":"<p>Mutably adds forms before the cursor in <em>forms</em> block's tape after the cursor in this block's tape.</p>","abstract":false,"args":[{"name":"forms","external_name":"forms","restriction":"Block"}],"args_string":"(forms : Block)","args_html":"(forms : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":654,"url":null},"def":{"name":"paste","args":[{"name":"forms","external_name":"forms","restriction":"Block"}],"visibility":"Public","body":"if forms.count.zero?\n  return\nend\nself.tape = tape.paste(forms.tape)\n"}},{"html_id":"path_to_entry?(name:Form):Tuple(Entry,Block)|Nil-instance-method","name":"path_to_entry?","doc":"Returns a tuple that consists of the dictionary entry\ncorresponding to *name*, followed by the path block which\nholds all blocks leading to the entry.\n\nReturns nil if *name* could not be found.\n\nIn general works like `entry_for` and friends, the only\ndifference being that it also tracks and returns the path.\nThe latter makes this method slightly slower that `entry_for`.","summary":"<p>Returns a tuple that consists of the dictionary entry corresponding to <em>name</em>, followed by the path block which holds all blocks leading to the entry.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Tuple(Entry, Block) | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Tuple(<a href=\"../Novika/Entry.html\">Entry</a>, <a href=\"../Novika/Block.html\">Block</a>) | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":930,"url":null},"def":{"name":"path_to_entry?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"::Tuple(Entry, Block) | ::Nil","visibility":"Public","body":"path = Block.new\nif entry = each_relative_fetch(history: path, &.flat_at?(name))\nelse\n  return\nend\n{entry, path}\n"}},{"html_id":"prototype:Block-instance-method","name":"prototype","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"def":{"name":"prototype","return_type":"Block","visibility":"Public","body":"if (value = @prototype).nil?\n  ::raise(NilAssertionError.new(\"Novika::Block#prototype cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"prototype=(prototype:Block)-instance-method","name":"prototype=","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"args":[{"name":"prototype","external_name":"prototype","restriction":"Block"}],"args_string":"(prototype : Block)","args_html":"(prototype : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":392,"url":null},"def":{"name":"prototype=","args":[{"name":"prototype","external_name":"prototype","restriction":"Block"}],"visibility":"Public","body":"@prototype = prototype"}},{"html_id":"prototype?:Block|Nil-instance-method","name":"prototype?","doc":"Returns the prototype of this block. Block instances return\ntheir prototype (AST) blocks, AST blocks return themselves.","summary":"<p>Returns the prototype of this block.</p>","abstract":false,"def":{"name":"prototype?","return_type":"Block | ::Nil","visibility":"Public","body":"@prototype"}},{"html_id":"pusher?(name:Form):Bool-instance-method","name":"pusher?","doc":"Returns whether *name* pushes its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this store.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/block.cr","line_number":974,"url":null},"def":{"name":"pusher?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"!(opener?(name))"}},{"html_id":"resub(other:Block):self-instance-method","name":"resub","doc":"Replaces this block's tape with *other*'s.","summary":"<p>Replaces this block's tape with <em>other</em>'s.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block) : self","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1105,"url":null},"def":{"name":"resub","args":[{"name":"other","external_name":"other","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"self.tape = has_tape? ? tape.resub(other.tape) : Tape.new(other.tape.substrate)\nself\n"}},{"html_id":"reverse_each(&)-instance-method","name":"reverse_each","doc":"Yields all forms in this block, *going from right to left*.","summary":"<p>Yields all forms in this block, <em>going from right to left</em>.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":543,"url":null},"def":{"name":"reverse_each","yields":1,"block_arity":1,"visibility":"Public","body":"if has_tape?\nelse\n  return\nend\n(0...tape.count).reverse_each do |index|\n  yield tape.at!(index)\nend\n"}},{"html_id":"schedule(engine:Engine,stack:Block):self-instance-method","name":"schedule","doc":"Schedules an instance of this block for execution, with *stack*\nset as the stack that will be used by the instance during\nexecution.\n\nMoves the cursor of the instance before the first form\nso that the entire block will be executed by *engine*.","summary":"<p>Schedules an instance of this block for execution, with <em>stack</em> set as the stack that will be used by the instance during execution.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1087,"url":null},"def":{"name":"schedule","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"if count.zero?\n  return self\nend\ninstance.schedule!(engine, stack)\nself\n"}},{"html_id":"schedule!(engine:Engine,stack:Block):self-instance-method","name":"schedule!","doc":"Schedules this block for execution, with *stack* set as the\nstack that will be used by this block during execution.\n\nMoves the cursor before the first form so that the entire\nblock will be executed by *engine*.","summary":"<p>Schedules this block for execution, with <em>stack</em> set as the stack that will be used by this block during execution.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":1073,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"if count.zero?\n  return self\nend\nengine.schedule!(stack: stack, block: to(0))\nself\n"}},{"html_id":"shallow:Block-instance-method","name":"shallow","doc":"Returns a shallow copy of this block.","summary":"<p>Returns a shallow copy of this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1096,"url":null},"def":{"name":"shallow","return_type":"Block","visibility":"Public","body":"self.class.new(parent: parent?, tape: has_tape? ? tape.copy : nil, dict: has_dict? ? dict.copy : nil, prototype: prototype)"}},{"html_id":"slice:Tuple(Block,Block)-instance-method","name":"slice","doc":"Slices this block at cursor. This results in two halves,\nwhich are consequently returned.","summary":"<p>Slices this block at cursor.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":685,"url":null},"def":{"name":"slice","return_type":"::Tuple(Block, Block)","visibility":"Public","body":"if has_tape?\nelse\n  return {Block.new(parent: self), Block.new(parent: self)}\nend\nlhs, rhs = tape.slice\n{Block.new(parent: self, tape: lhs), Block.new(parent: self, tape: rhs)}\n"}},{"html_id":"slurp(source:String):self-instance-method","name":"slurp","doc":"Parses all forms in string *source*, and adds them to\nthis block.","summary":"<p>Parses all forms in string <em>source</em>, and adds them to this block.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String) : self","args_html":"(source : <a href=\"../String.html\">String</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":508,"url":null},"def":{"name":"slurp","args":[{"name":"source","external_name":"source","restriction":"String"}],"return_type":"self","visibility":"Public","body":"classifier = Classifier.new(source, block: self)\nScissors.cut(source) do |start, count, dot|\n  classifier.classify(start, count, dot)\nend\nclassifier.end\nself\n"}},{"html_id":"sort_using!(&cmp:Form,Form->Int32):self-instance-method","name":"sort_using!","doc":"Sorts this block's tape inplace, calls *cmp* comparator proc\nfor each form pair for a comparison integer -1, 0, or 1.","summary":"<p>Sorts this block's tape inplace, calls <em>cmp</em> comparator proc for each form pair for a comparison integer -1, 0, or 1.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":715,"url":null},"def":{"name":"sort_using!","yields":2,"block_arity":2,"block_arg":{"name":"cmp","external_name":"cmp","restriction":"(Form, Form -> Int32)"},"return_type":"self","visibility":"Public","body":"if has_tape?\nelse\n  return self\nend\nself.tape = tape.sort_using!(cmp)\nself\n"}},{"html_id":"spot(io,vicinity=10,colorful=true)-instance-method","name":"spot","doc":"Appends a string representation of this block to *io* in\nwhich only forms in the negative and positive *vicinity*\nof this block's cursor are present, and the word before\nthe cursor is emphasized.\n\nDoes not respect `MAX_COUNT_TO_S`. Does not display quotes.\nDoes not display nested blocks.","summary":"<p>Appends a string representation of this block to <em>io</em> in which only forms in the negative and positive <em>vicinity</em> of this block's cursor are present, and the word before the cursor is emphasized.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"vicinity","default_value":"10","external_name":"vicinity","restriction":""},{"name":"colorful","default_value":"true","external_name":"colorful","restriction":""}],"args_string":"(io, vicinity = 10, colorful = true)","args_html":"(io, vicinity = <span class=\"n\">10</span>, colorful = <span class=\"n\">true</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":1284,"url":null},"def":{"name":"spot","args":[{"name":"io","external_name":"io","restriction":""},{"name":"vicinity","default_value":"10","external_name":"vicinity","restriction":""},{"name":"colorful","default_value":"true","external_name":"colorful","restriction":""}],"visibility":"Public","body":"io << \"[\"\nb = (cursor - vicinity).clamp(0..(count - 1))\ne = (cursor + vicinity).clamp(0..(count - 1))\n(b..e).each do |index|\n  form = at(index)\n  focus = index == (cursor - 1)\n  (Colorize.with.bold.toggle(focus && colorful)).surround(io) do\n    case form\n    when Block\n      io << \" […]\"\n    when Quote\n      io << \" '…'\"\n    else\n      (io << \" \") << form\n    end\n  end\n  if focus\n    io << (\" |\".colorize.toggle(colorful)).red\n  end\nend\nio << \" ]\"\n"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/block.cr","line_number":966,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"(entry_for?(name)).try(&.submit(form))"}},{"html_id":"swap:self-instance-method","name":"swap","doc":"Swaps two forms before the cursor, dies if none.","summary":"<p>Swaps two forms before the cursor, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":678,"url":null},"def":{"name":"swap","return_type":"self","visibility":"Public","body":"self.tape = tape.swap? || (die(\"at least two forms required before the cursor\"))\nself\n"}},{"html_id":"thru:Form-instance-method","name":"thru","doc":"Returns form after cursor, and moves cursor past it.\n\nSimilar to `eject`, but doesn't modify the block.","summary":"<p>Returns form after cursor, and moves cursor past it.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":621,"url":null},"def":{"name":"thru","return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"thru out of bounds\")\nend\nself.tape, _ = tape.thru? || (die(\"thru out of bounds\"))\n"}},{"html_id":"to(index:Int32):self-instance-method","name":"to","doc":"Moves tape cursor to *index*. Dies if *index* is out\nof bounds. See `Tape#to?`.","summary":"<p>Moves tape cursor to <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : self","args_html":"(index : Int32) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":593,"url":null},"def":{"name":"to","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"self","visibility":"Public","body":"if (!has_tape?) && index.zero?\n  return self\nend\nif has_tape?\nelse\n  die(\"cursor index out of bounds\")\nend\nself.tape = (tape.to?(index)) || (die(\"cursor index out of bounds\"))\nself\n"}},{"html_id":"to_dict_block:Block-instance-method","name":"to_dict_block","doc":"Builds and returns a dictionary block for this block.\n\nDictionary block is an *orphan* block whose dictionary is a shallow\ncopy of this block's dictionary; and whose tape is empty.","summary":"<p>Builds and returns a dictionary block for this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1122,"url":null},"def":{"name":"to_dict_block","return_type":"Block","visibility":"Public","body":"Block.new(parent: nil, dict: has_dict? ? dict.copy : nil)"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1269,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"(a?(Hook.as_quote, Quote)) || super()"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/block.cr","line_number":1309,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if repr = a?(Hook.as_quote, Quote)\n  io << repr.string\n  return\nend\nexecuted = exec_recursive(:to_s) do\n  io << \"[\"\n  if has_tape? && (!tape.empty?)\n    (0...cursor).each do |index|\n      (io << \" \") << (at(index))\n    end\n    if cursor == count\n    else\n      io << \" |\"\n      (cursor...count).each do |index|\n        (io << \" \") << (at(index))\n      end\n    end\n  end\n  if has_dict? && (!dict.empty?)\n    io << \" ·\"\n    dict.each do |name, entry|\n      ((((io << \" \") << (entry.is_a?(OpenEntry) ? \"@\" : \"$\")) << \"{\") << name) << \" :: \"\n      entry.effect(io)\n      io << \"}\"\n    end\n  end\n  io << \" ]\"\nend\nif executed\nelse\n  io << \"⭮\"\nend\n"}},{"html_id":"to_tape_block:Block-instance-method","name":"to_tape_block","doc":"Builds and returns a tape block for this block.\n\nTape block is an *orphan* block whose tape is a shallow copy\nof this block's tape; and whose dictionary is empty.","summary":"<p>Builds and returns a tape block for this block.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":1114,"url":null},"def":{"name":"to_tape_block","return_type":"Block","visibility":"Public","body":"Block.new(parent: nil, tape: has_tape? ? tape.copy : nil, leaf: leaf?)"}},{"html_id":"top:Form-instance-method","name":"top","doc":"Returns the top form, dies if none.","summary":"<p>Returns the top form, dies if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":661,"url":null},"def":{"name":"top","return_type":"Form","visibility":"Public","body":"if has_tape?\nelse\n  die(\"no top for block\")\nend\ntop? || (die(\"no top for block\"))\n"}},{"html_id":"top?:Form|Nil-instance-method","name":"top?","doc":"Returns the top form, or nil if none.","summary":"<p>Returns the top form, or nil if none.</p>","abstract":false,"location":{"filename":"src/novika/forms/block.cr","line_number":668,"url":null},"def":{"name":"top?","return_type":"Form | ::Nil","visibility":"Public","body":"tape.top?"}},{"html_id":"unfriend(other:Block):self-instance-method","name":"unfriend","doc":"Removes *other* from the friendlist of this block.","summary":"<p>Removes <em>other</em> from the friendlist of this block.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block) : self","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/block.cr","line_number":754,"url":null},"def":{"name":"unfriend","args":[{"name":"other","external_name":"other","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"if has_friends?\nelse\n  return self\nend\nfriends.delete_if do |friend|\n  friend.is_a?(Block) && (friend.same?(other))\nend\nself\n"}}]},{"html_id":"novika/Novika/BlockIdMap","path":"Novika/BlockIdMap.html","kind":"alias","full_name":"Novika::BlockIdMap","name":"BlockIdMap","abstract":false,"locations":[{"filename":"src/novika/forms/block.cr","line_number":327,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"Hash(UInt64, Novika::Block)","aliased_html":"Hash(UInt64, <a href=\"../Novika/Block.html\">Novika::Block</a>)","const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Maps block unique identifiers (currently, object ids are used as\nsuch) to blocks they identify.\n\nUsed instead of Sets for forcing identity-based lookup rather\nthan hash-based lookup.","summary":"<p>Maps block unique identifiers (currently, object ids are used as such) to blocks they identify.</p>"},{"html_id":"novika/Novika/BlockPool","path":"Novika/BlockPool.html","kind":"class","full_name":"Novika::BlockPool","name":"BlockPool","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":549,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BlockPool]","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: pivot, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: cb, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  blocks.size\nend}, {type: \"array\", name: blocks, cls: FrozenBlock, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(pivot:Block,caps:CapabilityCollection,mode=CaptureMode::CaptureAll)-class-method","name":"new","doc":"Creates a block pool by exploring the given *pivot*\nblock's hierarchy, forms, etc.\n\nNote that the pivot block may or may not be the root\nblock; the whole tree is explored anyway, be it\n\"above\", \"below\", \"to the left\", or \"to the right\"\nof the pivot block.","summary":"<p>Creates a block pool by exploring the given <em>pivot</em> block's hierarchy, forms, etc.</p>","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(pivot : Block, caps : CapabilityCollection, mode = CaptureMode::CaptureAll)","args_html":"(pivot : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":777,"url":null},"def":{"name":"new","args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"pool = new\nvisitor = BlockVisitor.new(caps.block, mode)\nvisitor.enter(pivot)\npool.cb = caps.block.object_id\npool.pivot = pivot.object_id\npool.blocks = visitor.blocks\npool\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":550,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"blocks:Array(FrozenBlock)-instance-method","name":"blocks","doc":"Lists the frozen blocks in this pool.","summary":"<p>Lists the frozen blocks in this pool.</p>","abstract":false,"def":{"name":"blocks","return_type":"Array(FrozenBlock)","visibility":"Public","body":"@blocks"}},{"html_id":"blocks=(blocks:Array(FrozenBlock))-instance-method","name":"blocks=","doc":"Lists the frozen blocks in this pool.","summary":"<p>Lists the frozen blocks in this pool.</p>","abstract":false,"args":[{"name":"blocks","external_name":"blocks","restriction":"Array(FrozenBlock)"}],"args_string":"(blocks : Array(FrozenBlock))","args_html":"(blocks : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/FrozenBlock.html\">FrozenBlock</a>))","def":{"name":"blocks=","args":[{"name":"blocks","external_name":"blocks","restriction":"Array(FrozenBlock)"}],"visibility":"Public","body":"@blocks = blocks"}},{"html_id":"cb:UInt64-instance-method","name":"cb","doc":"Holds the capability block id. Even though during serialization,\ncapability block is skipped (as serializing it would be of no\nparticular use), its id is still stored so that client-side\n(nki-side), it can be replaced with the client capability\nblock, hopefully with all necessary capabilities.","summary":"<p>Holds the capability block id.</p>","abstract":false,"def":{"name":"cb","return_type":"UInt64","visibility":"Public","body":"@cb"}},{"html_id":"cb=(cb:UInt64)-instance-method","name":"cb=","doc":"Holds the capability block id. Even though during serialization,\ncapability block is skipped (as serializing it would be of no\nparticular use), its id is still stored so that client-side\n(nki-side), it can be replaced with the client capability\nblock, hopefully with all necessary capabilities.","summary":"<p>Holds the capability block id.</p>","abstract":false,"args":[{"name":"cb","external_name":"cb","restriction":"UInt64"}],"args_string":"(cb : UInt64)","args_html":"(cb : UInt64)","def":{"name":"cb=","args":[{"name":"cb","external_name":"cb","restriction":"UInt64"}],"visibility":"Public","body":"@cb = cb"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of blocks in this pool.","summary":"<p>Holds the amount of blocks in this pool.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of blocks in this pool.","summary":"<p>Holds the amount of blocks in this pool.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"pivot:UInt64-instance-method","name":"pivot","doc":"Holds the pivot block id.","summary":"<p>Holds the pivot block id.</p>","abstract":false,"def":{"name":"pivot","return_type":"UInt64","visibility":"Public","body":"@pivot"}},{"html_id":"pivot=(pivot:UInt64)-instance-method","name":"pivot=","doc":"Holds the pivot block id.","summary":"<p>Holds the pivot block id.</p>","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"UInt64"}],"args_string":"(pivot : UInt64)","args_html":"(pivot : UInt64)","def":{"name":"pivot=","args":[{"name":"pivot","external_name":"pivot","restriction":"UInt64"}],"visibility":"Public","body":"@pivot = pivot"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Reconstructs (melts if necessary) the pivot block, its\nblock hierarchy, its forms etc. Returns the resulting\n`Block` form.","summary":"<p>Reconstructs (melts if necessary) the pivot block, its block hierarchy, its forms etc.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":764,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"assembler = BlockAssembler.new(blocks, caps.block)\nassembler.resolve!(cb, caps.block)\nassembler.fetch(pivot)\n"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds the block pool: all blocks reachable from the\n`pivot` block, and the pivot block itself.\n\nA block can be reached by the way of hierarchy, and by\nthe way of dictionary/tape content.\n\nConsists of a list of frozen blocks (see `FrozenBlock`)\nand an id reference to the pivot block in that list.\n\nBlock pools can be assembled back into a hierarchy of\nblocks pivoted at `pivot` using `melt`.","summary":"<p>Holds the block pool: all blocks reachable from the <code><a href=\"../Novika/BlockPool.html#pivot%3AUInt64-instance-method\">#pivot</a></code> block, and the pivot block itself.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":549,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/BlockRefSnapshot","path":"Novika/BlockRefSnapshot.html","kind":"class","full_name":"Novika::BlockRefSnapshot","name":"BlockRefSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":47,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BlockRefSnapshot]","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: id, cls: UInt64, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(id:UInt64)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","location":{"filename":"src/novika/image.cr","line_number":58,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"instance = new\ninstance.id = id\ninstance\n"}},{"html_id":"new(block:Form)-class-method","name":"new","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Form"}],"args_string":"(block : Form)","args_html":"(block : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/image.cr","line_number":64,"url":null},"def":{"name":"new","args":[{"name":"block","external_name":"block","restriction":"Form"}],"visibility":"Public","body":"new(block.object_id)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":48,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:UInt64-instance-method","name":"id","doc":"Holds unique id of the block this reference points to,\nin `BlockPool`.","summary":"<p>Holds unique id of the block this reference points to, in <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"def":{"name":"id","return_type":"UInt64","visibility":"Public","body":"@id"}},{"html_id":"id=(id:UInt64)-instance-method","name":"id=","doc":"Holds unique id of the block this reference points to,\nin `BlockPool`.","summary":"<p>Holds unique id of the block this reference points to, in <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":54,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"assembler.fetch(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"A unique, integer id-based reference to a block found in\nthe one-and-only `BlockPool`.\n\nIts type is `SnapshotType::BlockRef`.","summary":"<p>A unique, integer id-based reference to a block found in the one-and-only <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":47,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Boolean","path":"Novika/Boolean.html","kind":"struct","full_name":"Novika::Boolean","name":"Boolean","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"subclasses":[{"html_id":"novika/Novika/False","kind":"struct","full_name":"Novika::False","name":"False"},{"html_id":"novika/Novika/True","kind":"struct","full_name":"Novika::True","name":"True"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a boolean (true/false) value.","summary":"<p>Represents a boolean (true/false) value.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":39,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"constructors":[{"html_id":"[](object):Boolean-class-method","name":"[]","doc":"Creates a `Boolean` subclass for the given *object*.","summary":"<p>Creates a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> subclass for the given <em>object</em>.</p>","abstract":false,"args":[{"name":"object","external_name":"object","restriction":""}],"args_string":"(object) : Boolean","args_html":"(object) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":7,"url":null},"def":{"name":"[]","args":[{"name":"object","external_name":"object","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"object ? True.new : False.new"}},{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}},{"html_id":"same?(a:ValueForm,b:ValueForm):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.\n\nNote that Novika's `same?` is not exactly the same as Crystal's,\nthat is, not as \"pedantic\".\n\nFor example, some reference types may pretend they're value\ntypes (see `ValueForm`). This means that e.g. `1 1 same?` in\nNovika will leave `true`, but for Crystal it's actually false\nbecause the two `1`s are different objects.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"ValueForm"},{"name":"b","external_name":"b","restriction":"ValueForm"}],"args_string":"(a : ValueForm, b : ValueForm) : Boolean","args_html":"(a : <a href=\"../Novika/ValueForm.html\">ValueForm</a>, b : <a href=\"../Novika/ValueForm.html\">ValueForm</a>) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":20,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":"ValueForm"},{"name":"b","external_name":"b","restriction":"ValueForm"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a == b]"}},{"html_id":"same?(a:Reference,b:Reference):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.\n\nNote that Novika's `same?` is not exactly the same as Crystal's,\nthat is, not as \"pedantic\".\n\nFor example, some reference types may pretend they're value\ntypes (see `ValueForm`). This means that e.g. `1 1 same?` in\nNovika will leave `true`, but for Crystal it's actually false\nbecause the two `1`s are different objects.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Reference"},{"name":"b","external_name":"b","restriction":"Reference"}],"args_string":"(a : Reference, b : Reference) : Boolean","args_html":"(a : Reference, b : Reference) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":25,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":"Reference"},{"name":"b","external_name":"b","restriction":"Reference"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a.same?(b)]"}},{"html_id":"same?(a:Byteslice,b:Byteslice):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.\n\nNote that Novika's `same?` is not exactly the same as Crystal's,\nthat is, not as \"pedantic\".\n\nFor example, some reference types may pretend they're value\ntypes (see `ValueForm`). This means that e.g. `1 1 same?` in\nNovika will leave `true`, but for Crystal it's actually false\nbecause the two `1`s are different objects.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Byteslice"},{"name":"b","external_name":"b","restriction":"Byteslice"}],"args_string":"(a : Byteslice, b : Byteslice) : Boolean","args_html":"(a : <a href=\"../Novika/Byteslice.html\">Byteslice</a>, b : <a href=\"../Novika/Byteslice.html\">Byteslice</a>) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":30,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":"Byteslice"},{"name":"b","external_name":"b","restriction":"Byteslice"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a.same?(b)]"}},{"html_id":"same?(a,b):Boolean-class-method","name":"same?","doc":"Returns a `Boolean` for whether *a* and *b* are the same.\n\nNote that Novika's `same?` is not exactly the same as Crystal's,\nthat is, not as \"pedantic\".\n\nFor example, some reference types may pretend they're value\ntypes (see `ValueForm`). This means that e.g. `1 1 same?` in\nNovika will leave `true`, but for Crystal it's actually false\nbecause the two `1`s are different objects.","summary":"<p>Returns a <code><a href=\"../Novika/Boolean.html\">Boolean</a></code> for whether <em>a</em> and <em>b</em> are the same.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b) : Boolean","args_html":"(a, b) : <a href=\"../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/forms/boolean.cr","line_number":35,"url":null},"def":{"name":"same?","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"Boolean[a == b]"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":3,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/BooleanSnapshot","path":"Novika/BooleanSnapshot.html","kind":"class","full_name":"Novika::BooleanSnapshot","name":"BooleanSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":72,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BooleanSnapshot]","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 0, cls: Novika::BooleanSnapshot, onlyif: nil, verify: nil}] of Nil","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Boolean)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"args_string":"(form : Boolean)","args_html":"(form : <a href=\"../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/image.cr","line_number":85,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"visibility":"Public","body":"bool = new\nbool.state = form.is_a?(True)\nbool\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":73,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"state:Bool-instance-method","name":"state","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"state","return_type":"Bool","visibility":"Public","body":"@state == 1"}},{"html_id":"state=(state:UInt8)-instance-method","name":"state=","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"args":[{"name":"state","external_name":"state","restriction":"UInt8"}],"args_string":"(state : UInt8)","args_html":"(state : UInt8)","def":{"name":"state=","args":[{"name":"state","external_name":"state","restriction":"UInt8"}],"visibility":"Public","body":"@state = state"}},{"html_id":"state=(value:Bool)-instance-method","name":"state=","doc":"Whether the underlying boolean is true or false.","summary":"<p>Whether the underlying boolean is true or false.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"state=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@state = UInt8.new(value ? 1 : 0)"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":81,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Boolean[state]"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a boolean form.\n\nIts type is `SnapshotType::Boolean`.","summary":"<p>Snapshot of a boolean form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":72,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Builtin","path":"Novika/Builtin.html","kind":"struct","full_name":"Novika::Builtin","name":"Builtin","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/builtin.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Wraps a snippet of Crystal (native) code, namely a Crystal\n`Proc`, for usage in the Novika-land.","summary":"<p>Wraps a snippet of Crystal (native) code, namely a Crystal <code>Proc</code>, for usage in the Novika-land.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/builtin.cr","line_number":24,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"builtin\""}}],"constructors":[{"html_id":"new(id:String,desc:String,code:Novika::Engine,Novika::Block->_)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"desc","external_name":"desc","restriction":"String"},{"name":"code","external_name":"code","restriction":"(::Novika::Engine, ::Novika::Block -> _)"}],"args_string":"(id : String, desc : String, code : Novika::Engine, Novika::Block -> _)","args_html":"(id : <a href=\"../String.html\">String</a>, desc : <a href=\"../String.html\">String</a>, code : <a href=\"../Novika/Engine.html\">Novika::Engine</a>, <a href=\"../Novika/Block.html\">Novika::Block</a> -> _)","location":{"filename":"src/novika/forms/builtin.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"desc","external_name":"desc","restriction":"String"},{"name":"code","external_name":"code","restriction":"(::Novika::Engine, ::Novika::Block -> _)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, desc, code)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(id:String,desc:String,&code:Engine,Block->)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"desc","external_name":"desc","restriction":"::String"}],"args_string":"(id : String, desc : String, &code : Engine, Block -> )","args_html":"(id : <a href=\"../String.html\">String</a>, desc : <a href=\"../String.html\">String</a>, &code : <a href=\"../Novika/Engine.html\">Engine</a>, <a href=\"../Novika/Block.html\">Block</a> -> )","location":{"filename":"src/novika/forms/builtin.cr","line_number":17,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"desc","external_name":"desc","restriction":"::String"}],"yields":2,"block_arity":2,"block_arg":{"name":"code","external_name":"code","restriction":"(Engine, Block ->)"},"visibility":"Public","body":"_ = allocate\n_.initialize(id, desc, &code) do |_arg0, _arg1|\n  yield _arg0, _arg1\nend\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if code == other.code\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/builtin.cr","line_number":20,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << @desc"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/builtin.cr","line_number":33,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@desc =~ EFFECT_PATTERN ? (io << $~[1]) : \"native code\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = code.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this builtin.","summary":"<p>Returns the identifier of this builtin.</p>","abstract":false,"location":{"filename":"src/novika/forms/builtin.cr","line_number":9,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/builtin.cr","line_number":28,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"code.call(engine, engine.stack)\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/builtin.cr","line_number":37,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[native code for: '\") << id) << \"']\""}}]},{"html_id":"novika/Novika/BuiltinSnapshot","path":"Novika/BuiltinSnapshot.html","kind":"class","full_name":"Novika::BuiltinSnapshot","name":"BuiltinSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":245,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BuiltinSnapshot]","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Builtin)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"args_string":"(form : Builtin)","args_html":"(form : <a href=\"../Novika/Builtin.html\">Builtin</a>)","location":{"filename":"src/novika/image.cr","line_number":256,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"visibility":"Public","body":"builtin = new\nbuiltin.id = form.id\nbuiltin\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":246,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated unique identifier of this\nbuiltin.","summary":"<p>Holds the 0-terminated unique identifier of this builtin.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated unique identifier of this\nbuiltin.","summary":"<p>Holds the 0-terminated unique identifier of this builtin.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":252,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"assembler.cb.form_for(Novika::Word.new(id))"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a builtin form.\n\nNote: builtins aren't actually serialized, only their\nidentifies are. Assuming the contract between the image\nemitter and image consumer is held, that builtin ids in\ncapabilities are the same and unique -- this works.\n\nBut not builtins created dynamically! Such builtins are\nnot easy nor safe to serialize.\n\nTODO: handle builtin serialization and/or provide\nserializable builtin factories.","summary":"<p>Snapshot of a builtin form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":245,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Byteslice","path":"Novika/Byteslice.html","kind":"struct","full_name":"Novika::Byteslice","name":"Byteslice","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/byteslice.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_PREVIEW","name":"DEFAULT_PREVIEW","value":"\"byteslice\"","doc":"Holds the default preview string for byteslices.","summary":"<p>Holds the default preview string for byteslices.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":23,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"byteslice\""}}],"constructors":[{"html_id":"new(bytes:Bytes,preview:String=DEFAULT_PREVIEW,mutable:Bool=true)-class-method","name":"new","doc":"Initializes a byteslice from *bytes*.","summary":"<p>Initializes a byteslice from <em>bytes</em>.</p>","abstract":false,"args":[{"name":"bytes","external_name":"bytes","restriction":"Bytes"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":"::String"},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":"::Bool"}],"args_string":"(bytes : Bytes, preview : String = DEFAULT_PREVIEW, mutable : Bool = true)","args_html":"(bytes : Bytes, preview : <a href=\"../String.html\">String</a> = <span class=\"t\">DEFAULT_PREVIEW</span>, mutable : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":15,"url":null},"def":{"name":"new","args":[{"name":"bytes","external_name":"bytes","restriction":"Bytes"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":"::String"},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bytes, preview, mutable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(io:IO,preview=DEFAULT_PREVIEW,mutable=true)-class-method","name":"new","doc":"Initializes a byteslice form from the given *io*.","summary":"<p>Initializes a byteslice form from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":""},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":""}],"args_string":"(io : IO, preview = DEFAULT_PREVIEW, mutable = true)","args_html":"(io : IO, preview = <span class=\"t\">DEFAULT_PREVIEW</span>, mutable = <span class=\"n\">true</span>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":19,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"preview","default_value":"DEFAULT_PREVIEW","external_name":"preview","restriction":""},{"name":"mutable","default_value":"true","external_name":"mutable","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, preview, mutable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(&)-class-method","name":"new","doc":"Yields an IO to the block, then returns a raw bytes\nform for it.","summary":"<p>Yields an IO to the block, then returns a raw bytes form for it.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":82,"url":null},"def":{"name":"new","yields":1,"block_arity":1,"visibility":"Public","body":"io = IO::Memory.new\nyield io\nnew(io)\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Two byteslices are equal when their content is equal, and\ntheir mutability statuses are equal.","summary":"<p>Two byteslices are equal when their content is equal, and their mutability statuses are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @bytes == (other.@bytes)\nelse\n  return false\nend\nif @mutable == (other.@mutable)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"address-instance-method","name":"address","doc":"Returns the memory address where this byteslice points to.","summary":"<p>Returns the memory address where this byteslice points to.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":66,"url":null},"def":{"name":"address","visibility":"Public","body":"@bytes.to_unsafe.address"}},{"html_id":"at(b:Int32,e:Int32)-instance-method","name":"at","doc":"Returns a sub-slice starting at *b*-th byte, and\nending at *e*-th byte.\n\nThe resulting byteslice *does not* preserve the\npreview string of this byteslice.","summary":"<p>Returns a sub-slice starting at <em>b</em>-th byte, and ending at <em>e</em>-th byte.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32)","args_html":"(b : Int32, e : Int32)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":39,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"visibility":"Public","body":"b = Math.max(b, 0)\ne = Math.min(e, count - 1)\nByteslice.new(@bytes[b..e], mutable: @mutable)\n"}},{"html_id":"at(index:Int32)-instance-method","name":"at","doc":"Returns the *index*-th byte.","summary":"<p>Returns the <em>index</em>-th byte.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","args_html":"(index : Int32)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":28,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"visibility":"Public","body":"byte = @bytes[index]? || (die(\"index out of bounds\"))\nDecimal.new(byte)\n"}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of bytes in this byteslice.","summary":"<p>Returns the amount of bytes in this byteslice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":46,"url":null},"def":{"name":"count","visibility":"Public","body":"@bytes.size"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":50,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Two byteslices are equal when their content is equal, and\ntheir mutability statuses are equal.","summary":"<p>Two byteslices are equal when their content is equal, and their mutability statuses are equal.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @bytes.hash(hasher)\nhasher = @mutable.hash(hasher)\nhasher\n"}},{"html_id":"mutable?:Bool-instance-method","name":"mutable?","doc":"Returns whether this byteslice is mutable.","summary":"<p>Returns whether this byteslice is mutable.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":12,"url":null},"def":{"name":"mutable?","return_type":"Bool","visibility":"Public","body":"@mutable"}},{"html_id":"points_to?(address:UInt64)-instance-method","name":"points_to?","doc":"Returns whether this byteslice points to the given *address*.","summary":"<p>Returns whether this byteslice points to the given <em>address</em>.</p>","abstract":false,"args":[{"name":"address","external_name":"address","restriction":"UInt64"}],"args_string":"(address : UInt64)","args_html":"(address : UInt64)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":89,"url":null},"def":{"name":"points_to?","args":[{"name":"address","external_name":"address","restriction":"UInt64"}],"visibility":"Public","body":"address == self.address"}},{"html_id":"preview:String-instance-method","name":"preview","doc":"Returns the preview string of this byteslice.","summary":"<p>Returns the preview string of this byteslice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":9,"url":null},"def":{"name":"preview","return_type":"String","visibility":"Public","body":"@preview"}},{"html_id":"same?(other:Byteslice)-instance-method","name":"same?","doc":"Returns whether this and *other* byteslices point to the same\nlocation in memory, and have the same mutability status.","summary":"<p>Returns whether this and <em>other</em> byteslices point to the same location in memory, and have the same mutability status.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Byteslice"}],"args_string":"(other : Byteslice)","args_html":"(other : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":95,"url":null},"def":{"name":"same?","args":[{"name":"other","external_name":"other","restriction":"Byteslice"}],"visibility":"Public","body":"(other.points_to?(address)) && (@mutable == other.mutable?)"}},{"html_id":"to_io:IO::Memory-instance-method","name":"to_io","doc":"Wraps the underlying byte slice in an IO.","summary":"<p>Wraps the underlying byte slice in an IO.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":71,"url":null},"def":{"name":"to_io","return_type":"IO::Memory","visibility":"Public","body":"IO::Memory.new(@bytes)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":54,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((((io << \"[\") << @preview) << \", consists of \") << count) << \" \"\nio << (@mutable ? \"mutable\" : \"immutable\")\nio << \" byte(s)]\"\n"}},{"html_id":"to_unsafe:Bytes-instance-method","name":"to_unsafe","doc":"Returns the underlying byte slice.","summary":"<p>Returns the underlying byte slice.</p>","abstract":false,"location":{"filename":"src/novika/forms/byteslice.cr","line_number":61,"url":null},"def":{"name":"to_unsafe","return_type":"Bytes","visibility":"Public","body":"@bytes"}},{"html_id":"write_to(io:IO)-instance-method","name":"write_to","doc":"Writes this byteslice to *io*.","summary":"<p>Writes this byteslice to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/byteslice.cr","line_number":76,"url":null},"def":{"name":"write_to","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io.write(@bytes)"}}]},{"html_id":"novika/Novika/BytesliceSnapshot","path":"Novika/BytesliceSnapshot.html","kind":"class","full_name":"Novika::BytesliceSnapshot","name":"BytesliceSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":268,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::BytesliceSnapshot]","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  content.size\nend}, {type: \"bytes\", name: content, cls: Bytes, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Byteslice)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"args_string":"(form : Byteslice)","args_html":"(form : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/image.cr","line_number":278,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"visibility":"Public","body":"byteslice = new\nbyteslice.content = form.to_unsafe\nbyteslice\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":269,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"content:Bytes-instance-method","name":"content","abstract":false,"def":{"name":"content","return_type":"Bytes","visibility":"Public","body":"@content"}},{"html_id":"content=(content:Bytes)-instance-method","name":"content=","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"Bytes"}],"args_string":"(content : Bytes)","args_html":"(content : Bytes)","def":{"name":"content=","args":[{"name":"content","external_name":"content","restriction":"Bytes"}],"visibility":"Public","body":"@content = content"}},{"html_id":"count:UInt64-instance-method","name":"count","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":274,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Byteslice.new(content)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a byteslice.\n\nBasically, tagged content of the byteslice. Tag being\nset by `TypedSnapshot`, this thing serializes to\nbyteslice content and count.","summary":"<p>Snapshot of a byteslice.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":268,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Capabilities","path":"Novika/Capabilities.html","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities","abstract":false,"locations":[{"filename":"src/novika/capabilities/console.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/disk.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/frontend.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/ink.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/system.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"types":[{"html_id":"novika/Novika/Capabilities/IConsole","path":"Novika/Capabilities/IConsole.html","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/console.cr","line_number":34,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BG_DEFAULT","name":"BG_DEFAULT","value":"Color.new(Decimal.new(0), Decimal.new(0), Decimal.new(0))","doc":"Background color used when there is no user-provided\nbackground color.","summary":"<p>Background color used when there is no user-provided background color.</p>"},{"id":"FG_DEFAULT","name":"FG_DEFAULT","value":"Color.new(Decimal.new(255), Decimal.new(255), Decimal.new(255))","doc":"Foreground color used when there is no user-provided\nforeground color.","summary":"<p>Foreground color used when there is no user-provided foreground color.</p>"}],"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Console","kind":"class","full_name":"Novika::Capabilities::Impl::Console","name":"Console"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"doc":"Enables the console API.\n\nExposed vocabulary:\n\n* `console:on`, implemented by `on`\n* `console:off`, implemented by `off`\n* `console:256`, implemented by `colors_256`\n* `console:compat`, implemented by `colors_compat`\n* `console:truecolor`, implemented by `colors_truecolor`\n* `console:readKey`, implemented by `read_key`\n* `console:size`, implemented by `size`\n* `console:hadKeyPressed?`, implemented by `had_key_pressed?`\n* `console:hadCtrlPressed?`, implemented by `had_ctrl_pressed?`\n* `console:hadAltPressed?`, implemented by `had_alt_pressed?`\n* `console:hadShiftPressed?`, implemented by `had_shift_pressed?`\n* `console:hadBackspacePressed?`, implemented by `had_backspace_pressed?`\n* `console:hadFnPressed?`, implemented by `had_fn_pressed?`\n* `console:hadInsertPressed?`, implemented by `had_insert_pressed?`\n* `console:hadDeletePressed?`, implemented by `had_delete_pressed?`\n* `console:hadHomePressed?`, implemented by `had_home_pressed?`\n* `console:hadEndPressed?`, implemented by `had_end_pressed?`\n* `console:hadPgupPressed?`, implemented by `had_pgup_pressed?`\n* `console:hadPgdnPressed?`, implemented by `had_pgdn_pressed?`\n* `console:hadLeftPressed?`, implemented by `had_left_pressed?`\n* `console:hadRightPressed?`, implemented by `had_right_pressed?`\n* `console:hadUpPressed?`, implemented by `had_up_pressed?`\n* `console:hadDownPressed?`, implemented by `had_down_pressed?`\n* `console:getCharPressed`, implemented by `get_char_pressed`\n* `console:change`, implemented by `change`\n* `console:appendEcho`, implemented by `append_echo`\n* `console:present`, implemented by `present`\n* `console:clear`, implemented by `clear`","summary":"<p>Enables the console API.</p>","class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":45,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"console\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":53,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":49,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"enables the console API\""}}],"instance_methods":[{"html_id":"append_echo(engine,x:Decimal,y:Decimal,fg:Color,bg:Color,quote:Quote)-instance-method","name":"append_echo","doc":"Appends echo of *quote* colorized with *fg* and *bg*\ncolors at the given *x* and *y* position (in columns,\nrows).","summary":"<p>Appends echo of <em>quote</em> colorized with <em>fg</em> and <em>bg</em> colors at the given <em>x</em> and <em>y</em> position (in columns, rows).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color, quote : Quote)","args_html":"(engine, x : <a href=\"../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../Novika/Color.html\">Color</a>, bg : <a href=\"../../Novika/Color.html\">Color</a>, quote : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":160,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"bg-instance-method","name":"bg","doc":"Returns the active primary background color.","summary":"<p>Returns the active primary background color.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":176,"url":null},"def":{"name":"bg","visibility":"Public","body":"(capabilities.fetch(IInk) do |__arg1|\n  __arg1.bg.last?\nend) || BG_DEFAULT"}},{"html_id":"clear(engine,fg:Color,bg:Color)-instance-method","name":"clear","doc":"Clears the console with *fg* and *bg* colors.","summary":"<p>Clears the console with <em>fg</em> and <em>bg</em> colors.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, fg : Color, bg : Color)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a>, bg : <a href=\"../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":166,"url":null},"def":{"name":"clear","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":""}},{"html_id":"colors_256(engine)-instance-method","name":"colors_256","doc":"Enables the 256-color output mode.","summary":"<p>Enables the 256-color output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":64,"url":null},"def":{"name":"colors_256","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"colors_compat(engine)-instance-method","name":"colors_compat","doc":"Enables the compatibility color (8-color) output mode.","summary":"<p>Enables the compatibility color (8-color) output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":67,"url":null},"def":{"name":"colors_compat","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"colors_truecolor(engine)-instance-method","name":"colors_truecolor","doc":"Enables the truecolor output mode.","summary":"<p>Enables the truecolor output mode.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":70,"url":null},"def":{"name":"colors_truecolor","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"fg-instance-method","name":"fg","doc":"Returns the active primary foreground color.","summary":"<p>Returns the active primary foreground color.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/console.cr","line_number":171,"url":null},"def":{"name":"fg","visibility":"Public","body":"(capabilities.fetch(IInk) do |__arg0|\n  __arg0.fg.last?\nend) || FG_DEFAULT"}},{"html_id":"get_char_pressed(engine):Quote-instance-method","name":"get_char_pressed","doc":"Leaves char quote for the key that was pressed.\nUsually a lowercase or uppercase letter; but also may\nlook like `'\\\\n'` or `'\\\\t'`, etc.)\n\nIn case the key that was pressed cannot be represented\nby the means of a quote, or if the user did not press\nany key, an empty quote is left in place of Char\nquote.","summary":"<p>Leaves char quote for the key that was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":155,"url":null},"def":{"name":"get_char_pressed","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"had_alt_pressed?(engine):Boolean-instance-method","name":"had_alt_pressed?","doc":"Returns boolean for whether the ALT key was pressed.","summary":"<p>Returns boolean for whether the ALT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":95,"url":null},"def":{"name":"had_alt_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_backspace_pressed?(engine):Boolean-instance-method","name":"had_backspace_pressed?","doc":"Returns boolean for whether the Backspace key\nwas pressed.","summary":"<p>Returns boolean for whether the Backspace key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":102,"url":null},"def":{"name":"had_backspace_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_char_pressed?(engine):Boolean-instance-method","name":"had_char_pressed?","doc":"Returns boolean for whether EXCLUSIVELY a printable\ncharacter key was pressed (no CTRL, ALT, etc.) Whether\nthe SHIFT key was pressed or not is ignored.","summary":"<p>Returns boolean for whether EXCLUSIVELY a printable character key was pressed (no CTRL, ALT, etc.) Whether the SHIFT key was pressed or not is ignored.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":145,"url":null},"def":{"name":"had_char_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_ctrl_pressed?(engine):Boolean-instance-method","name":"had_ctrl_pressed?","doc":"leaves Boolean for whether the CTRL key was pressed.","summary":"<p>leaves Boolean for whether the CTRL key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":92,"url":null},"def":{"name":"had_ctrl_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_delete_pressed?(engine):Boolean-instance-method","name":"had_delete_pressed?","doc":"Returns boolean for whether the DELETE key was pressed.","summary":"<p>Returns boolean for whether the DELETE key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":112,"url":null},"def":{"name":"had_delete_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_down_pressed?(engine):Boolean-instance-method","name":"had_down_pressed?","doc":"Returns boolean for whether the DOWN ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the DOWN ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":140,"url":null},"def":{"name":"had_down_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_end_pressed?(engine):Boolean-instance-method","name":"had_end_pressed?","doc":"Returns boolean for whether the END key was pressed.","summary":"<p>Returns boolean for whether the END key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":118,"url":null},"def":{"name":"had_end_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_fn_pressed?(engine):Boolean-instance-method","name":"had_fn_pressed?","doc":"Returns boolean for whether one of the function\nkeys F1-F12 was pressed.","summary":"<p>Returns boolean for whether one of the function keys F1-F12 was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":106,"url":null},"def":{"name":"had_fn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_home_pressed?(engine):Boolean-instance-method","name":"had_home_pressed?","doc":"Returns boolean for whether the HOME key was pressed.","summary":"<p>Returns boolean for whether the HOME key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":115,"url":null},"def":{"name":"had_home_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_insert_pressed?(engine):Boolean-instance-method","name":"had_insert_pressed?","doc":"Returns boolean for whether the INSERT key was pressed.","summary":"<p>Returns boolean for whether the INSERT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":109,"url":null},"def":{"name":"had_insert_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_key_pressed?(engine):Boolean-instance-method","name":"had_key_pressed?","doc":"Returns boolean for whether any key was pressed.","summary":"<p>Returns boolean for whether any key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":89,"url":null},"def":{"name":"had_key_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_left_pressed?(engine):Boolean-instance-method","name":"had_left_pressed?","doc":"Returns boolean for whether the LEFT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the LEFT ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":128,"url":null},"def":{"name":"had_left_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_pgdn_pressed?(engine):Boolean-instance-method","name":"had_pgdn_pressed?","doc":"Returns boolean for whether the PAGE DOWN key was pressed.","summary":"<p>Returns boolean for whether the PAGE DOWN key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":124,"url":null},"def":{"name":"had_pgdn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_pgup_pressed?(engine):Boolean-instance-method","name":"had_pgup_pressed?","doc":"Returns boolean for whether the PAGE UP key was pressed.","summary":"<p>Returns boolean for whether the PAGE UP key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":121,"url":null},"def":{"name":"had_pgup_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_right_pressed?(engine):Boolean-instance-method","name":"had_right_pressed?","doc":"Returns boolean for whether the RIGHT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the RIGHT ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":132,"url":null},"def":{"name":"had_right_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_shift_pressed?(engine):Boolean-instance-method","name":"had_shift_pressed?","doc":"Returns boolean for whether the SHIFT key was pressed.","summary":"<p>Returns boolean for whether the SHIFT key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":98,"url":null},"def":{"name":"had_shift_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"had_up_pressed?(engine):Boolean-instance-method","name":"had_up_pressed?","doc":"Returns boolean for whether the UP ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the UP ARROW key was pressed.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/console.cr","line_number":136,"url":null},"def":{"name":"had_up_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"inject(intotarget)-instance-method","name":"inject","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/console.cr","line_number":180,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(\"console:on\", \"( -- ): enables the console. Must be called before using\\n any other console-related word.\") do |engine|\n  on(engine)\nend\ntarget.at(\"console:off\", \"( -- ): disables the console. Must be called at the end\\n of your program or when you don't need console anymore.\") do |engine|\n  off(engine)\nend\ntarget.at(\"console:compat\", \"( -- ): enables the compatibility color output mode. In\\n this mode, only 8 colors are available. All RGB colors\\n are automatically reduced to one of those 8 colors.\") do |engine|\n  colors_compat(engine)\nend\ntarget.at(\"console:256\", \"( -- ): enables the 256-color output mode. In this mode,\\n 256 colors are available. All RGB colors are automatically\\n reduced to one of those 256 colors.\") do |engine|\n  colors_256(engine)\nend\ntarget.at(\"console:truecolor\", \"( -- ): enables the truecolor output mode. In this mode,\\nall colors are available and are passed to the console\\nas-is.\") do |engine|\n  colors_truecolor(engine)\nend\ntarget.at(\"console:size\", \"( -- Cw Ch ): leaves the Console width (in columns) and\\n Console height (in rows).\") do |engine, stack|\n  w, h = size(engine)\n  w.onto(stack)\n  h.onto(stack)\nend\ntarget.at(\"console:setTimeout\", \"( D -- ): sets input timeout to Duration, given in *milliseconds*.\\n\\n * If Duration is negative, `console:readKey` will wait\\n   for input indefinitely (i.e., until there is input).\\n\\n * If Duration is zero, `console:readKey` won't wait for\\n   input at all, but make note if there is any at the moment.\\n\\n * If Duration is positive, `console:readKey` will peek\\n   during the timeout window.\") do |_, stack|\n  @timeout = stack.drop.a(Decimal)\nend\ntarget.at(\"console:readKey\", \"( -- ): peeks or waits for input. See `console:setTimeout`.\\n Refreshes the input state. Use `console:hadKeyPressed` and\\n friends to explore the input state afterwards.\") do |engine|\n  read_key(engine, @timeout)\nend\ntarget.at(\"console:hadKeyPressed?\", \"( -- B ): leaves Boolean for whether any key was pressed.\") do |engine, stack|\n  (had_key_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadCtrlPressed?\", \"( -- B ): leaves Boolean for whether the CTRL key was pressed.\") do |engine, stack|\n  (had_ctrl_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadAltPressed?\", \"( -- B ): leaves Boolean for whether the ALT key was pressed.\") do |engine, stack|\n  (had_alt_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadShiftPressed?\", \"( -- B ): leaves Boolean for whether the SHIFT key was pressed.\") do |engine, stack|\n  (had_shift_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadBackspacePressed?\", \"( -- B ): leaves Boolean for whether the Backspace key\\n was pressed.\") do |engine, stack|\n  (had_backspace_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadFnPressed?\", \"( -- B ): leaves Boolean for whether one of the function\\n keys F1-F12 was pressed.\") do |engine, stack|\n  (had_fn_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadInsertPressed?\", \"( -- B ): leaves Boolean for whether the INSERT key was pressed.\") do |engine, stack|\n  (had_insert_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadDeletePressed?\", \"( -- B ): leaves Boolean for whether the DELETE key was pressed.\") do |engine, stack|\n  (had_delete_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadHomePressed?\", \"( -- B ): leaves Boolean for whether the HOME key was pressed.\") do |engine, stack|\n  (had_home_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadEndPressed?\", \"( -- B ): leaves Boolean for whether the END key was pressed.\") do |engine, stack|\n  (had_end_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadPageUpPressed?\", \"( -- B ): leaves Boolean for whether the PAGE UP key was pressed.\") do |engine, stack|\n  (had_pgup_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadPageDownPressed?\", \"( -- B ): leaves Boolean for whether the PAGE DOWN key was pressed.\") do |engine, stack|\n  (had_pgdn_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadLeftPressed?\", \"( -- B ): leaves Boolean for whether the LEFT ARROW key\\n was pressed.\") do |engine, stack|\n  (had_left_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadRightPressed?\", \"( -- B ): leaves Boolean for whether the RIGHT ARROW key\\n was pressed.\") do |engine, stack|\n  (had_right_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadUpPressed?\", \"( -- B ): leaves Boolean for whether the UP ARROW key\\n was pressed.\") do |engine, stack|\n  (had_up_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadDownPressed?\", \"( -- B ): leaves Boolean for whether the DOWN ARROW key\\n was pressed.\") do |engine, stack|\n  (had_down_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:hadCharPressed?\", \"( -- B ): leaves Boolean for whether EXCLUSIVELY a printable\\n character key was pressed (no CTRL, ALT, etc.) Whether the\\n SHIFT key was pressed or not is ignored.\") do |engine, stack|\n  (had_char_pressed?(engine)).onto(stack)\nend\ntarget.at(\"console:getCharPressed\", \"( -- Cq ): leaves Char quote for the key that was pressed.\\n Usually a lowercase or uppercase letter; but also may look\\n like `'\\\\n'` or `'\\\\t'`, etc.)\\n\\nIn case the key that was pressed cannot be represented\\nby the means of a quote, or if the user did not press\\nany key, an empty quote is left in place of Char quote.\") do |engine, stack|\n  (get_char_pressed(engine)).onto(stack)\nend\ntarget.at(\"console:change\", \"( X Y -- ): changes the color of the cell at X, Y coordinates\\n to be the foreground, background colors set by ink's\\n `withEchoFg` and `withEchoBg`.\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  change(engine, x, y, fg, bg)\nend\ntarget.at(\"console:appendEcho\", \"( F X Y -- ): appends echo of Form at an X and Y position\\n (in columns and rows correspondingly) using the foreground,\\n background colors set by ink's `withEchoFg` and `withEchoBg`.\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  q = stack.drop.to_quote\n  append_echo(engine, x, y, fg, bg, q)\nend\ntarget.at(\"console:withReverseAppendEcho\", \"( F X Y -- ): appends Form with foreground and background\\n colors swapped with each other (background color is set\\n to foreground color, and vice versa).\") do |engine, stack|\n  y = stack.drop.a(Decimal)\n  x = stack.drop.a(Decimal)\n  q = stack.drop.to_quote\n  append_echo(engine, x, y, bg, fg, q)\nend\ntarget.at(\"console:present\", \"( -- ): syncs internal buffer and console.\") do |engine|\n  present(engine)\nend\ntarget.at(\"console:clear\", \"( -- ): clears console with primary colors.\") do |engine|\n  clear(engine, fg, bg)\nend\n"}},{"html_id":"off(engine)-instance-method","name":"off","doc":"Disables the Console API.","summary":"<p>Disables the Console API.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":61,"url":null},"def":{"name":"off","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"on(engine)-instance-method","name":"on","doc":"Enables the Console API.","summary":"<p>Enables the Console API.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":58,"url":null},"def":{"name":"on","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"present(engine)-instance-method","name":"present","doc":"Syncs the internal buffer with console.","summary":"<p>Syncs the internal buffer with console.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/console.cr","line_number":163,"url":null},"def":{"name":"present","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":""}},{"html_id":"read_key(engine,timeout:Decimal)-instance-method","name":"read_key","doc":"Peeks or waits for input. Refreshes the input state.\n\n* Negative *timeout* must wait indefinitely for input,\n  and after receiving input refresh the state.\n\n* Zero *timeout* must refresh the input state without\n  waiting for input.\n\n* Positive *timeout* must wait for input in a window\n  *timeout* milliseconds long, and refresh the input\n  state after receiving input.","summary":"<p>Peeks or waits for input.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"args_string":"(engine, timeout : Decimal)","args_html":"(engine, timeout : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":86,"url":null},"def":{"name":"read_key","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"size(engine):Tuple(Decimal,Decimal)-instance-method","name":"size","doc":"Returns the console width (in columns) and height (in rows).","summary":"<p>Returns the console width (in columns) and height (in rows).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Tuple(Decimal, Decimal)","args_html":"(engine) : Tuple(<a href=\"../../Novika/Decimal.html\">Decimal</a>, <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/console.cr","line_number":73,"url":null},"def":{"name":"size","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"::Tuple(Decimal, Decimal)","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IDisk","path":"Novika/Capabilities/IDisk.html","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/disk.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Disk","kind":"class","full_name":"Novika::Capabilities::Impl::Disk","name":"Disk"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"disk\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/disk.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes various disk-related (storage-related) words\""}}],"instance_methods":[{"html_id":"can_read?(engine,path:Quote):Boolean-instance-method","name":"can_read?","doc":"Returns whether *path* exists and is readable.","summary":"<p>Returns whether <em>path</em> exists and is readable.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":18,"url":null},"def":{"name":"can_read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"copy(engine,src:Quote,dst:Quote):Bool-instance-method","name":"copy","doc":"Copies source *src* (quote path to a file, symlink, or\ndirectory) to destination *dst* (also a quote).\n\nIf *src* is a directory, copies it recursively.\n\nReturns whether the operation was successful.","summary":"<p>Copies source <em>src</em> (quote path to a file, symlink, or directory) to destination <em>dst</em> (also a quote).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"args_string":"(engine, src : Quote, dst : Quote) : Bool","args_html":"(engine, src : <a href=\"../../Novika/Quote.html\">Quote</a>, dst : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":63,"url":null},"def":{"name":"copy","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"dir_empty?(engine,path:Quote):Boolean|Nil-instance-method","name":"dir_empty?","doc":"Returns whether directory pointed to by *path* is empty.\nReturns nil if *path* does not point to a directory, or\nif *path* does not exist.","summary":"<p>Returns whether directory pointed to by <em>path</em> is empty.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean | Nil","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a> | Nil","location":{"filename":"src/novika/capabilities/disk.cr","line_number":35,"url":null},"def":{"name":"dir_empty?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean | ::Nil","visibility":"Public","body":""}},{"html_id":"has?(engine,path:Quote):Boolean-instance-method","name":"has?","doc":"Returns whether *path* exists.","summary":"<p>Returns whether <em>path</em> exists.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":21,"url":null},"def":{"name":"has?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_dir?(engine,path:Quote):Boolean-instance-method","name":"has_dir?","doc":"Returns whether *path* exists and points to a directory.","summary":"<p>Returns whether <em>path</em> exists and points to a directory.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":24,"url":null},"def":{"name":"has_dir?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_file?(engine,path:Quote):Boolean-instance-method","name":"has_file?","doc":"Returns whether *path* exists and points to a file.","summary":"<p>Returns whether <em>path</em> exists and points to a file.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":27,"url":null},"def":{"name":"has_file?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"has_symlink?(engine,path:Quote):Boolean-instance-method","name":"has_symlink?","doc":"Returns whether *path* exists and points to a symlink.","summary":"<p>Returns whether <em>path</em> exists and points to a symlink.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":30,"url":null},"def":{"name":"has_symlink?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":""}},{"html_id":"home(engine):Quote-instance-method","name":"home","doc":"Returns current user's home directory.","summary":"<p>Returns current user's home directory.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":46,"url":null},"def":{"name":"home","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":79,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"disk:has?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n on the disk.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:canRead?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and is readable.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (can_read?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasDir?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a directory.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_dir?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasFile?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a file.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_file?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:hasSymlink?\", \"( Pq -- true/false ): leaves whether Path quote exists\\n and points to a symlink.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  (has_symlink?(engine, path)).onto(stack)\nend\ntarget.at(\"disk:dirEmpty?\", \"( Ptd -- B ): leaves Boolean for whether Path to directory\\n is empty. Dies if Path to directory points to something\\n other than a directory, or doesn't exist.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  if boolean = dir_empty?(engine, path)\n  else\n    path.die(\"no directory at path\")\n  end\n  boolean.onto(stack)\nend\ntarget.at(\"disk:join\", \"( Bp Cp -- P ): leaves Path, which is the result of joining Base\\n path and Child path using the platform-specific path separator.\\n\\n```\\n'hello' 'world' disk:join leaves: 'hello/world' \\\"On Unix\\\"\\n'hello' 'world' disk:join leaves: 'hello\\\\\\\\world' \\\"On Windows\\\"\\n```\") do |engine, stack|\n  cp = stack.drop.a(Quote)\n  bp = stack.drop.a(Quote)\n  (join(engine, bp, cp)).onto(stack)\nend\ntarget.at(\"disk:pwd\", \"( -- Wd ): leaves current Working directory.\") do |engine, stack|\n  (pwd(engine)).onto(stack)\nend\ntarget.at(\"disk:home\", \"( -- Hd ): leaves current user's Home directory.\") do |engine, stack|\n  (home(engine)).onto(stack)\nend\ntarget.at(\"disk:touch\", \"( P -- ): creates an empty file at Path. Does nothing\\n if Path already exists.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  touch(engine, path)\nend\ntarget.at(\"disk:mkdir\", \"( P -- ): creates an empty directory at Path, including\\n any non-existing intermediate directories. Does nothing\\n if Path already exists.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  mkdir(engine, path)\nend\ntarget.at(\"disk:copy\", \"( S D -- ): copies Source (quote path to a file, symlink,\\n or directory) to Destination (also a quote).\\n\\nIf Source is a directory, copies it recursively.\\nIf copy process failed, dies.\") do |engine, stack|\n  dst = stack.drop.a(Quote)\n  src = stack.drop.a(Quote)\n  if copy(engine, src, dst)\n  else\n    src.die(\"could not copy\")\n  end\nend\ntarget.at(\"disk:read\", \"( F -- C ): reads and leaves the Contents of File. Dies\\n if there is no File.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  if contents = read?(engine, path)\n  else\n    path.die(\"no file at path\")\n  end\n  contents.onto(stack)\nend\ntarget.at(\"disk:write\", \"( Cq/B Fp -- ): (over)writes content of file at File path\\n with Content quote/Byteslice. Dies if File path doesn't\\n exist or doesn't point to a file.\") do |engine, stack|\n  path = stack.drop.a(Quote)\n  content = stack.drop.a(Quote | Byteslice)\n  if write?(engine, content, path)\n  else\n    path.die(\"no file at path\")\n  end\nend\n"}},{"html_id":"join(engine,base:Quote,child:Quote):Quote-instance-method","name":"join","doc":"Returns path quote which is the result of joining\n*base* path and *child* path quotes using the\nplatform-specific path separator.","summary":"<p>Returns path quote which is the result of joining <em>base</em> path and <em>child</em> path quotes using the platform-specific path separator.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"args_string":"(engine, base : Quote, child : Quote) : Quote","args_html":"(engine, base : <a href=\"../../Novika/Quote.html\">Quote</a>, child : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":40,"url":null},"def":{"name":"join","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"mkdir(engine,path:Quote)-instance-method","name":"mkdir","doc":"Creates an empty directory at *path*, including any\nnon-existing intermediate directories. Does nothing\nif *path* already exists.","summary":"<p>Creates an empty directory at <em>path</em>, including any non-existing intermediate directories.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":55,"url":null},"def":{"name":"mkdir","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"pwd(engine):Quote-instance-method","name":"pwd","doc":"Returns the working directory.","summary":"<p>Returns the working directory.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/disk.cr","line_number":43,"url":null},"def":{"name":"pwd","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"read?(engine,path:Quote):Quote|Nil-instance-method","name":"read?","doc":"Reads and returns the contents of file at *path*. Returns\nnil if there is no file at *path*.","summary":"<p>Reads and returns the contents of file at <em>path</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Quote | Nil","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/capabilities/disk.cr","line_number":67,"url":null},"def":{"name":"read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Quote | ::Nil","visibility":"Public","body":""}},{"html_id":"touch(engine,path:Quote)-instance-method","name":"touch","doc":"Creates an empty file at *path*. Does nothing if *path*\nalready exists.","summary":"<p>Creates an empty file at <em>path</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/disk.cr","line_number":50,"url":null},"def":{"name":"touch","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":""}},{"html_id":"write?(engine,content:Quote,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nquote. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> quote.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Quote, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../Novika/Quote.html\">Quote</a>, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":72,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"write?(engine,content:Byteslice,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nbyteslice. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> byteslice.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Byteslice, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../Novika/Byteslice.html\">Byteslice</a>, path : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/disk.cr","line_number":77,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IFrontend","path":"Novika/Capabilities/IFrontend.html","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/frontend.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Frontend","kind":"class","full_name":"Novika::Capabilities::Impl::Frontend","name":"Frontend"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"frontend\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/frontend.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes information about the language frontend\""}}],"instance_methods":[{"html_id":"capabilities(engine):Block-instance-method","name":"capabilities","doc":"Returns a list block of capabilities provided by the frontend.","summary":"<p>Returns a list block of capabilities provided by the frontend.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Block","args_html":"(engine) : <a href=\"../../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":21,"url":null},"def":{"name":"capabilities","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Block","visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":23,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"novika:version\", \"( -- Vq ): leaves Version of the frontend as a quote.\") do |engine, stack|\n  (version(engine)).onto(stack)\nend\ntarget.at(\"novika:capabilities\", \"( -- Lb ): lists the ids of capabilities provided by the\\n frontend in List block.\\n\\n```\\n\\\"Yours may differ!\\\"\\nnovika:capabilities leaves: [ [ 'essential' 'colors' 'console' ] ]\\n```\") do |engine, stack|\n  (capabilities(engine)).onto(stack)\nend\n"}},{"html_id":"version(engine):Quote-instance-method","name":"version","doc":"Returns version of the frontend.","summary":"<p>Returns version of the frontend.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/frontend.cr","line_number":18,"url":null},"def":{"name":"version","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/IInk","path":"Novika/Capabilities/IInk.html","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/ink.cr","line_number":14,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"NO_SYSTEM_ECHO_ERROR","name":"NO_SYSTEM_ECHO_ERROR","value":"\"with...Echo words need 'echo' from capability 'system', but this capability is not available\""}],"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/Ink","kind":"class","full_name":"Novika::Capabilities::Impl::Ink","name":"Ink"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"doc":"Enables colorful output using `withColorAppendEcho` and friends.\n\nExposed vocabulary:\n\n* `withEchoFg`, generic implementation\n* `withEchoBg`, generic implementation\n* `dropEchoFg`, generic implementation\n* `dropEchoBg`, generic implementation\n* `withColorAppendEcho`, implemented by `with_color_append_echo`\n* `withEmphasisAppendEcho`, implemented by `with_emphasis_append_echo`\n* `withReverseAppendEcho`, generic implementation; when no\n  colors given by the use, `with_reverse_append_echo` is used.","summary":"<p>Enables colorful output using <code>withColorAppendEcho</code> and friends.</p>","class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":20,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"ink\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":28,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":24,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"enables colorful output using 'withColorAppendEcho' and friends\""}}],"instance_methods":[{"html_id":"bg:Array(Novika::Color)-instance-method","name":"bg","doc":"Echo background color stack.","summary":"<p>Echo background color stack.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":36,"url":null},"def":{"name":"bg","visibility":"Public","body":"@bg"}},{"html_id":"bg=(bg:Array(Novika::Color))-instance-method","name":"bg=","doc":"Echo background color stack.","summary":"<p>Echo background color stack.</p>","abstract":false,"args":[{"name":"bg","external_name":"bg","restriction":"::Array(::Novika::Color)"}],"args_string":"(bg : Array(Novika::Color))","args_html":"(bg : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Color.html\">Novika::Color</a>))","location":{"filename":"src/novika/capabilities/ink.cr","line_number":36,"url":null},"def":{"name":"bg=","args":[{"name":"bg","external_name":"bg","restriction":"::Array(::Novika::Color)"}],"visibility":"Public","body":"@bg = bg"}},{"html_id":"enabled=(enabled:Bool)-instance-method","name":"enabled=","doc":"Holds whether printing with colors is enabled (and desired).\n\nDefaults to `Novika.colorful?`.","summary":"<p>Holds whether printing with colors is enabled (and desired).</p>","abstract":false,"args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"args_string":"(enabled : Bool)","args_html":"(enabled : Bool)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":41,"url":null},"def":{"name":"enabled=","args":[{"name":"enabled","external_name":"enabled","restriction":"Bool"}],"visibility":"Public","body":"@enabled = enabled"}},{"html_id":"enabled?:Bool-instance-method","name":"enabled?","doc":"Holds whether printing with colors is enabled (and desired).\n\nDefaults to `Novika.colorful?`.","summary":"<p>Holds whether printing with colors is enabled (and desired).</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":41,"url":null},"def":{"name":"enabled?","return_type":"Bool","visibility":"Public","body":"if (value = @enabled).nil?\n  @enabled = (Novika.colorful?)\nelse\n  value\nend"}},{"html_id":"fg:Array(Novika::Color)-instance-method","name":"fg","doc":"Echo foreground color stack.","summary":"<p>Echo foreground color stack.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/ink.cr","line_number":33,"url":null},"def":{"name":"fg","visibility":"Public","body":"@fg"}},{"html_id":"fg=(fg:Array(Novika::Color))-instance-method","name":"fg=","doc":"Echo foreground color stack.","summary":"<p>Echo foreground color stack.</p>","abstract":false,"args":[{"name":"fg","external_name":"fg","restriction":"::Array(::Novika::Color)"}],"args_string":"(fg : Array(Novika::Color))","args_html":"(fg : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Color.html\">Novika::Color</a>))","location":{"filename":"src/novika/capabilities/ink.cr","line_number":33,"url":null},"def":{"name":"fg=","args":[{"name":"fg","external_name":"fg","restriction":"::Array(::Novika::Color)"}],"visibility":"Public","body":"@fg = fg"}},{"html_id":"inject(intotarget)-instance-method","name":"inject","doc":"Injects the colors vocabulary into *target*.","summary":"<p>Injects the colors vocabulary into <em>target</em>.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":62,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(\"withEchoFg\", \"( C -- ): pushes Color form onto the echo foreground\\n color stack.\") do |_, stack|\n  fg << (stack.drop.a(Color))\nend\ntarget.at(\"withEchoBg\", \"( C -- ): pushes Color form onto the echo background\\n color stack.\") do |_, stack|\n  bg << (stack.drop.a(Color))\nend\ntarget.at(\"dropEchoFg\", \"( -- ): drops a color from the echo foreground color stack.\") do\n  fg.pop?\nend\ntarget.at(\"dropEchoBg\", \"( -- ): drops a color from the echo background color stack.\") do\n  bg.pop?\nend\ntarget.at(\"withReverseAppendEcho\", \"( F -- ): appends Form with foreground and background\\n colors swapped with each other (background color is set\\n to foreground color, and vice versa).\\n\\nNote: if unsupported by the output stream, will print\\nForm as-is.\") do |engine, stack|\n  form = stack.drop\n  if enabled? && (fg.last? && bg.last?)\n    with_color_append_echo(engine, bg.last, fg.last, form)\n  else\n    with_reverse_append_echo(engine, form)\n  end\nend\ntarget.at(\"withEmphasisAppendEcho\", \"( F -- ): same as `withColorAppendEcho`, but also emphasizes\\n echo of Form. Bold style is used by default, but implementors\\n may choose e.g. italic.\") do |engine, stack|\n  form = stack.drop\n  if enabled?\n    with_emphasis_append_echo(engine, fg.last?, bg.last?, form)\n  else\n    if system = capabilities[ISystem]?\n      system.append_echo(engine, form)\n    else\n      form.die(NO_SYSTEM_ECHO_ERROR)\n    end\n  end\nend\ntarget.at(\"withColorAppendEcho\", \"( F -- ): appends Form with last color from the echo\\n foreground color stack set as foreground color, and\\n last color from the echo background stack set as background\\n color, to the standard output stream.\\n\\nNote: some implementations (particularly Novika's default\\nimplementation) choose to restrict foreground and background\\ncolors to system's basic 16 colors for compatibility &\\nportability. If you want more cross-platform control over\\ncolors (and pretty much everything else), take a look at\\nconsole capability.\") do |engine, stack|\n  form = stack.drop\n  if enabled? && (fg.last? || bg.last?)\n    with_color_append_echo(engine, fg.last?, bg.last?, form)\n  else\n    if system = capabilities[ISystem]?\n      system.append_echo(engine, form)\n    else\n      form.die(NO_SYSTEM_ECHO_ERROR)\n    end\n  end\nend\n"}},{"html_id":"with_color_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_color_append_echo","doc":"Appends *form* with *fg* foreground color (if any) and\n*bg* background color (if any) to the standard output\nstream. One of *fg*, *bg* is guaranteed to be non-nil.","summary":"<p>Appends <em>form</em> with <em>fg</em> foreground color (if any) and <em>bg</em> background color (if any) to the standard output stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":46,"url":null},"def":{"name":"with_color_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"with_emphasis_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_emphasis_append_echo","doc":"Same as `with_color_append_echo`, but also emphasizes\necho of *form*. Bold style is used by default, but\nimplementors may choose e.g. italic.","summary":"<p>Same as <code><a href=\"../../Novika/Capabilities/IInk.html#with_color_append_echo%28engine%2Cfg%3AColor%7CNil%2Cbg%3AColor%7CNil%2Cform%3AForm%29-instance-method\">#with_color_append_echo</a></code>, but also emphasizes echo of <em>form</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":51,"url":null},"def":{"name":"with_emphasis_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"with_reverse_append_echo(engine,form:Form)-instance-method","name":"with_reverse_append_echo","doc":"Appends *form* with inverse style (background color is\nset to foreground color, and vice versa).\n\nNote: if both foreground and background colors are set\nby the user, `with_color_append_echo` is preferred over\nthis method.","summary":"<p>Appends <em>form</em> with inverse style (background color is set to foreground color, and vice versa).</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/ink.cr","line_number":59,"url":null},"def":{"name":"with_reverse_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Capabilities/Impl","path":"Novika/Capabilities/Impl.html","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl","abstract":false,"locations":[{"filename":"src/novika/capabilities/impl/colors.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/console.cr","line_number":5,"url":null},{"filename":"src/novika/capabilities/impl/disk.cr","line_number":3,"url":null},{"filename":"src/novika/capabilities/impl/essential.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/ink.cr","line_number":3,"url":null},{"filename":"src/novika/capabilities/impl/nki.cr","line_number":1,"url":null},{"filename":"src/novika/capabilities/impl/system.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"types":[{"html_id":"novika/Novika/Capabilities/Impl/Colors","path":"Novika/Capabilities/Impl/Colors.html","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/colors.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"colors\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes vocabulary for working with colors\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/colors.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"rgb\", \"( R G B -- Cf ): creates a Color form from three decimals\\n Red (0-255), Green (0-255), and Blue (0-255).\\n\\n```\\n36 255 255 rgb toQuote leaves: 'rgb(36, 255 ,255)'\\n```'\") do |_, stack|\n  b = ((stack.drop.a(Decimal)).in(0..255)).posint\n  g = ((stack.drop.a(Decimal)).in(0..255)).posint\n  r = ((stack.drop.a(Decimal)).in(0..255)).posint\n  (Color.rgb(r, g, b)).onto(stack)\nend\ntarget.at(\"getRGB\", \"( Cf -- R G B ): leaves Red, Green, Blue values for a\\n Color form.\\n\\n```\\n0 25 3 rgb \\\"rgb(0, 25, 3)\\\" getRGB leaves: [ 0 25 3 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  r, g, b = color.rgb\n  r.onto(stack)\n  g.onto(stack)\n  b.onto(stack)\nend\ntarget.at(\"hsl\", \"( H S L -- Cf ): creates a Color form from three decimals\\n Hue (0-360, degrees), Saturation (0-100, percents),\\n Lightness (0-100, percents).\\n\\nSince color forms are stored in RGB, the HSL color is\\nfirst converted into RGB.\\n\\n```\\n206 35 46 hsl toQuote leaves: 'rgb(76, 123, 158)'\\n```\") do |_, stack|\n  l = ((stack.drop.a(Decimal)).in(0..100)).posint\n  s = ((stack.drop.a(Decimal)).in(0..100)).posint\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  (Color.hsl(h, s, l)).onto(stack)\nend\ntarget.at(\"getHSL\", \"( Cf -- H S L ): leaves Hue, Saturation, Lightness for\\n a Color form.\\n\\n```\\n206 35 46 hsl \\\"rgb(76, 123, 158)\\\" getHSL leaves: [ 206 35 46 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  h, s, l = color.hsl\n  h.onto(stack)\n  s.onto(stack)\n  l.onto(stack)\nend\ntarget.at(\"hsv\", \"( H S V -- Cf ): creates a Color form from three decimals\\n Hue (0-360, degrees), Saturation (0-100, percents),\\n Value (0-100, percents).\\n\\nSince color forms are stored in RGB, the HSV color is\\nfirst converted into RGB.\\n\\n```\\n120 100 100 hsv toQuote leaves: 'rgb(0, 255, 0)'\\n```\") do |_, stack|\n  v = ((stack.drop.a(Decimal)).in(0..100)).posint\n  s = ((stack.drop.a(Decimal)).in(0..100)).posint\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  (Color.hsv(h, s, v)).onto(stack)\nend\ntarget.at(\"getHSV\", \"( Cf -- H S V ): leaves Hue, Saturation, Value for a\\n Color form.\\n\\n```\\n180 100 50 hsv \\\"rgb(0,128,128)\\\" getHSV leaves: [ 180 100 50 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  h, s, v = color.hsv\n  h.onto(stack)\n  s.onto(stack)\n  v.onto(stack)\nend\ntarget.at(\"lch\", \"( L C H -- Cf ): creates a Color form from three decimals\\n Lightness (0-100), Chroma (0-132), Hue (0-360).\\n\\nSince color forms are stored as RGB, the LCH color is\\nfirst converted into RGB.\\n\\nLCH colors are tricky to implement but very fun to use.\\nThat's why they're in Novika's standard library.\\n\\nCIELAB encloses more colors than sRGB, so some conversion\\nimprecisions *are* to be expected because some colors just\\nfall out of sRGB gamut (lossiness is especially noticeable\\nin LCH -> RGB -> LCH conversions, but it stabilizes on the\\nlast step because the last step's LCH is guraranteed to be\\ninside the sRGB gamut).\\n\\nAny color out of the sRGB gamut is brought into the sRGB\\ngamut by lowering chroma until it's in the sRGB bounds.\\n\\nHere is a 'good' conversion, meaning it nicely closes\\non itself:\\n\\n```\\n78 74 133 lch $: color\\n\\ncolor toQuote leaves: 'rgb(122, 215, 85)'\\ncolor getLCH leaves: [ 78 74 133 ]\\ncolor getLCH lch toQuote leaves: 'rgb(122, 215, 85)''\\n\\\"And so on...\\\"\\n```\\n\\nAnd here is a bad conversion. At first, though, for it\\ndoes stabilize after a few rounds as it falls firmly\\ninto the sRGB color space.\\n\\n```\\n74 107 26 lch $: color\\ncolor toQuote leaves: 'rgb(255, 154, 151)'\\n\\n\\\"Note how many chroma units we lose! Plus, Lab and\\n LCH have hue shift on chroma changes, hence 26 -> 25.\\\"\\ncolor getLCH leaves: [ 74 41 25 ]\\n\\ncolor getLCH lch toQuote leaves: 'rgb(255, 154, 152)'\\n\\ncolor getLCH lch getLCH leaves: [ 74 41 25 ]\\n\\\"... and so on, conversion had stabilized ...\\\"\\n```\\n\\nYou don't necessarily have to think about this, because\\nthe resulting colors do look very similar, differing in\\npoints rather than magnitudes. Just be aware that the\\nconversion method used by this word and `getLCH` is lossy\\nin some cases.\") do |_, stack|\n  h = ((stack.drop.a(Decimal)).in(0..360)).posint\n  c = ((stack.drop.a(Decimal)).in(0..132)).posint\n  l = ((stack.drop.a(Decimal)).in(0..100)).posint\n  (Color.lch(l, c, h)).onto(stack)\nend\ntarget.at(\"getLCH\", \"( Cf -- L C H ): leaves Lightness, Chroma, Hue for a Color\\n form. Please read documentation for `lch` to understand\\n why `a b c lch getLCH` might not leave `a b c`.\\n\\n```\\n78 74 133 lch toQuote leaves: 'rgb(122, 215, 85)'\\n78 74 133 lch getLCH leaves: [ 78 74 133 ]\\n\\n74 107 26 lch toQuote leaves: 'rgb(255, 154, 152)'\\n\\n\\\"Chroma lowered to fit into sRGB. Lab and LCH have hue\\n shift on chroma changes, 26 -> 25\\\"\\n74 107 26 lch getLCH leaves: [ 74 41 25 ]\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  l, c, h = color.lch\n  l.onto(stack)\n  c.onto(stack)\n  h.onto(stack)\nend\ntarget.at(\"withAlpha\", \"( Cf A -- Cf' ): leaves Color form with alpha channel\\n set to Alpha (0-255).\\n\\n```\\n0 25 3 rgb toQuote leaves: 'rgb(0, 25, 3)'\\n0 25 3 rgb 100 withAlpha toQuote leaves: 'rgba(0, 25, 3, 100)'\\n```\") do |_, stack|\n  alpha = ((stack.drop.a(Decimal)).in(0..255)).posint\n  color = stack.drop.a(Color)\n  color.a = alpha\n  color.onto(stack)\nend\ntarget.at(\"getAlpha\", \"( Cf -- A ): leaves Alpha for the given Color form.\\n\\n```\\n0 25 3 rgb getAlpha leaves: 255 \\\"Opaque = 255\\\"\\n0 25 3 rgb 100 withAlpha getAlpha leaves: 100\\n```\") do |_, stack|\n  color = stack.drop.a(Color)\n  color.a.onto(stack)\nend\ntarget.at(\"fromPalette\", \"( Cf Pb -- Cc ): leaves the Closest color form to Color from\\n a Palette block. How close the color is is determined by\\n distance: the Closest color is that color in Palette block\\n to which Color has least (minimum) distance.\\n\\n```\\n[ 0 0 0 rgb\\n  255 0 0 rgb\\n  0 255 0 rgb\\n  0 0 255 rgb\\n  255 255 255 rgb\\n] vals $: pal\\n\\n0 0 0 rgb pal fromPalette toQuote leaves: 'rgb(0, 0, 0)'\\n76 175 80 rgb pal fromPalette \\\"greenish\\\" toQuote leaves: 'rgb(0, 255, 0)'\\n220 237 200 rgb pal fromPalette \\\"very light green\\\" toQuote leaves: 'rgb(255, 255, 255)'\\n74 20 140 rgb pal fromPalette \\\"very dark purple\\\" toQuote leaves: 'rgb(255, 0, 0)'\\n```\") do |_, stack|\n  palette = stack.drop.a(Block)\n  color = stack.drop.a(Color)\n  colors = [] of Color\n  palette.each do |pcolor|\n    colors << (pcolor.a(Color))\n  end\n  (color.closest(colors)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Console","path":"Novika/Capabilities/Impl/Console.html","kind":"class","full_name":"Novika::Capabilities::Impl::Console","name":"Console","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/console.cr","line_number":6,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"append_echo(engine,x:Decimal,y:Decimal,fg:Color,bg:Color,quote:Quote)-instance-method","name":"append_echo","doc":"Appends echo of *quote* colorized with *fg* and *bg*\ncolors at the given *x* and *y* position (in columns,\nrows).","summary":"<p>Appends echo of <em>quote</em> colorized with <em>fg</em> and <em>bg</em> colors at the given <em>x</em> and <em>y</em> position (in columns, rows).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color, quote : Quote)","args_html":"(engine, x : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>, quote : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":208,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"},{"name":"quote","external_name":"quote","restriction":"Quote"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nxi = x.to_i\nyi = y.to_i\nif (xi.in?(0...Termbox.width)) && (yi.in?(0...Termbox.height))\n  Termbox.print(xi, yi, fg, bg, quote.string[...(Termbox.width - xi)])\nend\n"}},{"html_id":"change(engine,x:Decimal,y:Decimal,fg:Color,bg:Color)-instance-method","name":"change","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, x : Decimal, y : Decimal, fg : Color, bg : Color)","args_html":"(engine, x : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, y : <a href=\"../../../Novika/Decimal.html\">Decimal</a>, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":199,"url":null},"def":{"name":"change","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"x","external_name":"x","restriction":"Decimal"},{"name":"y","external_name":"y","restriction":"Decimal"},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nxi = x.to_i\nyi = y.to_i\nif (xi.in?(0...Termbox.width)) && (yi.in?(0...Termbox.height))\n  Termbox.change(xi, yi, fg, bg)\nend\n"}},{"html_id":"clear(engine,fg:Color,bg:Color)-instance-method","name":"clear","doc":"Clears the console with *fg* and *bg* colors.","summary":"<p>Clears the console with <em>fg</em> and <em>bg</em> colors.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"args_string":"(engine, fg : Color, bg : Color)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a>, bg : <a href=\"../../../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":221,"url":null},"def":{"name":"clear","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color"},{"name":"bg","external_name":"bg","restriction":"Color"}],"visibility":"Public","body":"fg, bg = to_tb_color(fg), to_tb_color(bg)\nTermbox.clear(fg, bg)\nTermbox.clear\n"}},{"html_id":"colors_256(engine)-instance-method","name":"colors_256","doc":"Enables the 256-color output mode.","summary":"<p>Enables the 256-color output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":21,"url":null},"def":{"name":"colors_256","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = M256_A\nTermbox.set_output_mode(Termbox::OutputMode::M256)\n"}},{"html_id":"colors_compat(engine)-instance-method","name":"colors_compat","doc":"Enables the compatibility color (8-color) output mode.","summary":"<p>Enables the compatibility color (8-color) output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":26,"url":null},"def":{"name":"colors_compat","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = M8_A\nTermbox.set_output_mode(Termbox::OutputMode::Normal)\n"}},{"html_id":"colors_truecolor(engine)-instance-method","name":"colors_truecolor","doc":"Enables the truecolor output mode.","summary":"<p>Enables the truecolor output mode.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":31,"url":null},"def":{"name":"colors_truecolor","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"@palette = nil\nTermbox.set_output_mode(Termbox::OutputMode::Truecolor)\n"}},{"html_id":"get_char_pressed(engine):Quote-instance-method","name":"get_char_pressed","doc":"Leaves char quote for the key that was pressed.\nUsually a lowercase or uppercase letter; but also may\nlook like `'\\\\n'` or `'\\\\t'`, etc.)\n\nIn case the key that was pressed cannot be represented\nby the means of a quote, or if the user did not press\nany key, an empty quote is left in place of Char\nquote.","summary":"<p>Leaves char quote for the key that was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":110,"url":null},"def":{"name":"get_char_pressed","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"if event = @event.as?(Termbox::Event::KeyEvent)\nelse\n  return Quote.new(\"\")\nend\nif char = event.char\n  return Quote.new(char)\nend\nkey = event.key.not_nil!\ncase key\nwhen .ctrl_tilde?\n  char = '~'\nwhen .ctrl_2?\n  char = '2'\nwhen .ctrl_a?\n  char = 'a'\nwhen .ctrl_b?\n  char = 'b'\nwhen .ctrl_c?\n  char = 'c'\nwhen .ctrl_d?\n  char = 'd'\nwhen .ctrl_e?\n  char = 'e'\nwhen .ctrl_f?\n  char = 'f'\nwhen .ctrl_g?\n  char = 'g'\nwhen .ctrl_h?\n  char = 'h'\nwhen .tab?\n  char = '\\t'\nwhen .ctrl_i?\n  char = 'i'\nwhen .ctrl_j?\n  char = 'j'\nwhen .ctrl_k?\n  char = 'k'\nwhen .ctrl_l?\n  char = 'l'\nwhen .enter?\n  char = '\\n'\nwhen .ctrl_m?\n  char = 'm'\nwhen .ctrl_n?\n  char = 'n'\nwhen .ctrl_o?\n  char = 'o'\nwhen .ctrl_p?\n  char = 'p'\nwhen .ctrl_q?\n  char = 'q'\nwhen .ctrl_r?\n  char = 'r'\nwhen .ctrl_s?\n  char = 's'\nwhen .ctrl_t?\n  char = 't'\nwhen .ctrl_u?\n  char = 'u'\nwhen .ctrl_v?\n  char = 'v'\nwhen .ctrl_w?\n  char = 'w'\nwhen .ctrl_x?\n  char = 'x'\nwhen .ctrl_y?\n  char = 'y'\nwhen .ctrl_z?\n  char = 'z'\nwhen .esc?\n  char = '\\e'\nwhen .ctrl_lsq_bracket?\n  char = '['\nwhen .ctrl_3?\n  char = '3'\nwhen .ctrl_4?\n  char = '4'\nwhen .ctrl_backslash?\n  char = '\\\\'\nwhen .ctrl_5?\n  char = '5'\nwhen .ctrl_rsq_bracket?\n  char = ']'\nwhen .ctrl_6?\n  char = '6'\nwhen .ctrl_7?\n  char = '7'\nwhen .ctrl_slash?\n  char = '/'\nwhen .ctrl_underscore?\n  char = '_'\nwhen .space?\n  char = ' '\nwhen .ctrl_8?\n  char = '8'\nwhen .f1?\n  char = '1'\nwhen .f2?\n  char = '2'\nwhen .f3?\n  char = '3'\nwhen .f4?\n  char = '4'\nwhen .f5?\n  char = '5'\nwhen .f6?\n  char = '6'\nwhen .f7?\n  char = '7'\nwhen .f8?\n  char = '8'\nwhen .f9?\n  char = '9'\nwhen .f10?\n  char = \"10\"\nwhen .f11?\n  char = \"11\"\nwhen .f12?\n  char = \"12\"\nelse\n  return Quote.new(\"\")\nend\nQuote.new(char)\n"}},{"html_id":"had_alt_pressed?(engine):Boolean-instance-method","name":"had_alt_pressed?","doc":"Returns boolean for whether the ALT key was pressed.","summary":"<p>Returns boolean for whether the ALT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":56,"url":null},"def":{"name":"had_alt_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && event.mod.alt?]\n"}},{"html_id":"had_backspace_pressed?(engine):Boolean-instance-method","name":"had_backspace_pressed?","doc":"Returns boolean for whether the Backspace key\nwas pressed.","summary":"<p>Returns boolean for whether the Backspace key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":80,"url":null},"def":{"name":"had_backspace_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed? do |key|\n  key.backspace? || key.backspace2?\nend"}},{"html_id":"had_char_pressed?(engine):Boolean-instance-method","name":"had_char_pressed?","doc":"Returns boolean for whether EXCLUSIVELY a printable\ncharacter key was pressed (no CTRL, ALT, etc.) Whether\nthe SHIFT key was pressed or not is ignored.","summary":"<p>Returns boolean for whether EXCLUSIVELY a printable character key was pressed (no CTRL, ALT, etc.) Whether the SHIFT key was pressed or not is ignored.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":106,"url":null},"def":{"name":"had_char_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"Boolean[!(!(@event.as?(Termbox::Event::KeyEvent)).try do |__arg5|\n  __arg5.char.try(&.printable?)\nend)]"}},{"html_id":"had_ctrl_pressed?(engine):Boolean-instance-method","name":"had_ctrl_pressed?","doc":"leaves Boolean for whether the CTRL key was pressed.","summary":"<p>leaves Boolean for whether the CTRL key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":50,"url":null},"def":{"name":"had_ctrl_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && event.mod.ctrl?]\n"}},{"html_id":"had_delete_pressed?(engine):Boolean-instance-method","name":"had_delete_pressed?","doc":"Returns boolean for whether the DELETE key was pressed.","summary":"<p>Returns boolean for whether the DELETE key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_delete_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.delete?)"}},{"html_id":"had_down_pressed?(engine):Boolean-instance-method","name":"had_down_pressed?","doc":"Returns boolean for whether the DOWN ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the DOWN ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":102,"url":null},"def":{"name":"had_down_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_down?)"}},{"html_id":"had_end_pressed?(engine):Boolean-instance-method","name":"had_end_pressed?","doc":"Returns boolean for whether the END key was pressed.","summary":"<p>Returns boolean for whether the END key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_end_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.end?)"}},{"html_id":"had_fn_pressed?(engine):Boolean-instance-method","name":"had_fn_pressed?","doc":"Returns boolean for whether one of the function\nkeys F1-F12 was pressed.","summary":"<p>Returns boolean for whether one of the function keys F1-F12 was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":68,"url":null},"def":{"name":"had_fn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed? do |key|\n  case key\n  when .f1?, .f2?, .f3?, .f4?, .f5?, .f6?, .f7?, .f8?, .f9?, .f10?, .f11?, .f12?\n    true\n  end\nend"}},{"html_id":"had_home_pressed?(engine):Boolean-instance-method","name":"had_home_pressed?","doc":"Returns boolean for whether the HOME key was pressed.","summary":"<p>Returns boolean for whether the HOME key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_home_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.home?)"}},{"html_id":"had_insert_pressed?(engine):Boolean-instance-method","name":"had_insert_pressed?","doc":"Returns boolean for whether the INSERT key was pressed.","summary":"<p>Returns boolean for whether the INSERT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_insert_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.insert?)"}},{"html_id":"had_key_pressed?(engine):Boolean-instance-method","name":"had_key_pressed?","doc":"Returns boolean for whether any key was pressed.","summary":"<p>Returns boolean for whether any key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":44,"url":null},"def":{"name":"had_key_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[!(!event)]\n"}},{"html_id":"had_left_pressed?(engine):Boolean-instance-method","name":"had_left_pressed?","doc":"Returns boolean for whether the LEFT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the LEFT ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":90,"url":null},"def":{"name":"had_left_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_left?)"}},{"html_id":"had_pgdn_pressed?(engine):Boolean-instance-method","name":"had_pgdn_pressed?","doc":"Returns boolean for whether the PAGE DOWN key was pressed.","summary":"<p>Returns boolean for whether the PAGE DOWN key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_pgdn_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.pgdn?)"}},{"html_id":"had_pgup_pressed?(engine):Boolean-instance-method","name":"had_pgup_pressed?","doc":"Returns boolean for whether the PAGE UP key was pressed.","summary":"<p>Returns boolean for whether the PAGE UP key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":84,"url":null},"def":{"name":"had_pgup_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.pgup?)"}},{"html_id":"had_right_pressed?(engine):Boolean-instance-method","name":"had_right_pressed?","doc":"Returns boolean for whether the RIGHT ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the RIGHT ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":94,"url":null},"def":{"name":"had_right_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_right?)"}},{"html_id":"had_shift_pressed?(engine):Boolean-instance-method","name":"had_shift_pressed?","doc":"Returns boolean for whether the SHIFT key was pressed.","summary":"<p>Returns boolean for whether the SHIFT key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":62,"url":null},"def":{"name":"had_shift_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"event = @event.as?(Termbox::Event::KeyEvent)\nBoolean[event && (event.char.try(&.uppercase?) || event.mod.shift?)]\n"}},{"html_id":"had_up_pressed?(engine):Boolean-instance-method","name":"had_up_pressed?","doc":"Returns boolean for whether the UP ARROW key\nwas pressed.","summary":"<p>Returns boolean for whether the UP ARROW key was pressed.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Boolean","args_html":"(engine) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":98,"url":null},"def":{"name":"had_up_pressed?","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Boolean","visibility":"Public","body":"had_key_pressed?(&.arrow_up?)"}},{"html_id":"off(engine)-instance-method","name":"off","doc":"Disables the Console API.","summary":"<p>Disables the Console API.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":17,"url":null},"def":{"name":"off","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.disable"}},{"html_id":"on(engine)-instance-method","name":"on","doc":"Enables the Console API.","summary":"<p>Enables the Console API.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":13,"url":null},"def":{"name":"on","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.enable"}},{"html_id":"present(engine)-instance-method","name":"present","doc":"Syncs the internal buffer with console.","summary":"<p>Syncs the internal buffer with console.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine)","args_html":"(engine)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":217,"url":null},"def":{"name":"present","args":[{"name":"engine","external_name":"engine","restriction":""}],"visibility":"Public","body":"Termbox.present"}},{"html_id":"read_key(engine,timeout:Decimal)-instance-method","name":"read_key","doc":"Peeks or waits for input. Refreshes the input state.\n\n* Negative *timeout* must wait indefinitely for input,\n  and after receiving input refresh the state.\n\n* Zero *timeout* must refresh the input state without\n  waiting for input.\n\n* Positive *timeout* must wait for input in a window\n  *timeout* milliseconds long, and refresh the input\n  state after receiving input.","summary":"<p>Peeks or waits for input.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"args_string":"(engine, timeout : Decimal)","args_html":"(engine, timeout : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":40,"url":null},"def":{"name":"read_key","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"timeout","external_name":"timeout","restriction":"Decimal"}],"visibility":"Public","body":"@event = Termbox.peek?(timeout.to_i)"}},{"html_id":"size(engine):Tuple(Decimal,Decimal)-instance-method","name":"size","doc":"Returns the console width (in columns) and height (in rows).","summary":"<p>Returns the console width (in columns) and height (in rows).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Tuple(Decimal, Decimal)","args_html":"(engine) : Tuple(<a href=\"../../../Novika/Decimal.html\">Decimal</a>, <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/console.cr","line_number":36,"url":null},"def":{"name":"size","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"::Tuple(Decimal, Decimal)","visibility":"Public","body":"{Decimal.new(Termbox.width), Decimal.new(Termbox.height)}"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Disk","path":"Novika/Capabilities/Impl/Disk.html","kind":"class","full_name":"Novika::Capabilities::Impl::Disk","name":"Disk","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/disk.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"can_read?(engine,path:Quote):Boolean-instance-method","name":"can_read?","doc":"Returns whether *path* exists and is readable.","summary":"<p>Returns whether <em>path</em> exists and is readable.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":5,"url":null},"def":{"name":"can_read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.readable?(path.string)]"}},{"html_id":"copy(engine,src:Quote,dst:Quote):Bool-instance-method","name":"copy","doc":"Copies source *src* (quote path to a file, symlink, or\ndirectory) to destination *dst* (also a quote).\n\nIf *src* is a directory, copies it recursively.\n\nReturns whether the operation was successful.","summary":"<p>Copies source <em>src</em> (quote path to a file, symlink, or directory) to destination <em>dst</em> (also a quote).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"args_string":"(engine, src : Quote, dst : Quote) : Bool","args_html":"(engine, src : <a href=\"../../../Novika/Quote.html\">Quote</a>, dst : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":51,"url":null},"def":{"name":"copy","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"src","external_name":"src","restriction":"Quote"},{"name":"dst","external_name":"dst","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if File.exists?(src.string)\nelse\n  return false\nend\nFileUtils.cp_r(src.string, dst.string)\ntrue\n"}},{"html_id":"dir_empty?(engine,path:Quote):Boolean|Nil-instance-method","name":"dir_empty?","doc":"Returns whether directory pointed to by *path* is empty.\nReturns nil if *path* does not point to a directory, or\nif *path* does not exist.","summary":"<p>Returns whether directory pointed to by <em>path</em> is empty.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean | Nil","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a> | Nil","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":25,"url":null},"def":{"name":"dir_empty?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean | ::Nil","visibility":"Public","body":"if File.directory?(path.string)\n  Boolean[Dir.empty?(path.string)]\nend"}},{"html_id":"has?(engine,path:Quote):Boolean-instance-method","name":"has?","doc":"Returns whether *path* exists.","summary":"<p>Returns whether <em>path</em> exists.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":9,"url":null},"def":{"name":"has?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.exists?(path.string)]"}},{"html_id":"has_dir?(engine,path:Quote):Boolean-instance-method","name":"has_dir?","doc":"Returns whether *path* exists and points to a directory.","summary":"<p>Returns whether <em>path</em> exists and points to a directory.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":17,"url":null},"def":{"name":"has_dir?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[Dir.exists?(path.string)]"}},{"html_id":"has_file?(engine,path:Quote):Boolean-instance-method","name":"has_file?","doc":"Returns whether *path* exists and points to a file.","summary":"<p>Returns whether <em>path</em> exists and points to a file.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":13,"url":null},"def":{"name":"has_file?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.file?(path.string)]"}},{"html_id":"has_symlink?(engine,path:Quote):Boolean-instance-method","name":"has_symlink?","doc":"Returns whether *path* exists and points to a symlink.","summary":"<p>Returns whether <em>path</em> exists and points to a symlink.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Boolean","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Boolean.html\">Boolean</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":21,"url":null},"def":{"name":"has_symlink?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Boolean","visibility":"Public","body":"Boolean[File.symlink?(path.string)]"}},{"html_id":"home(engine):Quote-instance-method","name":"home","doc":"Returns current user's home directory.","summary":"<p>Returns current user's home directory.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":37,"url":null},"def":{"name":"home","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"Quote.new(Path.home.to_s)"}},{"html_id":"join(engine,base:Quote,child:Quote):Quote-instance-method","name":"join","doc":"Returns path quote which is the result of joining\n*base* path and *child* path quotes using the\nplatform-specific path separator.","summary":"<p>Returns path quote which is the result of joining <em>base</em> path and <em>child</em> path quotes using the platform-specific path separator.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"args_string":"(engine, base : Quote, child : Quote) : Quote","args_html":"(engine, base : <a href=\"../../../Novika/Quote.html\">Quote</a>, child : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":29,"url":null},"def":{"name":"join","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"base","external_name":"base","restriction":"Quote"},{"name":"child","external_name":"child","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"Quote.new(File.join(base.string, child.string))"}},{"html_id":"mkdir(engine,path:Quote)-instance-method","name":"mkdir","doc":"Creates an empty directory at *path*, including any\nnon-existing intermediate directories. Does nothing\nif *path* already exists.","summary":"<p>Creates an empty directory at <em>path</em>, including any non-existing intermediate directories.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":45,"url":null},"def":{"name":"mkdir","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":"if File.exists?(path.string)\n  return\nend\nFileUtils.mkdir_p(path.string)\n"}},{"html_id":"pwd(engine):Quote-instance-method","name":"pwd","doc":"Returns the working directory.","summary":"<p>Returns the working directory.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":33,"url":null},"def":{"name":"pwd","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"Quote.new(Dir.current)"}},{"html_id":"read?(engine,path:Quote):Quote|Nil-instance-method","name":"read?","doc":"Reads and returns the contents of file at *path*. Returns\nnil if there is no file at *path*.","summary":"<p>Reads and returns the contents of file at <em>path</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote) : Quote | Nil","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : <a href=\"../../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":59,"url":null},"def":{"name":"read?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Quote | ::Nil","visibility":"Public","body":"if File.file?(path.string)\n  Quote.new(File.read(path.string))\nend"}},{"html_id":"touch(engine,path:Quote)-instance-method","name":"touch","doc":"Creates an empty file at *path*. Does nothing if *path*\nalready exists.","summary":"<p>Creates an empty file at <em>path</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, path : Quote)","args_html":"(engine, path : <a href=\"../../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":41,"url":null},"def":{"name":"touch","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"path","external_name":"path","restriction":"Quote"}],"visibility":"Public","body":"File.touch(path.string)"}},{"html_id":"write?(engine,content:Quote,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nquote. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> quote.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Quote, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../../Novika/Quote.html\">Quote</a>, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":63,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Quote"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if (File.file?(path.string)) && (File.writable?(path.string))\nelse\n  return false\nend\nFile.write(path.string, content.string)\ntrue\n"}},{"html_id":"write?(engine,content:Byteslice,path:Quote):Bool-instance-method","name":"write?","doc":"(Over)writes content of file at *path* with *content*\nbyteslice. Returns nil if *path* doesn't exist or doesn't\npoint to a file.","summary":"<p>(Over)writes content of file at <em>path</em> with <em>content</em> byteslice.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"args_string":"(engine, content : Byteslice, path : Quote) : Bool","args_html":"(engine, content : <a href=\"../../../Novika/Byteslice.html\">Byteslice</a>, path : <a href=\"../../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/capabilities/impl/disk.cr","line_number":71,"url":null},"def":{"name":"write?","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"content","external_name":"content","restriction":"Byteslice"},{"name":"path","external_name":"path","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"if (File.file?(path.string)) && (File.writable?(path.string))\nelse\n  return false\nend\nFile.open(path.string, \"wb\") do |handle|\n  content.write_to(handle)\nend\ntrue\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Essential","path":"Novika/Capabilities/Impl/Essential.html","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/essential.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"essential\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes essential native code vocabulary, such as 'hydrate' and 'new'\""}}],"instance_methods":[{"html_id":"inject(intotarget)-instance-method","name":"inject","abstract":false,"args":[{"name":"target","external_name":"into","restriction":""}],"args_string":"(into target)","args_html":"(into target)","location":{"filename":"src/novika/capabilities/impl/essential.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":""}],"visibility":"Public","body":"target.at(Word.new(\"true\"), True.new)\ntarget.at(Word.new(\"false\"), False.new)\ntarget.at(\"prototype\", \"( B -- P ): leaves the Prototype of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.prototype.onto(stack)\nend\ntarget.at(\"parent\", \"( B -- P ): leaves the Parent of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  if parent = block.parent?\n  else\n    block.die(\"no parent for block\")\n  end\n  parent.onto(stack)\nend\ntarget.at(\"address\", \"( B -- A ): leaves pointer Address of Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  (Decimal.new(block.object_id)).onto(stack)\nend\ntarget.at(\"conts\", \"( -- Cb ): pushes the Continuations block.\") do |engine, stack|\n  engine.conts.onto(stack)\nend\ntarget.at(\"cont\", \"( -- Cb ): pushes the Continuation block.\") do |engine, stack|\n  engine.cont.onto(stack)\nend\ntarget.at(\"newContinuation\", \"( S B -- C ): creates a Continuation from a Stack and\\n a Block.\") do |_, stack|\n  Engine.cont(block: stack.drop.a(Block), stack: stack.drop.a(Block)).onto(stack)\nend\ntarget.at(\"getContBlock\", \"( C -- Cb ): leaves the Code block of a Continuation.\") do |_, stack|\n  cont = stack.drop.a(Block)\n  (cont.at(Engine::C_BLOCK_AT)).onto(stack)\nend\ntarget.at(\"getContStack\", \"( C -- Sb ): leaves the Stack block of a Continuation.\") do |_, stack|\n  cont = stack.drop.a(Block)\n  (cont.at(Engine::C_STACK_AT)).onto(stack)\nend\ntarget.at(\"this\", \"( -- B ): pushes the Block it's opened in.\\n\\n```\\n[ this ] open echo\\n\\\"STDOUT: [ this ]⏎ (instance of `[ this ]`)\\\"\\n```\") do |engine, stack|\n  engine.block.onto(stack)\nend\ntarget.at(\"stack\", \"( -- S ): pushes the Stack it's opened in.\\n\\n```\\nstack dup echo\\n\\\"STDOUT: [ ⭮ ]⏎\\\"\\n\\n'foo' <<\\nstack echo\\n\\\"STDOUT: [ ⭮ 'foo' ]⏎\\\"\\n```\") do |_, stack|\n  stack.onto(stack)\nend\ntarget.at(\"ahead\", \"( -- B ): leaves the block that will be executed after\\n `this` finishes.\\n\\n```\\n100 [ ahead 1 inject ] open + leaves: 101 \\\"(i.e. 100 1 +)\\\"\\n```\") do |engine, stack|\n  cont = engine.conts.at(engine.conts.count - 2)\n  cont = (cont.as?(Block)) || (cont.die(\"malformed continuation\"))\n  ahead = cont.at(Engine::C_BLOCK_AT)\n  ahead.onto(stack)\nend\ntarget.at(\"resume\", \"( B -- ): closes blocks all the way up to, but not\\n including, Block.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  conts = engine.conts\n  found = false\n  while !(conts.tape.empty? || (found = block.same?(engine.block)))\n    conts.drop\n  end\n  if found\n  else\n    block.die(\"resume: no such block in continuations\")\n  end\nend\ntarget.at(\"dup\", \"( F -- F F ): duplicates the Form before cursor.\\n\\n```\\n'hello' dup leaves: [ 'hello' 'hello' ]\\n\\n[ 1 2 | 3 ] $: block\\nblock [ dup ] hydrate\\nblock leaves: [ [ 1 2 2 | 3 ] ]\\n```\") do |_, stack|\n  stack.dupe\nend\ntarget.at(\"drop\", \"( F -- ): drops the Form before cursor.\\n\\n```\\n'hello' drop leaves: [ ]\\n\\n[ 1 2 | 3 ] $: block\\nblock [ drop ] hydrate\\nblock leaves: [ [ 1 | 3 ] ]\\n```\") do |_, stack|\n  stack.drop\nend\ntarget.at(\"swap\", \"( A B -- B A ): swaps two Forms before cursor.\\n\\n```\\n1 2 swap leaves: [ 2 1 ]\\n\\n[ 1 2 | 3 ] $: block\\nblock [ swap ] hydrate\\nblock leaves: [ [ 2 1 | 3 ] ]\\n```\") do |_, stack|\n  stack.swap\nend\ntarget.at(\"hydrate\", \"( S F -- ): opens (evaluates) Form with Stack set as the\\n active stack. If Form is not a block, it is added to\\n Stack (equivalent to `<<`), If Form is a block, its\\n instance is opened. To open a block without creating\\n an instance of it (unsafe), use `hydrate!`.\") do |engine, stack|\n  form = stack.drop\n  new_stack = stack.drop.a(Block)\n  engine.schedule(form, new_stack)\nend\ntarget.at(\"hydrate!\", \"( S F -- ): opens (evaluates) Form with Stack set as the\\n active stack. If Form is not a block, the behavior is\\n the same as in `hydrate`. If Form is a block, performs\\n unsafe hydration (hydrates without making an instance\\n of the block). For a safer alternative, see `hydrate`.\\n Use if you know what you're doing, or if you're ready\\n to make an instance yourself.\\n\\nDetails: `hydrate!` is considered unsafe because hydration\\nartifacts are exposed to the user and/or its blocks. The\\ncontents of a block after hydration may differ from its\\ncontents before unsafe hydration. Indeed, `hydrate!` is\\nalmost as unsafe as pushing into `conts`; the only benefit\\nit provides is that it is able to catch infinite/very\\ndeep recursion.\") do |engine, stack|\n  form = stack.drop\n  new_stack = stack.drop.a(Block)\n  engine.schedule!(form, new_stack)\nend\ntarget.at(\"open\", \"( F -- F' ): opens Form in the active stack. Equivalent\\n to `stack F hydrate`.\\n\\n```\\n100 open leaves: 100\\n\\n1 [ 2 + ] open leaves: 3\\n```\") do |engine, stack|\n  form = stack.drop\n  engine.schedule(form, stack)\nend\ntarget.at(\"there\", \"( S B -- S ): opens Block with Stack set as the active\\n stack. Leaves Stack. Ahead is transferred to block.\\n\\n```\\n[ 1 2 ] [ + ] there leaves: [ [ 3 ] ]\\n[ 1 2 ] [ ahead thruBlock open ] there + leaves: [ [ 3 ] ]\\n```\") do |engine, stack|\n  form = stack.drop\n  new_stack = stack.top.a(Block)\n  engine.schedule(form, new_stack)\nend\ntarget.at(\"do\", \"( F -- ): opens Form with an empty stack activated, and\\n disposed when Form has been evaluated.\\n\\n```\\n[ 'Hi!' echo ] do\\n\\\"STDOUT: Hi!⏎\\\"\\n```\") do |engine, stack|\n  form = stack.drop\n  engine.schedule(form, Block.new)\nend\ntarget.at(\"new\", \"( B -- I ): leaves an Instance of a Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.instance.onto(stack)\nend\ntarget.at(\"shallowNew\", \"( B -- Si ): leaves a Shallow instance of Block.\\n\\n`shallowNew` is different from `new` in that it does not reparent\\nsub-blocks to the parent instance recursively. Instead, it only\\ncreates an instance of Block, and does not look at skips its\\ncontent entirely.\\n\\n```\\n[ $: x [ x ] ] @: newBox\\n\\n1 newBox $: fooBox1\\n2 newBox $: fooBox2\\n3 newBox $: fooBox3\\n\\nfooBox1 open leaves: 1\\nfooBox2 open leaves: 2\\nfooBox3 open leaves: 3\\n\\n[ fooBox1 fooBox2 fooBox3 ] vals $: boxes\\n\\nboxes shallowNew $: shallowBoxesInstance\\nshallowBoxesInstance 0 fromLeft open leaves: 1\\nshallowBoxesInstance 1 fromLeft open leaves: 2\\nshallowBoxesInstance 2 fromLeft open leaves: 3\\n\\n\\\"Works as expected! Note that sub-blocks are exactly the same as\\n those in the original 'boxes' block. However, 'shallowBoxesInstance'\\n and 'boxes' are different blocks now:\\\"\\n\\n(shallowBoxesInstance 0 fromLeft) (boxes 0 fromLeft) same? leaves: true\\n(shallowBoxesInstance 1 fromLeft) (boxes 1 fromLeft) same? leaves: true\\n(shallowBoxesInstance 2 fromLeft) (boxes 2 fromLeft) same? leaves: true\\n\\nboxes shallowBoxesInstance same? leaves: false\\n\\n\\\"... and 'shallowBoxesInstance' does indeed have 'boxes' as its parent:\\\"\\n\\n(shallowBoxesInstance parent) boxes same? leaves: true\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.instance(shallow: true).onto(stack)\nend\ntarget.at(\"sel\", \"( D A B -- A/B ): selects A (Determiner is truthy) or B\\n (Determiner is falsey)\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  det = stack.drop\n  (det.sel(a, b)).onto(stack)\nend\ntarget.at(\"br\", \"( D T F -- ? ): opens True/False forms depending on\\n Determiner being true/false.\") do |engine, stack|\n  b = stack.drop\n  a = stack.drop\n  det = stack.drop\n  engine.schedule(det.sel(a, b), stack)\nend\ntarget.at(\"<\", \"( A B -- S ): leaves whether A is smaller than (less than) B.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  Boolean[a < b].onto(stack)\nend\ntarget.at(\"same?\", \"( F1 F2 -- true/false ): leaves whether two Forms are the\\n same (by reference for block, by value for any other form).\\n\\n```\\n1 2 same? leaves: false\\n1 1 same? leaves: true\\n\\n'hello' 'hello world' same? leaves: false\\n'hello' 'hello' same? leaves: true\\n\\n\\\"etc...\\\"\\n\\n[ 1 2 + ] $: b1\\n[ 1 2 + ] $: b2\\n\\nb1 b2 same? leaves: false \\\"They're different blocks, content doesn't matter!\\\"\\n\\nb1 b1 same? leaves: true\\nb2 b2 same? leaves: true\\n```\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  (Boolean.same?(a, b)).onto(stack)\nend\ntarget.at(\"=\", \"( F1 F2 -- true/false ): leaves whether two Forms are equal by\\n content (they may or may not be the same forms reference-wise,\\n i.e., those for which `same?` would leave true).\\n\\n```\\n1 2 = leaves: false\\n1 1 = leaves: true\\n\\n'hello' 'hello world' = leaves: false\\n'hello' 'hello' = leaves: true\\n\\n\\\"etc...\\\"\\n\\n[ 1 2 + ] $: b1\\n[ 1 2 + ] $: b2\\n\\nb1 b2 = leaves: true \\\"They're equal by content!\\\"\\n\\nb1 b1 = leaves: true\\nb2 b2 = leaves: true\\n\\n\\\"Supports self-reference:\\\"\\n[ ] $: b3\\nb3 b3 shove\\nb3 b3 = leaves: true\\n(b3 first) b3 = leaves: true\\n\\\"etc...\\\"\\n```\") do |_, stack|\n  b = stack.drop\n  a = stack.drop\n  Boolean[a == b].onto(stack)\nend\ntarget.at(\"anyof?\", \"( F B -- true/false ): leaves whether any form in Block is\\n equal (via `=`) to Form.\\n\\n```\\n1 [ 1 2 3 ] anyof? leaves: true\\n'hello' [ 'hello' 'world' 1 ] anyof? leaves: true\\n'hello' [ 1 2 3 ] anyof? leaves: false\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = stack.drop\n  Boolean[form.in?(block)].onto(stack)\nend\ntarget.at(\"occurrences\", \"( B/Q Pf/Pq -- Bi ): leaves Begin indices of all occurrences\\n of Pattern form/Pattern quote in Block/Quote. Begin indices\\n is an orphan with no entries.\\n\\nWorks in a similar way to `anyof?` in that it compares each\\nelement of the Block/Quote with Pattern form/Pattern quote\\nlike `=` (but not using `=`, at least in the quote case\\nwhere KMP is used).\\n\\n```\\n[ ] 123 occurrences leaves: [ [ ] ]\\n\\n[ 1 1 2 0 0 1 2 1 3 4 8 ] $: haystack\\nhaystack 0 occurrences leaves: [ [ 3 4 ] ]\\nhaystack 1 occurrences leaves: [ [ 0 1 5 7 ] ]\\nhaystack 'foo' occurrences leaves: [ [ ] ]\\n\\n'' 'foobar' occurrences leaves: [ [ ] ]\\n'foobar' '' occurrences leaves: [ [ ] ]\\n\\n'foobra' $: haystack\\nhaystack 'o' occurrences leaves: [ [ 1 2 ] ]\\nhaystack 'foo' occurrences leaves: [ [ 0 ] ]\\nhaystack 'ra' occurrences leaves: [ [ 4 ] ]\\n\\n'GATCCATATG' $: haystack\\nhaystack 'ATAAT' occurrences leaves: [ [ ] ]\\nhaystack 'ATAT' occurrences leaves: [ [ 5 ] ]\\n```\") do |_, stack|\n  pattern = stack.drop\n  iterable = stack.drop.a(Block | Quote)\n  case iterable\n  in Quote\n    fail = iterable.empty? || (pattern.is_a?(Quote) && pattern.empty?)\n  in Block\n    fail = iterable.count.zero?\n  end\n  if fail\n    Block.new.onto(stack)\n    next\n  end\n  occurrences = [] of Form\n  iterable.each_occurrence_of(pattern) do |index|\n    occurrences << (Decimal.new(index))\n  end\n  (Block.with(occurrences, leaf: false)).onto(stack)\nend\ntarget.at(\"uppercase?\", \"( Q -- true/false ): leaves whether Quote is all-uppercase.\\n If Quote is empty, leaves false.\\n\\n```\\n'' uppercase? leaves: false\\n'A' uppercase? leaves: true\\n'hello' uppercase? leaves: false\\n'Hello' uppercase? leaves: false\\n'HELLO' uppercase? leaves: true\\n'HELLO WORLD' uppercase? leaves: false\\n```\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  string = quote.string\n  case string.size\n  when 0\n    isup = false\n  when 1\n    isup = string[0].uppercase?\n  else\n    isup = true\n    string.each_char do |char|\n      if char.uppercase?\n      else\n        isup = false\n        break\n      end\n    end\n  end\n  Boolean[isup].onto(stack)\nend\ntarget.at(\"toUppercase\", \"( Q -- Uq ): leaves all- Uppercase quote for Quote: converts\\n lowercase character(s) in Quote to uppercase. If Quote is empty,\\n leaves empty quote.\\n\\n```\\n'' toUppercase leaves: ''\\n'hello' toUppercase leaves: 'HELLO'\\n'hello world' toUppercase? leaves: 'HELLO WORLD'\\n```\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  (Quote.new(quote.string.upcase)).onto(stack)\nend\ntarget.at(\"block?\", \"( F -- true/false ): leaves whether Form is a block.\") do |_, stack|\n  Boolean[stack.drop.is_a?(Block)].onto(stack)\nend\ntarget.at(\"asBlock\", \"( F -- B ): asserts that Form is a Block, dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asBlock\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n[] asBlock leaves: [ [] \\\"(the same block)\\\" ]\\n```\") do |_, stack|\n  stack.top.a(Block)\nend\ntarget.at(\"word?\", \"( F -- true/false ): leaves whether Form is a word form,\\n or a block that implements '__word__'.\\n\\n```\\n#foo word? leaves: true\\n\\n[ #foo $: __word__ this ] open word? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Word) || (form.is_a?(Block) && (form.can_be?(Word)))].onto(stack)\nend\ntarget.at(\"private?\", \"( W -- true/false ): leaves whether Word is private (by convention).\\n\\nA Word prefixed by one or more underscores '_' *but that which\\ndoes not end with one(s)* is considered private by convention.\\nHook words such as `__quote__` are *not* considered private.\\n\\nThe fact that privacy is defined \\\"by convention\\\" means that nothing\\nactually stops anyone from obtaining the word's associated value form.\\n\\n```\\n#hello private? leaves: false\\n#_hello private? leaves: true\\n#_ private? leaves: false \\\"Beware!\\\"\\n```\") do |_, stack|\n  Boolean[(stack.drop.a(Word)).private?].onto(stack)\nend\ntarget.at(\"toWord\", \"( F -- W ): converts Form into Word.\\n  1. If Form is a word, behaves as noop\\n  2. If Form is a quote, dies only if quote contains\\n     Unicode whitespace characters or is itself empty.\\n  3. If Form is a quoted word, peels off **all** quoting\") do |_, stack|\n  form = stack.drop.a((Word | QuotedWord) | Quote)\n  case form\n  in Word\n    form.onto(stack)\n  in QuotedWord\n    form.to_word.onto(stack)\n  in Quote\n    string = form.string\n    if string.empty?\n      form.die(\"toWord: quote argument is empty\")\n    else\n      if string.each_char.any?(&.whitespace?)\n        form.die(\"toWord: quote argument contains whitespace\")\n      end\n    end\n    (Word.new(form.string)).onto(stack)\n  end\nend\ntarget.at(\"asWord\", \"( F -- W ): asserts that Form is a Word form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asWord\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n#foo asWord leaves: [ foo ]\\n```\\n\\n`__word__` hook can make a block usable in place of a word,\\nprovided its definition leaves a word or a block which\\nimplements '__word__':\\n\\n```\\n[ $: x x $: __word__ this ] @: a\\n#foo a asWord \\\"beware: leaves instance of a\\\"\\n#boo a a asWord \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Word)\nend\ntarget.at(\"quotedWord?\", \"( F -- true/false ): leaves whether Form is a quoted word\\n form, or a block that implements '__quotedWord__'.\\n\\n```\\n##foo quotedWord? leaves: true\\n[ ##foo $: __quotedWord__ this ] open quotedWord? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(QuotedWord) || (form.is_a?(Block) && (form.can_be?(QuotedWord)))].onto(stack)\nend\ntarget.at(\"asQuotedWord\", \"( F -- Qw ): asserts that Form is a Quoted word form,\\n dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asQuotedWord\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n##foo asQuotedWord leaves: #foo\\n```\\n\\n`__quotedWord__` hook can make a block usable in place of\\na quoted word, provided its definition leaves a quoted\\nword or a block that implements `__quotedWord__`:\\n\\n```\\n[ $: x x $: __quotedWord__ this ] @: a\\n##foo a asQuotedWord \\\"beware: leaves instance of a\\\"\\n##boo a a asQuotedWord \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(QuotedWord)\nend\ntarget.at(\"decimal?\", \"( F -- true/false ): leaves whether Form is a decimal form,\\n or a block that implements '__decimal__'.\\n\\n```\\n123 decimal? leaves: true\\n[ 123 $: __decimal__ this ] open decimal? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Decimal) || (form.is_a?(Block) && (form.can_be?(Decimal)))].onto(stack)\nend\ntarget.at(\"toQuotedWord\", \"( Qw/W -- #Qw/#W ): adds a layer of \\\"quoting\\\" to Quoted\\n word or Word.\\n\\n```\\n\\\"Note that in quoted word literals (here on the left hand\\n side) one layer of quoting is 'eaten off' by the parser!\\\"\\n\\n#foo toQuotedWord leaves: #foo\\n##foo toQuotedWord leaves: ##foo\\n```\") do |_, stack|\n  form = stack.drop.a(Word | QuotedWord)\n  form.to_quoted_word.onto(stack)\nend\ntarget.at(\"asDecimal\", \"( F -- D ): asserts that Form is a Decimal form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n'foo' asDecimal\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n100 asDecimal leaves: 100\\n```\\n\\n`__decimal__` hook can make a block usable in place of a\\ndecimal, provided its definition leaves a decimal or a\\nblock that implements `__decimal__`:\\n\\n```\\n[ $: x x $: __decimal__ this ] @: a\\n100 a asDecimal \\\"beware: leaves an instance of a\\\"\\n200 a a asDecimal \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Decimal)\nend\ntarget.at(\"quote?\", \"( F -- true/false ): leaves whether Form is a quote form,\\n or a block that implements '__quote__'.\\n\\n```\\n'foo' quote? leaves: true\\n[ 'foo' $: __quote__ this ] open quote? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Quote) || (form.is_a?(Block) && (form.can_be?(Quote)))].onto(stack)\nend\ntarget.at(\"asQuote\", \"( F -- Q ): asserts that Form is a Quote form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asQuote\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n'foo' asQuote leaves: 'foo'\\n```\\n\\n`__quote__` hook can make a block usable in place of a\\nquote, provided its definition leaves a quote or a block\\nthat implements `__quote__`:\\n\\n```\\n[ $: x x $: __quote__ this ] @: a\\n'foo' a asQuote \\\"beware: leaves instance of a\\\"\\n'boo' a a asQuote \\\"beware: leaves instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Quote)\nend\ntarget.at(\"boolean?\", \"( F -- true/false ): leaves whether Form is a boolean form,\\n or a block that implements '__boolean__'.\\n\\n```\\ntrue boolean? leaves: true\\n[ true $: __boolean__ this ] open boolean? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Boolean) || (form.is_a?(Block) && (form.can_be?(Boolean)))].onto(stack)\nend\ntarget.at(\"asBoolean\", \"( F -- B ): asserts that Form is a Boolean form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asBoolean\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\ntrue asBoolean leaves: true\\nfalse asBoolean leaves: false\\n```\\n\\n`__boolean__` hook can make a block usable in place of a\\nboolean, provided its definition leaves a boolean or a\\nblock that implements `__boolean__`:\\n\\n```\\n[ $: x x $: __boolean__ this ] @: a\\ntrue a asBoolean \\\"beware: leaves an instance of a\\\"\\ntrue a a asBoolean \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Boolean)\nend\ntarget.at(\"builtin?\", \"( F -- true/false ): leaves whether Form is a builtin form.\") do |_, stack|\n  Boolean[stack.drop.is_a?(Builtin)].onto(stack)\nend\ntarget.at(\"asBuiltin\", \"( F -- B ): asserts Form is a Builtin, dies if it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n'foo' asBuiltin\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n#+ here asBuiltin toQuote leaves: '[ native code ]'\\n```\") do |_, stack|\n  stack.top.a(Builtin)\nend\ntarget.at(\"color?\", \"( F -- true/false ): leaves whether Form is a color form,\\n or a block that implements '__color__'.\\n\\n```\\n0 0 0 rgb color? leaves: true\\n[ 0 0 0 rgb $: __color__ this ] open color? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Color) || (form.is_a?(Block) && (form.can_be?(Color)))].onto(stack)\nend\ntarget.at(\"asColor\", \"( F -- C ): asserts that Form is a Color form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asColor\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n0 0 0 rgb asColor toQuote leaves: 'rgb(0, 0, 0)'\\n```\\n\\n`__color__` hook can make a block usable in place of a\\ncolor, provided its definition leaves a color or a block\\nthat implements `__color__`:\\n\\n```\\n[ $: x x $: __color__ this ] @: a\\n0 0 0 rgb a asColor \\\"beware: leaves an instance of a\\\"\\n0 0 0 rgb a a asColor \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Color)\nend\ntarget.at(\"byteslice?\", \"( F -- true/false ): leaves whether Form is a byteslice\\n form, or a block that implements '__byteslice__'.\\n\\n```\\n'hello world' toByteslice byteslice? leaves: true\\n[ [ 'Hi!' toByteslice ] $: __byteslice__ this ] open byteslice? leaves: true\\n```\") do |_, stack|\n  form = stack.drop\n  Boolean[form.is_a?(Byteslice) || (form.is_a?(Block) && (form.can_be?(Byteslice)))].onto(stack)\nend\ntarget.at(\"asByteslice\", \"( F -- B ): asserts that Form is a Byteslice form, dies if\\n it's not.\\n\\nFor example, the following expression dies:\\n\\n```\\n100 asByteslice\\n```\\n\\nEt cetera for all other forms, except:\\n\\n```\\n'hello world' toByteslice asByteslice leaves: '[byteslice, consists of 11 mutable byte(s)]'\\n```\\n\\n`__byteslice__` hook can make a block usable in place of\\na byteslice, provided its definition leaves a byteslice\\nor a block that implements `__byteslice__`:\\n\\n```\\n[ $: x x $: __byteslice__ this ] @: a\\n'foo' toByteslice a asByteslice \\\"beware: leaves an instance of a\\\"\\n'foo' toByteslice a a asByteslice \\\"beware: leaves an instance of a\\\"\\n```\") do |_, stack|\n  stack.top.a(Byteslice)\nend\ntarget.at(\"pushes\", \"( B N F -- ): creates a definition for Name in Block that\\n pushes Form when resolved there.\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  block = stack.drop.a(Block)\n  block.at(name, Entry.new(form))\nend\ntarget.at(\"opens\", \"( B N F -- ): creates a definition for Name in Block that\\n opens Form when resolved there.\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  block = stack.drop.a(Block)\n  block.at(name, OpenEntry.new(form))\nend\ntarget.at(\"entry:submit\", \"( Ss N F -- ): replaces the value form of an existing\\n definition for Name in Submittable store (usually a block)\\n to Form. Does not change whether the definition opens\\n or pushes.\\n\\n```\\n[ 'John Doe' $: fullName\\n  [ fullName count ] @: fullNameLength\\n] obj $: person\\n\\nperson.fullName leaves: 'John Doe'\\nperson.fullNameLength leaves: 8\\n\\n\\\"Let's try to change the name:\\\"\\nperson #fullName 'Alice Bobette' entry:submit\\nperson.fullName leaves: 'Alice Bobette'\\nperson.fullNameLength leaves: 13\\n\\n\\\"Now let's change the way we compute the length; let's count\\n how many double-Ts there are in the full name.\\\"\\nperson #fullNameLength [ person.fullName 'tt' occurrences count ] entry:submit\\n\\n\\\"... just one:\\\"\\nperson.fullNameLength leaves: 1\\n\\n\\\"... or maybe multiple:\\\"\\nperson #fullName 'Tette Mopettitte' entry:submit\\nperson.fullName leaves: 'Tette Mopettitte'\\nperson.fullNameLength leaves: 3\\n```\") do |_, stack|\n  form = stack.drop\n  name = stack.drop\n  submittable = stack.drop.a(ISubmittableStore)\n  submittable.submit(name, form)\nend\ntarget.at(\"entry:exists?\", \"( Rs N -- true/false ): leaves whether Readable store\\n (usually a block) can fetch value for Name.\\n\\n```\\n[ orphan $: table\\n  orphan extendWith: [\\n    [ ${ name age score }\\n      [ name $: name\\n        age  $: age ] obj toDict $: record\\n      table record score pushes\\n    ] @: set\\n    [ ${ name age } table (this toDict) entry:fetch ] @: get\\n    [ ${ name age } table (this toDict) entry:exists? ] @: has?\\n    [ table entry:names map: [ $: record\\n        [\\n          record.name (31 ' ' lpad) (31 '...' fit)\\n          record.age toQuote (15 ' ' lpad) (15 '...' fit)\\n          (table record entry:fetch) toQuote (16 ' ' lpad) (16 '...' fit)\\n        ] vals sepBy: ' |'\\n      ] sepBy: '\\n'\\n    ] @: __quote__\\n  ]\\n] @: newScoreboard\\n\\nnewScoreboard $: scoreboard\\n\\n'John Doe' 42 '100 points' scoreboard.set\\n'Johnanna Doe' 28 '170 points' scoreboard.set\\n'Alice H.' 19 '250 points' scoreboard.set\\n'David A.' 67 '90 points' scoreboard.set\\n\\nscoreboard echo\\n\\n\\\"\\\"\\\"STDOUT:\\n                 John Doe |             42 |      100 points⏎\\n             Johnanna Doe |             28 |      170 points⏎\\n                 Alice H. |             19 |      250 points⏎\\n                 David A. |             67 |       90 points⏎\\n\\\"\\\"\\\"\\n\\n'John Doe' 42 scoreboard.get leaves: '100 points'\\n'Alice H.' 19 scoreboard.get leaves: '250 points'\\n\\n'David A.' 67 scoreboard.has? leaves: true\\n'David A.' 123 scoreboard.has? leaves: false\\n'Peter Peterson' 19 scoreboard.has? leaves: false\\n```\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  Boolean[store.has_form_for?(name)].onto(stack)\nend\ntarget.at(\"entry:fetch\", \"( Rs N -- F ): leaves the value Form with the given Name\\n in Readable store (usually a block). Does not open the\\n value form. Dies if Store does not contain an entry\\n for Name.\\n\\n```\\n[ 100 $: x 200 $: y ] obj $: a\\n\\na #x entry:fetch leaves: 100\\na #y entry:fetch leaves: 200\\na #a entry:fetch leaves: a \\\"via inheritance\\\"\\n```\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  (store.form_for(name)).onto(stack)\nend\ntarget.at(\"entry:fetch?\", \"( Rs N -- F true / false ): leaves value Form of the entry with\\n the given Name in Readable store (usually a block), follows it\\n with `true`. If there is no entry with the given name leaves\\n `false` only. Does not open the value form.\\n\\n```\\n[ 100 $: x ] obj toOrphan $: a\\n\\na #x entry:fetch? leaves: [ 100 true ]\\na #y entry:fetch? leaves: false\\n\\na ('Enter name> ' readLine not => okbye toWord) entry:fetch? br:\\n  [ 'Here is its value: ' _ ~ ]\\n  'Entry does not exist :('\\necho\\n```\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  if form = store.form_for?(name)\n    form.onto(stack)\n  end\n  Boolean[!(!form)].onto(stack)\nend\ntarget.at(\"entry:open\", \"( Rs C N -- ... ): resolves Name in Readable store and *opens*\\n it if it is an opener, assuming Caller to be the opener block.\") do |_, stack|\n  name = stack.drop.a(Word)\n  caller = stack.drop.a(Block)\n  store = stack.drop.a(IReadableStore)\n  if store.is_a?(Block)\n  else\n    form = store.form_for(name)\n    form.onto(stack)\n    next\n  end\n  entry = store.entry_for(name)\n  if entry.is_a?(OpenEntry)\n    caller.inject(Word.new(\"open\"))\n  end\n  entry.onto(stack)\nend\ntarget.at(\"entry:flatFetch?\", \"( B N -- F true / false ): leaves the value Form of the entry with the\\n given Name in Block's dictionary. Follows it by `true` if it exists.\\n Leaves only `false` if there is no such entry in Block. Block hierarchy\\n (friends, parents) is not traversed. This word only looks at Block's\\n own dictionary). Does not open the value Form.\\n\\n```\\n[ 100 $: x 200 $: y ] obj $: myParent\\n[ 'hello' $: x ] obj $: myChild\\n\\n(myParent -- myChild) drop\\n\\nmyParent #x entry:flatFetch? leaves: [ 100 true ]\\nmyParent #y entry:flatFetch? leaves: [ 200 true ]\\nmyChild #foobar entry:flatFetch? leaves: false\\n\\nmyChild #x entry:flatFetch? leaves: [ 'hello' true ]\\nmyChild #foobar entry:flatFetch? leaves: false\\n\\n\\\"Even though myChild is a child of myParent and has access to 'y',\\n `entry:flatFetch?` doesn't care.\\\"\\nmyChild #y entry:flatFetch? leaves: false \\\"doesn't inherit!\\\"\\n\\n\\\"Compare it with `entry:fetch?`:\\\"\\nmyChild #y entry:fetch? leaves: [ 200 true ]\\n```\") do |_, stack|\n  name = stack.drop\n  block = stack.drop.a(Block)\n  if form = block.flat_at?(name)\n    form.onto(stack)\n  end\n  Boolean[!(!form)].onto(stack)\nend\ntarget.at(\"entry:opener?\", \"( Rs N -- true/false ): leaves whether an entry with the given\\n Name is an opener entry in Readable store (usually a block).\\n Dies if Readable store has no entry with the given Name.\\n\\n```\\n[ 100 $: x ] obj toOrphan $: foo\\n\\nfoo #x entry:opener? leaves: false\\nfoo.x leaves: 100\\n\\n\\\"Change not only the value form for 'x' but also its type: make\\n it an opener.\\\"\\nfoo extend: [ [ 1 2 + ] @: x ]\\n\\nfoo #x entry:opener? leaves: true\\nfoo.x leaves: 3\\n```\") do |_, stack|\n  name = stack.drop\n  store = stack.drop.a(IReadableStore)\n  Boolean[store.opener?(name)].onto(stack)\nend\ntarget.at(\"entry:delete\", \"( B N -- ): removes the entry corresponding to Name form\\n from the dictionary of Block if it exists there. Otherwise,\\n does nothing.\\n\\n```\\n100 $: x\\n\\n[ 200 $: x ] obj $: foo\\n\\n\\\"'x' of foo shadows 'x' of toplevel block\\\"\\nfoo.x leaves: 200\\n\\n\\\"Let's try to remove it so it doesn't:\\\"\\nfoo #x entry:delete\\nfoo.x leaves: 100\\n```\") do |_, stack|\n  name = stack.drop\n  block = stack.drop.a(Block)\n  block.delete_entry(name)\nend\ntarget.at(\"entry:wipeout\", \"( B -- ): removes all *owned* dictionary entries in Block.\\n\\n```\\n[ 100 $: x\\n  200 $: y\\n] obj $: numbers\\n\\nnumbers entry:names leaves: [ [x y] ]\\n\\nnumbers entry:wipeout\\nnumbers entry:names leaves: [ [] ]\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.clear_entries\nend\ntarget.at(\"entry:pathTo?\", \"( B N -- P F true / false ): leaves Path, a block describing the\\n path to Form (including Block itself) under the corresponding\\n Name (like `entry:fetch?`). Follows Path and Form with `true`\\n indicating success, otherwise *only* `false` indicating that\\n there is no Form corresponding to Name in Block or any of the\\n blocks reachable from Block.\\n\\nThis word exists mainly for testing word lookup sanity. Feel free\\nto use it if you find any reason to!\\n\\n```\\n[ 100 $: x  'a' $: __quote__ ] obj $: a\\n[ 200 $: y  'b' $: __quote__ ] obj $: b\\n[ 300 $: z  'c' $: __quote__ ] obj $: c\\n\\na -- b -- c drop\\n\\n[ a #x entry:pathTo? ] vals sepBy: ' ' leaves: '[ a ] 100 true'\\n[ b #x entry:pathTo? ] vals sepBy: ' ' leaves: '[ b a ] 100 true'\\n[ c #x entry:pathTo? ] vals sepBy: ' ' leaves: '[ c b a ] 100 true'\\n\\n[ b #y entry:pathTo? ] vals sepBy: ' ' leaves: '[ b ] 200 true'\\n[ c #y entry:pathTo? ] vals sepBy: ' ' leaves: '[ c b ] 200 true'\\n\\n[ c #z entry:pathTo? ] vals sepBy: ' ' leaves: '[ c ] 300 true'\\n\\n[ c #foo entry:pathTo? ] vals sepBy: ' ' leaves: 'false'\\n```\") do |_, stack|\n  name = stack.drop\n  block = stack.drop.a(Block)\n  if result = block.path_to_entry?(name)\n  else\n    Boolean[false].onto(stack)\n    next\n  end\n  needle, path = result\n  path.onto(stack)\n  needle.onto(stack)\n  Boolean[true].onto(stack)\nend\ntarget.at(\"entry:names\", \"( B -- Nb ): gathers all *owned* dictionary entry names of Block\\n into Name block.\\n\\n```\\n[ 100 200 ${ x y } ] obj $: myParent\\n[ 300 $: z ] obj $: myChild\\n[ 'Hello World' $: greeting ] obj $: myFriend\\n\\nmyParent -- myChild drop\\nmyParent ·> myFriend drop\\nmyChild ·> myFriend drop \\\"for good measure :)\\\"\\n\\nmyParent entry:names leaves: [ [y x] ]\\nmyChild entry:names leaves: [ [z] ]\\nmyFriend entry:names leaves: [ [greeting] ]\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  result = Block.new\n  block.each_entry_name do |form|\n    result.add(form)\n  end\n  result.onto(stack)\nend\ntarget.at(\"entry:names*\", \"( B -- Nb ): gathers all dictionary entry names *reachable* from\\n Block to Name block. That is, gathers all entry names in Block,\\n Block's parents, Block's friends, and so on. Explores the entire\\n relative graph of Block.\\n\\nOrder is not guaranteed, and mainly depends on the appearance of\\nBlock's relative graph.\\n\\n```\\n[ 100 200 ${ x y } ] obj toOrphan $: myParent\\n[ 300 $: z ] obj toOrphan $: myChild\\n[ 'Hello World' $: greeting ] obj toOrphan $: myFriend\\n\\nmyParent -- myChild drop\\nmyParent ·> myFriend drop\\nmyChild ·> myFriend drop\\n\\nmyParent entry:names* leaves: [ [y x greeting] ]\\nmyChild entry:names* leaves: [ [z y x greeting] ]\\nmyFriend entry:names* leaves: [ [greeting] ]\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  names = [] of Form\n  leaf = false\n  block.each_relative_fetch do |relative|\n    relative.each_entry_name do |name|\n      names << name\n      if leaf\n        next\n      end\n      leaf = name.is_a?(Block)\n    end\n    nil\n  end\n  names.uniq!\n  (Block.with(names, leaf)).onto(stack)\nend\ntarget.at(\"entry:values\", \"( B -- Vb ): gathers all *owned* dictionary entry value forms of\\n Block into Value block.\\n\\n```\\n[ 100 200 ${ x y } ] obj $: myParent\\n[ 300 $: z ] obj $: myChild\\n[ 'Hello World' $: greeting ] obj $: myFriend\\n\\nmyParent -- myChild drop\\nmyParent ·> myFriend drop\\nmyChild ·> myFriend drop\\n\\nmyParent entry:values leaves: [ [200 100] ]\\nmyChild entry:values leaves: [ [300] ]\\nmyFriend entry:values leaves: [ ['Hello World'] ]\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  result = Block.new\n  block.each_entry_value do |form|\n    result.add(form)\n  end\n  result.onto(stack)\nend\ntarget.at(\"entry:values*\", \"( B -- Nb ): gathers all dictionary entry values *reachable* from\\n Block to Name block. That is, gathers all entry values in Block,\\n Block's parents, Block's friends, and so on. Explores the entire\\n relative graph of Block.\\n\\nOrder is not guaranteed, and mainly depends on the appearance\\nof Block's relative graph. Values may repeat if some blocks\\nin this graph define entries with the same name.\\n\\n```\\n[ 100 200 ${ x y } ] obj toOrphan $: myParent\\n[ 300 $: z ] obj toOrphan $: myChild\\n[ 'Hello World' $: greeting ] obj toOrphan $: myFriend\\n\\nmyParent -- myChild drop\\nmyParent ·> myFriend drop\\nmyChild ·> myFriend drop\\n\\nmyParent entry:values* leaves: [ [200 100 'Hello World'] ]\\nmyChild entry:values* leaves: [ [300 200 100 'Hello World'] ]\\nmyFriend entry:values* leaves: [ ['Hello World'] ]\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  values = [] of Form\n  leaf = false\n  block.each_relative_fetch do |relative|\n    relative.each_entry_value do |value|\n      values << value\n      if leaf\n        next\n      end\n      leaf = value.is_a?(Block)\n    end\n    nil\n  end\n  (Block.with(values, leaf)).onto(stack)\nend\ntarget.at(\"entry:count\", \"( B -- Ec ): leaves Entry count, that is, the amount of entries\\n owned by (defined in) Block.\\n\\n```\\n[ 100 200 ${ x y } ] obj $: myBlock\\n\\nmyBlock entry:count leaves: 2 \\\"'x' and 'y'\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  (Decimal.new(block.entry_count)).onto(stack)\nend\ntarget.at(\"shallowCopy\", \"( B -- C ): makes a shallow copy (sub-blocks are not copied)\\n of Block's tape and dictionary, and leaves a Copy block with\\n the tape copy, dictionary copy set as its tape, dictionary.\\n\\n```\\n[ 1 2 3 ] $: a\\na shallowCopy $: b\\na #x 0 pushes\\nb #y 1 pushes\\nb 1 shove\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n\\\"STDOUT: [ 1 2 3 1 · ${y :: 1} ]⏎\\\"\\n```\") do |_, stack|\n  (stack.drop.a(Block)).shallow.onto(stack)\nend\ntarget.at(\"resub\", \"( O B -- ): replaces the substrate of Block with Other's\\n substrate. This is useful if you want to swap Block's\\n contents with Other's without changing Block's identity:\\n\\n```\\n[ 1 2 3 ] $: a\\n[ 'a' 'b' 'c' ] $: b\\nb #x 0 pushes\\nb echo\\n\\\"STDOUT: [ 'a' 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\na b resub\\nb echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n```\\n\\nNote that since *substrate* is replaced, not *tape*, the\\ncursor position is saved:\\n\\n```\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n\\\"STDOUT: [ 'a' 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\nb 2 |-\\na b 2echo\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n\\\"STDOUT: [ 'a' | 'b' 'c' · ${x :: 0} ]⏎\\\"\\n\\na b resub\\nb echo\\n\\\"STDOUT: [ 1 | 2 3 · ${x :: 0} ]⏎\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  other = stack.drop.a(Block)\n  block.resub(other)\nend\ntarget.at(\"fromLeft\", \"( B/Q/Bf I -- E ): leaves Index-th Element from the left\\n in Block, Quote, or Byteslice form.\\n\\n```\\n[ 1 2 3 ] 0 fromLeft leaves: 1\\n```\") do |_, stack|\n  index = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(index.to_i)).onto(stack)\nend\ntarget.at(\"fromRight\", \"( B/Q/Bf I -- E ): leaves Index-th Element from the right\\n in Block, Quote, or Byteslice form.\\n\\n```\\n[ 1 2 3 ] 0 fromRight leaves: 3\\n[ 1 2 3 ] 1 fromRight leaves: 2\\n[ 1 2 3 ] 2 fromRight leaves: 1\\n```\") do |_, stack|\n  index = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at((form.count - index.to_i) - 1)).onto(stack)\nend\ntarget.at(\"fromLeft*\", \"( B/Q/Bf N -- Eb/Rq/Rbf ): leaves Elements block (if given\\n a Block), Result quote (if given a Quote), or Result\\n byteslice form (if given a Byteslice form) with N forms/\\n chars/bytes from left in Block/Quote/Byteslice form.\\n If N is larger than Block/Quote/Byteslice form count,\\n it is made equal to Block/Quote/Byteslice form count.\\n Dies if N is negative.\\n\\n```\\n[ 1 2 3 ] 1 fromLeft* leaves: [ [ 1 ] ]\\n[ 1 2 3 ] 2 fromLeft* leaves: [ [ 1 2 ] ]\\n[ 1 2 3 ] 3 fromLeft* leaves: [ [ 1 2 3 ] ]\\n[ 1 2 3 ] 100 fromLeft* leaves: [ [ 1 2 3 ] ]\\n'hello' 3 fromLeft* leaves: 'hel'\\n```\") do |_, stack|\n  size = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(0, size.to_i - 1)).onto(stack)\nend\ntarget.at(\"fromRight*\", \"( B/Q/Bf N -- Fb/Rq/Rbf ): leaves Elements block (if given\\n a Block), Result quote (if given a Quote), or Result\\n byteslice form (if given a Byteslice form) with N forms/\\n chars/bytes from right in Block/Quote/Byteslice form.\\n If N is larger than Block/Quote/Byteslice form count,\\n it is made equal to Block/Quote/Byteslice form count.\\n Dies if N is negative.\\n\\n```\\n[ 1 2 3 ] 1 fromRight* leaves: [ [ 3 ] ]\\n[ 1 2 3 ] 2 fromRight* leaves: [ [ 2 3 ] ]\\n[ 1 2 3 ] 3 fromRight* leaves: [ [ 1 2 3 ] ]\\n[ 1 2 3 ] 100 fromRight* leaves: [ [ 1 2 3 ] ]\\n```\") do |_, stack|\n  size = (stack.drop.a(Decimal)).posint\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (form.at(form.count - size.to_i, form.count - 1)).onto(stack)\nend\ntarget.at(\"+\", \"( A B -- S ): leaves the Sum of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a + b)\nend\ntarget.at(\"-\", \"( A B -- D ): leaves the Difference of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a - b)\nend\ntarget.at(\"*\", \"( A B -- P ): leaves the Product of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a * b)\nend\ntarget.at(\"/\", \"( A B -- Q ): leaves the Quotient of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  if b.zero?\n    b.die(\"division by zero\")\n  end\n  stack.add(a / b)\nend\ntarget.at(\"mod\", \"( A B -- M ): leaves the Modulo of two decimals.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  if b.zero?\n    b.die(\"modulo by zero\")\n  end\n  stack.add(a % b)\nend\ntarget.at(\"**\", \"( A B -- R ): raises A to the power B, leaves Result.\") do |_, stack|\n  b = stack.drop.a(Decimal)\n  a = stack.drop.a(Decimal)\n  stack.add(a ** b)\nend\ntarget.at(\"round\", \"( D -- Rd ): rounds Decimal towards the nearest integer,\\n leaves the corresoinding Rounded decimal. If both neighboring\\n integers are equidistant, rounds towards the even neighbor\\n (Banker's rounding).\\n\\n```\\n1 round leaves: 1\\n1.23 round leaves: 1\\n\\n1.5 round leaves: 2\\n1.67 round leaves: 2\\n\\n2.5 round leaves: 2 \\\"rounds towards the even neighbor\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.round.onto(stack)\nend\ntarget.at(\"floor\", \"( D -- Rd ): rounds Decimal *down* towards the nearest integer,\\n leaves the corresoinding Rounded decimal.\\n\\n```\\n1 floor leaves: 1\\n1.23 floor leaves: 1\\n\\n1.5 floor leaves: 1\\n1.67 floor leaves: 1\\n\\n2.5 floor leaves: 2\\n\\n-2.5 floor leaves: -3 \\\"rounds down!\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.floor.onto(stack)\nend\ntarget.at(\"ceil\", \"( D -- Rd ): rounds Decimal *up* towards the nearest integer,\\n leaves the corresoinding Rounded decimal.\\n\\n```\\n1 ceil leaves: 1\\n1.23 ceil leaves: 2\\n\\n1.5 ceil leaves: 2\\n1.67 ceil leaves: 2\\n\\n2.5 ceil leaves: 3\\n\\n-2.5 ceil leaves: -2 \\\"rounds up!\\\"\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.ceil.onto(stack)\nend\ntarget.at(\"trunc\", \"( D -- Rd ): rounds Decimal towards zero, leaves the resulting\\n Rounded decimal.\\n\\n```\\n1 trunc leaves: 1\\n1.23 trunc leaves: 1\\n1.5 trunc leaves: 1\\n1.67 trunc leaves: 1\\n2.5 trunc leaves: 2\\n\\n-2.3 trunc leaves:  -2\\n```\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.trunc.onto(stack)\nend\ntarget.at(\"sqrt\", \"( D -- R ): leaves the square Root of Decimal.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.sqrt.onto(stack)\nend\ntarget.at(\"cos\", \"( Air -- Dc ): leaves Decimal cosine of Angle in radians.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.rad_cos.onto(stack)\nend\ntarget.at(\"sin\", \"( Air -- Ds ): leaves Decimal sine of Angle in radians.\") do |_, stack|\n  decimal = stack.drop.a(Decimal)\n  decimal.rad_sin.onto(stack)\nend\ntarget.at(\"rand\", \"( -- Rd ): leaves a Random decimal between 0 and 1.\") do |_, stack|\n  (Decimal.new(rand)).onto(stack)\nend\ntarget.at(\"sliceQuoteAt\", \"( Q Sp -- Pb Pa ): for the given Quote, leaves the Part\\n before and Part after Slice point.\\n\\n```\\n'hello world' 2 sliceQuoteAt leaves: [ 'he' 'llo world' ]\\n```\") do |_, stack|\n  spt = stack.drop.a(Decimal)\n  quote = stack.drop.a(Quote)\n  qpre, qpost = quote.slice_at(spt.to_i)\n  qpre.onto(stack)\n  qpost.onto(stack)\nend\ntarget.at(\"count\", \"( B/Q/Bf -- N ): leaves N, the amount of elements/graphemes/\\n bytes in Block/Quote/Byteslice form.\") do |_, stack|\n  form = stack.drop.a((Block | Quote) | Byteslice)\n  (Decimal.new(form.count)).onto(stack)\nend\ntarget.at(\"chr\", \"( Uc -- Q ): leaves a quote that consists of a single\\n character with the given Unicode codepoint.\") do |_, stack|\n  ord = (stack.drop.a(Decimal)).posint.in(0..55295, 57344..1114111)\n  (Quote.new(ord.chr)).onto(stack)\nend\ntarget.at(\"ord\", \"( Q -- Uc ): leaves the Unicode codepoint for the first\\n character in Quote. Dies if Quote is empty.\") do |_, stack|\n  quote = stack.drop.a(Quote)\n  if ord = quote.ord?\n  else\n    quote.die(\"ord: quote must contain at least one character\")\n  end\n  (Decimal.new(ord)).onto(stack)\nend\ntarget.at(\"lpad\", \"( Q Tl Pq -- Jq ): appends consecutive characters from Padding quote\\n (the last one is repeated if no more follow) to the left of Quote,\\n until Quote count becomes equal to Total length. Leaves the resulting\\n Justified quote. If Quote count is greater than or equal to Total\\n length, Quote is left unchanged as the Justified quote.\\n\\n```\\n'hello' 10 '-' lpad leaves: '-----hello'\\n'hello' 10 ':-' lpad leaves: ':----hello'\\n'hello' 7 'XYZABC' lpad leaves: 'XYhello'\\n'hello' 9 'XYZABC' lpad leaves: 'XYZAhello'\\n```\") do |_, stack|\n  padder = stack.drop.a(Quote)\n  total = (stack.drop.a(Decimal)).posint\n  quote = stack.drop.a(Quote)\n  (quote.pad(total.to_i, padder, side: Quote::PadSide::Left)).onto(stack)\nend\ntarget.at(\"rpad\", \"( Q Tl Pq -- Jq ): appends consecutive characters from Padding quote\\n (the last one is repeated if no more follow) to the right of Quote,\\n until Quote count becomes equal to Total length. Leaves the resulting\\n Justified quote. If Quote count is greater than or equal to Total\\n length, Quote is left unchanged as the Justified quote.\\n\\n```\\n'hello' 10 '-' rpad leaves: 'hello-----'\\n'hello' 10 ' -' rpad leaves: 'hello ----'\\n'hello' 7 'foobar' rpad leaves: 'hellofo'\\n```\") do |_, stack|\n  padder = stack.drop.a(Quote)\n  total = (stack.drop.a(Decimal)).posint\n  quote = stack.drop.a(Quote)\n  (quote.pad(total.to_i, padder, side: Quote::PadSide::Right)).onto(stack)\nend\ntarget.at(\"fit\", \"( Q Tl Eq -- Fq ): if Quote is longer than Total length, truncates\\n it so that it can fit Ellipsis quote, and stitches the truncated\\n Quote with the Ellipsis quote, forming Fit quote which is then\\n left on the stack.\\n\\nEssentially, Fit quote is guaranteed to be of Total length\\ncharacters **or less!**.\\n\\n```\\n'hello' 10 '…' fit leaves: 'hello'\\n'hello world' 10 '…' fit leaves: 'hello wor…'\\n'hello world' 8 '' fit leaves: 'hello wo'\\n'Lorem ipsum dolor sit amet' 10 '-' fit leaves: 'Lorem ipsu-'\\n'Lorem ipsum dolor sit amet' 24 '… (hidden)' fit leaves: 'Lorem ipsum do… (hidden)'\\n```\") do |_, stack|\n  ellipsis = stack.drop.a(Quote)\n  total = (stack.drop.a(Decimal)).posint\n  quote = stack.drop.a(Quote)\n  (quote.fit(total.to_i, ellipsis)).onto(stack)\nend\ntarget.at(\"|at\", \"( B -- N ): leaves N, the position of the cursor in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  cursor = Decimal.new(block.cursor)\n  cursor.onto(stack)\nend\ntarget.at(\"|to\", \"( B N -- ): moves the cursor in Block to N.\") do |_, stack|\n  cursor = stack.drop.a(Decimal)\n  block = stack.drop.a(Block)\n  block.to(cursor.to_i)\nend\ntarget.at(\"<|\", \"( -- ): moves stack cursor once to the left.\") do |_, stack|\n  stack.to(stack.cursor - 1)\nend\ntarget.at(\"|>\", \"( -- ): moves stack cursor once to the left.\") do |_, stack|\n  stack.to(stack.cursor + 1)\nend\ntarget.at(\"|slice\", \"( B -- Lh Rh ): slices Block at cursor. Leaves Left half\\n and Right half.\") do |_, stack|\n  block = stack.drop.a(Block)\n  lhs, rhs = block.slice\n  lhs.onto(stack)\n  rhs.onto(stack)\nend\ntarget.at(\"cherry\", \"( [ ... E | ... ]B ~> [ ... | ... ]B -- E ): drops Block\\n and Element before cursor in Block (and moves cursor back\\n once), leaves Element.\") do |_, stack|\n  (stack.drop.a(Block)).drop.onto(stack)\nend\ntarget.at(\"shove\", \"( [ ... | ... ]B E ~> [ ... E | ... ]B -- ): adds Element\\n before cursor in Block (and moves cursor forward once),\\n drops both.\") do |_, stack|\n  stack.drop.onto(stack.drop.a(Block))\nend\ntarget.at(\"shove*\", \"( [ ...bl | ...br ]B [ ...el | ...er ]Eb ~> [ ...bl ...el | ...br ]B -- ): adds\\n elements before cursor in Element block after the cursor in Block.\\n\\n```\\n[ 1 2 3 ] $: xs\\nxs [ 4 5 6 ] shove*\\nxs leaves: [ [ 1 2 3 4 5 6 \\\"|\\\" ] ]\\n\\n[ 1 | 2 3 ] $: ys\\nys [ 100 200 300 ] shove*\\nys leaves: [ 1 100 200 300 | 2 3 ]\\n```\") do |_, stack|\n  elems = stack.drop.a(Block)\n  block = stack.drop.a(Block)\n  block.paste(elems)\nend\ntarget.at(\"eject\", \"( [ ... | F ... ]B ~> [ ... | ... ]B -- F ): drops and\\n leaves the Form after cursor in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = block.eject\n  form.onto(stack)\nend\ntarget.at(\"inject\", \"( B F -- ): inserts Form to Block: adds Form to Block,\\n and moves cursor back again.\") do |_, stack|\n  form = stack.drop\n  block = stack.drop.a(Block)\n  block.inject(form)\nend\ntarget.at(\"thru\", \"( [ ... | F ... ] -> [ ... F | ... ] -- F ): moves cursor\\n after Form, and leaves Form. Dies if cursor is at the end.\\n\\nNote: prefer `thru` to `eject` because `eject` modifies\\nthe block, and that may cause a tape copy which uses up\\na bit of memory and resources. The difference would matter\\nonly in high load scenarios, though.\\n\\nNote: anything that *does not* `ahead inject` will be OK\\nwith `ahead thru`. And even if it does `ahead inject`,\\nstill, there are ways to overcome the problems from not\\n`ahead eject`ing.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.thru.onto(stack)\nend\ntarget.at(\"thruBlock\", \"( B -- Bf / [ Vf ] ): similar to `thru` for Block. If\\n form after cursor is a Block form, it is left. If it is\\n a Value form, then it is enclosed in a new block whose\\n parent is Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  form = block.thru\n  if form.is_a?(Block)\n    form.onto(stack)\n  else\n    child = Block.new(block)\n    child.add(form)\n    child.onto(stack)\n  end\nend\ntarget.at(\"top\", \"( [ ... F | ... ]B -- F ): leaves the top Form in Block.\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.top.onto(stack)\nend\ntarget.at(\"mergeDicts\", \"( Rb Db -- ): copies entries from Donor block's dictionary\\n to Recipient block's dictionary. Donor entries override\\n same-named entries in Recipient. Donor entries starting\\n with one or more underscores are not imported.\\n\\n```\\n[ ] $: a\\na #x 100 pushes\\na #_private 'Fool!' pushes\\n[ ] $: b\\nb #y 200 pushes\\n\\na b 2echo\\n\\\"STDOUT: [ · ${x :: 100} ${_private :: 'Fool!'} ]⏎\\\"\\n\\\"STDOUT: [ · ${y :: 200} ]⏎\\\"\\n\\nb a mergeDicts\\nb echo\\n\\\"STDOUT: [ · ${y :: 200} ${x :: 100} ]⏎\\\"\\n```\") do |_, stack|\n  donor = stack.drop.a(Block)\n  recpt = stack.drop.a(Block)\n  recpt.import!(from: donor)\nend\ntarget.at(\"sortUsing!\", \"( B Cb -- B ): leaves Block sorted inplace. Forms in Block\\n are compared using Comparator block.\\n\\nComparator block is opened with two forms on the stack; let's\\ncall them A and B. If Comparator block leaves a negative decimal\\n(conventionally `-1`), then `A < B`. If Comparator block leaves\\n`0`, then `A = B`. If Comparator block leaves a positive decimal\\n(conventionally `1`), then `A > B`.\\n\\nDies if Comparator block leaves any other (kind of) form.\\n\\nIgnores all forms but the topmost for Comparator block.\\n\\n\\n```\\n[ 3 2 1 ] [ - ] sortUsing! leaves: [ 1 2 3 ]\\n```\") do |_, stack|\n  cmp = stack.drop.a(Block)\n  block = stack.top.a(Block)\n  block.sort_using! do |a, b|\n    stack = Block.with(a, b)\n    ((Engine.exhaust(Engine.current.capabilities, cmp, stack)).top.a(Decimal)).to_i\n  end\nend\ntarget.at(\"getErrorDetails\", \"( Eo -- Dq ): leaves Details quote containing error details\\n of an Error object.\") do |_, stack|\n  error = stack.drop.a(Error)\n  (Quote.new(error.details)).onto(stack)\nend\ntarget.at(\"toQuote\", \"( F -- Qr ): leaves Quote representation of Form.\") do |_, stack|\n  stack.drop.to_quote.onto(stack)\nend\ntarget.at(\"toByteslice\", \"( Q -- B ): leaves immutable Byteslice for Quote.\") do |_, stack|\n  (stack.drop.a(Quote)).to_byteslice.onto(stack)\nend\ntarget.at(\"replaceAll\", \"( Sq Pq Q -- Rq ): replaces all instances of Pattern quote\\n in Source quote with Quote. Leaves the Resulting quote.\\n\\n```\\n'hello' 'l' 'y' replaceAll leaves: 'heyyo'\\n```\") do |_, stack|\n  repl = stack.drop.a(Quote)\n  pattern = stack.drop.a(Quote)\n  quote = stack.drop.a(Quote)\n  (quote.replace_all(pattern, repl)).onto(stack)\nend\ntarget.at(\"effect\", \"( F -- Eq ): leaves Effect quote for Form.\\n\\nIf Form is not a block nor a builtin, it is simply converted\\nto quote in the same way as `toQuote`.\\n\\nIf Form is a block or a builtin, an attempt is made at\\nextracting a stack effect expression from its comment.\\nIf the attempt fails, Form's description is left. If the\\nattempt was successful, the extracted stack effect quote\\nis added onto the stack as Effect quote.\\n\\n```\\n100 effect leaves: '100'\\ntrue effect leaves: 'true'\\n\\n[] effect leaves: 'a block'\\n[ \\\"Hello World\\\" ] effect leaves: 'a block'\\n[ \\\"( -- ) \\\"] effect leaves: '( -- )'\\n\\n#+ here effect leaves: '( A B -- S )' \\\"(yours may differ)\\\"\\n#map: here effect leaves: '( Lb B -- MLb )'\\n```\") do |_, stack|\n  (Quote.new(stack.drop.effect)).onto(stack)\nend\ntarget.at(\"die\", \"( D/Eo -- ): dies with Details quote/Error object.\") do |engine, stack|\n  form = stack.drop.a(Quote | Error)\n  case form\n  in Quote\n    raise(engine.die(form.string))\n  in Error\n    raise(form)\n  end\nend\ntarget.at(\"stitch\", \"( Q1 Q2 -- Q3 ): quote concatenation.\") do |_, stack|\n  b = stack.drop.a(Quote)\n  a = stack.drop.a(Quote)\n  stack.add(a.stitch(b))\nend\ntarget.at(\"reparent\", \"( C P -- C ): changes the parent of Child to Parent. Lookup\\n cycles are allowed and handled gracefully.\") do |_, stack|\n  parent = stack.drop.a(Block)\n  child = stack.top.a(Block)\n  child.parent = parent\nend\ntarget.at(\"befriend\", \"( B F -- ): adds Friend to Block's friend list.\\n\\nFriends are asked for word entries after parents, grandparents\\netc. have failed to retrieve them. This recurses, e.g. friends\\nask their own friends and so on, until the entry is found. Lookup\\ncycles are allowed and handled gracefully.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\nb a befriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\n\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\n\\nb.x echo\\n\\\"STDOUT: 100⏎\\\"\\n\\nb.y echo\\n\\\"STDOUT: 200⏎\\\"\\n\\na #x [ 'I\\\\'ve changed!' echo ] opens\\n\\na.x\\n\\\"STDOUT: I've changed!⏎\\\"\\nb.x\\n\\\"STDOUT: I've changed!⏎\\\"\\n```\") do |_, stack|\n  friend = stack.drop.a(Block)\n  block = stack.drop.a(Block)\n  block.befriend(friend)\nend\ntarget.at(\"unfriend\", \"( B F -- ): removes Friend from Block's friend list. Does\\n nothing if Friend is not in the friend list. See `befriend`.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\na b unfriend\\na.x echo\\n\\\"STDOUT: 100⏎\\\"\\na.y echo\\n\\\"Sorry: no value form found for 'y'.\\\"\\n```\") do |_, stack|\n  friend = stack.drop.a(Block)\n  source = stack.drop.a(Block)\n  source.unfriend(friend)\nend\ntarget.at(\"friends\", \"( B -- Fl ): leaves Friend list of Block. See `befriend`.\\n\\n```\\n[ 100 $: x this ] open $: a\\n[ 200 $: y this ] open $: b\\na b befriend\\na friends count echo\\n\\\"STDOUT: 1⏎\\\"\\na friends first b same? echo\\n\\\"STDOUT: true⏎\\\"\\na.y echo\\n\\\"STDOUT: 200⏎\\\"\\na friends [ drop ] hydrate\\na friends count echo\\n\\\"STDOUT: 0⏎\\\"\\na.y echo\\n\\\"Sorry: no value form found for 'y'.\\\"\\n```\") do |_, stack|\n  source = stack.drop.a(Block)\n  source.friends.onto(stack)\nend\ntarget.at(\"slurp\", \"( B Q -- B ): parses Quote and adds all forms from Quote\\n to Block.\") do |_, stack|\n  source = stack.drop.a(Quote)\n  block = stack.top.a(Block)\n  block.slurp(source.string)\nend\ntarget.at(\"orphan\", \"( -- O ): Leaves an Orphan (a parent-less block).\") do |_, stack|\n  Block.new.onto(stack)\nend\ntarget.at(\"orphan?\", \"( B -- true/false ): leaves whether Block is an orphan\") do |_, stack|\n  Boolean[!(stack.drop.a(Block)).parent?].onto(stack)\nend\ntarget.at(\"toOrphan\", \"( B -- B ): makes Block an orphan (destroys the link with\\n its parent).\\n\\n```\\n0 $: x\\n[ ] $: b\\nb . x echo\\n\\\"STDOUT: 0⏎\\\"\\n\\nb toOrphan leaves: [ [ ] ]\\n. x\\n\\\"Sorry: no value form found for 'x'\\\"\\\"\\n```\") do |_, stack|\n  (stack.top.a(Block)).parent = nil\nend\ntarget.at(\"toTape\", \"( B -- Tb ): leaves Tape block for Block, i.e., the tape part\\n of Block. Useful for e.g. comparing two blocks only for tape\\n content, when Block may have dictionary entries.\\n\\nLookup hierarchy is destroyed: Tape block is an orphan.\\n\\n```\\n[ 1 2 3 ] $: a\\na #x 0 pushes\\na (a toTape) 2echo\\n\\\"STDOUT: [ 1 2 3 · ${x :: 0} ]⏎\\\"\\n\\\"STDOUT: [ 1 2 3 ]⏎\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.to_tape_block.onto(stack)\nend\ntarget.at(\"toDict\", \"( B -- Db ): leaves Dictionary block for Block, i.e., the dictionary\\n part of Block. Useful for e.g. comparing two blocks only for dictionary\\n content in case tape contents differ.\\n\\nLookup hierarchy is destroyed: Dictionary block is an orphan.\\n\\n```\\n[ ${ x y } this ] @: createPoint\\n\\n10 20 createPoint $: a\\n10 20 createPoint $: b\\n\\na b = leaves: false\\n\\n\\\"And not for the reason you might think of. Their TAPES are not\\n equal; `a` and `b` are not only objects, they are also pieces\\n of code that led to each one's creation (sort of).\\\"\\na toQuote leaves: '[ ${ x y } this · ${x :: 10} ${y :: 20} ]'\\nb toQuote leaves: '[ ${ x y } this · ${x :: 10} ${y :: 20} ]'\\n\\n\\\"Let's strip the code using toDict:\\\"\\na toDict leaves: '[ · ${x :: 10} ${y :: 20} ]'\\nb toDict leaves: '[ · ${x :: 10} ${y :: 20} ]'\\n       = leaves: true \\\"< now they're equal\\\"\\n```\") do |_, stack|\n  block = stack.drop.a(Block)\n  block.to_dict_block.onto(stack)\nend\ntarget.at(\"desc\", \"( F -- Dq ): leaves the Description quote of the given Form.\\n\\n```\\n100 desc leaves: 'decimal number 100'\\n'foobar' desc leaves: 'quote \\\\\\\\'foobar\\\\\\\\''\\n[ 1 2 3 ] desc leaves: 'a block'\\n[ \\\"I am a block\\\" 1 2 3 ] desc leaves: 'I am a block'\\ntrue desc leaves: 'boolean true'\\n```\") do |_, stack|\n  quote = Quote.new(stack.drop.desc)\n  quote.onto(stack)\nend\ntarget.at(\"typedesc\", \"( F -- Dq ): leaves the type Description quote of the\\n given Form.\\n\\n```\\n100 typedesc leaves: 'decimal'\\n'foobar' typedesc leaves: 'quote'\\n[ 1 2 3 ] typedesc leaves: 'block'\\n[ \\\"I am a block\\\" 1 2 3 ] typedesc leaves: 'block'\\ntrue typedesc leaves: 'boolean'\\n```\") do |_, stack|\n  quote = Quote.new(stack.drop.class.typedesc)\n  quote.onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/FFI","path":"Novika/Capabilities/Impl/FFI.html","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"ffi\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes words for working with foreign functions, structs, and unions\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/ffi.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"ffi:library?\", \"( F -- true/false ): leaves whether Form is a foreign\\n library form.\\n\\n```\\n'foo' ffi:getLibrary ffi:library? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(Library)].onto(stack)\nend\ntarget.at(\"ffi:layout?\", \"( F -- true/false ): leaves whether Form is a foreign\\n layout form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:layout? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(StructLayoutForm)].onto(stack)\nend\ntarget.at(\"ffi:struct&?\", \"( F -- true/false ): leaves whether Form is a struct\\n reference view form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct& $: point&\\npoint& ffi:struct&? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.reference?)].onto(stack)\nend\ntarget.at(\"ffi:struct~?\", \"( F -- true/false ): leaves whether Form is an inline\\n struct view form.\\n\\n```\\n[ x i32 y i32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct~ $: point~\\npoint~ ffi:struct~? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.inline?)].onto(stack)\nend\ntarget.at(\"ffi:union?\", \"( F -- true/false ): leaves whether Form is a union\\n view form.\\n\\n```\\n[ chr char ord u8 ] ffi:createLayout $: quux\\n\\nquux ffi:allocateUnion $: quuxU\\nquuxU ffi:union? leaves: true\\n```\") do |_, stack|\n  Boolean[(stack.drop.as?(StructViewForm)).try(&.union?)].onto(stack)\nend\ntarget.at(\"ffi:hole?\", \"( F -- true/false ): leaves whether Form is a hole.\\n\\n```\\n#i32 ffi:hole $: intHole\\n\\nintHole ffi:hole? leaves: true\\n```\") do |_, stack|\n  Boolean[stack.drop.is_a?(Hole)].onto(stack)\nend\ntarget.at(\"ffi:getLibrary?\", \"( I -- Lf true / false ): leaves Library form followed by true\\n if dynamic library with the given Id exists and was loaded &\\n retrieved successfully; otherwise, leaves false.\\n\\nOpening Library form allows one to expose functions from the\\nunderlying dynamic library (.so on Linux, .dll on Windows,\\n.dylib on Mac). See FFI documentation on GitHub Wiki for more\\ndetails and examples.\\n\\n```\\n'SDL2' ffi:getLibrary? leaves: [ \\\"[foreign library]\\\" true ]\\n'random-nonexisting-library' ffi:getLibrary? leaves: false\\n```\") do |engine, stack|\n  id = stack.drop.a(Quote)\n  if library = engine.capabilities.load_library?(id.string)\n    library.onto(stack)\n  end\n  Boolean[!(!library)].onto(stack)\nend\ntarget.at(\"ffi:getLibrary\", \"( I -- Lf ): leaves Library form if dynamic library with the\\n given Id exists and was loaded & retrieved successfully;\\n otherwise, dies.\\n\\nOpening Library form allows one to expose functions from the\\nunderlying dynamic library (.so on Linux, .dll on Windows,\\n.dylib on Mac). See FFI documentation on GitHub Wiki for more\\ndetails and examples.\\n\\n```\\n'SDL2' ffi:getLibrary ffi:library? leaves: true\\n'random-nonexisting-library' ffi:getLibrary \\\"Dies: no such library\\\"\\n```\") do |engine, stack|\n  id = stack.drop.a(Quote)\n  if library = engine.capabilities.load_library?(id.string)\n  else\n    id.die(\"no such library\")\n  end\n  library.onto(stack)\nend\ntarget.at(\"ffi:createLayout\", \"( Lb -- Slf ): parses Layout block and leaves the resulting\\n Struct layout form.\\n\\nStruct layouts are a generalization over structs (heap-\\nallocated and stack-allocated) and unions. They literally\\ndescribe how structs (unions) are layed out in memory.\\n\\nLayout block consists of *name words followed by type words*.\\nSee the example below. A reference to another struct layout\\ncan be made in Layout block using the prefixes `&` (heap-\\nallocated struct, i.e., pointer to struct), `~` (inline or\\nstack-allocated struct), and `?` (stack-allocated union).\\n\\nInline struct cycles are forbidden. Union cycles are forbidden.\\nEither could be hidden behind a reference/pointer.\\n\\nLayout block is parsed lazily (on first use, e.g., by `toQuote`,\\n`allocateStruct` variants, `=`, etc.) Therefore, you can define\\nself-referential structs, mutually referential structs, and\\nreference layouts that are defined later.\\n\\nSee FFI documentation on GitHub Wiki for a list of available\\ntypes and the corresponding C types.\\n\\n```\\n[ x f32\\n  y f32\\n] ffi:createLayout $: point\\n\\n[ datum ~point    \\\"<- inline struct\\\"\\n  next &pointNode \\\"<- struct reference\\\"\\n] ffi:createLayout $: pointNode\\n\\n[ asPoint &point\\n  asPointNode ~pointNode\\n] ffi:createLayout $: pointNodeUnion\\n\\n[ type u8\\n  value ?pointNodeUnion \\\"<- stack-allocated union\\\"\\n] ffi:createLayout $: pointNodeOrPoint\\n```\") do |engine, stack|\n  decl = stack.drop.a(Block)\n  this = engine.block\n  names = [] of Word\n  types = [] of Word\n  cur, nxt = names, types\n  decl.each do |form|\n    if form.is_a?(Word)\n    else\n      form.die(\"only words (for field name and for field type) are allowed in struct layout declaration\")\n    end\n    cur << form\n    cur, nxt = nxt, cur\n  end\n  if names.size == types.size\n  else\n    decl.die(\"malformed struct layout: missing field name or type\")\n  end\n  if names.empty?\n    decl.die(\"struct layout must have at least one field\")\n  end\n  (StructLayoutForm.new(this, names, types, decl.prototype.comment?)).onto(stack)\nend\n{% for method, desc in {inline: {\"~\", :InlineStruct, \"Isv\", \"Inline struct\"}, reference: {\"&\", :StructReference, \"Srv\", \"Struct reference\"}} %}\n\n        {% sign, cls, ann, qual = desc %}\n\n        target.at(\"ffi:allocateStruct{{ sign.id }}\", <<-END\n        ( Slf -- {{ ann.id }} ): allocates {{ qual.id }} view for the\n         given Struct layout form. If the struct is no longer in\n         use, it is freed by the GC automatically.\n\n        This word is **unsafe**: the resulting {{ qual.id }} view is\n        in an undefined state (may contain junk) before you (or the\n        C code you pass it to) fills it with good values. Showing\n        the struct view left by this word to clients may expose your\n        program to a whole class of security vulnerabilities.\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        point ffi:allocateStruct{{ sign.id }} $: point{{ sign.id }}\n        point{{ sign.id }} #x 123 entry:submit\n        point{{ sign.id }} #y 456 entry:submit\n        point{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=123_i32, y=456_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          form = stack.drop.a(StructLayoutForm)\n          view = form.layout.{{ method.id }}.make!\n          StructViewForm.new(view).onto(stack)\n        end\n\n        target.at(\"ffi:buildStruct{{ sign.id }}\", <<-END\n        ( Eb Slf -- {{ ann.id }} ): allocates and fills {{ qual.id }}\n         view with entries by asking Entry block for them.\n\n        If Entry block is missing an entry matching a field that\n        Struct layout form declares, and that field is of type\n        `pointer` or struct reference (`&`), `none` (C nullptr)\n        is used as the value. Dies if Entry block is missing\n        matching entry or entries for fields of other types.\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        100 $: x\n        200 $: y\n\n        \"Note: `this` has entries called `x` and `y`. `point` has\n         fields called `x` and `y`. A match!\"\n        this point ffi:buildStruct{{ sign.id }} $: point{{ sign.id }}\n\n        point{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=100_i32, y=200_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          layout_form = stack.drop.a(StructLayoutForm)\n          block = stack.drop.a(Block)\n          layout = layout_form.layout\n          view = layout.{{ method.id }}.make!\n          layout.each_desc_with_index do |desc|\n            entry = block.entry_for? Word.new(desc.id)\n            if entry\n              entry_stack = Engine.exhaust(capabilities, entry)\n              view[desc.id] = desc.type.from(entry_stack.top)\n            elsif desc.type.is_a?(Novika::FFI::UntypedPointer.class) || desc.type.is_a?(Novika::FFI::StructReferenceType)\n              view[desc.id] = Novika::FFI::UntypedPointer.none\n            else\n              block.die(\n                \"block is missing field '#{desc.id}'. Note that none (C nullptr) \\\n                 as default value is only supported for untyped pointers (`pointer`) \\\n                 and struct references (`&name`)\")\n            end\n          end\n          StructViewForm.new(view).onto(stack)\n        end\n\n        target.at(\"ffi:asStruct{{ sign.id }}\", <<-END\n        ( A Slf -- {{ ann.id }} ): creates and leaves {{ qual.id }} view\n         for the given Address, according to Struct layout form.\n\n        This word is **unsafe**: it does not check whether Address\n        points at something that is layed out according to Struct\n        layout form. Passing 0 (none aka null pointer) for Address\n        will lead to segfault. Passing Address that is outside of\n        your program's memory will lead to segfault. Passing Address\n        that *is* in the bounds of your program's memory, but one\n        not pointing at a struct in accordance with Struct layout\n        form, will lead to undefined behavior (most likely junk\n        values in {{ qual.id }} view).\n\n        ```\n        [ x i32 y i32 ] ffi:createLayout $: point\n\n        100 $: x\n        200 $: y\n        this point ffi:buildStruct{{ sign.id }} $: point{{ sign.id }}\n\n        point{{ sign.id }} ffi:addressof $: addr\n\n        addr point ffi:asStruct{{ sign.id }} $: addrPoint{{ sign.id }}\n        addrPoint{{ sign.id }}.x leaves: x\n        addrPoint{{ sign.id }}.y leaves: y\n        addrPoint{{ sign.id }} toQuote leaves: '{{ sign.id }}⟨x=100_i32, y=200_i32⟩'\n        ```\n        END\n        ) do |_, stack|\n          layout_form = stack.drop.a(StructLayoutForm)\n          pointer = stack.drop.a(Decimal)\n          view = Novika::FFI::{{ cls.id }}View.new(layout_form.layout, Pointer(Void).new(pointer.to_u64))\n          StructViewForm.new(view).onto(stack)\n        end\n      {% end %}\ntarget.at(\"ffi:allocateUnion\", \"( Slf -- Uv ): allocates Union view for the given Struct\\n layout form.\\n\\nThis word is **unsafe**: the resulting Union view is in\\nan undefined (uninitialized) state (may be zeroed out,\\ncontain junk, or both) before you (or the C code you pass\\nit to) fills it with good values. Showing the uninitialized\\nunion to clients may expose your program to a whole class\\nof security vulnerabilities.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\nquux ffi:allocateUnion $: quuxUnion\\nquuxUnion #chr 'A' entry:submit\\nquuxUnion.ord leaves: 65\\n\\n\\\"Union toQuote avoids printing values, because that could\\n cause a segfault/overflow in some cases, and would mostly\\n output junk anyway.\\\"\\nquuxUnion toQuote leaves: '(⋃ ⟪chr=char, ord=u8⟫)'\\n```\") do |_, stack|\n  form = stack.drop.a(StructLayoutForm)\n  view = form.layout.union.make!\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:buildUnion\", \"( Eb Slf -- Uv ): allocates and fills Union view with an\\n entry by asking Entry block for any *one* entry out of\\n those specified in Struct layout form, in the order they\\n are specified in Struct layout form. If the union is no\\n longer in use, it is freed by the GC automatically.\\n\\nEntry block must have at least one of the Struct layout\\nform's fields defined. Otherwise, this word dies.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\n[ 'A' $: chr\\n  this quux ffi:buildUnion\\n] val $: unionByChr\\n\\n[ 66 $: ord\\n  this quux ffi:buildUnion\\n] val $: unionByOrd\\n\\n[ 'A' $: chr\\n  123 $: ord\\n  this quux ffi:buildUnion\\n] val $: unionBoth\\n\\nunionByChr.ord leaves: 65\\nunionByOrd.chr leaves: 'B'\\n\\n\\\"'chr' is defined first, therefore, it is used rather\\n than 'ord'\\\"\\nunionBoth.chr leaves: 'A'\\nunionBoth.ord leaves: 65\\n```\") do |_, stack|\n  form = stack.drop.a(StructLayoutForm)\n  block = stack.drop.a(Block)\n  layout = form.layout\n  view = layout.union.make!\n  had_entry = false\n  layout.each_desc_with_index do |desc|\n    entry = block.entry_for?(Word.new(desc.id))\n    if entry\n      entry_stack = Engine.exhaust(capabilities, entry)\n      view[desc.id] = desc.type.from(entry_stack.top)\n      had_entry = true\n      break\n    end\n  end\n  if had_entry\n  else\n    block.die(\"block must have one of the union's fields defined\")\n  end\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:asUnion\", \"( A Slf -- Uv ): creates and leaves a Union view for the\\n given Address, according to Struct layout form.\\n\\nThis word is **unsafe**: it does not check whether Address\\npoints at something that is layed out according to Struct\\nlayout form. Passing 0 (none aka null pointer) for Address\\nwill lead to segfault. Passing Address that points outside\\nof your program's memory will lead to segfault. Passing\\nAddress that *is* in the bounds of your program's memory,\\nbut one not pointing at a union in accordance with Struct\\nlayout form, will lead to undefined behavior (most likely\\njunk values in Union view). Showing ill-formed results of\\nthis word to clients may expose your program to a whole\\nclass of security vulnerabilities.\\n\\n```\\n[ chr char\\n  ord u8\\n] ffi:createLayout $: quux\\n\\n'A' $: chr\\n\\nthis quux ffi:buildUnion $: quuxUnion\\n\\nquuxUnion ffi:addressof $: addr\\n\\naddr quux ffi:asUnion $: addrUnion\\naddrUnion.chr leaves: 'A'\\naddrUnion.ord leaves: 65\\n```\") do |_, stack|\n  layout_form = stack.drop.a(StructLayoutForm)\n  pointer = stack.drop.a(Decimal)\n  view = Novika::FFI::UnionView.new(layout_form.layout, Pointer(Void).new(pointer.to_u64))\n  (StructViewForm.new(view)).onto(stack)\nend\ntarget.at(\"ffi:hole\", \"( T/Oh -- H ): allocates garbage-collected memory for Hole\\n that will hold a value of the given Type. If Other hole\\n is passed, wraps that Other hole instead (this could be\\n useful in C situations like `int**`)\\n\\nHoles are (just a bit) safer way of letting C write to a\\nmemory location. You first create the hole, then pass it\\nto C, then read from the hole by opening it.\\n\\nNote: this word is **unsafe**: since we cannot check whether\\nthe hole was written to, reading from hole (opening it) before\\nwriting to it will result in undefined behavior.\\n\\n```\\n\\\"\\\"\\\"\\nvoid outputCInt(int* x)\\n{\\n  *x = 123;\\n}\\n\\\"\\\"\\\"\\n\\n#i32 ffi:hole $: intBox\\n\\nintBox outputCInt\\nintBox open leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word | Hole)\n  type = case typename\n  in Hole\n    Novika::FFI::UntypedPointer.new(typename.address)\n  in Word\n    (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  end\n  (Hole.new(type)).onto(stack)\nend\ntarget.at(\"ffi:box\", \"( F T -- A ): allocates garbage-collected memory for Type, and\\n writes Form there. Form must be of (or convertible to) Type;\\n otherwise, this word dies. Leaves Address of the beginning of\\n the allocated memory.\\n\\n```\\n123 #i32 ffi:box $: ptr\\nptr #i32 ffi:unbox leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  form = stack.drop\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  pointer = (type.from(form)).box\n  (Decimal.new(pointer.address)).onto(stack)\nend\ntarget.at(\"ffi:unbox\", \"( A T -- F ): interprets whatever Address points at as a\\n value of the given Type, and leaves the matching Form.\\n Inverse of `ffi:box`.\\n\\nThis word is **unsafe**: it does not check whether Address\\npoints at something that is of the given Type. Passing 0\\n(none aka null pointer) for Address will lead to segfault.\\nPassing Address that points outside of your program's memory\\nwill lead to segfault. Passing Address that *is* in the bounds\\nof your program's memory, but one not pointing at a value of\\nthe given Type, will lead to undefined behavior (most likely\\njunk value of Form). Showing ill-formed results of this word to\\nclients, or letting clients control Address or Type, may expose\\nyour program to a whole class of security vulnerabilities.\\n\\n```\\n123 #i32 ffi:box $: ptr\\nptr #i32 ffi:unbox leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  address = stack.drop.a(Decimal)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  base = Pointer(Void).new(address.to_u64)\n  form = (type.unbox(base)).to_form?.not_nil!\n  form.onto(stack)\nend\ntarget.at(\"ffi:unsafeWrite\", \"( A F T -- ): interprets Form as that of the given Type,\\n and writes it at Address.\\n\\nThis word is **unsafe**: it does not check whether Address\\ncan be written to, whether there is enough memory to fully\\nwrite Form, etc. Passing 0 (none aka null pointer) for Address\\nwill lead to segfault. Passing Address that points outside\\nof your program's memory will lead to segfault. Passing Address\\nthat *is* in the bounds of your program's memory and can\\nbe written to may lead to undefined behavior.\\n\\n```\\n#i32 ffi:hole $: myHole\\nmyHole ffi:addressof $: holeAddr\\nholeAddr 123 #i32 ffi:unsafeWrite\\nmyHole open leaves: 123\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  form = stack.drop\n  address = stack.drop.a(Decimal)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  value = type.from(form)\n  base = Pointer(Void).new(address.to_u64)\n  value.write_to!(base)\nend\ntarget.at(\"ffi:viewLayout\", \"( Svf -- Slf ): leaves Struct layout form for the given\\n Struct view form (an inline struct view, struct reference\\n view, or union view).\\n\\n```\\n[ x f32 y f32 ] ffi:createLayout $: point\\n\\npoint ffi:allocateStruct& $: point&\\npoint ffi:allocateStruct~ $: point~\\npoint ffi:allocateUnion $: pointU\\n\\npoint& ffi:viewLayout leaves: point\\npoint~ ffi:viewLayout leaves: point\\npointU ffi:viewLayout leaves: point\\n```\") do |_, stack|\n  view = stack.drop.a(StructViewForm)\n  view.layout.onto(stack)\nend\ntarget.at(\"ffi:sizeof\", \"( T -- B ): leaves the size of Type, in Bytes.\\n\\n```\\n#u8  ffi:sizeof leaves: 1\\n#u16 ffi:sizeof leaves: 2\\n#u32 ffi:sizeof leaves: 4\\n#u64 ffi:sizeof leaves: 8\\n```\") do |engine, stack|\n  typename = stack.drop.a(Word)\n  type = (Novika::FFI::ValueTypeParser.new(engine.block, typename)).parse\n  (Decimal.new(type.sizeof)).onto(stack)\nend\ntarget.at(\"ffi:addressof\", \"( Svf/H -- A ): leaves Address of the given Struct view form\\n (an inline struct view, struct reference view, or union view),\\n or Hole in memory.\\n\\n```\\n#i32 ffi:hole $: myHole\\nmyHole ffi:addressof $: holeAddr\\nholeAddr 123 #i32 ffi:unsafeWrite\\nmyHole open leaves: 123\\n```\") do |_, stack|\n  form = stack.drop.a(Hole | StructViewForm)\n  (Decimal.new(form.address)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Frontend","path":"Novika/Capabilities/Impl/Frontend.html","kind":"class","full_name":"Novika::Capabilities::Impl::Frontend","name":"Frontend","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"capabilities(engine):Block-instance-method","name":"capabilities","doc":"Returns a list block of capabilities provided by the frontend.","summary":"<p>Returns a list block of capabilities provided by the frontend.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Block","args_html":"(engine) : <a href=\"../../../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":7,"url":null},"def":{"name":"capabilities","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Block","visibility":"Public","body":"list = Block.new\ncapabilities.enabled.each do |klass|\n  list.add(Quote.new(klass.id))\nend\nlist\n"}},{"html_id":"version(engine):Quote-instance-method","name":"version","doc":"Returns version of the frontend.","summary":"<p>Returns version of the frontend.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Quote","args_html":"(engine) : <a href=\"../../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/capabilities/impl/frontend.cr","line_number":3,"url":null},"def":{"name":"version","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Quote","visibility":"Public","body":"Quote.new(Novika::VERSION)"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Ink","path":"Novika/Capabilities/Impl/Ink.html","kind":"class","full_name":"Novika::Capabilities::Impl::Ink","name":"Ink","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},"ancestors":[{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/ink.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"COMPAT","name":"COMPAT","value":"{Color.rgb(0, 0, 0) => :black, Color.rgb(128, 0, 0) => :red, Color.rgb(0, 128, 0) => :green, Color.rgb(128, 128, 0) => :yellow, Color.rgb(0, 0, 128) => :blue, Color.rgb(128, 0, 128) => :magenta, Color.rgb(0, 128, 128) => :cyan, Color.rgb(192, 192, 192) => :light_gray, Color.rgb(128, 128, 128) => :dark_gray, Color.rgb(255, 0, 0) => :light_red, Color.rgb(0, 255, 0) => :light_green, Color.rgb(255, 255, 0) => :light_yellow, Color.rgb(0, 0, 255) => :light_blue, Color.rgb(255, 0, 255) => :light_magenta, Color.rgb(0, 255, 255) => :light_cyan, Color.rgb(255, 255, 255) => :white}"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"with_color_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_color_append_echo","doc":"Appends *form* with *fg* foreground color (if any) and\n*bg* background color (if any) to the standard output\nstream. One of *fg*, *bg* is guaranteed to be non-nil.","summary":"<p>Appends <em>form</em> with <em>fg</em> foreground color (if any) and <em>bg</em> background color (if any) to the standard output stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":42,"url":null},"def":{"name":"with_color_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"string = form.to_quote.string\ncolorful = string.colorize\nif fg\n  colorful = colorful.fore(COMPAT[fg.closest(COMPAT.keys)])\nend\nif bg\n  colorful = colorful.back(COMPAT[bg.closest(COMPAT.keys)])\nend\nappend_echo(engine, colorful)\n"}},{"html_id":"with_emphasis_append_echo(engine,fg:Color|Nil,bg:Color|Nil,form:Form)-instance-method","name":"with_emphasis_append_echo","doc":"Same as `with_color_append_echo`, but also emphasizes\necho of *form*. Bold style is used by default, but\nimplementors may choose e.g. italic.","summary":"<p>Same as <code><a href=\"../../../Novika/Capabilities/Impl/Ink.html#with_color_append_echo%28engine%2Cfg%3AColor%7CNil%2Cbg%3AColor%7CNil%2Cform%3AForm%29-instance-method\">#with_color_append_echo</a></code>, but also emphasizes echo of <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, fg : Color | Nil, bg : Color | Nil, form : Form)","args_html":"(engine, fg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, bg : <a href=\"../../../Novika/Color.html\">Color</a> | Nil, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":30,"url":null},"def":{"name":"with_emphasis_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"fg","external_name":"fg","restriction":"Color | ::Nil"},{"name":"bg","external_name":"bg","restriction":"Color | ::Nil"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"string = form.to_quote.string\ncolorful = string.colorize.bold\nif fg\n  colorful = colorful.fore(COMPAT[fg.closest(COMPAT.keys)])\nend\nif bg\n  colorful = colorful.back(COMPAT[bg.closest(COMPAT.keys)])\nend\nappend_echo(engine, colorful)\n"}},{"html_id":"with_reverse_append_echo(engine,form:Form)-instance-method","name":"with_reverse_append_echo","doc":"Appends *form* with inverse style (background color is\nset to foreground color, and vice versa).\n\nNote: if both foreground and background colors are set\nby the user, `with_color_append_echo` is preferred over\nthis method.","summary":"<p>Appends <em>form</em> with inverse style (background color is set to foreground color, and vice versa).</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/ink.cr","line_number":38,"url":null},"def":{"name":"with_reverse_append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"append_echo(engine, form.to_quote.string.colorize.reverse)"}}]},{"html_id":"novika/Novika/Capabilities/Impl/Nki","path":"Novika/Capabilities/Impl/Nki.html","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/nki.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":5,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"nki\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":13,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes words to capture, read, and manipulate Novika images\""}}],"instance_methods":[{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/impl/nki.cr","line_number":17,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"nki:toBlock\", \"( Bf -- B ): leaves Block for the given Byteslice form,\\n assumed to contain a well-formed Novika image created\\n with `nki:captureAll`, `nki:captureNeighborhood`, or\\n otherwise. Dies if Byteslice form is an invalid Novika\\n image, or isn't a Novika image.\\n\\nFor code example, see `nki:captureNeighborhood`.\") do |engine, stack|\n  bytes = stack.drop.a(Byteslice)\n  begin\n    image = bytes.to_io.read_bytes(Image)\n  rescue error : BinData::ReadingVerificationException\n    bytes.die(\"apparently, this byteslice is not a Novika image\")\n  end\n  (image.to_block(engine.capabilities)).onto(stack)\nend\ntarget.at(\"nki:captureAll\", \"( B -- Bf ): thoroughly, recursively captures entire\\n hierarchy of Block (its parents, prototype, friends,\\n tape, and dictionary), and leaves the resulting Novika\\n image as a Byteslice form.\\n\\nArchives image payload using Gzip, fast.\\n\\nIf you're a visual type of person, imagine this word and\\nall related facilities as a kind of \\\"mold\\\", which carefully,\\nin an ordered fashion \\\"fills up\\\" a maze, until all paths\\nwere explored and all exits found.\\n\\nFor code example, see `nki:captureNeighborhood`.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipFast, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhood\", \"( B -- Bf ): like `nki:captureAll`, but rather than\\n capturing all reachable blocks, captures only Block's\\n neighborhood. Leaves the resulting Byteslice form.\\n\\nArchives image payload using Gzip, fast.\\n\\nWe store each block in Block's tape and dictionary in\\na list, then ask that block to do the same. When recursion\\nfinishes, the resulting list is called *block neighborhood*.\\n\\nParent, friends, and prototype of the given block are\\nreconstructed *if and only if they are in the block\\nneighborhood*.\\n\\n```\\n[ 1 2 3 ] nki:captureNeighborhood $: imgN\\n\\nimgN toQuote leaves: '[byteslice, consists of 111 byte(s)]' \\\"yours may differ!\\\"\\nimgN nki:toBlock leaves: [ [ 1 2 3 ] ]\\n\\n\\\"As opposed to nki:captureAll, which will capture EVERYTHING\\n it can reach:\\\"\\n[ 1 2 3 ] nki:captureAll $: imgA\\n\\nimgA toQuote leaves: '[byteslice, consists of 38298 byte(s)]' \\\"yours may differ!\\\"\\n\\n\\\"Note: [ 1 2 3 ] lives in a parallel universe now, with\\n its own friends, prototypes, toplevel block, and so on!\\n It doesn't have any links whatsoever to the whoever-it-was\\n that called nki:captureAll!\\\"\\nimgA nki:toBlock leaves: [ [ 1 2 3 ] ]\\n```\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipFast, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllRaw\", \"( B -- Bf ): same as `nki:captureAll`, but doesn't archive\\n image payload. May yield very large Byteslice forms.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::None, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodRaw\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but doesn't\\n archive image payload. May yield large Byteslice forms.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::None, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllGzipBest\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Gzip, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipBest, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodGzipBest\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Gzip, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::GzipBest, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllBrotliFast\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Brotli, fast.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliFast, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodBrotliFast\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Brotli, fast.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliFast, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureAllBrotliBest\", \"( B -- Bf ): same as `nki:captureAll`, but archives image\\n payload using Brotli, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliBest, mode: CaptureMode::CaptureAll)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\ntarget.at(\"nki:captureNeighborhoodBrotliBest\", \"( B -- Bf ): same as `nki:captureNeighborhood`, but\\n archives image payload using Brotli, best.\") do |engine, stack|\n  block = stack.drop.a(Block)\n  image = Image.new(block, engine.capabilities, compression: Image::CompressionType::BrotliBest, mode: CaptureMode::CaptureNeighborhood)\n  Byteslice.new(&.write_bytes(image)).onto(stack)\nend\n"}}]},{"html_id":"novika/Novika/Capabilities/Impl/System","path":"Novika/Capabilities/Impl/System.html","kind":"class","full_name":"Novika::Capabilities::Impl::System","name":"System","abstract":false,"superclass":{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"},"ancestors":[{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/impl/system.cr","line_number":100,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Capabilities/Impl","kind":"module","full_name":"Novika::Capabilities::Impl","name":"Impl"},"instance_methods":[{"html_id":"append_echo(engine,form:Form)-instance-method","name":"append_echo","doc":"Enquotes and appends *form* to the standard output stream.","summary":"<p>Enquotes and appends <em>form</em> to the standard output stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":101,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"print(form.to_quote.string)"}},{"html_id":"bye(engine,code:Decimal)-instance-method","name":"bye","doc":"Ends the program with the given exit *code*.","summary":"<p>Ends the program with the given exit <em>code</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"args_string":"(engine, code : Decimal)","args_html":"(engine, code : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":130,"url":null},"def":{"name":"bye","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"visibility":"Public","body":"exit(code.to_i)"}},{"html_id":"monotonic(engine):Decimal-instance-method","name":"monotonic","doc":"Returns a reading from the monotonic clock, in milliseconds.","summary":"<p>Returns a reading from the monotonic clock, in milliseconds.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Decimal","args_html":"(engine) : <a href=\"../../../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":122,"url":null},"def":{"name":"monotonic","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(Time.monotonic.total_milliseconds)"}},{"html_id":"nap(engine,millis:Decimal)-instance-method","name":"nap","doc":"Sleeps for the given amount of *millis*econds.","summary":"<p>Sleeps for the given amount of <em>millis</em>econds.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"args_string":"(engine, millis : Decimal)","args_html":"(engine, millis : <a href=\"../../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":126,"url":null},"def":{"name":"nap","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"visibility":"Public","body":"sleep(millis.to_i.milliseconds)"}},{"html_id":"readline(engine,prompt:Form):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline","doc":"Enquotes and prints *prompt* to STDOUT. Waits for the\nuser to answer, enquotes the answer (if any) and returns\nit together with a status boolean.\n\nIf the user answered with EOF (e.g. CTRL-D), status bool\nis false and answer quote is nil. Else, answer quote\ncontains the answer and status bool is true.","summary":"<p>Enquotes and prints <em>prompt</em> to STDOUT.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"args_string":"(engine, prompt : Form) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, prompt : <a href=\"../../../Novika/Form.html\">Form</a>) : Tuple(<a href=\"../../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":111,"url":null},"def":{"name":"readline","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":"string = prompt.to_quote.string\nprint(string)\nanswer = gets\n{answer ? Quote.new(answer) : nil, Boolean[!(!answer)]}\n"}},{"html_id":"readline_star(engine,config:PromptConfig):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline_star","doc":"Extended (contextful) version of `readline`.","summary":"<p>Extended (contextful) version of <code><a href=\"../../../Novika/Capabilities/Impl/System.html#readline%28engine%2Cprompt%3AForm%29%3ATuple%28Quote%7CNil%2CBoolean%29-instance-method\">#readline</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"config","external_name":"config","restriction":"PromptConfig"}],"args_string":"(engine, config : PromptConfig) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, config : <a href=\"../../../Novika/Capabilities/ISystem/PromptConfig.html\">PromptConfig</a>) : Tuple(<a href=\"../../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":105,"url":null},"def":{"name":"readline_star","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"config","external_name":"config","restriction":"PromptConfig"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":"reader = PromptReader.new(config)\nanswer = reader.read_next\n{answer ? Quote.new(answer) : nil, Boolean[!(!answer)]}\n"}},{"html_id":"report_error(engine,error:Error)-instance-method","name":"report_error","doc":"Reports abound an *error* to the standard error stream.","summary":"<p>Reports abound an <em>error</em> to the standard error stream.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"args_string":"(engine, error : Error)","args_html":"(engine, error : <a href=\"../../../Novika/Error.html\">Error</a>)","location":{"filename":"src/novika/capabilities/impl/system.cr","line_number":118,"url":null},"def":{"name":"report_error","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"visibility":"Public","body":"error.report(STDERR)"}}]}]},{"html_id":"novika/Novika/Capabilities/ISystem","path":"Novika/Capabilities/ISystem.html","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"},{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/system.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Capability","kind":"module","full_name":"Novika::Capability","name":"Capability"},{"html_id":"novika/Novika/ICapability","kind":"module","full_name":"Novika::ICapability","name":"ICapability"}],"extended_modules":[{"html_id":"novika/Novika/ICapabilityClass","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass"}],"subclasses":[{"html_id":"novika/Novika/Capabilities/Impl/System","kind":"class","full_name":"Novika::Capabilities::Impl::System","name":"System"}],"namespace":{"html_id":"novika/Novika/Capabilities","kind":"module","full_name":"Novika::Capabilities","name":"Capabilities"},"class_methods":[{"html_id":"id:String-class-method","name":"id","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":77,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"\"system\""}},{"html_id":"on_by_default?:Bool-class-method","name":"on_by_default?","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":85,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"purpose:String-class-method","name":"purpose","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":81,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":"\"exposes all sorts of OS-related vocabulary, such as 'echo' and 'nap'\""}}],"instance_methods":[{"html_id":"append_echo(engine,form:Form)-instance-method","name":"append_echo","doc":"Enquotes and appends *form* to the standard output stream.","summary":"<p>Enquotes and appends <em>form</em> to the standard output stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine, form : Form)","args_html":"(engine, form : <a href=\"../../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":90,"url":null},"def":{"name":"append_echo","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"bye(engine,code:Decimal)-instance-method","name":"bye","doc":"Ends the program with the given exit *code*.","summary":"<p>Ends the program with the given exit <em>code</em>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"args_string":"(engine, code : Decimal)","args_html":"(engine, code : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":114,"url":null},"def":{"name":"bye","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"code","external_name":"code","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":false,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":116,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":"target.at(\"appendEcho\", \"( F -- ): enquotes and appends Form to the standard\\n output stream.\") do |engine, stack|\n  append_echo(engine, stack.drop)\nend\ntarget.at(\"readLine\", \"( Pf -- Aq true / false ): enquotes and prints Prompt\\n form to the standard output stream. Waits for the user\\n to answer, enquotes the answer and leaves it.\\n\\nIf user answered the prompt, leaves Answer quote followed\\nby boolean true. Otherwise, leaves boolean false.\\n\\n```\\n'What is your name? ' readLine => echo\\n\\n\\\"INPUT: What is your name? John Doe⏎\\\"\\n\\\"STDOUT: John Doe⏎\\\"\\n\\n\\\"INPUT: What is your name? <Ctrl-D>\\\"\\n\\\"[Program exits]\\\"\\n```\") do |engine, stack|\n  answer, status = readline(engine, stack.drop)\n  if answer\n    answer.onto(stack)\n  end\n  status.onto(stack)\nend\ntarget.at(\"readLine*\", \"( Cb -- Aq true / false ): extended (contextful) version of `readLine`.\\n Accepts Configuration block and leaves Answer quote followed by\\n `true`, otherwise, if the prompt was rejected, leaves just `false`.\\n\\n## Configuring the prompt\\n\\nTo configure the prompt you should create a Configuration block\\nand populate it with settings according to how you want the prompt\\nto look like and work.\\n\\n### Empty or meaningless configuration block\\n\\nIf you pass an empty Configuration block or one that has no entries\\nthat are of interest to `readLine*`, then you will get an empty\\nprompt but a prompt nonetheless (i.e. everything will work fine;\\n*all of the settings below are opt-in*).\\n\\n### Available settings\\n\\n#### `prompt`\\n\\n`prompt` allows you to assign the prompt quote. In case it is an\\nopener entry it will be opened like so: `( L -- Pq )` where P is\\nthe prompt quote and L is the line number (because multiline editing\\nis supported). So you can set custom prompts for every line, or\\nuse only one for all of them.\\n\\n```\\n[ '>>> ' $: prompt ] obj readLine*\\n\\n\\\"\\\"\\\"\\n>>> example inp|ut\\n\\n>>> example multiline\\n>>> inp|ut\\n\\\"\\\"\\\"\\n\\n[ [ 1 = sel: '>>> ' '... ' ] @: prompt ] readLine*\\n\\n\\\"\\\"\\\"\\n>>> example multiline\\n... inp|ut\\n\\\"\\\"\\\"\\n```\\n\\n#### `history`\\n\\nIf Configuration block has a `history` entry (a quote), then\\nhistory is going to be saved to, and loaded from that entry.\\n\\nIf there is no `history` entry in the Configuration block, then\\nhistory is not going to be persisted.\\n\\n```\\n[ ('>>> ' $: prompt) ('' $: history) ] obj $: config\\n\\nloop: [\\n  config readLine* not => break\\n\\n  [\\n    'h' [ config.history echo ]\\n    [ ] [ echo ]\\n  ] choose\\n]\\n\\n\\\"Do something with the history after the loop breaks...\\\"\\n\\n'History after the loop: ' config.history 2echo\\n```\\n\\n#### `more?`\\n\\n`more?` allows to specify whether more of the input should be\\nexpected, that is, if the prompt should continue on another line.\\n\\nBy default it is `false`, and is expected to be boolean `false`\\nor anything else (interpreted as `true`). If `more?` is an opener,\\nit is expected to be compatible with the following signature:\\n`( Paq -- true / false )`, where Paq is the partial answer quote.\\nIf the block leaves anything other than `true` or `false`, that\\nis interpreted as `true`.\\n\\n```\\n[ [ 1 = sel: '>>> ' '... ' ] @: prompt\\n\\n  [ orphan swap\\n\\n    false $: result \\\"< Don't need anything else...\\\"\\n\\n    [ \\\"Oops, probably 'slurp' died, so let's try to wait\\n       for enough input to not make slurp die...\\\"\\n      true =: result\\n    ] @: __died__\\n\\n    slurp \\\"Regardless of whether `slurp` dies, we end up here\\\" result\\n  ] @: more?\\n] obj $: config\\n\\n'Enter parseable Novika code or I will go multiline:' echo\\n\\nloop: [ config readLine* br: echo break ]\\n```\\n\\n#### `delimiters`\\n\\n`delimiters` is a quote (or a block that leaves a quote in case\\n`delimiters` is an opener entry) that lists *word delimiter*\\ncharacters, useful for jumping through words and autocompletion.\\n\\n```\\n[ ('Enter your name> ' $: prompt) (' .,-' $: delimiters) ] obj $: config\\n\\nconfig readLine* not => okbye $: name\\n\\n[ 'Your name is: ' name ] ~* echo\\n```\\n\\n#### `suggest`\\n\\nIf `suggest` is a pusher entry, it should be a block of the\\nfollowing shape: `[ title [ ...suggestion ] ]`, where `title`\\nand every one of `suggestion`s are quotes.\\n\\n`title` followed by colon ':' is displayed above the list of\\nsuggestions. The list can be opened using the Tab key, escaped\\nfrom using Escape.\\n\\n```\\n[ 'Enter your name> ' $: prompt\\n\\n  [ 'Possible names'\\n    [ 'John'\\n      'Alice'\\n      'Mary'\\n      'David' ]\\n  ] $: suggest\\n] obj $: config\\n\\nconfig readLine*\\n```\\n\\nIn case `suggest` is an opener, it is expected to be compatible\\nwith the following signature: `( P W -- Tq Sb )` where W is\\nthe current word (as per `delimiters`), P is the prior quote\\n(all that precedes W), Tq is the title quote, and Sb is\\nthe suggestions block.\\n\\n```\\n[ 'Enter expression> ' $: prompt\\n\\n  ' ' $: delimiters\\n\\n  [ $: word $: prior\\n\\n    'Possible evaluations (+, -, *)'\\n\\n    [ [ ] prior slurp [+] 0 reduce\\n      [ ] prior slurp [-] 0 reduce\\n      [ ] prior slurp [*] 1 reduce\\n    ] vals\\n  ] @: suggest\\n] obj $: config\\n\\nconfig readLine*\\n```\") do |engine, stack|\n  carrier = stack.drop.a(Block)\n  config = PromptConfig.new(carrier)\n  answer, status = readline_star(engine, config)\n  if answer\n    answer.onto(stack)\n  end\n  status.onto(stack)\nend\ntarget.at(\"reportError\", \"( Eo -- ): reports about an error to the standard error\\n stream, given an Error object.\\n\\nYou can obtain an error object by, e.g., catching it\\nin `__died__`.\") do |engine, stack|\n  error = stack.drop.a(Error)\n  report_error(engine, error)\nend\ntarget.at(\"monotonic\", \"( -- R ): leaves a Reading from the monotonic clock to\\n measure elapsed time, in milliseconds.\\n\\nValues from the monotonic clock and wall clock are not\\ncomparable. Monotonic clock should be independent from\\ndiscontinuous jumps in the system time, such as leap\\nseconds, time zone adjustments or manual changes to the\\ncomputer's clock.\\n\\n```\\nmonotonic $: start\\n20 nap\\nmonotonic $: end\\nend start - echo\\n\\\"STDOUT: 20⏎ (approximately)\\\"\\n```\") do |engine, stack|\n  (monotonic(engine)).onto(stack)\nend\ntarget.at(\"nap\", \"( D -- ): sleeps a Duration of time, given in *milliseconds*.\") do |engine, stack|\n  millis = stack.drop.a(Decimal)\n  nap(engine, millis)\nend\ntarget.at(\"bye\", \"( Ec -- ): ends the program with the given decimal Exit code.\") do |engine, stack|\n  code = stack.drop.a(Decimal)\n  bye(engine, code)\nend\n"}},{"html_id":"monotonic(engine):Decimal-instance-method","name":"monotonic","doc":"Returns a reading from the monotonic clock, in milliseconds.","summary":"<p>Returns a reading from the monotonic clock, in milliseconds.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : Decimal","args_html":"(engine) : <a href=\"../../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/capabilities/system.cr","line_number":111,"url":null},"def":{"name":"monotonic","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"Decimal","visibility":"Public","body":""}},{"html_id":"nap(engine,millis:Decimal)-instance-method","name":"nap","doc":"Sleeps for the given amount of *millis*econds.","summary":"<p>Sleeps for the given amount of <em>millis</em>econds.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"args_string":"(engine, millis : Decimal)","args_html":"(engine, millis : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":108,"url":null},"def":{"name":"nap","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"millis","external_name":"millis","restriction":"Decimal"}],"visibility":"Public","body":""}},{"html_id":"readline(engine,prompt:Form):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline","doc":"Enquotes and prints *prompt* to STDOUT. Waits for the\nuser to answer, enquotes the answer (if any) and returns\nit together with a status boolean.\n\nIf the user answered with EOF (e.g. CTRL-D), status bool\nis false and answer quote is nil. Else, answer quote\ncontains the answer and status bool is true.","summary":"<p>Enquotes and prints <em>prompt</em> to STDOUT.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"args_string":"(engine, prompt : Form) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, prompt : <a href=\"../../Novika/Form.html\">Form</a>) : Tuple(<a href=\"../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":99,"url":null},"def":{"name":"readline","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"prompt","external_name":"prompt","restriction":"Form"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":""}},{"html_id":"readline_star(engine,config:PromptConfig):Tuple(Quote|Nil,Boolean)-instance-method","name":"readline_star","doc":"Extended (contextful) version of `readline`.","summary":"<p>Extended (contextful) version of <code><a href=\"../../Novika/Capabilities/ISystem.html#readline%28engine%2Cprompt%3AForm%29%3ATuple%28Quote%7CNil%2CBoolean%29-instance-method\">#readline</a></code>.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"config","external_name":"config","restriction":"PromptConfig"}],"args_string":"(engine, config : PromptConfig) : Tuple(Quote | Nil, Boolean)","args_html":"(engine, config : <a href=\"../../Novika/Capabilities/ISystem/PromptConfig.html\">PromptConfig</a>) : Tuple(<a href=\"../../Novika/Quote.html\">Quote</a> | Nil, <a href=\"../../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":102,"url":null},"def":{"name":"readline_star","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"config","external_name":"config","restriction":"PromptConfig"}],"return_type":"::Tuple(Quote | ::Nil, Boolean)","visibility":"Public","body":""}},{"html_id":"report_error(engine,error:Error)-instance-method","name":"report_error","doc":"Reports abound an *error* to the standard error stream.","summary":"<p>Reports abound an <em>error</em> to the standard error stream.</p>","abstract":true,"args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"args_string":"(engine, error : Error)","args_html":"(engine, error : <a href=\"../../Novika/Error.html\">Error</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":105,"url":null},"def":{"name":"report_error","args":[{"name":"engine","external_name":"engine","restriction":""},{"name":"error","external_name":"error","restriction":"Error"}],"visibility":"Public","body":""}}],"types":[{"html_id":"novika/Novika/Capabilities/ISystem/PromptConfig","path":"Novika/Capabilities/ISystem/PromptConfig.html","kind":"struct","full_name":"Novika::Capabilities::ISystem::PromptConfig","name":"PromptConfig","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capabilities/system.cr","line_number":6,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DELIMITERS","name":"DELIMITERS","value":"Word.new(\"delimiters\")"},{"id":"HISTORY","name":"HISTORY","value":"Word.new(\"history\")"},{"id":"MORE","name":"MORE","value":"Word.new(\"more?\")"},{"id":"PROMPT","name":"PROMPT","value":"Word.new(\"prompt\")"},{"id":"SUGGEST","name":"SUGGEST","value":"Word.new(\"suggest\")"}],"namespace":{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"},"doc":"A thin wrapper around the prompt configuration block of `readLine*`.","summary":"<p>A thin wrapper around the prompt configuration block of <code>readLine*</code>.</p>","constructors":[{"html_id":"new(carrier:Block)-class-method","name":"new","abstract":false,"args":[{"name":"carrier","external_name":"carrier","restriction":"Block"}],"args_string":"(carrier : Block)","args_html":"(carrier : <a href=\"../../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capabilities/system.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"carrier","external_name":"carrier","restriction":"Block"}],"visibility":"Public","body":"_ = allocate\n_.initialize(carrier)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"delimiters?:Quote|Nil-instance-method","name":"delimiters?","doc":"Returns word delimiter quote, if any. The decision of how\nto interpret the returned quote is up to the caller.","summary":"<p>Returns word delimiter quote, if any.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":23,"url":null},"def":{"name":"delimiters?","return_type":"Quote | ::Nil","visibility":"Public","body":"if entry = @carrier.entry_for?(DELIMITERS)\nelse\n  return\nend\n(Engine.exhaust(Engine.current.capabilities, entry)).top.a(Quote)\n"}},{"html_id":"history_entry?:Entry|Nil-instance-method","name":"history_entry?","doc":"Returns the history entry in the carrier block, if any.","summary":"<p>Returns the history entry in the carrier block, if any.</p>","abstract":false,"location":{"filename":"src/novika/capabilities/system.cr","line_number":17,"url":null},"def":{"name":"history_entry?","return_type":"Entry | ::Nil","visibility":"Public","body":"@carrier.entry_for?(HISTORY)"}},{"html_id":"more?(expression:String):Form|Nil-instance-method","name":"more?","doc":"Returns `false` or nil if no more input is expected after\n*expression*, otherwise, returns some form that the user\nassigned \"more\" to or that they left on top of the stack\n(interpreted as `true`).","summary":"<p>Returns <code>false</code> or nil if no more input is expected after <em>expression</em>, otherwise, returns some form that the user assigned &quot;more&quot; to or that they left on top of the stack (interpreted as <code>true</code>).</p>","abstract":false,"args":[{"name":"expression","external_name":"expression","restriction":"String"}],"args_string":"(expression : String) : Form | Nil","args_html":"(expression : <a href=\"../../../String.html\">String</a>) : <a href=\"../../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/capabilities/system.cr","line_number":33,"url":null},"def":{"name":"more?","args":[{"name":"expression","external_name":"expression","restriction":"String"}],"return_type":"Form | ::Nil","visibility":"Public","body":"if entry = @carrier.entry_for?(MORE)\nelse\n  return\nend\nstack = Block.with(Quote.new(expression))\n(Engine.exhaust(Engine.current.capabilities, entry, stack)).top\n"}},{"html_id":"prompt?(line_number:Int32):Quote|Nil-instance-method","name":"prompt?","doc":"Returns the prompt quote for the given *line_number*, or nil\nif no prompt should be used.","summary":"<p>Returns the prompt quote for the given <em>line_number</em>, or nil if no prompt should be used.</p>","abstract":false,"args":[{"name":"line_number","external_name":"line_number","restriction":"Int32"}],"args_string":"(line_number : Int32) : Quote | Nil","args_html":"(line_number : Int32) : <a href=\"../../../Novika/Quote.html\">Quote</a> | Nil","location":{"filename":"src/novika/capabilities/system.cr","line_number":43,"url":null},"def":{"name":"prompt?","args":[{"name":"line_number","external_name":"line_number","restriction":"Int32"}],"return_type":"Quote | ::Nil","visibility":"Public","body":"if entry = @carrier.entry_for?(PROMPT)\nelse\n  return\nend\nstack = Block.with(Decimal.new(line_number))\nform = (Engine.exhaust(Engine.current.capabilities, entry, stack)).top\nform.to_quote\n"}},{"html_id":"suggest?(word:String,prior:String):Tuple(Quote,Block)|Nil-instance-method","name":"suggest?","doc":"Returns the title quote followed by suggestions block for\nthe given *word* and input *prior* to *word*.","summary":"<p>Returns the title quote followed by suggestions block for the given <em>word</em> and input <em>prior</em> to <em>word</em>.</p>","abstract":false,"args":[{"name":"word","external_name":"word","restriction":"String"},{"name":"prior","external_name":"prior","restriction":"String"}],"args_string":"(word : String, prior : String) : Tuple(Quote, Block) | Nil","args_html":"(word : <a href=\"../../../String.html\">String</a>, prior : <a href=\"../../../String.html\">String</a>) : Tuple(<a href=\"../../../Novika/Quote.html\">Quote</a>, <a href=\"../../../Novika/Block.html\">Block</a>) | Nil","location":{"filename":"src/novika/capabilities/system.cr","line_number":54,"url":null},"def":{"name":"suggest?","args":[{"name":"word","external_name":"word","restriction":"String"},{"name":"prior","external_name":"prior","restriction":"String"}],"return_type":"::Tuple(Quote, Block) | ::Nil","visibility":"Public","body":"if entry = @carrier.entry_for?(SUGGEST)\nelse\n  return\nend\nif entry.is_a?(OpenEntry)\n  stack = Block.with(Quote.new(prior), Quote.new(word))\n  block = Engine.exhaust(Engine.current.capabilities, entry, stack)\nelse\n  block = entry.form.a(Block)\n  if block.count == 2\n  else\n    block.die(\"expected block of the form [ title:quote [ ...suggestion:quote ] ]\")\n  end\nend\ntitle, suggestions = block.at(block.count - 2), block.at(block.count - 1)\n{title.a(Quote), suggestions.a(Block)}\n"}}]}]}]},{"html_id":"novika/Novika/Capability","path":"Novika/Capability.html","kind":"module","full_name":"Novika::Capability","name":"Capability","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":31,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/Capabilities/Impl/Colors","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors"},{"html_id":"novika/Novika/Capabilities/Impl/Essential","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential"},{"html_id":"novika/Novika/Capabilities/Impl/FFI","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI"},{"html_id":"novika/Novika/Capabilities/Impl/Nki","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki"},{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Merges instance-side and class-side interfaces to a Novika\ncapability. Automatically includes `ICapabilityClass` and\n`ICapability` for you.","summary":"<p>Merges instance-side and class-side interfaces to a Novika capability.</p>"},{"html_id":"novika/Novika/CapabilityCollection","path":"Novika/CapabilityCollection.html","kind":"class","full_name":"Novika::CapabilityCollection","name":"CapabilityCollection","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/capability.cr","line_number":66,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A collection of language capability implementations.\n\nCapability implementations can indirectly (by id) interact\nwith each other by sharing the capability collection they're\nmembers of.\n\n```\n# (!) Compile with -Dnovika_console\n\ncaps = CapabilityCollection.new\n\n# Add capability classes:\ncaps << Capabilities::Impl::Essential\ncaps << Capabilities::Impl::System\ncaps << Capabilities::Impl::Console\n\n# Enable capabilities. At this point you kinda don't know\n# which implementation is used under the hood, so you\n# need to refer to the capability by its id.\ncaps.enable(\"essential\")\ncaps.enable(\"system\")\ncaps.enable(\"console\")\n\nblock = Block.new(caps.block)\nblock.slurp(\"console:on 1000 nap console:off\")\n\nEngine.exhaust(block, caps)\n```","summary":"<p>A collection of language capability implementations.</p>","class_methods":[{"html_id":"available:Array(ICapabilityClass)-class-method","name":"available","doc":"Lists *all* available (registered) capability classes.\n\nFor a capability class to be registered (available), it\nshould be the last subclass of a `Capability` includer\n(subclass depth is irrelevant), or have no subclasses\nand directly include `Capability`.","summary":"<p>Lists <em>all</em> available (registered) capability classes.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":282,"url":null},"def":{"name":"available","return_type":"Array(ICapabilityClass)","visibility":"Public","body":"{% if true %}\n        [{% for capability in Capability.includers %}\n          {% subclasses = capability.all_subclasses %}\n          {% if (!capability.abstract?) && subclasses.empty? %}\n            {{ capability }},\n          {% else %}{% if subclass = subclasses.reject(&.abstract?).last %}\n            {{ subclass }},\n          {% end %}{% end %}\n        {% end %}] of ICapabilityClass\n      {% end %}"}},{"html_id":"with_available-class-method","name":"with_available","doc":"Creates a capability collection, and adds *all* available\ncapabilities (see `CapabilityCollection.available`). Does\nnot enable any of them.\n\nReturns the resulting capability collection.","summary":"<p>Creates a capability collection, and adds <em>all</em> available capabilities (see <code><a href=\"../Novika/CapabilityCollection.html#available%3AArray%28ICapabilityClass%29-class-method\">CapabilityCollection.available</a></code>).</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":270,"url":null},"def":{"name":"with_available","visibility":"Public","body":"caps = CapabilityCollection.new\navailable.each do |cap|\n  caps << cap\nend\ncaps\n"}},{"html_id":"with_default-class-method","name":"with_default","doc":"Creates a capability collection, and adds capabilities that\nare on by default. Doesn't enable any. Returns the resulting\ncapability collection.","summary":"<p>Creates a capability collection, and adds capabilities that are on by default.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":256,"url":null},"def":{"name":"with_default","visibility":"Public","body":"caps = CapabilityCollection.new\navailable.each do |cap|\n  if cap.on_by_default?\n  else\n    next\n  end\n  caps << cap\nend\ncaps\n"}}],"constructors":[{"html_id":"new(parent:Block|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"}],"args_string":"(parent : Block | Nil = nil)","args_html":"(parent : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/capability.cr","line_number":72,"url":null},"def":{"name":"new","args":[{"name":"parent","default_value":"nil","external_name":"parent","restriction":"Block | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(parent)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(cls:ICapabilityClass)-instance-method","name":"<<","doc":"Adds a capability class *cls* to this collection.","summary":"<p>Adds a capability class <em>cls</em> to this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"ICapabilityClass"}],"args_string":"(cls : ICapabilityClass)","args_html":"(cls : <a href=\"../Novika/ICapabilityClass.html\">ICapabilityClass</a>)","location":{"filename":"src/novika/capability.cr","line_number":217,"url":null},"def":{"name":"<<","args":[{"name":"cls","external_name":"cls","restriction":"ICapabilityClass"}],"visibility":"Public","body":"@classes[cls.id] = cls"}},{"html_id":"<<(library:Library)-instance-method","name":"<<","doc":"Adds a *library* to this collection. Overwrites any previous\nlibrary with the same id.","summary":"<p>Adds a <em>library</em> to this collection.</p>","abstract":false,"args":[{"name":"library","external_name":"library","restriction":"Library"}],"args_string":"(library : Library)","args_html":"(library : <a href=\"../Novika/Library.html\">Library</a>)","location":{"filename":"src/novika/capability.cr","line_number":223,"url":null},"def":{"name":"<<","args":[{"name":"library","external_name":"library","restriction":"Library"}],"visibility":"Public","body":"@libraries[library.id] = library"}},{"html_id":"[]?(cls:T.class):T|NilforallT-instance-method","name":"[]?","doc":"Returns the instance of the given capability class *cls*,\nif such instance can be found in this collection. Otherwise,\nreturns nil.","summary":"<p>Returns the instance of the given capability class <em>cls</em>, if such instance can be found in this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class) : T | Nil forall T","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : T | Nil forall T","location":{"filename":"src/novika/capability.cr","line_number":154,"url":null},"def":{"name":"[]?","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"return_type":"T | ::Nil","visibility":"Public","body":"@objects[cls.id]?.try do |__arg1|\n  __arg1.as(T)\nend"}},{"html_id":"block:Block-instance-method","name":"block","doc":"Returns the *capability block*: a block managed by this\ncollection, which includes the vocabulary injected by\nthe enabled capabilities.","summary":"<p>Returns the <em>capability block</em>: a block managed by this collection, which includes the vocabulary injected by the enabled capabilities.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":70,"url":null},"def":{"name":"block","return_type":"Block","visibility":"Public","body":"@block"}},{"html_id":"copy:CapabilityCollection-instance-method","name":"copy","doc":"Copies this capability collection.\n\n* This collection shares library load callbacks (themselves,\n  *not* the list of them) with the returned collection.\n\n* This collection shares FFI `Library` instances with the\n  returned one, by reference.\n\n* This collection shares capability block parent (see `new`)\n  with the returned one, by reference.\n\nEverything else is copied or created anew.","summary":"<p>Copies this capability collection.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":239,"url":null},"def":{"name":"copy","return_type":"CapabilityCollection","visibility":"Public","body":"copy = CapabilityCollection.new\n@classes.each_value do |cls|\n  copy << cls\nend\n@objects.each_key do |id|\n  copy.enable(id)\nend\n@libraries.each_value do |library|\n  copy << library\nend\n@load_library_callbacks.each do |callback|\n  copy.on_load_library?(callback)\nend\ncopy\n"}},{"html_id":"enable(id:String):Bool-instance-method","name":"enable","doc":"Enables a capability with the given *id*.\n\nTo enable a capability means to create an instance of the\ncorresponding implementation class, and use that instance\nto inject the capability vocabulary into this collection's\n*capabilities block*, `block`. You can then access `block`\nand e.g. inherit from it to access the vocabulary of the\nenabled capabilities.\n\nDoes nothing if the capability is already enabled.\nDoes nothing if there is no capability with the given id.\n\nReturns whether there is a capability with the given *id*.","summary":"<p>Enables a capability with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Bool","args_html":"(id : <a href=\"../String.html\">String</a>) : Bool","location":{"filename":"src/novika/capability.cr","line_number":116,"url":null},"def":{"name":"enable","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"if @objects.has_key?(id)\n  return true\nend\nif cap = get_capability_class?(id)\nelse\n  return false\nend\nobject = cap.new(self)\nobject.inject(block)\n@objects[id] = object\ntrue\n"}},{"html_id":"enable_all-instance-method","name":"enable_all","doc":"Enables all capabilities unconditionally.\n\nReturns self.","summary":"<p>Enables all capabilities unconditionally.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":145,"url":null},"def":{"name":"enable_all","visibility":"Public","body":"@classes.each_key do |k|\n  enable(k)\nend\nself\n"}},{"html_id":"enable_default-instance-method","name":"enable_default","doc":"Enables all capabilities that respond with true when sent\n`ICapabilityClass#on_by_default?`.\n\nFor capabilities that respond with false, you'll need to\ntarget them explicitly with `enable(id)`, or use `enable_all`\ninstead of `enable_default`.\n\nReturns self.","summary":"<p>Enables all capabilities that respond with true when sent <code><a href=\"../Novika/ICapabilityClass.html#on_by_default%3F%3ABool-instance-method\">ICapabilityClass#on_by_default?</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":136,"url":null},"def":{"name":"enable_default","visibility":"Public","body":"@classes.each do |k, v|\n  if v.on_by_default?\n    enable(k)\n  end\nend\nself\n"}},{"html_id":"enabled-instance-method","name":"enabled","doc":"Returns an array of capabilities that are enabled in this\ncollection at the moment.","summary":"<p>Returns an array of capabilities that are enabled in this collection at the moment.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":81,"url":null},"def":{"name":"enabled","visibility":"Public","body":"@objects.values.map(&.class)"}},{"html_id":"fetch(cls:T.class,&:T->U):U|NilforallT,U-instance-method","name":"fetch","doc":"Yields the capability instance of the given capability\nclass *cls* to the block, if such instance can be found\nin this collection.\n\nReturns the result of the block, or nil.","summary":"<p>Yields the capability instance of the given capability class <em>cls</em> to the block, if such instance can be found in this collection.</p>","abstract":false,"args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"args_string":"(cls : T.class, & : T -> U) : U | Nil forall T, U","args_html":"(cls : <span class=\"t\">T</span>.<span class=\"k\">class</span>, & : T -> U) : U | Nil forall T, U","location":{"filename":"src/novika/capability.cr","line_number":210,"url":null},"def":{"name":"fetch","args":[{"name":"cls","external_name":"cls","restriction":"T.class"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> U)"},"return_type":"U | ::Nil","visibility":"Public","body":"if impl = self[cls]?\n  yield impl\nend"}},{"html_id":"get_capability_class?(id:String)-instance-method","name":"get_capability_class?","doc":"Returns the capability class with the given *id*. Returns nil\nif there is no such capability class in this collection.","summary":"<p>Returns the capability class with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":166,"url":null},"def":{"name":"get_capability_class?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@classes[id]?"}},{"html_id":"get_library?(id:String)-instance-method","name":"get_library?","doc":"Returns the library with the given *id*. Returns nil if there\nis no such library in this collection.","summary":"<p>Returns the library with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":160,"url":null},"def":{"name":"get_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@libraries[id]?"}},{"html_id":"has_capability?(id:String)-instance-method","name":"has_capability?","doc":"Returns whether this collection includes a capability with\nthe given *id*.","summary":"<p>Returns whether this collection includes a capability with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":93,"url":null},"def":{"name":"has_capability?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@classes.has_key?(id)"}},{"html_id":"has_capability_enabled?(id:String)-instance-method","name":"has_capability_enabled?","doc":"Returns whether this collection has the capability with\nthe given *id* enabled.","summary":"<p>Returns whether this collection has the capability with the given <em>id</em> enabled.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":87,"url":null},"def":{"name":"has_capability_enabled?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@objects.has_key?(id)"}},{"html_id":"has_library?(id:String)-instance-method","name":"has_library?","doc":"Returns whether this collection includes a library with\nthe given *id*.","summary":"<p>Returns whether this collection includes a library with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/capability.cr","line_number":99,"url":null},"def":{"name":"has_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@libraries.has_key?(id)"}},{"html_id":"load_library?(id:String):Library|Nil-instance-method","name":"load_library?","doc":"Tries to load a library (aka shared object) with the given\n*id*. Returns the resulting `Library` object, or nil.\n\nThe library object is cached: further calls to `load_library?`\nand `get_library?` will return that library object.","summary":"<p>Tries to load a library (aka shared object) with the given <em>id</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/capability.cr","line_number":195,"url":null},"def":{"name":"load_library?","args":[{"name":"id","external_name":"id","restriction":"String"}],"return_type":"Library | ::Nil","visibility":"Public","body":"@libraries.fetch(id) do\n  @load_library_callbacks.each do |callback|\n    if library = callback.call(id)\n      return @libraries[id] = library\n    end\n  end\nend"}},{"html_id":"on_load_library?(callback:String->Library|Nil)-instance-method","name":"on_load_library?","doc":"Subscribes *callback* to library load requests, so that\nwhenever the runtime needs a library, *callback* gets a\nchance to be invoked and load it.\n\n*callback* is only going to be invoked if all previously\ndefined callbacks failed (returned nil).\n\n*callback* should return a `Library` if it successfully\nloaded it; otherwise, it should return nil.","summary":"<p>Subscribes <em>callback</em> to library load requests, so that whenever the runtime needs a library, <em>callback</em> gets a chance to be invoked and load it.</p>","abstract":false,"args":[{"name":"callback","external_name":"callback","restriction":"(String -> Library | ::Nil)"}],"args_string":"(callback : String -> Library | Nil)","args_html":"(callback : <a href=\"../String.html\">String</a> -> <a href=\"../Novika/Library.html\">Library</a> | Nil)","location":{"filename":"src/novika/capability.cr","line_number":181,"url":null},"def":{"name":"on_load_library?","args":[{"name":"callback","external_name":"callback","restriction":"(String -> Library | ::Nil)"}],"visibility":"Public","body":"@load_library_callbacks << callback"}},{"html_id":"on_load_library?(&callback:String->Library|Nil)-instance-method","name":"on_load_library?","doc":"Subscribes *callback* to library load requests, so that\nwhenever the runtime needs a library, *callback* gets a\nchance to be invoked and load it.\n\n*callback* is only going to be invoked if all previously\ndefined callbacks failed (returned nil).\n\n*callback* should return a `Library` if it successfully\nloaded it; otherwise, it should return nil.","summary":"<p>Subscribes <em>callback</em> to library load requests, so that whenever the runtime needs a library, <em>callback</em> gets a chance to be invoked and load it.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":186,"url":null},"def":{"name":"on_load_library?","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(String -> Library | ::Nil)"},"visibility":"Public","body":"on_load_library?(callback)"}}]},{"html_id":"novika/Novika/CaptureMode","path":"Novika/CaptureMode.html","kind":"enum","full_name":"Novika::CaptureMode","name":"CaptureMode","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":24,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"CaptureAll","name":"CaptureAll","value":"0"},{"id":"CaptureNeighborhood","name":"CaptureNeighborhood","value":"1"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"capture_all?-instance-method","name":"capture_all?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":25,"url":null},"def":{"name":"capture_all?","visibility":"Public","body":"self == CaptureAll"}},{"html_id":"capture_neighborhood?-instance-method","name":"capture_neighborhood?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":26,"url":null},"def":{"name":"capture_neighborhood?","visibility":"Public","body":"self == CaptureNeighborhood"}}]},{"html_id":"novika/Novika/Classifier","path":"Novika/Classifier.html","kind":"struct","full_name":"Novika::Classifier","name":"Classifier","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/classifier.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"`Classifier` brings *unclassified forms* to life.\n\n`Classifier` assigns types to fragments of Novika code\nconveniently called *unclassified forms*: this\nunclassified form is a decimal, this one is a word, that\none is a quote.\n\nUnclassified forms are given to `Classifier` by `Scissors`,\nan object dedicated to cutting a big blob of Novika code\ninto smaller fragments.\n\n`Scissors` and `Classifier` are designed to work in\ntandem. Separating one from the other is possible and will\nwork, but is not recommended unless you have read the source\ncode of both.","summary":"<p><code><a href=\"../Novika/Classifier.html\">Classifier</a></code> brings <em>unclassified forms</em> to life.</p>","constructors":[{"html_id":"new(source:String,block:Novika::Block)-class-method","name":"new","doc":"Initializes a classifier from the given *source* string and\nNovika *block*.\n\n*block* is treated as the ceiling (toplevel) block for\n*source*, meaning you can't close it in *source*, and\nit doesn't need to be open.","summary":"<p>Initializes a classifier from the given <em>source</em> string and Novika <em>block</em>.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"block","external_name":"block","restriction":"Novika::Block"}],"args_string":"(source : String, block : Novika::Block)","args_html":"(source : <a href=\"../String.html\">String</a>, block : <a href=\"../Novika/Block.html\">Novika::Block</a>)","location":{"filename":"src/novika/classifier.cr","line_number":29,"url":null},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"},{"name":"block","external_name":"block","restriction":"Novika::Block"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source, block)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"block:Novika::Block-instance-method","name":"block","doc":"Returns the block used by this classifier.","summary":"<p>Returns the block used by this classifier.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":21,"url":null},"def":{"name":"block","visibility":"Public","body":"@block"}},{"html_id":"bytes:Pointer(UInt8)-instance-method","name":"bytes","doc":"Returns the source code byte pointer used by this classifier.","summary":"<p>Returns the source code byte pointer used by this classifier.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":18,"url":null},"def":{"name":"bytes","visibility":"Public","body":"@bytes"}},{"html_id":"classify(start,count,dot):Nil-instance-method","name":"classify","doc":"Classifies the subrange starting at byte index *start*,\nand *count* bytes long. *dot* is the byte index of `'.'`.\n\nThese three arguments are assumed to come from `Scissors#cut`.\n\nThis method does practically no bounds checks, is unsafe\nand must be worked with carefully.","summary":"<p>Classifies the subrange starting at byte index <em>start</em>, and <em>count</em> bytes long.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""},{"name":"dot","external_name":"dot","restriction":""}],"args_string":"(start, count, dot) : Nil","args_html":"(start, count, dot) : Nil","location":{"filename":"src/novika/classifier.cr","line_number":223,"url":null},"def":{"name":"classify","args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""},{"name":"dot","external_name":"dot","restriction":""}],"return_type":"Nil","visibility":"Public","body":"if count.zero?\n  return\nend\nbyte = @bytes[start]\ncase byte\nwhen '['\n  nest\nwhen ']'\n  unnest\nwhen '#'\n  if count > 1\n    add(Novika::QuotedWord.new(build_raw(start + 1, count - 1)))\n  else\n    add(Novika::Word.new(\"#\"))\n  end\nwhen '|'\n  if count > 1\n    add(Novika::Word.new(build_raw(start, count)))\n  else\n    push_cursor(block.count)\n  end\nwhen '\\''\n  add(Novika::Quote.new(build_quote(start + 1, count - 2)))\nwhen '\"'\n  if block.has_comment?\n    return\n  end\n  if block.count.zero?\n  else\n    return\n  end\n  block.describe_with?(build_comment(start + 1, count - 2))\nelse\n  e = (start + count) - 1\n  if dot\n  else\n    frag = build_raw(start, count)\n    if decimal?(start, e, sign: true)\n      add(Novika::Decimal.new(frag))\n    else\n      if number_with_base = number_with_base?(frag)\n        number, base = number_with_base\n        add(Novika::Decimal.new(number.to_big_i(base)))\n      else\n        add(Novika::Word.new(frag))\n      end\n    end\n    return\n  end\n  if ((start < dot && dot < e) && (decimal?(start, dot - 1, sign: true))) && (decimal?(dot + 1, e))\n    add(Novika::Decimal.new(build_raw(start, count)))\n  else\n    classify(start, dot - start, dot: nil)\n    add(Novika::Word.new(\".\"))\n    classify(dot + 1, e - dot)\n  end\nend\n"}},{"html_id":"classify(start,count)-instance-method","name":"classify","doc":"Classifies the subrange starting at byte index *start*,\nand *count* bytes long.","summary":"<p>Classifies the subrange starting at byte index <em>start</em>, and <em>count</em> bytes long.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""}],"args_string":"(start, count)","args_html":"(start, count)","location":{"filename":"src/novika/classifier.cr","line_number":311,"url":null},"def":{"name":"classify","args":[{"name":"start","external_name":"start","restriction":""},{"name":"count","external_name":"count","restriction":""}],"visibility":"Public","body":"dot = nil\nstart.upto((start + count) - 1) do |index|\n  if @bytes[index] === '.'\n    dot = index\n    break\n  end\nend\nclassify(start, count, dot)\n"}},{"html_id":"end-instance-method","name":"end","doc":"Ends classification. Makes sure all blocks are closed\n(have their corresponding `]`).","summary":"<p>Ends classification.</p>","abstract":false,"location":{"filename":"src/novika/classifier.cr","line_number":324,"url":null},"def":{"name":"end","visibility":"Public","body":"if @ceiling.same?(@block)\nelse\n  @block.die(\"missing ']'\")\nend"}}]},{"html_id":"novika/Novika/Color","path":"Novika/Color.html","kind":"struct","full_name":"Novika::Color","name":"Color","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/color.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"class_methods":[{"html_id":"rgb(r,g,b)-class-method","name":"rgb","doc":"Creates a `Color` from *r*ed (0 <= h <= 255), *g*reen\n(0 <= g <= 255), *b*lue (0 <= b <= 255) channel values.","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>r</em>ed (0 &lt;= h &lt;= 255), <em>g</em>reen (0 &lt;= g &lt;= 255), <em>b</em>lue (0 &lt;= b &lt;= 255) channel values.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":""},{"name":"g","external_name":"g","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(r, g, b)","args_html":"(r, g, b)","location":{"filename":"src/novika/forms/color.cr","line_number":88,"url":null},"def":{"name":"rgb","args":[{"name":"r","external_name":"r","restriction":""},{"name":"g","external_name":"g","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"rgb(Decimal.new(r), Decimal.new(g), Decimal.new(b))"}},{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":63,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"color\""}}],"constructors":[{"html_id":"hsl(h:Decimal,s:Decimal,l:Decimal):Color-class-method","name":"hsl","doc":"Creates a `Color` from *h*ue (0 <= h <= 360, degrees),\n*s*aturation (0 <= s <= 100, percents), and *l*ightness\n(0 <= l <= 100, percents).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>h</em>ue (0 &lt;= h &lt;= 360, degrees), <em>s</em>aturation (0 &lt;= s &lt;= 100, percents), and <em>l</em>ightness (0 &lt;= l &lt;= 100, percents).</p>","abstract":false,"args":[{"name":"h","external_name":"h","restriction":"Decimal"},{"name":"s","external_name":"s","restriction":"Decimal"},{"name":"l","external_name":"l","restriction":"Decimal"}],"args_string":"(h : Decimal, s : Decimal, l : Decimal) : Color","args_html":"(h : <a href=\"../Novika/Decimal.html\">Decimal</a>, s : <a href=\"../Novika/Decimal.html\">Decimal</a>, l : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":95,"url":null},"def":{"name":"hsl","args":[{"name":"h","external_name":"h","restriction":"Decimal"},{"name":"s","external_name":"s","restriction":"Decimal"},{"name":"l","external_name":"l","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"h = h.to_f64\ns = s.to_f64\nl = l.to_f64\ns = s / 100\nl = l / 100\nc = (1 - ((2 * l) - 1).abs) * s\nx = c * (1 - (((h / 60) % 2) - 1).abs)\nm = l - (c / 2)\nif h.in?(0...60)\n  rp, gp, bp = {c, x, 0}\nelse\n  if h.in?(60...120)\n    rp, gp, bp = {x, c, 0}\n  else\n    if h.in?(120...180)\n      rp, gp, bp = {0, c, x}\n    else\n      if h.in?(180...240)\n        rp, gp, bp = {0, x, c}\n      else\n        if h.in?(240...300)\n          rp, gp, bp = {x, 0, c}\n        else\n          if h.in?(300...360)\n            rp, gp, bp = {c, 0, x}\n          end\n        end\n      end\n    end\n  end\nend\nnew(Decimal.new(((rp.not_nil! + m) * 255).round), Decimal.new(((gp.not_nil! + m) * 255).round), Decimal.new(((bp.not_nil! + m) * 255).round))\n"}},{"html_id":"hsv(h,s,v):Color-class-method","name":"hsv","doc":"Creates a `Color` from *h*ue (0 <= h <= 360, degrees),\n*s*aturation (0 <= s <= 100, percents), and *v*alue\n(0 <= v <= 100, percents).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>h</em>ue (0 &lt;= h &lt;= 360, degrees), <em>s</em>aturation (0 &lt;= s &lt;= 100, percents), and <em>v</em>alue (0 &lt;= v &lt;= 100, percents).</p>","abstract":false,"args":[{"name":"h","external_name":"h","restriction":""},{"name":"s","external_name":"s","restriction":""},{"name":"v","external_name":"v","restriction":""}],"args_string":"(h, s, v) : Color","args_html":"(h, s, v) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":155,"url":null},"def":{"name":"hsv","args":[{"name":"h","external_name":"h","restriction":""},{"name":"s","external_name":"s","restriction":""},{"name":"v","external_name":"v","restriction":""}],"return_type":"Color","visibility":"Public","body":"h = h.to_f64\ns = s.to_f64\nv = v.to_f64\ns = s / 100\nv = v / 100\nc = v * s\nx = c * (1 - (((h / 60) % 2) - 1).abs)\nm = v - c\nif h.in?(0...60)\n  rp, gp, bp = {c, x, 0}\nelse\n  if h.in?(60...120)\n    rp, gp, bp = {x, c, 0}\n  else\n    if h.in?(120...180)\n      rp, gp, bp = {0, c, x}\n    else\n      if h.in?(180...240)\n        rp, gp, bp = {0, x, c}\n      else\n        if h.in?(240...300)\n          rp, gp, bp = {x, 0, c}\n        else\n          if h.in?(300...360)\n            rp, gp, bp = {c, 0, x}\n          end\n        end\n      end\n    end\n  end\nend\nnew(Decimal.new(((rp.not_nil! + m) * 255).round), Decimal.new(((gp.not_nil! + m) * 255).round), Decimal.new(((bp.not_nil! + m) * 255).round))\n"}},{"html_id":"lch(l:Decimal,c:Decimal,h:Decimal):Color-class-method","name":"lch","doc":"Creates a `Color` from *l*ightness (0-100), *c*hroma\n(0-132), *h*ue (0-360).","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>l</em>ightness (0-100), <em>c</em>hroma (0-132), <em>h</em>ue (0-360).</p>","abstract":false,"args":[{"name":"l","external_name":"l","restriction":"Decimal"},{"name":"c","external_name":"c","restriction":"Decimal"},{"name":"h","external_name":"h","restriction":"Decimal"}],"args_string":"(l : Decimal, c : Decimal, h : Decimal) : Color","args_html":"(l : <a href=\"../Novika/Decimal.html\">Decimal</a>, c : <a href=\"../Novika/Decimal.html\">Decimal</a>, h : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":215,"url":null},"def":{"name":"lch","args":[{"name":"l","external_name":"l","restriction":"Decimal"},{"name":"c","external_name":"c","restriction":"Decimal"},{"name":"h","external_name":"h","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"l = l.to_f64\nc = c.to_f64\nh = h.to_f64\nr, g, b = LCH.lch2rgb(l, c, h)\nnew(Decimal.new(r), Decimal.new(g), Decimal.new(b))\n"}},{"html_id":"rgb(r:Decimal,g:Decimal,b:Decimal):Color-class-method","name":"rgb","doc":"Creates a `Color` from *r*ed (0 <= h <= 255), *g*reen\n(0 <= g <= 255), *b*lue (0 <= b <= 255) channel values.","summary":"<p>Creates a <code><a href=\"../Novika/Color.html\">Color</a></code> from <em>r</em>ed (0 &lt;= h &lt;= 255), <em>g</em>reen (0 &lt;= g &lt;= 255), <em>b</em>lue (0 &lt;= b &lt;= 255) channel values.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"Decimal"},{"name":"g","external_name":"g","restriction":"Decimal"},{"name":"b","external_name":"b","restriction":"Decimal"}],"args_string":"(r : Decimal, g : Decimal, b : Decimal) : Color","args_html":"(r : <a href=\"../Novika/Decimal.html\">Decimal</a>, g : <a href=\"../Novika/Decimal.html\">Decimal</a>, b : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Color.html\">Color</a>","location":{"filename":"src/novika/forms/color.cr","line_number":83,"url":null},"def":{"name":"rgb","args":[{"name":"r","external_name":"r","restriction":"Decimal"},{"name":"g","external_name":"g","restriction":"Decimal"},{"name":"b","external_name":"b","restriction":"Decimal"}],"return_type":"Color","visibility":"Public","body":"new(r, g, b)"}}],"instance_methods":[{"html_id":"a:Decimal-instance-method","name":"a","doc":"Holds alpha channel value decimal (0-255).\n\nYou can mutate this to set alpha, but do remember that\n`Color` is a struct.","summary":"<p>Holds alpha channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":20,"url":null},"def":{"name":"a","return_type":"Decimal","visibility":"Public","body":"@a"}},{"html_id":"a=(a:Decimal)-instance-method","name":"a=","doc":"Holds alpha channel value decimal (0-255).\n\nYou can mutate this to set alpha, but do remember that\n`Color` is a struct.","summary":"<p>Holds alpha channel value decimal (0-255).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Decimal"}],"args_string":"(a : Decimal)","args_html":"(a : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/forms/color.cr","line_number":20,"url":null},"def":{"name":"a=","args":[{"name":"a","external_name":"a","restriction":"Decimal"}],"visibility":"Public","body":"@a = a"}},{"html_id":"b:Decimal-instance-method","name":"b","doc":"Returns blue channel value decimal (0-255).","summary":"<p>Returns blue channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":14,"url":null},"def":{"name":"b","return_type":"Decimal","visibility":"Public","body":"@b"}},{"html_id":"closest(palette:Array(Color))-instance-method","name":"closest","doc":"Returns the color closest to this color from *palette*.\n\nHow close one color is to another is determined by their\ndistance in an HSV-backed coordinate system.","summary":"<p>Returns the color closest to this color from <em>palette</em>.</p>","abstract":false,"args":[{"name":"palette","external_name":"palette","restriction":"Array(Color)"}],"args_string":"(palette : Array(Color))","args_html":"(palette : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Color.html\">Color</a>))","location":{"filename":"src/novika/forms/color.cr","line_number":55,"url":null},"def":{"name":"closest","args":[{"name":"palette","external_name":"palette","restriction":"Array(Color)"}],"visibility":"Public","body":"h, s, v = hsv\npalette.min_by do |other|\n  h1, s1, v1 = other.hsv\n  (((h1 - h).to_f64 ** 2) + ((s1 - s).to_f64 ** 2)) + ((v1 - v).to_f64 ** 2)\nend\n"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/color.cr","line_number":67,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"g:Decimal-instance-method","name":"g","doc":"Returns green channel value decimal (0-255).","summary":"<p>Returns green channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":11,"url":null},"def":{"name":"g","return_type":"Decimal","visibility":"Public","body":"@g"}},{"html_id":"hsl:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"hsl","doc":"Returns a tuple with H, S, L of this color.","summary":"<p>Returns a tuple with H, S, L of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":31,"url":null},"def":{"name":"hsl","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"h, s, l = Color.rgb2hsl(r.to_f64, g.to_f64, b.to_f64)\n{Decimal.new(h), Decimal.new(s), Decimal.new(l)}\n"}},{"html_id":"hsv:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"hsv","doc":"Returns a tuple with H, S, V of this color.","summary":"<p>Returns a tuple with H, S, V of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":38,"url":null},"def":{"name":"hsv","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"h, s, v = Color.rgb2hsv(r.to_f64, g.to_f64, b.to_f64)\n{Decimal.new(h), Decimal.new(s), Decimal.new(v)}\n"}},{"html_id":"lch:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"lch","doc":"Returns a tuple with L, C, H of this color.","summary":"<p>Returns a tuple with L, C, H of this color.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":45,"url":null},"def":{"name":"lch","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"l, c, h = LCH.rgb2lch(r.to_i, g.to_i, b.to_i)\n{Decimal.new(l.round), Decimal.new(c.round), Decimal.new(h.round)}\n"}},{"html_id":"r:Decimal-instance-method","name":"r","doc":"Returns red channel value decimal (0-255).","summary":"<p>Returns red channel value decimal (0-255).</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":8,"url":null},"def":{"name":"r","return_type":"Decimal","visibility":"Public","body":"@r"}},{"html_id":"rgb:Tuple(Decimal,Decimal,Decimal)-instance-method","name":"rgb","doc":"Returns a tuple of R, G, B channel values.","summary":"<p>Returns a tuple of R, G, B channel values.</p>","abstract":false,"location":{"filename":"src/novika/forms/color.cr","line_number":26,"url":null},"def":{"name":"rgb","return_type":"::Tuple(Decimal, Decimal, Decimal)","visibility":"Public","body":"{r, g, b}"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/color.cr","line_number":71,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"a255 = Decimal.new(255)\nio << \"rgb\"\nif a == a255\nelse\n  io << \"a\"\nend\n(((((io << \"(\") << r) << \", \") << g) << \", \") << b\nif a == a255\nelse\n  (io << \", \") << a\nend\nio << \")\"\n"}}]},{"html_id":"novika/Novika/ColorSnapshot","path":"Novika/ColorSnapshot.html","kind":"class","full_name":"Novika::ColorSnapshot","name":"ColorSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":95,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ColorSnapshot]","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: r, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: g, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: b, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: a, cls: UInt8, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Color)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Color"}],"args_string":"(form : Color)","args_html":"(form : <a href=\"../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/image.cr","line_number":116,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Color"}],"visibility":"Public","body":"color = new\ncolor.r = form.r.to_u8\ncolor.g = form.g.to_u8\ncolor.b = form.b.to_u8\ncolor.a = form.a.to_u8\ncolor\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":96,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"a:UInt8-instance-method","name":"a","doc":"Holds alpha channel value, a u8 0-255.","summary":"<p>Holds alpha channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"a","return_type":"UInt8","visibility":"Public","body":"@a"}},{"html_id":"a=(a:UInt8)-instance-method","name":"a=","doc":"Holds alpha channel value, a u8 0-255.","summary":"<p>Holds alpha channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"UInt8"}],"args_string":"(a : UInt8)","args_html":"(a : UInt8)","def":{"name":"a=","args":[{"name":"a","external_name":"a","restriction":"UInt8"}],"visibility":"Public","body":"@a = a"}},{"html_id":"b:UInt8-instance-method","name":"b","doc":"Holds blue channel value, a u8 0-255.","summary":"<p>Holds blue channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"b","return_type":"UInt8","visibility":"Public","body":"@b"}},{"html_id":"b=(b:UInt8)-instance-method","name":"b=","doc":"Holds blue channel value, a u8 0-255.","summary":"<p>Holds blue channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"args_string":"(b : UInt8)","args_html":"(b : UInt8)","def":{"name":"b=","args":[{"name":"b","external_name":"b","restriction":"UInt8"}],"visibility":"Public","body":"@b = b"}},{"html_id":"g:UInt8-instance-method","name":"g","doc":"Holds green channel value, a u8 0-255.","summary":"<p>Holds green channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"g","return_type":"UInt8","visibility":"Public","body":"@g"}},{"html_id":"g=(g:UInt8)-instance-method","name":"g=","doc":"Holds green channel value, a u8 0-255.","summary":"<p>Holds green channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"args_string":"(g : UInt8)","args_html":"(g : UInt8)","def":{"name":"g=","args":[{"name":"g","external_name":"g","restriction":"UInt8"}],"visibility":"Public","body":"@g = g"}},{"html_id":"r:UInt8-instance-method","name":"r","doc":"Holds red channel value, a u8 0-255.","summary":"<p>Holds red channel value, a u8 0-255.</p>","abstract":false,"def":{"name":"r","return_type":"UInt8","visibility":"Public","body":"@r"}},{"html_id":"r=(r:UInt8)-instance-method","name":"r=","doc":"Holds red channel value, a u8 0-255.","summary":"<p>Holds red channel value, a u8 0-255.</p>","abstract":false,"args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"args_string":"(r : UInt8)","args_html":"(r : UInt8)","def":{"name":"r=","args":[{"name":"r","external_name":"r","restriction":"UInt8"}],"visibility":"Public","body":"@r = r"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":110,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"color = Color.rgb(Decimal.new(r), Decimal.new(g), Decimal.new(b))\ncolor.a = Decimal.new(a)\ncolor\n"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a color form.\n\nIts type is `SnapshotType::Color`.","summary":"<p>Snapshot of a color form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":95,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Decimal","path":"Novika/Decimal.html","kind":"class","full_name":"Novika::Decimal","name":"Decimal","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/ValueForm","kind":"module","full_name":"Novika::ValueForm","name":"ValueForm"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/decimal.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/ValueForm","kind":"module","full_name":"Novika::ValueForm","name":"ValueForm"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A representation for decimal numbers inside Novika.","summary":"<p>A representation for decimal numbers inside Novika.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":27,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"decimal\""}}],"constructors":[{"html_id":"new(val:BigDecimal)-class-method","name":"new","abstract":false,"args":[{"name":"val","external_name":"val","restriction":"BigDecimal"}],"args_string":"(val : BigDecimal)","args_html":"(val : BigDecimal)","location":{"filename":"src/novika/forms/decimal.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"val","external_name":"val","restriction":"BigDecimal"}],"visibility":"Public","body":"_ = allocate\n_.initialize(val)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(object:String|Number)-class-method","name":"new","abstract":false,"args":[{"name":"object","external_name":"object","restriction":"String | Number"}],"args_string":"(object : String | Number)","args_html":"(object : <a href=\"../String.html\">String</a> | Number)","location":{"filename":"src/novika/forms/decimal.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"object","external_name":"object","restriction":"String | Number"}],"visibility":"Public","body":"_ = allocate\n_.initialize(object)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"%(other:Decimal):Decimal-instance-method","name":"%","doc":"Returns the remainder of this and *other* decimal numbers.","summary":"<p>Returns the remainder of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":75,"url":null},"def":{"name":"%","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"self - (other * (self / other).floor)"}},{"html_id":"*(other:Decimal):Decimal-instance-method","name":"*","doc":"Returns the product of this and *other* decimal numbers.","summary":"<p>Returns the product of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":65,"url":null},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val * other.val)"}},{"html_id":"**(other:Decimal):Decimal-instance-method","name":"**","doc":"Raises this decimal to the power of *other*.","summary":"<p>Raises this decimal to the power of <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":80,"url":null},"def":{"name":"**","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"if val.scale.zero? && other.val.scale.zero?\n  return Decimal.new(val ** other.val.to_i64)\nend\nDecimal.new(val.to_f64 ** other.to_f64)\n"}},{"html_id":"+(other:Decimal):Decimal-instance-method","name":"+","doc":"Returns the sum of this and *other* decimal numbers.","summary":"<p>Returns the sum of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":55,"url":null},"def":{"name":"+","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val + other.val)"}},{"html_id":"-(other:Decimal):Decimal-instance-method","name":"-","doc":"Returns the difference between this and *other* decimal numbers.","summary":"<p>Returns the difference between this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":60,"url":null},"def":{"name":"-","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val - other.val)"}},{"html_id":"/(other:Decimal):Decimal-instance-method","name":"/","doc":"Returns the quotient of this and *other* decimal numbers.","summary":"<p>Returns the quotient of this and <em>other</em> decimal numbers.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Decimal","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":70,"url":null},"def":{"name":"/","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Decimal","visibility":"Public","body":"Decimal.new(val / other.val)"}},{"html_id":"<(other:Decimal):Bool-instance-method","name":"<","doc":"Returns whether this decimal is smaller than *other*.","summary":"<p>Returns whether this decimal is smaller than <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"args_string":"(other : Decimal) : Bool","args_html":"(other : <a href=\"../Novika/Decimal.html\">Decimal</a>) : Bool","location":{"filename":"src/novika/forms/decimal.cr","line_number":94,"url":null},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"Decimal"}],"return_type":"Bool","visibility":"Public","body":"val < other.val"}},{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif val == other.val\nelse\n  return false\nend\ntrue\n"}},{"html_id":"ceil:Decimal-instance-method","name":"ceil","doc":"Rounds this decimal up.","summary":"<p>Rounds this decimal up.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":114,"url":null},"def":{"name":"ceil","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.ceil)"}},{"html_id":"chr:Char-instance-method","name":"chr","doc":"Returns the character corresponding to this decimal.","summary":"<p>Returns the character corresponding to this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":32,"url":null},"def":{"name":"chr","return_type":"Char","visibility":"Public","body":"to_i.chr"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/decimal.cr","line_number":21,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"decimal number \"\nto_s(io)\n"}},{"html_id":"floor:Decimal-instance-method","name":"floor","doc":"Rounds this decimal down.","summary":"<p>Rounds this decimal down.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":109,"url":null},"def":{"name":"floor","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.floor)"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = val.hash(hasher)\nhasher\n"}},{"html_id":"i64?-instance-method","name":"i64?","doc":"Returns whether this decimal is in the bounds of `Int64`.","summary":"<p>Returns whether this decimal is in the bounds of <code>Int64</code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":37,"url":null},"def":{"name":"i64?","visibility":"Public","body":"val.scale.zero? && (Int64::MIN <= (__temp_59 = val) && __temp_59 <= Int64::MAX)"}},{"html_id":"in(*ranges):Decimal-instance-method","name":"in","doc":"Asserts this decimal is in one of *ranges*. Dies if it isn't.","summary":"<p>Asserts this decimal is in one of <em>ranges</em>.</p>","abstract":false,"args":[{"name":"ranges","external_name":"ranges","restriction":""}],"args_string":"(*ranges) : Decimal","args_html":"(*ranges) : <a href=\"../Novika/Decimal.html\">Decimal</a>","location":{"filename":"src/novika/forms/decimal.cr","line_number":129,"url":null},"def":{"name":"in","args":[{"name":"ranges","external_name":"ranges","restriction":""}],"splat_index":0,"return_type":"Decimal","visibility":"Public","body":"if ranges.any?(&.includes?(val))\n  return self\nend\nmessage = String.build do |io|\n  io << \"decimal out of range: expected \"\n  if ranges.size > 1\n    io << \"any of: \"\n  end\n  ranges.join(io, \", \") do |range|\n    (((io << \"[\") << range.begin) << \"; \") << range.end\n    io << (range.exclusive? ? \")\" : \"]\")\n  end\nend\ndie(message)\n"}},{"html_id":"posint:Decimal-instance-method","name":"posint","doc":"Asserts this decimal is a positive integer (i.e., >= 0).\nDies if it isn't.","summary":"<p>Asserts this decimal is a positive integer (i.e., &gt;= 0).</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":148,"url":null},"def":{"name":"posint","return_type":"Decimal","visibility":"Public","body":"if val >= 0 && (val == val.to_big_i)\n  return self\nend\ndie(\"decimal is not a positive integer\")\n"}},{"html_id":"rad_cos:Decimal-instance-method","name":"rad_cos","doc":"Treats this decimal as radians, and returns cosine.","summary":"<p>Treats this decimal as radians, and returns cosine.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":119,"url":null},"def":{"name":"rad_cos","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.cos(val))"}},{"html_id":"rad_sin:Decimal-instance-method","name":"rad_sin","doc":"Treats this decimal as radians, and returns cosine.","summary":"<p>Treats this decimal as radians, and returns cosine.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":124,"url":null},"def":{"name":"rad_sin","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.sin(val))"}},{"html_id":"round:Decimal-instance-method","name":"round","doc":"Rounds this decimal.","summary":"<p>Rounds this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":99,"url":null},"def":{"name":"round","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.round)"}},{"html_id":"sqrt:Decimal-instance-method","name":"sqrt","doc":"Returns the square root of this decimal.","summary":"<p>Returns the square root of this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":89,"url":null},"def":{"name":"sqrt","return_type":"Decimal","visibility":"Public","body":"Decimal.new(Math.sqrt(val))"}},{"html_id":"to_f32(*args,**options)-instance-method","name":"to_f32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":19,"url":null},"def":{"name":"to_f32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_f32(*args, **options)"}},{"html_id":"to_f32(*args,**options,&)-instance-method","name":"to_f32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":19,"url":null},"def":{"name":"to_f32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_f32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_f64(*args,**options)-instance-method","name":"to_f64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":19,"url":null},"def":{"name":"to_f64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_f64(*args, **options)"}},{"html_id":"to_f64(*args,**options,&)-instance-method","name":"to_f64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":19,"url":null},"def":{"name":"to_f64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_f64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i:Int32-instance-method","name":"to_i","doc":"Downgrades this decimal into an integer (`Int32`). Dies\nif too large.","summary":"<p>Downgrades this decimal into an integer (<code>Int32</code>).</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":48,"url":null},"def":{"name":"to_i","return_type":"Int32","visibility":"Public","body":"begin\n  val.to_i\nrescue OverflowError\n  die(\"overflow when downgrading a decimal: this decimal is too big\")\nend"}},{"html_id":"to_i16(*args,**options)-instance-method","name":"to_i16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i16(*args, **options)"}},{"html_id":"to_i16(*args,**options,&)-instance-method","name":"to_i16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i16(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i32(*args,**options)-instance-method","name":"to_i32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i32(*args, **options)"}},{"html_id":"to_i32(*args,**options,&)-instance-method","name":"to_i32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i64(*args,**options)-instance-method","name":"to_i64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i64(*args, **options)"}},{"html_id":"to_i64(*args,**options,&)-instance-method","name":"to_i64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_i8(*args,**options)-instance-method","name":"to_i8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_i8(*args, **options)"}},{"html_id":"to_i8(*args,**options,&)-instance-method","name":"to_i8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":18,"url":null},"def":{"name":"to_i8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_i8(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/decimal.cr","line_number":154,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << (val.scale.zero? ? val.value : val)"}},{"html_id":"to_u16(*args,**options)-instance-method","name":"to_u16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u16(*args, **options)"}},{"html_id":"to_u16(*args,**options,&)-instance-method","name":"to_u16","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u16","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u16(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u32(*args,**options)-instance-method","name":"to_u32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u32(*args, **options)"}},{"html_id":"to_u32(*args,**options,&)-instance-method","name":"to_u32","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u32","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u32(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u64(*args,**options)-instance-method","name":"to_u64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u64(*args, **options)"}},{"html_id":"to_u64(*args,**options,&)-instance-method","name":"to_u64","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u64","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u64(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_u8(*args,**options)-instance-method","name":"to_u8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"val.to_u8(*args, **options)"}},{"html_id":"to_u8(*args,**options,&)-instance-method","name":"to_u8","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/decimal.cr","line_number":17,"url":null},"def":{"name":"to_u8","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"val.to_u8(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"trunc:Decimal-instance-method","name":"trunc","doc":"Truncates this decimal.","summary":"<p>Truncates this decimal.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":104,"url":null},"def":{"name":"trunc","return_type":"Decimal","visibility":"Public","body":"Decimal.new(val.trunc)"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns whether this decimal is zero.","summary":"<p>Returns whether this decimal is zero.</p>","abstract":false,"location":{"filename":"src/novika/forms/decimal.cr","line_number":42,"url":null},"def":{"name":"zero?","return_type":"Bool","visibility":"Public","body":"val.zero?"}}]},{"html_id":"novika/Novika/Dict","path":"Novika/Dict.html","kind":"class","full_name":"Novika::Dict","name":"Dict","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/IDict","kind":"module","full_name":"Novika::IDict","name":"IDict"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":55,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/IDict","kind":"module","full_name":"Novika::IDict","name":"IDict"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Default dictionary protocol implementation: default block\ndictionary implementation. Uses a hash map for storage.\n\nNote: setting or getting with blocks as keys performs a\nlinear scan for now. The semantics for this is unstable.","summary":"<p>Default dictionary protocol implementation: default block dictionary implementation.</p>","instance_methods":[{"html_id":"==(other:Dict)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Dict"}],"args_string":"(other : Dict)","args_html":"(other : <a href=\"../Novika/Dict.html\">Dict</a>)","location":{"filename":"src/novika/dict.cr","line_number":155,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Dict"}],"visibility":"Public","body":"if @store == (other.@store)\nelse\n  return false\nend\nif @blockstore.class == (other.@blockstore).class\nelse\n  return false\nend\nif bs_l = @blockstore\nelse\n  return true\nend\nbs_r = (other.@blockstore).not_nil!\nif bs_l.size == bs_r.size\nelse\n  return false\nend\nbs_l.all? do |k_l, v_l|\n  bs_r.any? do |k_r, v_r|\n    (k_l == k_r) && (v_l == v_r)\n  end\nend\n"}},{"html_id":"clear-instance-method","name":"clear","doc":"Removes all entries in this dictionary.","summary":"<p>Removes all entries in this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":123,"url":null},"def":{"name":"clear","visibility":"Public","body":"@store.clear\n@blockstore.try(&.clear)\n"}},{"html_id":"copy:IDict-instance-method","name":"copy","doc":"Returns a *shallow* copy of this dictionary.","summary":"<p>Returns a <em>shallow</em> copy of this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":142,"url":null},"def":{"name":"copy","return_type":"IDict","visibility":"Public","body":"Dict.new(@store.dup, @blockstore.try(&.dup))"}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of entries in this dictionary.","summary":"<p>Returns the amount of entries in this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":138,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":"@store.size + (@blockstore.try(&.size) || 0)"}},{"html_id":"del(name:Form)-instance-method","name":"del","doc":"Deletes the entry corresponding to *name* form in this\ndictionary if it exists. Otherwise, does nothing.","summary":"<p>Deletes the entry corresponding to <em>name</em> form in this dictionary if it exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":119,"url":null},"def":{"name":"del","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":"name.is_a?(Block) ? del_block(name) : @store.delete(name)"}},{"html_id":"each(&)-instance-method","name":"each","doc":"Yields key, value forms in this dictionary.","summary":"<p>Yields key, value forms in this dictionary.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":146,"url":null},"def":{"name":"each","yields":2,"block_arity":2,"visibility":"Public","body":"@store.each do |k, v|\n  yield k, v\nend\n@blockstore.try(&.each do |k, v|\n  yield k, v\nend)\n"}},{"html_id":"get(name:Form,&):Entry|Nil-instance-method","name":"get","doc":"Returns the entry corresponding to *name* form in this\ndictionary, or yields with *name* and returns the block\nresult.","summary":"<p>Returns the entry corresponding to <em>name</em> form in this dictionary, or yields with <em>name</em> and returns the block result.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form, &) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, &) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":113,"url":null},"def":{"name":"get","args":[{"name":"name","external_name":"name","restriction":"Form"}],"yields":1,"block_arity":1,"return_type":"Entry | ::Nil","visibility":"Public","body":"if name.is_a?(Block)\n  return get_block(name) do\n    yield name\n  end\nend\n@store.fetch(name) do\n  yield name\nend\n"}},{"html_id":"has?(name:Form):Bool-instance-method","name":"has?","doc":"Returns whether this dictionary has an entry corresponding\nto *name* form.","summary":"<p>Returns whether this dictionary has an entry corresponding to <em>name</em> form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":128,"url":null},"def":{"name":"has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"name.is_a?(Block) ? has_block?(name) : @store.has_key?(name)"}},{"html_id":"import!(donor:IDict)-instance-method","name":"import!","doc":"Imports entries from *donor* dictionary into this dictionary.\n\nEntries whose names are preceded by one or more `_` are\nnot imported (they are considered private).","summary":"<p>Imports entries from <em>donor</em> dictionary into this dictionary.</p>","abstract":false,"args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"args_string":"(donor : IDict)","args_html":"(donor : <a href=\"../Novika/IDict.html\">IDict</a>)","location":{"filename":"src/novika/dict.cr","line_number":132,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"visibility":"Public","body":"donor.each do |k, v|\n  if k.is_a?(Word) && k.private?\n  else\n    set(k, v)\n  end\nend"}},{"html_id":"set(name:Form,entry:Entry):Entry-instance-method","name":"set","doc":"Assigns *name* form to *entry* in this dictionary.","summary":"<p>Assigns <em>name</em> form to <em>entry</em> in this dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/dict.cr","line_number":107,"url":null},"def":{"name":"set","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"Entry","visibility":"Public","body":"if name.is_a?(Block)\n  return set_block(name, entry)\nend\n@store[name] = entry\n"}},{"html_id":"to_dict:Dict-instance-method","name":"to_dict","doc":"Converts this dictionary to the standard `Dict` implementation\n(used in e.g. serialization).","summary":"<p>Converts this dictionary to the standard <code><a href=\"../Novika/Dict.html\">Dict</a></code> implementation (used in e.g.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":151,"url":null},"def":{"name":"to_dict","return_type":"Dict","visibility":"Public","body":"self"}}]},{"html_id":"novika/Novika/EachRelativeFetch","path":"Novika/EachRelativeFetch.html","kind":"struct","full_name":"Novika::EachRelativeFetch(T)","name":"EachRelativeFetch","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/block.cr","line_number":72,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Executes a fetcher callback on every visited vertex in the block\ngraph starting from an entrypoint block, until the callback returns\n`T`, or until there are no more blocks to explore.\n\nThe quintessence of Novika, when looking up a *single* entry takes\na 70+ LoC object and a bunch of heap. Don't worry though; this is\nthe heavy artillery and it is not reached during simple lookup cases\n(and most of Novika code consists of such simple cases).\n\nWhat is done here is a weird combination of DFS and BFS that also\ntracks everything so as to not follow cyclic references forever.\nAll this complexity arose for historical reasons (a bunch of random\ndecisions, really) and simply for (the user's!) convenience.\n\nParent-based lookup is a DFS under the hood, and friends lookup\nis BFS-ish. And then all this recurses, and voilá! Don't break\nyour neck if you do choose to leap!","summary":"<p>Executes a fetcher callback on every visited vertex in the block graph starting from an entrypoint block, until the callback returns <code>T</code>, or until there are no more blocks to explore.</p>","constructors":[{"html_id":"new(fetcher:Block->T|Nil,marked:BlockIdMap,history:Block|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"fetcher","external_name":"fetcher","restriction":"(Block -> T | ::Nil)"},{"name":"marked","external_name":"marked","restriction":"BlockIdMap"},{"name":"history","default_value":"nil","external_name":"history","restriction":"Block | ::Nil"}],"args_string":"(fetcher : Block -> T | Nil, marked : BlockIdMap, history : Block | Nil = nil)","args_html":"(fetcher : <a href=\"../Novika/Block.html\">Block</a> -> T | Nil, marked : <a href=\"../Novika/BlockIdMap.html\">BlockIdMap</a>, history : <a href=\"../Novika/Block.html\">Block</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/block.cr","line_number":73,"url":null},"def":{"name":"new","args":[{"name":"fetcher","external_name":"fetcher","restriction":"(Block -> T | ::Nil)"},{"name":"marked","external_name":"marked","restriction":"BlockIdMap"},{"name":"history","default_value":"nil","external_name":"history","restriction":"Block | ::Nil"}],"visibility":"Public","body":"_ = EachRelativeFetch(T).allocate\n_.initialize(fetcher, marked, history)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on(entrypoint:Block,ignore:Nil):T|Nil-instance-method","name":"on","doc":"Executes the fetcher callback on every visited vertex in\nthe block graph starting from an *entrypoint* block, and\nuntil the callback returns `T`, or until exhausted all\nreachable vertices.","summary":"<p>Executes the fetcher callback on every visited vertex in the block graph starting from an <em>entrypoint</em> block, and until the callback returns <code>T</code>, or until exhausted all reachable vertices.</p>","abstract":false,"args":[{"name":"entrypoint","external_name":"entrypoint","restriction":"Block"},{"name":"ignore","external_name":"ignore","restriction":"Nil"}],"args_string":"(entrypoint : Block, ignore : Nil) : T | Nil","args_html":"(entrypoint : <a href=\"../Novika/Block.html\">Block</a>, ignore : Nil) : T | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":306,"url":null},"def":{"name":"on","args":[{"name":"entrypoint","external_name":"entrypoint","restriction":"Block"},{"name":"ignore","external_name":"ignore","restriction":"Nil"}],"return_type":"T | ::Nil","visibility":"Public","body":"fetch?(entrypoint, push: true) do |form|\n  return form\nend\nfetch_in_echelons?(entrypoint)\n"}},{"html_id":"on(entrypoint:Block,ignore:PIlist):T|Nil-instance-method","name":"on","doc":"Same as `on(entrypoint : Block, ignore : Nil)`, the difference\nbeing that immediately adjacent block *ignore* list is taken\ninto account.\n\nNote that *entrypoint* is also ignored even though it is not\nspecified in the *ignore* list.","summary":"<p>Same as <code><a href=\"../Novika/EachRelativeFetch.html#on%28entrypoint%3ABlock%2Cignore%3ANil%29%3AT%7CNil-instance-method\">#on(entrypoint : Block, ignore : Nil)</a></code>, the difference being that immediately adjacent block <em>ignore</em> list is taken into account.</p>","abstract":false,"args":[{"name":"entrypoint","external_name":"entrypoint","restriction":"Block"},{"name":"ignore","external_name":"ignore","restriction":"PIlist"}],"args_string":"(entrypoint : Block, ignore : PIlist) : T | Nil","args_html":"(entrypoint : <a href=\"../Novika/Block.html\">Block</a>, ignore : PIlist) : T | Nil","location":{"filename":"src/novika/forms/block.cr","line_number":317,"url":null},"def":{"name":"on","args":[{"name":"entrypoint","external_name":"entrypoint","restriction":"Block"},{"name":"ignore","external_name":"ignore","restriction":"PIlist"}],"return_type":"T | ::Nil","visibility":"Public","body":"fetch_in_echelons?(entrypoint, p_ilist: ignore)"}}]},{"html_id":"novika/Novika/Engine","path":"Novika/Engine.html","kind":"class","full_name":"Novika::Engine","name":"Engine","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/engine.cr","line_number":79,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"C_BLOCK_AT","name":"C_BLOCK_AT","value":"0","doc":"Index of the code block in a continuation block.","summary":"<p>Index of the code block in a continuation block.</p>"},{"id":"C_STACK_AT","name":"C_STACK_AT","value":"1","doc":"Index of the stack block in a continuation block.","summary":"<p>Index of the stack block in a continuation block.</p>"},{"id":"MAX_CONTS","name":"MAX_CONTS","value":"1024","doc":"Maximum amount of scheduled continuations in `conts`. After\npassing this number, `Error` is raised to bring attention\nto such dangerous depth.","summary":"<p>Maximum amount of scheduled continuations in <code><a href=\"../Novika/Engine.html#conts%3ANovika%3A%3ABlock-instance-method\">#conts</a></code>.</p>"},{"id":"MAX_ENGINES","name":"MAX_ENGINES","value":"1024","doc":"Maximum number of engines that can be created.\n\nThis is for safety reasons only, particularly to prevent\ninfinite recursion in e.g. asserts which are called from\nCrystal rather than Novika, thereby circumventing `MAX_CONTS`\nchecks. See `Engine.count`.","summary":"<p>Maximum number of engines that can be created.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"An engine object is responsible for managing a *continuations block*.\n\nContinuations block consists of *continuatio**n** blocks*.\n\nCanonical continuation blocks themselves contain two blocks\n(see `Engine.cont`):\n\n- *Code block*, more commonly known as simply the block\n  (and as *active* block when its continuation is active,\n   i.e., when it's being evaluated),\n\n- *Stack block*, more commonly known as simply the stack\n  (and as *active* stack when its continuation is active,\n   i.e., when it's being evaluated).\n\n`Engine#schedule` is used to create a continuation block\ngiven a `Schedulable` object (usually a `Form`, and in rarer\ncases an `Entry`) and a stack block. It then adds the\ncontinuation block to the continuations block -- effectively\nscheduling it for execution *on the next exhaust loop cycle*.\n\nNote that there are two other methods linked with execution\nand implemented by all forms: `on_open`, and `on_parent_open`.\nThey *perform* whatever action the form wants rather than\nsimply *scheduling* it to be performed some time in the\nfuture. Namely, `on_open` is invoked whenever the form at\nhand is itself the target of opening (aka execution, aka\nevaluation), and `on_parent_open` is invoked when a block\ncontaining the form at hand (its parent block) is the target\nof opening.\n\nAn engine's *exhaust loop* is where most of the magic happens.\nIt is organized very much like the fetch-decode-execute cycle\nin CPUs.\n\nFor *fetch*, the engine finds the top (see `Block#top`)\ncontinuation block, then finds the top form on the code\nblock, and invokes the `on_parent_open` method on it.\n\nThis method is  analogous to *decoding* followed by *execution*.\nThe form is free to choose how it wants to make sense of itself,\ngiven an engine. Some forms (e.g. words) end up scheduling\nnew continuation blocks `on_parent_open`, making the engine\ngo through them first.\n\nAfter the cursor of the active block hits the end, `Engine`\ndrops (see `Block#drop`) the continuation block (thereby\n*closing* the code block).\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nblock = Block.new(caps.block).slurp(\"1 2 +\")\nstack = Block.new\n\nengine = Engine.new(caps)\nengine.schedule(block, stack)\nengine.exhaust\n\nputs stack # [ 3 ]\n\n# Or, shorter:\n\ncaps = CapabilityCollection.with_default.enable_all\nblock = Block.new(caps.block).slurp(\"1 2 +\")\n\nputs Engine.exhaust(caps, block) # [ 3 ]\n```","summary":"<p>An engine object is responsible for managing a <em>continuations block</em>.</p>","class_methods":[{"html_id":"cont(*,block,stack)-class-method","name":"cont","doc":"Creates and returns a canonical continuation block.\n\nA continuation block must include two blocks: the first is\ncalled simply the *block* (found at `C_BLOCK_AT`), and the\nsecond is called the *stack* block (found at `C_STACK_AT`).","summary":"<p>Creates and returns a canonical continuation block.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":""},{"name":"stack","external_name":"stack","restriction":""}],"args_string":"(*, block, stack)","args_html":"(*, block, stack)","location":{"filename":"src/novika/engine.cr","line_number":170,"url":null},"def":{"name":"cont","args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":""},{"name":"stack","external_name":"stack","restriction":""}],"splat_index":0,"visibility":"Public","body":"Block.with([block, stack] of Form, leaf: false)"}},{"html_id":"current-class-method","name":"current","doc":"Returns the current engine. Raises a BUG exception if\nthere is no current engine.","summary":"<p>Returns the current engine.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":109,"url":null},"def":{"name":"current","visibility":"Public","body":"@@stack.last? || (raise(\"BUG: there is no current engine\"))"}},{"html_id":"exhaust(capabilities:CapabilityCollection,schedulable,stack=nil):Block-class-method","name":"exhaust","doc":"Schedules *schedulable* and exhausts immediately. Returns the\nresulting *stack* (creates one if `nil`).\n\nUseful for when you need the result of *schedulable*\nimmediately.\n\nFor details see `Engine#schedule`.\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nresult = Engine.exhaust(caps, Block.new(caps.block).slurp(\"1 2 +\"))\nresult.top # 3 : Novika::Decimal\n```","summary":"<p>Schedules <em>schedulable</em> and exhausts immediately.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"args_string":"(capabilities : CapabilityCollection, schedulable, stack = nil) : Block","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, schedulable, stack = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/engine.cr","line_number":174,"url":null},"def":{"name":"exhaust","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"return_type":"Block","visibility":"Public","body":"stack || (stack = Block.new)\nEngine.new(capabilities) do |engine|\n  engine.schedule(schedulable, stack)\n  engine.exhaust\nend\nstack\n"}},{"html_id":"exhaust!(capabilities:CapabilityCollection,schedulable,stack=nil):Block-class-method","name":"exhaust!","doc":"Schedules *schedulable* and exhausts immediately. Returns the\nresulting *stack* (creates one if `nil`).\n\nUseful for when you need the result of *schedulable*\nimmediately.\n\nFor details see `Engine#schedule!`.\n\n```\ncaps = CapabilityCollection.with_default.enable_all\nresult = Engine.exhaust(caps, Block.new(caps.block).slurp(\"1 2 +\"))\nresult.top # 3 : Novika::Decimal\n```","summary":"<p>Schedules <em>schedulable</em> and exhausts immediately.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"args_string":"(capabilities : CapabilityCollection, schedulable, stack = nil) : Block","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, schedulable, stack = <span class=\"n\">nil</span>) : <a href=\"../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/engine.cr","line_number":174,"url":null},"def":{"name":"exhaust!","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"},{"name":"schedulable","external_name":"schedulable","restriction":""},{"name":"stack","default_value":"nil","external_name":"stack","restriction":""}],"return_type":"Block","visibility":"Public","body":"stack || (stack = Block.new)\nEngine.new(capabilities) do |engine|\n  engine.schedule!(schedulable, stack)\n  engine.exhaust\nend\nstack\n"}},{"html_id":"pop(engine:Engine):Engine|Nil-class-method","name":"pop","doc":"Pops *engine* from the engine stack. Raises a BUG exception\n(and does not pop!) if the current engine is not *engine*\n(or if it is absent).","summary":"<p>Pops <em>engine</em> from the engine stack.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Engine | Nil","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <a href=\"../Novika/Engine.html\">Engine</a> | Nil","location":{"filename":"src/novika/engine.cr","line_number":135,"url":null},"def":{"name":"pop","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Engine | ::Nil","visibility":"Public","body":"if current.same?(engine)\nelse\n  raise(\"BUG: lost track of the engine stack: unexpected engine on top!\")\nend\n@@stack.pop\n"}},{"html_id":"push(caps:CapabilityCollection)-class-method","name":"push","doc":"Pushes a new engine with the given capability collection *caps*.\n\nMake sure that you `pop` it yourself or that you know what\nyou're doing!","summary":"<p>Pushes a new engine with the given capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/engine.cr","line_number":128,"url":null},"def":{"name":"push","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"push(new(caps))"}},{"html_id":"trackers-class-method","name":"trackers","doc":"Holds an array of exhaust tracker objects associated with\nall instances of `Engine`. These objects intercept forms\nbefore/after opening in `Engine#exhaust`. This e.g. allows\nfrontends to analyze/track forms and/or matching blocks.","summary":"<p>Holds an array of exhaust tracker objects associated with all instances of <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":103,"url":null},"def":{"name":"trackers","visibility":"Public","body":"@@trackers"}}],"constructors":[{"html_id":"new(capabilities:CapabilityCollection,&)-class-method","name":"new","doc":"Yields an instance of `Engine`.","summary":"<p>Yields an instance of <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"}],"args_string":"(capabilities : CapabilityCollection, &)","args_html":"(capabilities : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, &)","location":{"filename":"src/novika/engine.cr","line_number":153,"url":null},"def":{"name":"new","args":[{"name":"capabilities","external_name":"capabilities","restriction":"CapabilityCollection"}],"yields":1,"block_arity":1,"visibility":"Public","body":"engine = new(capabilities)\nEngine.push(engine)\nbegin\n  yield engine\nensure\n  Engine.pop(engine)\nend\n"}},{"html_id":"push(engine:Engine):Engine-class-method","name":"push","doc":"Pushes *engine* onto the engine stack.","summary":"<p>Pushes <em>engine</em> onto the engine stack.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Engine","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <a href=\"../Novika/Engine.html\">Engine</a>","location":{"filename":"src/novika/engine.cr","line_number":114,"url":null},"def":{"name":"push","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Engine","visibility":"Public","body":"if @@stack.size.in?(0..MAX_ENGINES)\nelse\n  raise(Error.new(\"bad engine stack depth: deep recursion in a __metaword__?\"))\nend\n@@stack << engine\nengine\n"}}],"instance_methods":[{"html_id":"block-instance-method","name":"block","doc":"Returns the block of the active continuation.","summary":"<p>Returns the block of the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":204,"url":null},"def":{"name":"block","visibility":"Public","body":"(cont.at(C_BLOCK_AT)).a(Block)"}},{"html_id":"capabilities:CapabilityCollection-instance-method","name":"capabilities","doc":"Returns the capability collection used by this engine.","summary":"<p>Returns the capability collection used by this engine.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":144,"url":null},"def":{"name":"capabilities","return_type":"CapabilityCollection","visibility":"Public","body":"@capabilities"}},{"html_id":"cont-instance-method","name":"cont","doc":"Returns the active continuation.","summary":"<p>Returns the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":199,"url":null},"def":{"name":"cont","visibility":"Public","body":"conts.top.a(Block)"}},{"html_id":"conts:Novika::Block-instance-method","name":"conts","doc":"Holds the continuations block (aka continuations stack).","summary":"<p>Holds the continuations block (aka continuations stack).</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":147,"url":null},"def":{"name":"conts","visibility":"Public","body":"@conts"}},{"html_id":"conts=(conts:Novika::Block)-instance-method","name":"conts=","doc":"Holds the continuations block (aka continuations stack).","summary":"<p>Holds the continuations block (aka continuations stack).</p>","abstract":false,"args":[{"name":"conts","external_name":"conts","restriction":"::Novika::Block"}],"args_string":"(conts : Novika::Block)","args_html":"(conts : <a href=\"../Novika/Block.html\">Novika::Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":147,"url":null},"def":{"name":"conts=","args":[{"name":"conts","external_name":"conts","restriction":"::Novika::Block"}],"visibility":"Public","body":"@conts = conts"}},{"html_id":"die(*args,**options)-instance-method","name":"die","doc":"See `Form#die`.","summary":"<p>See <code><a href=\"../Novika/Form.html#die%28details%3AString%29-instance-method\">Form#die</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/engine.cr","line_number":222,"url":null},"def":{"name":"die","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"block.die(*args, **options)"}},{"html_id":"die(*args,**options,&)-instance-method","name":"die","doc":"See `Form#die`.","summary":"<p>See <code><a href=\"../Novika/Form.html#die%28details%3AString%29-instance-method\">Form#die</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/engine.cr","line_number":222,"url":null},"def":{"name":"die","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"block.die(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"drop_until_death_handler?(avoid_prototype=nil)-instance-method","name":"drop_until_death_handler?","doc":"Returns the relevant death handler, or nil. Avoids\nhandlers whose prototype is *avoid_prototype*.\n\nTo find the relevant death handler, the continuations\nblock is inspected right-to-left (back-to-front); each\ncode block is then asked to retrieve `Word::DIED`\nusing `Block#at?`. Regardless of the result, the\ncontinuation block is then dropped.\n\nIf succeeded in retrieving `Word::DIED`, converts the\nresulting entry to block (does not distinguish between\nopeners and pushers). Returns that block.\n\nIf all continuations were exhausted and no `Hook.died`\nhad been found, returns nil.","summary":"<p>Returns the relevant death handler, or nil.</p>","abstract":false,"args":[{"name":"avoid_prototype","default_value":"nil","external_name":"avoid_prototype","restriction":""}],"args_string":"(avoid_prototype = nil)","args_html":"(avoid_prototype = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/engine.cr","line_number":279,"url":null},"def":{"name":"drop_until_death_handler?","args":[{"name":"avoid_prototype","default_value":"nil","external_name":"avoid_prototype","restriction":""}],"visibility":"Public","body":"while !conts.tape.empty?\n  entry = block.entry_for?(Hook.died)\n  conts.drop\n  if entry\n  else\n    next\n  end\n  handler = entry_to_death_handler_block(entry)\n  if avoid_prototype && (handler.prototype.same?(avoid_prototype))\n  else\n    return handler\n  end\nend"}},{"html_id":"each_active_block(&)-instance-method","name":"each_active_block","doc":"Yields active blocks, starting from the oldest active block\nup to the current active block.","summary":"<p>Yields active blocks, starting from the oldest active block up to the current active block.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":215,"url":null},"def":{"name":"each_active_block","yields":1,"block_arity":1,"visibility":"Public","body":"conts.each do |cont|\n  yield ((cont.a(Block)).at(C_BLOCK_AT)).a(Block)\nend"}},{"html_id":"execute(form:Form)-instance-method","name":"execute","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":293,"url":null},"def":{"name":"execute","args":[{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"begin\n  form.on_parent_open(self)\nrescue error : Error\n  error.conts || (error.conts = conts.instance)\n  if handler = drop_until_death_handler?(avoid_prototype: block.prototype)\n  else\n    raise(error)\n  end\n  schedule(handler, stack: conts.count.zero? ? Block.with(error) : stack.add(error))\nend"}},{"html_id":"exhaust-instance-method","name":"exhaust","doc":"Exhausts all scheduled continuations, starting from the\ntopmost (see `Block#top`) continuation in `conts`.","summary":"<p>Exhausts all scheduled continuations, starting from the topmost (see <code><a href=\"../Novika/Block.html#top%3AForm-instance-method\">Block#top</a></code>) continuation in <code><a href=\"../Novika/Engine.html#conts%3ANovika%3A%3ABlock-instance-method\">#conts</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":314,"url":null},"def":{"name":"exhaust","visibility":"Public","body":"while !conts.tape.empty?\n  while form = block.next?\n    Engine.trackers.each(&.on_form_begin(self, form))\n    execute(form)\n    Engine.trackers.each(&.on_form_end(self, form))\n  end\n  conts.drop\nend"}},{"html_id":"schedule(schedulable:Schedulable,stack:Block)-instance-method","name":"schedule","doc":"See `Schedulable#schedule`.","summary":"<p>See <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">Schedulable#schedule</a></code>.</p>","abstract":false,"args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(schedulable : Schedulable, stack : Block)","args_html":"(schedulable : <a href=\"../Novika/Schedulable.html\">Schedulable</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":246,"url":null},"def":{"name":"schedule","args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedulable.schedule(self, stack)"}},{"html_id":"schedule!(schedulable:Schedulable,stack:Block)-instance-method","name":"schedule!","doc":"See `Schedulable#schedule!`.","summary":"<p>See <code><a href=\"../Novika/Schedulable.html#schedule%21%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">Schedulable#schedule!</a></code>.</p>","abstract":false,"args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(schedulable : Schedulable, stack : Block)","args_html":"(schedulable : <a href=\"../Novika/Schedulable.html\">Schedulable</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":251,"url":null},"def":{"name":"schedule!","args":[{"name":"schedulable","external_name":"schedulable","restriction":"Schedulable"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedulable.schedule!(self, stack)"}},{"html_id":"schedule!(other:Block)-instance-method","name":"schedule!","doc":"Main authorized point for adding continuations unsafely.\nReturns self.\n\nProvides protection from continuations stack overflow.\n\nAdding to `conts` (the unauthorized way) does not protect\none from continuations stack overflow, and therefore from\na memory usage explosion.","summary":"<p>Main authorized point for adding continuations unsafely.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Block"}],"args_string":"(other : Block)","args_html":"(other : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":232,"url":null},"def":{"name":"schedule!","args":[{"name":"other","external_name":"other","restriction":"Block"}],"visibility":"Public","body":"if conts.count > MAX_CONTS\n  die(\"recursion or block open is too deep (> #{MAX_CONTS})\")\nend\ntap do\n  conts.add(other)\nend\n"}},{"html_id":"schedule!(*,block:Block,stack:Block)-instance-method","name":"schedule!","doc":"Schedules a continuation with the given *block* and *stack*.","summary":"<p>Schedules a continuation with the given <em>block</em> and <em>stack</em>.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":"Block"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(*, block : Block, stack : Block)","args_html":"(*, block : <a href=\"../Novika/Block.html\">Block</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/engine.cr","line_number":241,"url":null},"def":{"name":"schedule!","args":[{"name":"","external_name":"","restriction":""},{"name":"block","external_name":"block","restriction":"Block"},{"name":"stack","external_name":"stack","restriction":"Block"}],"splat_index":0,"visibility":"Public","body":"schedule!(Engine.cont(block: block, stack: stack))"}},{"html_id":"stack-instance-method","name":"stack","doc":"Returns the stack block of the active continuation.","summary":"<p>Returns the stack block of the active continuation.</p>","abstract":false,"location":{"filename":"src/novika/engine.cr","line_number":209,"url":null},"def":{"name":"stack","visibility":"Public","body":"(cont.at(C_STACK_AT)).a(Block)"}}]},{"html_id":"novika/Novika/Entry","path":"Novika/Entry.html","kind":"class","full_name":"Novika::Entry","name":"Entry","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":172,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"subclasses":[{"html_id":"novika/Novika/OpenEntry","kind":"class","full_name":"Novika::OpenEntry","name":"OpenEntry"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a dictionary entry. Dictionary entries hold the\nvalue form.","summary":"<p>Represents a dictionary entry.</p>","constructors":[{"html_id":"new(form:Novika::Form)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"args_string":"(form : Novika::Form)","args_html":"(form : <a href=\"../Novika/Form.html\">Novika::Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":178,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"visibility":"Public","body":"_ = allocate\n_.initialize(form)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif form == other.form\nelse\n  return false\nend\ntrue\n"}},{"html_id":"effect(*args,**options)-instance-method","name":"effect","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":182,"url":null},"def":{"name":"effect","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.effect(*args, **options)"}},{"html_id":"effect(*args,**options,&)-instance-method","name":"effect","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":182,"url":null},"def":{"name":"effect","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.effect(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"form:Form-instance-method","name":"form","doc":"Returns the form currently held by this entry.","summary":"<p>Returns the form currently held by this entry.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":176,"url":null},"def":{"name":"form","return_type":"Form","visibility":"Public","body":"@form"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = form.hash(hasher)\nhasher\n"}},{"html_id":"on_open(engine:Engine):Nil-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : Nil","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : Nil","location":{"filename":"src/novika/dict.cr","line_number":185,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"Nil","visibility":"Public","body":"onto(engine.stack)\nnil\n"}},{"html_id":"onto(*args,**options)-instance-method","name":"onto","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":182,"url":null},"def":{"name":"onto","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.onto(*args, **options)"}},{"html_id":"onto(*args,**options,&)-instance-method","name":"onto","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":182,"url":null},"def":{"name":"onto","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.onto(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"submit(form:Novika::Form):self-instance-method","name":"submit","doc":"Makes *form* the value form of this entry.","summary":"<p>Makes <em>form</em> the value form of this entry.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"args_string":"(form : Novika::Form) : self","args_html":"(form : <a href=\"../Novika/Form.html\">Novika::Form</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/dict.cr","line_number":192,"url":null},"def":{"name":"submit","args":[{"name":"form","external_name":"form","restriction":"::Novika::Form"}],"return_type":"self","visibility":"Public","body":"@form = form\nself\n"}}]},{"html_id":"novika/Novika/Error","path":"Novika/Error.html","kind":"class","full_name":"Novika::Error","name":"Error","abstract":false,"superclass":{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/error.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_TRACE","name":"MAX_TRACE","value":"64","doc":"How many trace entries to display at max.","summary":"<p>How many trace entries to display at max.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds and accepts information about an error.\n\nErrors are raised when a certain case is undesired, unhandleable,\nor otherwise inappropriate to some form of computation.\n\nErrors can be *handled* and *unhandled*. *Unhandled* errors\ngenerate an error `report` (generally to STDERR, but this\ndepends on the frontend). They are fatal for the program\nthey occur in.\n\n*Death handlers*, or *death traps*, when set up in code blocks\nand/or their relatives, allow errors to be *handled*. For this\nreason, errors are Novika `Form`s, and can be manipulated,\nreported, and inspected from Novika.","summary":"<p>Holds and accepts information about an error.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":39,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"error\""}}],"constructors":[{"html_id":"new(details:String,form:Novika::Form|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"details","external_name":"details","restriction":"::String"},{"name":"form","default_value":"nil","external_name":"form","restriction":"::Novika::Form | ::Nil"}],"args_string":"(details : String, form : Novika::Form | Nil = nil)","args_html":"(details : <a href=\"../String.html\">String</a>, form : <a href=\"../Novika/Form.html\">Novika::Form</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/error.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"details","external_name":"details","restriction":"::String"},{"name":"form","default_value":"nil","external_name":"form","restriction":"::Novika::Form | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(details, form)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"conts:Block|Nil-instance-method","name":"conts","doc":"Holds a reference to the continuations block at the time\nof death.","summary":"<p>Holds a reference to the continuations block at the time of death.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":30,"url":null},"def":{"name":"conts","return_type":"Block | ::Nil","visibility":"Public","body":"@conts"}},{"html_id":"conts=(conts:Block|Nil)-instance-method","name":"conts=","doc":"Holds a reference to the continuations block at the time\nof death.","summary":"<p>Holds a reference to the continuations block at the time of death.</p>","abstract":false,"args":[{"name":"conts","external_name":"conts","restriction":"Block | ::Nil"}],"args_string":"(conts : Block | Nil)","args_html":"(conts : <a href=\"../Novika/Block.html\">Block</a> | Nil)","location":{"filename":"src/novika/error.cr","line_number":30,"url":null},"def":{"name":"conts=","args":[{"name":"conts","external_name":"conts","restriction":"Block | ::Nil"}],"visibility":"Public","body":"@conts = conts"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/error.cr","line_number":35,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"error: '\") << details) << \"'\""}},{"html_id":"details:String-instance-method","name":"details","doc":"Returns a string describing the reasons of this error.","summary":"<p>Returns a string describing the reasons of this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":23,"url":null},"def":{"name":"details","return_type":"String","visibility":"Public","body":"@details"}},{"html_id":"form:Form-instance-method","name":"form","doc":"Returns the form that (speculatively) caused this error.","summary":"<p>Returns the form that (speculatively) caused this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":26,"url":null},"def":{"name":"form","return_type":"Form","visibility":"Public","body":"if (value = @form).nil?\n  ::raise(NilAssertionError.new(\"Novika::Error#form cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"form?:Form|Nil-instance-method","name":"form?","doc":"Returns the form that (speculatively) caused this error.","summary":"<p>Returns the form that (speculatively) caused this error.</p>","abstract":false,"location":{"filename":"src/novika/error.cr","line_number":26,"url":null},"def":{"name":"form?","return_type":"Form | ::Nil","visibility":"Public","body":"@form"}},{"html_id":"report(io:IO)-instance-method","name":"report","doc":"Reports about this error to *io*.\n\nNote: Colorize is used for colors and emphasis. If you\ndo not want Colorize in *io*, you can temporarily disable\nit by setting `Colorize.enabled = false`.","summary":"<p>Reports about this error to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/error.cr","line_number":48,"url":null},"def":{"name":"report","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"if conts = self.conts\n  b = Math.max(0, conts.count - MAX_TRACE)\n  e = conts.count\n  if b.zero?\n  else\n    ((io << \"  │ … \") << (b - 1)) << \" continuation(s) omitted …\"\n    io.puts\n  end\n  (b...e).each do |index|\n    io << \"  ╿ due to \"\n    cont = (conts.at(index)).as?(Block)\n    code = cont.try do |__arg0|\n      (__arg0.at?(Engine::C_BLOCK_AT)).as?(Block)\n    end\n    if cont && code\n    else\n      io.puts(\"[malformed continuation]\")\n      next\n    end\n    if top = code.top?\n      ((io << \"'\") << (top || \"[nothing]\").colorize.bold) << \"', which was opened here:\"\n    else\n      io << \"the following block:\"\n    end\n    io.puts\n    io << \"  │  \"\n    code.spot(io)\n    io.puts\n  end\nend\nif form?\n  io.puts(\"  ╿ this form is invalid, and is the cause of death:\")\n  (io << \"  │  \") << form\n  io.puts\nend\n(io << \"Sorry: \".colorize.red.bold) << details\ncase details.byte_at?(details.bytesize - 1)\nwhen '!', '?', '.'\nelse\n  io << '.'\nend\nio.puts\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/error.cr","line_number":96,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[\") << details) << \"]\""}}]},{"html_id":"novika/Novika/False","path":"Novika/False.html","kind":"struct","full_name":"Novika::False","name":"False","abstract":false,"superclass":{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},"ancestors":[{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":63,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a falsey `Boolean`. `False` is the only falsey\nform in Novika.","summary":"<p>Represents a falsey <code><a href=\"../Novika/Boolean.html\">Boolean</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":68,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"true"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/boolean.cr","line_number":64,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"boolean false\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher"}},{"html_id":"sel(a,b)-instance-method","name":"sel","doc":"Selects either *a* or *b*. Novika defines `False` to be the\nonly form selecting *b*. All other forms select *a*.","summary":"<p>Selects either <em>a</em> or <em>b</em>.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/novika/forms/boolean.cr","line_number":72,"url":null},"def":{"name":"sel","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"b"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/boolean.cr","line_number":76,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"false\""}}]},{"html_id":"novika/Novika/FFI","path":"Novika/FFI.html","kind":"module","full_name":"Novika::FFI","name":"FFI","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":3,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"types":[{"html_id":"novika/Novika/FFI/Cchar","path":"Novika/FFI/Cchar.html","kind":"struct","full_name":"Novika::FFI::Cchar","name":"Cchar","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":368,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of C char (a u8).\nIn Novika, char is represented by a single-character quote.","summary":"<p>Type-side and value-side representation of C char (a u8).</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":396,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Quote)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/ffi.cr","line_number":384,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"form.first_byte?.try do |byte|\n  new(byte)\nend"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":388,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form.to_u8)"}},{"html_id":"matches?(value:Cchar)-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Cchar"}],"args_string":"(value : Cchar)","args_html":"(value : <a href=\"../../Novika/FFI/Cchar.html\">Cchar</a>)","location":{"filename":"src/novika/ffi.cr","line_number":417,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"Cchar"}],"visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":421,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":400,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"char\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":413,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"new((box.as(::Pointer(UInt8))).value)"}}],"constructors":[{"html_id":"new(char:UInt8)-class-method","name":"new","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"UInt8"}],"args_string":"(char : UInt8)","args_html":"(char : UInt8)","location":{"filename":"src/novika/ffi.cr","line_number":372,"url":null},"def":{"name":"new","args":[{"name":"char","external_name":"char","restriction":"UInt8"}],"visibility":"Public","body":"_ = allocate\n_.initialize(char)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":404,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, @char)).as(::Pointer(Void))"}},{"html_id":"to_crystal-instance-method","name":"to_crystal","doc":"Returns the corresponding Crystal character.","summary":"<p>Returns the corresponding Crystal character.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":376,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@char.chr"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":380,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Quote.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":392,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"'\") << to_crystal) << \"'\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":408,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt8))).value = @char\nbase\n"}}]},{"html_id":"novika/Novika/FFI/Cstr","path":"Novika/FFI/Cstr.html","kind":"struct","full_name":"Novika::FFI::Cstr","name":"Cstr","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":428,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of C string (a u8 pointer).\nIn Novika, C string is represented by a quote.","summary":"<p>Type-side and value-side representation of C string (a u8 pointer).</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":456,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Quote)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/ffi.cr","line_number":460,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"new(form.string)"}},{"html_id":"matches?(value:Cstr)-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Cstr"}],"args_string":"(value : Cstr)","args_html":"(value : <a href=\"../../Novika/FFI/Cstr.html\">Cstr</a>)","location":{"filename":"src/novika/ffi.cr","line_number":486,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"Cstr"}],"visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":490,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":464,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"cstr\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":481,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"handle = Pointer(UInt8).new((box.as(::Pointer(UInt64))).value)\nhandle.null? ? UntypedPointer.none : new(String.new(handle))\n"}}],"constructors":[{"html_id":"new(string:String)-class-method","name":"new","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"}],"args_string":"(string : String)","args_html":"(string : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":432,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @string == (other.@string)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":468,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"write_to!((Pointer(UInt64).malloc(1)).as(::Pointer(Void)))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @string.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:String-instance-method","name":"to_crystal","doc":"Returns the corresponding Crystal string.","summary":"<p>Returns the corresponding Crystal string.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":436,"url":null},"def":{"name":"to_crystal","return_type":"String","visibility":"Public","body":"@string"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":440,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Quote.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":452,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"\\\"\") << to_crystal) << \"\\\"\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":472,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"bytes = Pointer(UInt8).malloc(@string.bytesize + 1)\nbytes.copy_from(@string.to_unsafe, @string.bytesize)\nbytes[@string.bytesize + 1] = 0\n(base.as(::Pointer(UInt64))).value = bytes.address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/DefaultTypeParser","path":"Novika/FFI/DefaultTypeParser.html","kind":"struct","full_name":"Novika::FFI::DefaultTypeParser","name":"DefaultTypeParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":143,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Allows all parse-able types, from ints to `nothing` to\nstructs and unions.","summary":"<p>Allows all parse-able types, from ints to <code>nothing</code> to structs and unions.</p>"},{"html_id":"novika/Novika/FFI/F32","path":"Novika/FFI/F32.html","kind":"struct","full_name":"Novika::FFI::F32","name":"F32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":238,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Float32`.","summary":"<p>Type-side and value-side representation of <code>Float32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:F32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"F32"}],"args_string":"(value : F32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/F32.html\">F32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"F32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.float"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"f32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"F32.new((box.as(::Pointer(Float32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Float32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_f32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":238,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Float32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/F64","path":"Novika/FFI/F64.html","kind":"struct","full_name":"Novika::FFI::F64","name":"F64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":239,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Float64`.","summary":"<p>Type-side and value-side representation of <code>Float64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:F64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"F64"}],"args_string":"(value : F64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/F64.html\">F64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"F64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.double"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"f64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"F64.new((box.as(::Pointer(Float64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Float64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Float64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_f64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":239,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Float64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/FixedArityFunction","path":"Novika/FFI/FixedArityFunction.html","kind":"struct","full_name":"Novika::FFI::FixedArityFunction","name":"FixedArityFunction","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},"ancestors":[{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1037,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Calls a fixed-arity C function.","summary":"<p>Calls a fixed-arity C function.</p>","constructors":[{"html_id":"new(id:String,handle:Pointer(Void),argtypes:Array(ForeignType),return_type:ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"argtypes","external_name":"argtypes","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"args_string":"(id : String, handle : Pointer(Void), argtypes : Array(ForeignType), return_type : ForeignType)","args_html":"(id : <a href=\"../../String.html\">String</a>, handle : Pointer(Void), argtypes : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), return_type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":1040,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"argtypes","external_name":"argtypes","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, handle, argtypes, return_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1058,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":"args = Array(ForeignValue).new(@argtypes.size)\n@argtypes.reverse_each do |argtype|\n  arg = argtype.from(block.drop)\n  arg.must_be_of(argtype)\n  args.unshift(arg)\nend\n(call(args)).to_form?\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1038,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}}]},{"html_id":"novika/Novika/FFI/ForeignType","path":"Novika/FFI/ForeignType.html","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":28,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for Novika FFI types.","summary":"<p>Base type for Novika FFI types.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":30,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":""}},{"html_id":"from(form:Form):ForeignValue-instance-method","name":"from","doc":"Instantiates a foreign value of this foreign type from\nthe given *form*.\n\nDies if conversion is impossible.","summary":"<p>Instantiates a foreign value of this foreign type from the given <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : ForeignValue","args_html":"(form : <a href=\"../../Novika/Form.html\">Form</a>) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":48,"url":null},"def":{"name":"from","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"ForeignValue","visibility":"Public","body":"(from?(form)) || (raise(Error.new(\"could not convert #{form} to foreign type #{self}\")))"}},{"html_id":"from?(form:Form):ForeignValue|Nil-instance-method","name":"from?","doc":"Instantiates a foreign value of this foreign type from\nthe given *form*.\n\nReturns nil if conversion is impossible.","summary":"<p>Instantiates a foreign value of this foreign type from the given <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(form : Form) : ForeignValue | Nil","args_html":"(form : <a href=\"../../Novika/Form.html\">Form</a>) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":56,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Form"}],"return_type":"ForeignValue | ::Nil","visibility":"Public","body":""}},{"html_id":"matches?(value:ForeignValue):Bool-instance-method","name":"matches?","doc":"Returns whether this type corresponds to the given *value*.","summary":"<p>Returns whether this type corresponds to the given <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(value : ForeignValue) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":60,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"ForeignValue"}],"return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":40,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"(to_ffi_type.@type).value.size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":37,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":true,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":34,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/ForeignValue","path":"Novika/FFI/ForeignValue.html","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/Cchar","kind":"struct","full_name":"Novika::FFI::Cchar","name":"Cchar"},{"html_id":"novika/Novika/FFI/Cstr","kind":"struct","full_name":"Novika::FFI::Cstr","name":"Cstr"},{"html_id":"novika/Novika/FFI/F32","kind":"struct","full_name":"Novika::FFI::F32","name":"F32"},{"html_id":"novika/Novika/FFI/F64","kind":"struct","full_name":"Novika::FFI::F64","name":"F64"},{"html_id":"novika/Novika/FFI/I16","kind":"struct","full_name":"Novika::FFI::I16","name":"I16"},{"html_id":"novika/Novika/FFI/I32","kind":"struct","full_name":"Novika::FFI::I32","name":"I32"},{"html_id":"novika/Novika/FFI/I64","kind":"struct","full_name":"Novika::FFI::I64","name":"I64"},{"html_id":"novika/Novika/FFI/I8","kind":"struct","full_name":"Novika::FFI::I8","name":"I8"},{"html_id":"novika/Novika/FFI/Nothing","kind":"struct","full_name":"Novika::FFI::Nothing","name":"Nothing"},{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Novika/FFI/U16","kind":"struct","full_name":"Novika::FFI::U16","name":"U16"},{"html_id":"novika/Novika/FFI/U32","kind":"struct","full_name":"Novika::FFI::U32","name":"U32"},{"html_id":"novika/Novika/FFI/U64","kind":"struct","full_name":"Novika::FFI::U64","name":"U64"},{"html_id":"novika/Novika/FFI/U8","kind":"struct","full_name":"Novika::FFI::U8","name":"U8"},{"html_id":"novika/Novika/FFI/UntypedPointer","kind":"struct","full_name":"Novika::FFI::UntypedPointer","name":"UntypedPointer"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for Novika FFI values (both heap & stack allocated).","summary":"<p>Base type for Novika FFI values (both heap &amp; stack allocated).</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":7,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":""}},{"html_id":"must_be_of(type:ForeignType)-instance-method","name":"must_be_of","doc":"Raises if this value is not of the given `ForeignType` *type*.","summary":"<p>Raises if this value is not of the given <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code> <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(type : ForeignType)","args_html":"(type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":20,"url":null},"def":{"name":"must_be_of","args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"visibility":"Public","body":"if type.matches?(self)\n  return\nend\nraise(Error.new(\"#{type} is incompatible with #{self}\"))\n"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":17,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":true,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":11,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/Function","path":"Novika/FFI/Function.html","kind":"struct","full_name":"Novika::FFI::Function","name":"Function","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1026,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/FFI/FixedArityFunction","kind":"struct","full_name":"Novika::FFI::FixedArityFunction","name":"FixedArityFunction"},{"html_id":"novika/Novika/FFI/VariadicFunction","kind":"struct","full_name":"Novika::FFI::VariadicFunction","name":"VariadicFunction"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type for C function call interfaces.","summary":"<p>Base type for C function call interfaces.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1026,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":true,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1033,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":true,"location":{"filename":"src/novika/ffi.cr","line_number":1028,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":""}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1026,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/I16","path":"Novika/FFI/I16.html","kind":"struct","full_name":"Novika::FFI::I16","name":"I16","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":234,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int16`.","summary":"<p>Type-side and value-side representation of <code>Int16</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int16).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I16):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I16"}],"args_string":"(value : I16) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I16.html\">I16</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I16"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint16"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i16\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I16.new((box.as(::Pointer(Int16))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int16).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int16-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i16\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":234,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int16))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I32","path":"Novika/FFI/I32.html","kind":"struct","full_name":"Novika::FFI::I32","name":"I32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":235,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int32`.","summary":"<p>Type-side and value-side representation of <code>Int32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I32"}],"args_string":"(value : I32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I32.html\">I32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint32"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I32.new((box.as(::Pointer(Int32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":235,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I64","path":"Novika/FFI/I64.html","kind":"struct","full_name":"Novika::FFI::I64","name":"I64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":236,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int64`.","summary":"<p>Type-side and value-side representation of <code>Int64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I64"}],"args_string":"(value : I64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I64.html\">I64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint64"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I64.new((box.as(::Pointer(Int64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":236,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/I8","path":"Novika/FFI/I8.html","kind":"struct","full_name":"Novika::FFI::I8","name":"I8","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":233,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `Int8`.","summary":"<p>Type-side and value-side representation of <code>Int8</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:I8):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"I8"}],"args_string":"(value : I8) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/I8.html\">I8</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"I8"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.sint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"i8\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"I8.new((box.as(::Pointer(Int8))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(Int8).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:Int8-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_i8\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":233,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(Int8))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/InlineStructType","path":"Novika/FFI/InlineStructType.html","kind":"struct","full_name":"Novika::FFI::InlineStructType","name":"InlineStructType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":785,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of an inline struct, e.g. one returned\nfrom a function or passed as an argument, aka stack-allocated\nstructs (like Crystal `struct`).","summary":"<p><em>Type-side</em> representation of an inline struct, e.g.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":790,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"Pointer(Void).malloc(self.sizeof)"}},{"html_id":"matches?(view:InlineStructView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"InlineStructView"}],"args_string":"(view : InlineStructView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/InlineStructView.html\">InlineStructView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":806,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"InlineStructView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":786,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"padded_size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":802,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.struct(@layout.map_desc_with_index do |__arg2|\n  __arg2.type.to_ffi_type\nend)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":810,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"~\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":798,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"box.null? ? UntypedPointer.none : view_for(box)"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":794,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"InlineStructView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/InlineStructView","path":"Novika/FFI/InlineStructView.html","kind":"struct","full_name":"Novika::FFI::InlineStructView","name":"InlineStructView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":975,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of an inline struct, aka\nstack-allocated struct. Allows to read and write fields (see\n`StructView`). Similar to the `.` operator in C.","summary":"<p><em>Value-side</em> representation of an inline struct, aka stack-allocated struct.</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":976,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":986,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"~⟨\"\nsuper(io)\nio << \"⟩\"\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":980,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"@handle.move_to(base, @layout.padded_size)\nbase\n"}}]},{"html_id":"novika/Novika/FFI/Nothing","path":"Novika/FFI/Nothing.html","kind":"struct","full_name":"Novika::FFI::Nothing","name":"Nothing","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":330,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of void. All value-side\nmethods raise.","summary":"<p>Type-side and value-side representation of void.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":345,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be allocated\")"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":361,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.void"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":353,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"void\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":357,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"Nothing.new"}}],"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":330,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":334,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be boxed\")"}},{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":330,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":342,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":349,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"(void)\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":338,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"raise(\"BUG: nothing cannot be written\")"}}]},{"html_id":"novika/Novika/FFI/StructFieldDesc","path":"Novika/FFI/StructFieldDesc.html","kind":"struct","full_name":"Novika::FFI::StructFieldDesc","name":"StructFieldDesc","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":500,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Holds the description of a struct field: its id (purely for\nconvenience), type (one of `ForeignType`s), and, most\nimportantly, *offset*.","summary":"<p>Holds the description of a struct field: its id (purely for convenience), type (one of <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code>s), and, most importantly, <em>offset</em>.</p>","constructors":[{"html_id":"new(id:String,type:ForeignType,offset:UInt64)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"type","external_name":"type","restriction":"ForeignType"},{"name":"offset","external_name":"offset","restriction":"UInt64"}],"args_string":"(id : String, type : ForeignType, offset : UInt64)","args_html":"(id : <a href=\"../../String.html\">String</a>, type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>, offset : UInt64)","location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"type","external_name":"type","restriction":"ForeignType"},{"name":"offset","external_name":"offset","restriction":"UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, type, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@id.clone, @type.clone, @offset.clone)"}},{"html_id":"copy_with(id_id=@id,type_type=@type,offset_offset=@offset)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_id","default_value":"@id","external_name":"id","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_offset","default_value":"@offset","external_name":"offset","restriction":""}],"args_string":"(id _id = @id, type _type = @type, offset _offset = @offset)","args_html":"(id _id = @id, type _type = @type, offset _offset = @offset)","location":{"filename":"src/novika/ffi.cr","line_number":500,"url":null},"def":{"name":"copy_with","args":[{"name":"_id","default_value":"@id","external_name":"id","restriction":""},{"name":"_type","default_value":"@type","external_name":"type","restriction":""},{"name":"_offset","default_value":"@offset","external_name":"offset","restriction":""}],"visibility":"Public","body":"self.class.new(_id, _type, _offset)"}},{"html_id":"fetch!(base:Pointer(Void)):ForeignValue-instance-method","name":"fetch!","doc":"offset, assuming *base* points to the start of the struct this\nfield is a member of.\n\nThe latter is not enforced; therefore, this method is considered\n**unsafe**.","summary":"<p>offset, assuming <em>base</em> points to the start of the struct this field is a member of.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : ForeignValue","args_html":"(base : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":507,"url":null},"def":{"name":"fetch!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"type.unbox(Pointer(Void).new(base.address + offset))"}},{"html_id":"id:String-instance-method","name":"id","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"offset:UInt64-instance-method","name":"offset","abstract":false,"def":{"name":"offset","return_type":"UInt64","visibility":"Public","body":"@offset"}},{"html_id":"put!(base:Pointer(Void),value:ForeignValue)-instance-method","name":"put!","doc":"Writes *value* at *base* plus this field's offset, assuming\n*base* points to the start of the struct this field is a\nmember of.\n\nThe latter is not enforced; therefore, this method is considered\n**unsafe**.","summary":"<p>Writes <em>value</em> at <em>base</em> plus this field's offset, assuming <em>base</em> points to the start of the struct this field is a member of.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(base : Pointer(Void), value : ForeignValue)","args_html":"(base : Pointer(Void), value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":517,"url":null},"def":{"name":"put!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"value.must_be_of(type)\nvalue.write_to!(Pointer(Void).new(base.address + offset))\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":522,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((((io << \"(\") << type) << \" \") << id) << \")\""}},{"html_id":"type:ForeignType-instance-method","name":"type","abstract":false,"def":{"name":"type","return_type":"ForeignType","visibility":"Public","body":"@type"}}]},{"html_id":"novika/Novika/FFI/StructLayout","path":"Novika/FFI/StructLayout.html","kind":"class","full_name":"Novika::FFI::StructLayout","name":"StructLayout","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":551,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Allows to describe structs which can then be constructed,\nretrieved, read, and written to.\n\n```\npoint_s = StructLayout.new(\"Point\")\npoint_s.add(\"x\", F64)\npoint_s.add(\"y\", F64)\n\nrect_s = StructLayout.new(\"Rect\")\nrect_s.add(\"origin\", point_s.reference)\nrect_s.add(\"corner\", point_s.inline)\n\norigin = point_s.reference.make!\norigin[\"x\"] = F64.new(123)\norigin[\"y\"] = F64.new(456)\n\ncorner = point_s.inline.make!\ncorner[\"x\"] = F64.new(234)\ncorner[\"y\"] = F64.new(567)\n\nrect = rect_s.reference.make!\nrect[\"origin\"] = origin\nrect[\"corner\"] = corner\n```","summary":"<p>Allows to describe structs which can then be constructed, retrieved, read, and written to.</p>","constructors":[{"html_id":"new-class-method","name":"new","doc":"Creates an empty struct layout.","summary":"<p>Creates an empty struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":563,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns whether this and *other* layouts are the same\nlayout. Uses reference equality (like `same?`) rather\nthan deep equality.","summary":"<p>Returns whether this and <em>other</em> layouts are the same layout.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif object_id == other.object_id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"add(id,type:ForeignType)-instance-method","name":"add","doc":"Appends a field called *id*, of the given *type*, to this\nstruct's list of fields.\n\nSimilar to struct ids, *id* is irrelevant to FFI and is simply\n*one of* the ways to access struct fields.","summary":"<p>Appends a field called <em>id</em>, of the given <em>type</em>, to this struct's list of fields.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""},{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(id, type : ForeignType)","args_html":"(id, type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":605,"url":null},"def":{"name":"add","args":[{"name":"id","external_name":"id","restriction":""},{"name":"type","external_name":"type","restriction":"ForeignType"}],"visibility":"Public","body":"if type.is_a?(InlineStructType)\n  offset = add(type.padded_size, type.alignment)\nelse\n  offset = add(type.to_ffi_type)\nend\n@fields << (StructFieldDesc.new(id, type, offset))\n"}},{"html_id":"alignment:UInt64-instance-method","name":"alignment","doc":"Returns the alignment of this struct layout.","summary":"<p>Returns the alignment of this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":557,"url":null},"def":{"name":"alignment","return_type":"UInt64","visibility":"Public","body":"@alignment"}},{"html_id":"desc(index:Int32)-instance-method","name":"desc","doc":"Retrieves field description given the field's *index*.","summary":"<p>Retrieves field description given the field's <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32)","args_html":"(index : Int32)","location":{"filename":"src/novika/ffi.cr","line_number":642,"url":null},"def":{"name":"desc","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"visibility":"Public","body":"@fields[index]"}},{"html_id":"desc(id:String)-instance-method","name":"desc","doc":"Retrieves field description given the field's *id*entifier.\nRaises if no such field exists.","summary":"<p>Retrieves field description given the field's <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":654,"url":null},"def":{"name":"desc","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(desc?(id)) || (raise(\"BUG: no such field: #{id}\"))"}},{"html_id":"desc?(id:String)-instance-method","name":"desc?","doc":"Retrieves field description given the field's *id*entifier.\nReturns nil if no such field exists.","summary":"<p>Retrieves field description given the field's <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":648,"url":null},"def":{"name":"desc?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(index?(id)).try do |index|\n  @fields.unsafe_fetch(index)\nend"}},{"html_id":"each_desc_with_index(&)-instance-method","name":"each_desc_with_index","doc":"Yields field descriptions and their indices to the block.","summary":"<p>Yields field descriptions and their indices to the block.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":659,"url":null},"def":{"name":"each_desc_with_index","yields":2,"block_arity":2,"visibility":"Public","body":"@fields.each_with_index do |field, index|\n  yield field, index\nend"}},{"html_id":"field_count-instance-method","name":"field_count","doc":"Returns the amount of fields in this struct layout.","summary":"<p>Returns the amount of fields in this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":619,"url":null},"def":{"name":"field_count","visibility":"Public","body":"@fields.size"}},{"html_id":"has_field?(id:String)-instance-method","name":"has_field?","doc":"Returns whether this layout contains a field with the\ngiven *id*entifier.","summary":"<p>Returns whether this layout contains a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":625,"url":null},"def":{"name":"has_field?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@fields.any? do |__arg0|\n  __arg0.id == id\nend"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Returns whether this and *other* layouts are the same\nlayout. Uses reference equality (like `same?`) rather\nthan deep equality.","summary":"<p>Returns whether this and <em>other</em> layouts are the same layout.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = object_id.hash(hasher)\nhasher\n"}},{"html_id":"index(id:String)-instance-method","name":"index","doc":"Returns the index of a field with the given *id*entifier.\nDies if there is no such field.","summary":"<p>Returns the index of a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":637,"url":null},"def":{"name":"index","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"(index?(id)) || (raise(\"BUG: no such field in struct layout: #{id}\"))"}},{"html_id":"index?(id:String)-instance-method","name":"index?","doc":"Returns the index of a field with the given *id*entifier,\nor nil if there is no such field.","summary":"<p>Returns the index of a field with the given <em>id</em>entifier, or nil if there is no such field.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":631,"url":null},"def":{"name":"index?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@fields.index() do |__arg1|\n  __arg1.id == id\nend"}},{"html_id":"inline-instance-method","name":"inline","doc":"Returns an inline struct type layed out according to this struct\nlayout. You can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.inline`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns an inline struct type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":683,"url":null},"def":{"name":"inline","visibility":"Public","body":"InlineStructType.new(self)"}},{"html_id":"map_desc_with_index(&)-instance-method","name":"map_desc_with_index","doc":"Yields field descriptions and their indices to the block.\nReturns an array of block results.","summary":"<p>Yields field descriptions and their indices to the block.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":665,"url":null},"def":{"name":"map_desc_with_index","yields":2,"block_arity":2,"visibility":"Public","body":"@fields.map_with_index do |field, index|\n  yield field, index\nend"}},{"html_id":"max_field_size:UInt64-instance-method","name":"max_field_size","doc":"Returns the maximum field size in this struct.","summary":"<p>Returns the maximum field size in this struct.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":560,"url":null},"def":{"name":"max_field_size","return_type":"UInt64","visibility":"Public","body":"@max_field_size"}},{"html_id":"padded_size:UInt64-instance-method","name":"padded_size","doc":"Returns the padded size of this struct. Simply put, this is how\nmuch bytes you'd need to allocate for this struct layout.","summary":"<p>Returns the padded size of this struct.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":554,"url":null},"def":{"name":"padded_size","return_type":"UInt64","visibility":"Public","body":"@padded_size"}},{"html_id":"reference-instance-method","name":"reference","doc":"Returns a struct reference type layed out according to this struct\nlayout. You can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.reference`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns a struct reference type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":674,"url":null},"def":{"name":"reference","visibility":"Public","body":"StructReferenceType.new(self)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":696,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"executed = exec_recursive(:to_s) do\n  io << \"⟪\"\n  @fields.join(io, \", \") do |field, io|\n    ((io << field.id) << \"=\") << field.type\n  end\n  io << \"⟫\"\nend\nif executed\nelse\n  io << \"[reflection]\"\nend\n"}},{"html_id":"union-instance-method","name":"union","doc":"Returns a union type layed out according to this struct layout.\nYou can then use it in your struct field / argument types.\n\nNote: this method costs nothing. Feel free to spam `.union`\ninstead of saving it in a variable and using that variable.","summary":"<p>Returns a union type layed out according to this struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":692,"url":null},"def":{"name":"union","visibility":"Public","body":"UnionType.new(self)"}}]},{"html_id":"novika/Novika/FFI/StructReferenceType","path":"Novika/FFI/StructReferenceType.html","kind":"struct","full_name":"Novika::FFI::StructReferenceType","name":"StructReferenceType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":750,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of a struct reference, aka struct\npointer, aka heap-allocated struct (like Crystal `class`).","summary":"<p><em>Type-side</em> representation of a struct reference, aka struct pointer, aka heap-allocated struct (like Crystal <code>class</code>).</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":751,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"matches?(pointer:UntypedPointer)-instance-method","name":"matches?","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":"UntypedPointer"}],"args_string":"(pointer : UntypedPointer)","args_html":"(pointer : <a href=\"../../Novika/FFI/UntypedPointer.html\">UntypedPointer</a>)","location":{"filename":"src/novika/ffi.cr","line_number":772,"url":null},"def":{"name":"matches?","args":[{"name":"pointer","external_name":"pointer","restriction":"UntypedPointer"}],"visibility":"Public","body":"pointer.none?"}},{"html_id":"matches?(view:StructReferenceView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"StructReferenceView"}],"args_string":"(view : StructReferenceView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/StructReferenceView.html\">StructReferenceView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":768,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"StructReferenceView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":764,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":776,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"&\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":759,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"handle = Pointer(Void).new((box.as(::Pointer(UInt64))).value)\nhandle.null? ? UntypedPointer.none : view_for(handle)\n"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":755,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"StructReferenceView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/StructReferenceView","path":"Novika/FFI/StructReferenceView.html","kind":"struct","full_name":"Novika::FFI::StructReferenceView","name":"StructReferenceView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":922,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of a struct reference, aka struct\npointer, aka heap-allocated struct. Allows to read and write\nfields (see `StructView`). Similar to the `->` operator in C.","summary":"<p><em>Value-side</em> representation of a struct reference, aka struct pointer, aka heap-allocated struct.</p>","instance_methods":[{"html_id":"==(other:StructReferenceView)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StructReferenceView"}],"args_string":"(other : StructReferenceView)","args_html":"(other : <a href=\"../../Novika/FFI/StructReferenceView.html\">StructReferenceView</a>)","location":{"filename":"src/novika/ffi.cr","line_number":950,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"StructReferenceView"}],"visibility":"Public","body":"if @handle == (other.@handle)\n  return true\nend\nif size == other.size\nelse\n  return false\nend\nresult = false\nexecuted = exec_recursive_by_handle(:==) do\n  result = super(other)\nend\nexecuted && result\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":923,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @handle.address)).as(::Pointer(Void))"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":960,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"executed = exec_recursive_by_handle(:to_s) do\n  io << \"&⟨\"\n  super(io)\n  io << \"⟩\"\nend\nif executed\nelse\n  io << \"[reflection]\"\nend\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":927,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @handle.address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/StructType","path":"Novika/FFI/StructType.html","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":714,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"subclasses":[{"html_id":"novika/Novika/FFI/InlineStructType","kind":"struct","full_name":"Novika::FFI::InlineStructType","name":"InlineStructType"},{"html_id":"novika/Novika/FFI/StructReferenceType","kind":"struct","full_name":"Novika::FFI::StructReferenceType","name":"StructReferenceType"},{"html_id":"novika/Novika/FFI/UnionType","kind":"struct","full_name":"Novika::FFI::UnionType","name":"UnionType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type of the *type* side of structs.","summary":"<p>Base type of the <em>type</em> side of structs.</p>","constructors":[{"html_id":"new(layout:StructLayout)-class-method","name":"new","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"StructLayout"}],"args_string":"(layout : StructLayout)","args_html":"(layout : <a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a>)","location":{"filename":"src/novika/ffi.cr","line_number":717,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"StructLayout"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"alignment(*args,**options)-instance-method","name":"alignment","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"alignment","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.alignment(*args, **options)"}},{"html_id":"alignment(*args,**options,&)-instance-method","name":"alignment","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"alignment","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.alignment(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"from?(form:StructViewForm)-instance-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"args_string":"(form : StructViewForm)","args_html":"(form : <a href=\"../../Novika/StructViewForm.html\">StructViewForm</a>)","location":{"filename":"src/novika/ffi.cr","line_number":727,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"visibility":"Public","body":"form.view"}},{"html_id":"make!:StructView-instance-method","name":"make!","doc":"Constructs a struct view for this struct type.\n\nThis method is **unsafe**: the resulting struct view's content\nis unmoderated. You'll need to fill all fields with values\nbefore the struct view could be considered well-defined.","summary":"<p>Constructs a struct view for this struct type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":739,"url":null},"def":{"name":"make!","return_type":"StructView","visibility":"Public","body":"view_for(Pointer(Void).malloc(@layout.padded_size))"}},{"html_id":"padded_size(*args,**options)-instance-method","name":"padded_size","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"padded_size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.padded_size(*args, **options)"}},{"html_id":"padded_size(*args,**options,&)-instance-method","name":"padded_size","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":721,"url":null},"def":{"name":"padded_size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.padded_size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"references?(*args,**options)-instance-method","name":"references?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":732,"url":null},"def":{"name":"references?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.references?(*args, **options)"}},{"html_id":"references?(*args,**options,&)-instance-method","name":"references?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":732,"url":null},"def":{"name":"references?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.references?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":743,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << @layout"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":true,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":725,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/FFI/StructView","path":"Novika/FFI/StructView.html","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":853,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"subclasses":[{"html_id":"novika/Novika/FFI/InlineStructView","kind":"struct","full_name":"Novika::FFI::InlineStructView","name":"InlineStructView"},{"html_id":"novika/Novika/FFI/StructReferenceView","kind":"struct","full_name":"Novika::FFI::StructReferenceView","name":"StructReferenceView"},{"html_id":"novika/Novika/FFI/UnionView","kind":"struct","full_name":"Novika::FFI::UnionView","name":"UnionView"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Base type of the *value* side of structs.\n\nImplements `Indexable` and `Indexable::Mutable` over the fields in\nthe struct, allowing you to iterate, read, and change them (with\nsome casting from and to `ForeignValue` though.)","summary":"<p>Base type of the <em>value</em> side of structs.</p>","constructors":[{"html_id":"new(layout:Novika::FFI::StructLayout,handle:Pointer(Void))-class-method","name":"new","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(layout : Novika::FFI::StructLayout, handle : Pointer(Void))","args_html":"(layout : <a href=\"../../Novika/FFI/StructLayout.html\">Novika::FFI::StructLayout</a>, handle : Pointer(Void))","location":{"filename":"src/novika/ffi.cr","line_number":861,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout, handle)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:StructView)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StructView"}],"args_string":"(other : StructView)","args_html":"(other : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>)","location":{"filename":"src/novika/ffi.cr","line_number":912,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"StructView"}],"visibility":"Public","body":"equals?(other) do |a, b|\n  a == b\nend"}},{"html_id":"[](id:String)-instance-method","name":"[]","doc":"Returns the value of a field with the given *id*entifier.\nDies if there is no such field.","summary":"<p>Returns the value of a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":889,"url":null},"def":{"name":"[]","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"unsafe_fetch(@layout.index(id))"}},{"html_id":"[]=(id:String,value:ForeignValue)-instance-method","name":"[]=","doc":"Assigns *value* to a field with the given *id*entifier.","summary":"<p>Assigns <em>value</em> to a field with the given <em>id</em>entifier.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(id : String, value : ForeignValue)","args_html":"(id : <a href=\"../../String.html\">String</a>, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":883,"url":null},"def":{"name":"[]=","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"unsafe_put(@layout.index(id), value)"}},{"html_id":"[]?(id:String)-instance-method","name":"[]?","doc":"Returns the value of a field with the given *id*entifier,\nor nil if there is no such field.","summary":"<p>Returns the value of a field with the given <em>id</em>entifier, or nil if there is no such field.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/ffi.cr","line_number":895,"url":null},"def":{"name":"[]?","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"if index = @layout.index?(id)\n  unsafe_fetch(index)\nend"}},{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the pointer address of the struct this view refers to.","summary":"<p>Returns the pointer address of the struct this view refers to.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":868,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@handle.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the pointer address of the struct this view refers to.","summary":"<p>Returns the pointer address of the struct this view refers to.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":868,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@handle.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"has_field?(*args,**options)-instance-method","name":"has_field?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/ffi.cr","line_number":865,"url":null},"def":{"name":"has_field?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@layout.has_field?(*args, **options)"}},{"html_id":"has_field?(*args,**options,&)-instance-method","name":"has_field?","doc":"See `StructLayout`.","summary":"<p>See <code><a href=\"../../Novika/FFI/StructLayout.html\">StructLayout</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/ffi.cr","line_number":865,"url":null},"def":{"name":"has_field?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@layout.has_field?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","location":{"filename":"src/novika/ffi.cr","line_number":916,"url":null},"def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @handle.hash(hasher)\nhasher\n"}},{"html_id":"layout:StructLayout-instance-method","name":"layout","doc":"Returns this view's struct layout.","summary":"<p>Returns this view's struct layout.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":859,"url":null},"def":{"name":"layout","return_type":"StructLayout","visibility":"Public","body":"@layout"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":870,"url":null},"def":{"name":"size","visibility":"Public","body":"@layout.field_count"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":901,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"StructViewForm.new(self)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":905,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@layout.each_desc_with_index do |desc, index|\n  ((io << desc.id) << \"=\") << (unsafe_fetch(index))\n  if index == (@layout.field_count - 1)\n  else\n    io << \", \"\n  end\nend"}},{"html_id":"unsafe_fetch(index:Int)-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","args_html":"(index : Int)","location":{"filename":"src/novika/ffi.cr","line_number":878,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"visibility":"Public","body":"(@layout.desc(index)).fetch!(@handle)"}},{"html_id":"unsafe_put(index:Int,value:ForeignValue)-instance-method","name":"unsafe_put","doc":"Sets the element at the given *index* to *value*, without doing any bounds\ncheck.\n\n`Indexable::Mutable` makes sure to invoke this method with *index* in\n`0...size`, so converting negative indices to positive ones is not needed\nhere.\n\nClients never invoke this method directly. Instead, they modify elements\nwith `#[]=(index, value)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Sets the element at the given <em>index</em> to <em>value</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(index : Int, value : ForeignValue)","args_html":"(index : Int, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":874,"url":null},"def":{"name":"unsafe_put","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"(@layout.desc(index)).put!(@handle, value)"}}]},{"html_id":"novika/Novika/FFI/TypeParser","path":"Novika/FFI/TypeParser.html","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":67,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/FFI/DefaultTypeParser","kind":"struct","full_name":"Novika::FFI::DefaultTypeParser","name":"DefaultTypeParser"},{"html_id":"novika/Novika/FFI/ValueTypeParser","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser"},{"html_id":"novika/Novika/StructLayoutParser","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"An object used to translate `Word`s (representing a foreign type)\ninto actual `ForeignType`s.","summary":"<p>An object used to translate <code><a href=\"../../Novika/Word.html\">Word</a></code>s (representing a foreign type) into actual <code><a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a></code>s.</p>","constructors":[{"html_id":"new(this:Block,typename:Word)-class-method","name":"new","doc":"Initializes a parser object from *this*, a block that will be\nasked for word definitions in case they are needed, and\n*typename*, which is the word-to-be-parsed itself.","summary":"<p>Initializes a parser object from <em>this</em>, a block that will be asked for word definitions in case they are needed, and <em>typename</em>, which is the word-to-be-parsed itself.</p>","abstract":false,"args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"typename","external_name":"typename","restriction":"Word"}],"args_string":"(this : Block, typename : Word)","args_html":"(this : <a href=\"../../Novika/Block.html\">Block</a>, typename : <a href=\"../../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/ffi.cr","line_number":78,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"typename","external_name":"typename","restriction":"Word"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, typename)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_inline_struct(form:StructLayoutForm):ForeignType-instance-method","name":"on_inline_struct","doc":"Inline struct-annotated struct layout middleware.","summary":"<p>Inline struct-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":92,"url":null},"def":{"name":"on_inline_struct","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.inline"}},{"html_id":"on_primitive(type:ForeignType):ForeignType-instance-method","name":"on_primitive","doc":"Primitive *type* middleware.","summary":"<p>Primitive <em>type</em> middleware.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"args_string":"(type : ForeignType) : ForeignType","args_html":"(type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":82,"url":null},"def":{"name":"on_primitive","args":[{"name":"type","external_name":"type","restriction":"ForeignType"}],"return_type":"ForeignType","visibility":"Public","body":"type"}},{"html_id":"on_struct_reference(form:StructLayoutForm):ForeignType-instance-method","name":"on_struct_reference","doc":"Struct reference-annotated struct layout middleware.","summary":"<p>Struct reference-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":97,"url":null},"def":{"name":"on_struct_reference","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.reference"}},{"html_id":"on_union(form:StructLayoutForm):ForeignType-instance-method","name":"on_union","doc":"Union-annotated struct layout middleware.","summary":"<p>Union-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : ForeignType","args_html":"(form : <a href=\"../../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>","location":{"filename":"src/novika/ffi.cr","line_number":87,"url":null},"def":{"name":"on_union","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"ForeignType","visibility":"Public","body":"form.layout.union"}},{"html_id":"parse:ForeignType-instance-method","name":"parse","doc":"Performs the parsing. Returns the resulting type.","summary":"<p>Performs the parsing.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":102,"url":null},"def":{"name":"parse","return_type":"ForeignType","visibility":"Public","body":"case @typename.id\nwhen \"u8\"\n  return on_primitive(U8)\nwhen \"u16\"\n  return on_primitive(U16)\nwhen \"u32\"\n  return on_primitive(U32)\nwhen \"u64\"\n  return on_primitive(U64)\nwhen \"i8\"\n  return on_primitive(I8)\nwhen \"i16\"\n  return on_primitive(I16)\nwhen \"i32\"\n  return on_primitive(I32)\nwhen \"i64\"\n  return on_primitive(I64)\nwhen \"f32\"\n  return on_primitive(F32)\nwhen \"f64\"\n  return on_primitive(F64)\nwhen \"cstr\"\n  return on_primitive(Cstr)\nwhen \"char\"\n  return on_primitive(Cchar)\nwhen \"pointer\"\n  return on_primitive(UntypedPointer)\nwhen \"nothing\"\n  return on_primitive(Nothing)\nwhen .prefixed_by?('?')\n  handler = ->on_union(StructLayoutForm)\nwhen .prefixed_by?('~')\n  handler = ->on_inline_struct(StructLayoutForm)\nwhen .prefixed_by?('&')\n  handler = ->on_struct_reference(StructLayoutForm)\nelse\n  @typename.die(\"could not recognize foreign type. Did you mean ⸢~#{@typename}⸥ (inline struct), ⸢&#{@typename}⸥ (reference to struct), or ⸢?#{@typename}⸥ (union)?\")\nend\nraw = Word.new(@typename.id.lchop)\nform = @this.form_for(raw)\nif form.is_a?(StructLayoutForm)\nelse\n  @typename.die(\"expected struct layout to be value form, not: #{form.class.typedesc}\")\nend\nhandler.call(form)\n"}}],"types":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","path":"Novika/FFI/TypeParser/ForbidsNothing.html","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing","abstract":false,"locations":[{"filename":"src/novika/ffi.cr","line_number":69,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/FFI/ValueTypeParser","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser"},{"html_id":"novika/Novika/StructLayoutParser","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser"}],"namespace":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"doc":"If included, the parser would die upon encountering `nothing`.","summary":"<p>If included, the parser would die upon encountering <code>nothing</code>.</p>","instance_methods":[{"html_id":"on_primitive(type:Nothing.class)-instance-method","name":"on_primitive","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Nothing.class"}],"args_string":"(type : Nothing.class)","args_html":"(type : <span class=\"t\">Nothing</span>.<span class=\"k\">class</span>)","location":{"filename":"src/novika/ffi.cr","line_number":70,"url":null},"def":{"name":"on_primitive","args":[{"name":"type","external_name":"type","restriction":"Nothing.class"}],"visibility":"Public","body":"@typename.die(\"nothing is not a value type. Did you mean ⸢pointer⸥ (an untyped pointer)?\")"}}]}]},{"html_id":"novika/Novika/FFI/U16","path":"Novika/FFI/U16.html","kind":"struct","full_name":"Novika::FFI::U16","name":"U16","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":229,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt16`.","summary":"<p>Type-side and value-side representation of <code>UInt16</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt16).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U16):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U16"}],"args_string":"(value : U16) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U16.html\">U16</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U16"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint16"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u16\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U16.new((box.as(::Pointer(UInt16))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt16).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt16-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u16\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":229,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt16))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U32","path":"Novika/FFI/U32.html","kind":"struct","full_name":"Novika::FFI::U32","name":"U32","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":230,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt32`.","summary":"<p>Type-side and value-side representation of <code>UInt32</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt32).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U32):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U32"}],"args_string":"(value : U32) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U32.html\">U32</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U32"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint32"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u32\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U32.new((box.as(::Pointer(UInt32))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt32).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt32-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u32\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":230,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt32))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U64","path":"Novika/FFI/U64.html","kind":"struct","full_name":"Novika::FFI::U64","name":"U64","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":231,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt64`.","summary":"<p>Type-side and value-side representation of <code>UInt64</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U64):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U64"}],"args_string":"(value : U64) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U64.html\">U64</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U64"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint64"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u64\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U64.new((box.as(::Pointer(UInt64))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt64-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u64\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":231,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/U8","path":"Novika/FFI/U8.html","kind":"struct","full_name":"Novika::FFI::U8","name":"U8","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":228,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of `UInt8`.","summary":"<p>Type-side and value-side representation of <code>UInt8</code>.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:U8):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"U8"}],"args_string":"(value : U8) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/U8.html\">U8</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"U8"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.uint8"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"u8\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"U8.new((box.as(::Pointer(UInt8))).value)"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @value == (other.@value)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt8).malloc(1, @value)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @value.hash(hasher)\nhasher\n"}},{"html_id":"to_crystal:UInt8-instance-method","name":"to_crystal","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_crystal","visibility":"Public","body":"@value"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(to_crystal)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << @value) << \"_u8\""}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":228,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt8))).value = @value\nbase\n"}}]},{"html_id":"novika/Novika/FFI/UnionType","path":"Novika/FFI/UnionType.html","kind":"struct","full_name":"Novika::FFI::UnionType","name":"UnionType","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},"ancestors":[{"html_id":"novika/Novika/FFI/StructType","kind":"struct","full_name":"Novika::FFI::StructType","name":"StructType"},{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":817,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Type-side* representation of a union.","summary":"<p><em>Type-side</em> representation of a union.</p>","instance_methods":[{"html_id":"alloc:Pointer(Void)-instance-method","name":"alloc","doc":"Allocates memory for this type. Returns a pointer to that memory.","summary":"<p>Allocates memory for this type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":822,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"Pointer(Void).malloc(self.sizeof)"}},{"html_id":"matches?(view:UnionView):Bool-instance-method","name":"matches?","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"UnionView"}],"args_string":"(view : UnionView) : Bool","args_html":"(view : <a href=\"../../Novika/FFI/UnionView.html\">UnionView</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":838,"url":null},"def":{"name":"matches?","args":[{"name":"view","external_name":"view","restriction":"UnionView"}],"return_type":"Bool","visibility":"Public","body":"@layout.same?(view.layout)"}},{"html_id":"sizeof:UInt64-instance-method","name":"sizeof","doc":"Returns the size of this type, in bytes.","summary":"<p>Returns the size of this type, in bytes.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":818,"url":null},"def":{"name":"sizeof","return_type":"UInt64","visibility":"Public","body":"@layout.max_field_size"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-instance-method","name":"to_ffi_type","doc":"Returns the corresponding LibFFI type.","summary":"<p>Returns the corresponding LibFFI type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":834,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":842,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"⋃\"\nsuper(io)\n"}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-instance-method","name":"unbox","doc":"Retrieves `ForeignValue` of this type from the given void\npointer *box*.","summary":"<p>Retrieves <code><a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a></code> of this type from the given void pointer <em>box</em>.</p>","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":830,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"box.null? ? UntypedPointer.none : view_for(box)"}},{"html_id":"view_for(handle:Pointer(Void)):StructView-instance-method","name":"view_for","doc":"Returns the struct view corresponding to this struct type,\nwrapped around the given *handle*.","summary":"<p>Returns the struct view corresponding to this struct type, wrapped around the given <em>handle</em>.</p>","abstract":false,"args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"args_string":"(handle : Pointer(Void)) : StructView","args_html":"(handle : Pointer(Void)) : <a href=\"../../Novika/FFI/StructView.html\">StructView</a>","location":{"filename":"src/novika/ffi.cr","line_number":826,"url":null},"def":{"name":"view_for","args":[{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"}],"return_type":"StructView","visibility":"Public","body":"UnionView.new(@layout, handle)"}}]},{"html_id":"novika/Novika/FFI/UnionView","path":"Novika/FFI/UnionView.html","kind":"struct","full_name":"Novika::FFI::UnionView","name":"UnionView","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},"ancestors":[{"html_id":"novika/Novika/FFI/StructView","kind":"struct","full_name":"Novika::FFI::StructView","name":"StructView"},{"html_id":"novika/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":994,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"*Value-side* representation of a union.","summary":"<p><em>Value-side</em> representation of a union.</p>","instance_methods":[{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1010,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":995,"url":null},"def":{"name":"size","visibility":"Public","body":"@layout.field_count"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":1020,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"(⋃ \") << @layout) << \")\""}},{"html_id":"unsafe_fetch(index:Int)-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int)","args_html":"(index : Int)","location":{"filename":"src/novika/ffi.cr","line_number":1005,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"visibility":"Public","body":"desc = @layout.desc(index)\ndesc.type.unbox(@handle)\n"}},{"html_id":"unsafe_put(index:Int,value:ForeignValue)-instance-method","name":"unsafe_put","doc":"Sets the element at the given *index* to *value*, without doing any bounds\ncheck.\n\n`Indexable::Mutable` makes sure to invoke this method with *index* in\n`0...size`, so converting negative indices to positive ones is not needed\nhere.\n\nClients never invoke this method directly. Instead, they modify elements\nwith `#[]=(index, value)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Sets the element at the given <em>index</em> to <em>value</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"args_string":"(index : Int, value : ForeignValue)","args_html":"(index : Int, value : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>)","location":{"filename":"src/novika/ffi.cr","line_number":999,"url":null},"def":{"name":"unsafe_put","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"value","external_name":"value","restriction":"ForeignValue"}],"visibility":"Public","body":"desc = @layout.desc(index)\nvalue.must_be_of(desc.type)\nvalue.write_to!(@handle)\n"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":1014,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"@handle.move_to(base, @layout.max_field_size)\nbase\n"}}]},{"html_id":"novika/Novika/FFI/UntypedPointer","path":"Novika/FFI/UntypedPointer.html","kind":"struct","full_name":"Novika::FFI::UntypedPointer","name":"UntypedPointer","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":242,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/ForeignValue","kind":"module","full_name":"Novika::FFI::ForeignValue","name":"ForeignValue"}],"extended_modules":[{"html_id":"novika/Novika/FFI/ForeignType","kind":"module","full_name":"Novika::FFI::ForeignType","name":"ForeignType"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Type-side and value-side representation of pointers.","summary":"<p>Type-side and value-side representation of pointers.</p>","class_methods":[{"html_id":"alloc:Pointer(Void)-class-method","name":"alloc","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":264,"url":null},"def":{"name":"alloc","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, 0)).as(::Pointer(Void))"}},{"html_id":"from?(form:Hole)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Hole"}],"args_string":"(form : Hole)","args_html":"(form : <a href=\"../../Novika/Hole.html\">Hole</a>)","location":{"filename":"src/novika/ffi.cr","line_number":268,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Hole"}],"visibility":"Public","body":"new(form.address)"}},{"html_id":"from?(form:StructViewForm)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"args_string":"(form : StructViewForm)","args_html":"(form : <a href=\"../../Novika/StructViewForm.html\">StructViewForm</a>)","location":{"filename":"src/novika/ffi.cr","line_number":272,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"StructViewForm"}],"visibility":"Public","body":"if view = form.view.as?(StructReferenceView)\nelse\n  raise(Error.new(\"cannot implicitly take pointer of struct view that is not a reference struct view\"))\nend\nnew(view.address)\n"}},{"html_id":"from?(form:Decimal)-class-method","name":"from?","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/ffi.cr","line_number":282,"url":null},"def":{"name":"from?","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"new(form)"}},{"html_id":"matches?(value:UntypedPointer):Bool-class-method","name":"matches?","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"UntypedPointer"}],"args_string":"(value : UntypedPointer) : Bool","args_html":"(value : <a href=\"../../Novika/FFI/UntypedPointer.html\">UntypedPointer</a>) : Bool","location":{"filename":"src/novika/ffi.cr","line_number":317,"url":null},"def":{"name":"matches?","args":[{"name":"value","external_name":"value","restriction":"UntypedPointer"}],"return_type":"Bool","visibility":"Public","body":"true"}},{"html_id":"none-class-method","name":"none","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":252,"url":null},"def":{"name":"none","visibility":"Public","body":"new(0)"}},{"html_id":"to_ffi_type:Crystal::FFI::Type-class-method","name":"to_ffi_type","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":321,"url":null},"def":{"name":"to_ffi_type","return_type":"Crystal::FFI::Type","visibility":"Public","body":"Crystal::FFI::Type.pointer"}},{"html_id":"to_s(io)-class-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":305,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"pointer\""}},{"html_id":"unbox(box:Pointer(Void)):ForeignValue-class-method","name":"unbox","abstract":false,"args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"args_string":"(box : Pointer(Void)) : ForeignValue","args_html":"(box : Pointer(Void)) : <a href=\"../../Novika/FFI/ForeignValue.html\">ForeignValue</a>","location":{"filename":"src/novika/ffi.cr","line_number":309,"url":null},"def":{"name":"unbox","args":[{"name":"box","external_name":"box","restriction":"::Pointer(Void)"}],"return_type":"ForeignValue","visibility":"Public","body":"if box.null?\n  raise(Error.new(\"attempt to unbox none (C nullptr)\"))\nend\nUntypedPointer.new((box.as(::Pointer(UInt64))).value)\n"}}],"constructors":[{"html_id":"new(decimal)-class-method","name":"new","abstract":false,"args":[{"name":"decimal","external_name":"decimal","restriction":""}],"args_string":"(decimal)","args_html":"(decimal)","location":{"filename":"src/novika/ffi.cr","line_number":248,"url":null},"def":{"name":"new","args":[{"name":"decimal","external_name":"decimal","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(decimal)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @address == (other.@address)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"box:Pointer(Void)-instance-method","name":"box","doc":"Wraps this value in a void pointer.","summary":"<p>Wraps this value in a void pointer.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":286,"url":null},"def":{"name":"box","return_type":"::Pointer(Void)","visibility":"Public","body":"(Pointer(UInt64).malloc(1, @address)).as(::Pointer(Void))"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @address.hash(hasher)\nhasher\n"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":256,"url":null},"def":{"name":"none?","visibility":"Public","body":"@address.zero?"}},{"html_id":"to_form?:Form|Nil-instance-method","name":"to_form?","doc":"Determines the best form type to represent this foreign\nvalue, then builds and returns a form of that type.\n\nReturns nil if *value* is nothing.","summary":"<p>Determines the best form type to represent this foreign value, then builds and returns a form of that type.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":260,"url":null},"def":{"name":"to_form?","return_type":"Form | ::Nil","visibility":"Public","body":"Decimal.new(@address)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/ffi.cr","line_number":295,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if none?\n  io << \"(none)\"\nelse\n  io << \"(0x\"\n  @address.to_s(io, base: 16)\n  io << \")\"\nend"}},{"html_id":"write_to!(base:Pointer(Void)):Pointer(Void)-instance-method","name":"write_to!","doc":"Writes this value starting at the given *base* pointer.\nReturns the *base* pointer.","summary":"<p>Writes this value starting at the given <em>base</em> pointer.</p>","abstract":false,"args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"args_string":"(base : Pointer(Void)) : Pointer(Void)","args_html":"(base : Pointer(Void)) : Pointer(Void)","location":{"filename":"src/novika/ffi.cr","line_number":290,"url":null},"def":{"name":"write_to!","args":[{"name":"base","external_name":"base","restriction":"::Pointer(Void)"}],"return_type":"::Pointer(Void)","visibility":"Public","body":"(base.as(::Pointer(UInt64))).value = @address\nbase\n"}}]},{"html_id":"novika/Novika/FFI/ValueTypeParser","path":"Novika/FFI/ValueTypeParser.html","kind":"struct","full_name":"Novika::FFI::ValueTypeParser","name":"ValueTypeParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"},{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":159,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"}],"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Same as `DefaultTypeParser`, but forbids nothing.\n\n```\n# this : Block\n\nparser = ValueTypeParser.new(this, Word.new(\"i32\"))\nparser.parse # => I32\n\n# ...\n\nparser = ValueTypeParser.new(this, Word.new(\"nothing\"))\nparser.parse # Dies: nothing is not a value type.\n```","summary":"<p>Same as <code><a href=\"../../Novika/FFI/DefaultTypeParser.html\">DefaultTypeParser</a></code>, but forbids nothing.</p>"},{"html_id":"novika/Novika/FFI/VariadicFunction","path":"Novika/FFI/VariadicFunction.html","kind":"struct","full_name":"Novika::FFI::VariadicFunction","name":"VariadicFunction","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},"ancestors":[{"html_id":"novika/Novika/FFI/Function","kind":"struct","full_name":"Novika::FFI::Function","name":"Function"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/ffi.cr","line_number":1070,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/FFI","kind":"module","full_name":"Novika::FFI","name":"FFI"},"doc":"Calls a variadic C function.","summary":"<p>Calls a variadic C function.</p>","constructors":[{"html_id":"new(id:String,handle:Pointer(Void),fixed_arg_types:Array(ForeignType),var_arg_allowed:Array(ForeignType),return_type:ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"fixed_arg_types","external_name":"fixed_arg_types","restriction":"Array(ForeignType)"},{"name":"var_arg_allowed","external_name":"var_arg_allowed","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"args_string":"(id : String, handle : Pointer(Void), fixed_arg_types : Array(ForeignType), var_arg_allowed : Array(ForeignType), return_type : ForeignType)","args_html":"(id : <a href=\"../../String.html\">String</a>, handle : Pointer(Void), fixed_arg_types : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), var_arg_allowed : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>), return_type : <a href=\"../../Novika/FFI/ForeignType.html\">ForeignType</a>)","location":{"filename":"src/novika/ffi.cr","line_number":1073,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"},{"name":"handle","external_name":"handle","restriction":"::Pointer(Void)"},{"name":"fixed_arg_types","external_name":"fixed_arg_types","restriction":"Array(ForeignType)"},{"name":"var_arg_allowed","external_name":"var_arg_allowed","restriction":"Array(ForeignType)"},{"name":"return_type","external_name":"return_type","restriction":"ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id, handle, fixed_arg_types, var_arg_allowed, return_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"call(block:Block):Form|Nil-instance-method","name":"call","doc":"Drops arguments from *block* and calls this function.\nReturns the resulting form, or nil in case this function\nreturns `Nothing` (C `void`).","summary":"<p>Drops arguments from <em>block</em> and calls this function.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : Form | Nil","args_html":"(block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/ffi.cr","line_number":1082,"url":null},"def":{"name":"call","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"Form | ::Nil","visibility":"Public","body":"var_args_block = block.drop.a(Block)\nnargs_total = @fixed_arg_types.size + var_args_block.count\nffi_args = Array(ForeignValue).new(nargs_total)\nffi_types = Array(Crystal::FFI::Type).new(nargs_total)\n@fixed_arg_types.reverse_each do |argtype|\n  ffi_types.unshift(argtype.to_ffi_type)\n  arg = argtype.from(block.drop)\n  arg.must_be_of(argtype)\n  ffi_args.unshift(arg)\nend\nvar_args_block.each do |form|\n  candidates = @var_arg_allowed.map do |type|\n    {type, type.from?(form)}\n  end.select do |_, value|\n    value\n  end\n  if candidates.size == 1\n  else\n    form.die(\"unable to convert to foreign value: too many or no type candidates for form. Make sure you've specified the corresponding foreign type in the variadic function's list of allowed types, and no conflicts between types exist (e.g. both i32 and i64; this is currently unsupported)\")\n  end\n  candidate = candidates[0]\n  candidate_type, candidate_value = candidate\n  candidate_value = candidate_value.not_nil!\n  ffi_types << candidate_type.to_ffi_type\n  ffi_args << candidate_value\nend\nffi_args.each do |arg|\n  case arg\n  when U8, U16, I8, I16\n    block.die(\"bad argtype in variadic call: promote to i32 first: #{arg}\")\n  when F32\n    block.die(\"bad argtype in variadic call: promote to f64 first: #{arg}\")\n  end\nend\ncif = Crystal::FFI::CallInterface.variadic(return_type: @return_type.to_ffi_type, arg_types: ffi_types, fixed_args: @fixed_arg_types.size)\ncargs = Pointer(::Pointer(Void)).malloc(ffi_args.size) do |index|\n  ffi_args[index].box\nend\ncreturn = Pointer(Void).malloc(@return_type.sizeof)\ncif.call(@handle, cargs, creturn)\n(@return_type.unbox(creturn)).to_form?\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this function.","summary":"<p>Returns the identifier of this function.</p>","abstract":false,"location":{"filename":"src/novika/ffi.cr","line_number":1071,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}}]}]},{"html_id":"novika/Novika/ForeignFunction","path":"Novika/ForeignFunction.html","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin wrapper around `FFI::Function`.","summary":"<p>A thin wrapper around <code><a href=\"../Novika/FFI/Function.html\">FFI::Function</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":21,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign function\""}}],"constructors":[{"html_id":"new(library:Library,function:FFI::Function,comment:String|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"library","external_name":"library","restriction":"Library"},{"name":"function","external_name":"function","restriction":"FFI::Function"},{"name":"comment","external_name":"comment","restriction":"String | ::Nil"}],"args_string":"(library : Library, function : FFI::Function, comment : String | Nil)","args_html":"(library : <a href=\"../Novika/Library.html\">Library</a>, function : <a href=\"../Novika/FFI/Function.html\">FFI::Function</a>, comment : <a href=\"../String.html\">String</a> | Nil)","location":{"filename":"src/novika/forms/foreign.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"library","external_name":"library","restriction":"Library"},{"name":"function","external_name":"function","restriction":"FFI::Function"},{"name":"comment","external_name":"comment","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(library, function, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":25,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@comment ? io << @comment : to_s(io)"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":12,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"stack = engine.stack\nvalue = @function.call(stack)\nvalue.try(&.onto(stack))\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":29,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[foreign function: \") << @function.id) << \"]\""}}]},{"html_id":"novika/Novika/Form","path":"Novika/Form.html","kind":"module","full_name":"Novika::Form","name":"Form","abstract":false,"ancestors":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"locations":[{"filename":"src/novika/forms/form.cr","line_number":98,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Builtin","kind":"struct","full_name":"Novika::Builtin","name":"Builtin"},{"html_id":"novika/Novika/Byteslice","kind":"struct","full_name":"Novika::Byteslice","name":"Byteslice"},{"html_id":"novika/Novika/Color","kind":"struct","full_name":"Novika::Color","name":"Color"},{"html_id":"novika/Novika/Decimal","kind":"class","full_name":"Novika::Decimal","name":"Decimal"},{"html_id":"novika/Novika/Error","kind":"class","full_name":"Novika::Error","name":"Error"},{"html_id":"novika/Novika/ForeignFunction","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction"},{"html_id":"novika/Novika/Hole","kind":"struct","full_name":"Novika::Hole","name":"Hole"},{"html_id":"novika/Novika/Library","kind":"class","full_name":"Novika::Library","name":"Library"},{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/QuotedWord","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord"},{"html_id":"novika/Novika/StructLayoutForm","kind":"struct","full_name":"Novika::StructLayoutForm","name":"StructLayoutForm"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"},{"html_id":"novika/Novika/Word","kind":"struct","full_name":"Novika::Word","name":"Word"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Form is an umbrella for words and blocks. Since some words\n(like numbers, quotes) are just too different from words as\nwe know them, they have their own types directly subordinate\nto Form.\n\nMake sure to override `self.typedesc` to avoid weird unrelated\nCrystal errors. Crystal breaks at class-level inheritance.","summary":"<p>Form is an umbrella for words and blocks.</p>","instance_methods":[{"html_id":"a(type:T.class):TforallT-instance-method","name":"a","doc":"Asserts that this form is of the given *type*. Dies if\nit's not.","summary":"<p>Asserts that this form is of the given <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) : T forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : T forall T","location":{"filename":"src/novika/forms/form.cr","line_number":146,"url":null},"def":{"name":"a","args":[{"name":"type","external_name":"type","restriction":"T.class"}],"return_type":"T","visibility":"Public","body":"self.is_a?(T) ? self : afail(T)"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/form.cr","line_number":114,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"a form\""}},{"html_id":"desc:String-instance-method","name":"desc","doc":"Returns a string description of this form.","summary":"<p>Returns a string description of this form.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":119,"url":null},"def":{"name":"desc","return_type":"String","visibility":"Public","body":"String.build do |io|\n  desc(io)\nend"}},{"html_id":"die(details:String)-instance-method","name":"die","doc":"Raises an `Error` providing *details*.","summary":"<p>Raises an <code><a href=\"../Novika/Error.html\">Error</a></code> providing <em>details</em>.</p>","abstract":false,"args":[{"name":"details","external_name":"details","restriction":"String"}],"args_string":"(details : String)","args_html":"(details : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":102,"url":null},"def":{"name":"die","args":[{"name":"details","external_name":"details","restriction":"String"}],"visibility":"Public","body":"raise(Error.new(details, form: self))"}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/form.cr","line_number":162,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"effect-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":167,"url":null},"def":{"name":"effect","visibility":"Public","body":"String.build do |io|\n  effect(io)\nend"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":130,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"on_parent_open(engine)"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":135,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"onto(engine.stack)"}},{"html_id":"onto(block:Block):self-instance-method","name":"onto","doc":"Adds this form to *block*.","summary":"<p>Adds this form to <em>block</em>.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"}],"args_string":"(block : Block) : self","args_html":"(block : <a href=\"../Novika/Block.html\">Block</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/form.cr","line_number":140,"url":null},"def":{"name":"onto","args":[{"name":"block","external_name":"block","restriction":"Block"}],"return_type":"self","visibility":"Public","body":"tap do\n  block.add(self)\nend"}},{"html_id":"sel(a,b)-instance-method","name":"sel","doc":"Selects either *a* or *b*. Novika defines `False` to be the\nonly form selecting *b*. All other forms select *a*.","summary":"<p>Selects either <em>a</em> or <em>b</em>.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/novika/forms/form.cr","line_number":125,"url":null},"def":{"name":"sel","args":[{"name":"a","external_name":"a","restriction":""},{"name":"b","external_name":"b","restriction":""}],"visibility":"Public","body":"a"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":151,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"Quote.new(to_s)"}}]},{"html_id":"novika/Novika/Frontend","path":"Novika/Frontend.html","kind":"module","full_name":"Novika::Frontend","name":"Frontend","abstract":false,"locations":[{"filename":"src/common.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"err(message,io=STDERR)-instance-method","name":"err","doc":"Appends a \"sorry\" *message* to *io*","summary":"<p>Appends a &quot;sorry&quot; <em>message</em> to <em>io</em></p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"args_string":"(message, io = STDERR)","args_html":"(message, io = <span class=\"t\">STDERR</span>)","location":{"filename":"src/common.cr","line_number":10,"url":null},"def":{"name":"err","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Sorry\".colorize.red.bold) << \": \") << message"}},{"html_id":"errln(message,io=STDERR)-instance-method","name":"errln","doc":"Calls `err`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#err%28message%2Cio%3DSTDERR%29-instance-method\">#err</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"args_string":"(message, io = STDERR)","args_html":"(message, io = <span class=\"t\">STDERR</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"errln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDERR","external_name":"io","restriction":""}],"visibility":"Public","body":"err(message, io)\nio.puts\n"}},{"html_id":"note(message,io=STDOUT)-instance-method","name":"note","doc":"Appends a \"note\" *message* to *io*.","summary":"<p>Appends a &quot;note&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":20,"url":null},"def":{"name":"note","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Note\".colorize.blue.bold) << \": \") << message"}},{"html_id":"noteln(message,io=STDOUT)-instance-method","name":"noteln","doc":"Calls `note`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#note%28message%2Cio%3DSTDOUT%29-instance-method\">#note</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"noteln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"note(message, io)\nio.puts\n"}},{"html_id":"ok(message,io=STDOUT)-instance-method","name":"ok","doc":"Appends an \"ok\" *message* to *io*.","summary":"<p>Appends an &quot;ok&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":15,"url":null},"def":{"name":"ok","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Ok\".colorize.green.bold) << \": \") << message"}},{"html_id":"okln(message,io=STDOUT)-instance-method","name":"okln","doc":"Calls `ok`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#ok%28message%2Cio%3DSTDOUT%29-instance-method\">#ok</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"okln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"ok(message, io)\nio.puts\n"}},{"html_id":"wait(message,io=STDOUT)-instance-method","name":"wait","doc":"Appends a \"wait\" *message* to *io*.","summary":"<p>Appends a &quot;wait&quot; <em>message</em> to <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":5,"url":null},"def":{"name":"wait","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Wait\".colorize.bold) << \": \") << message"}},{"html_id":"wait(msg,*,okokmsg,&)-instance-method","name":"wait","doc":"Issues a `wait` message *msg*, yields, then follows with\nan OK message *okmsg*.","summary":"<p>Issues a <code><a href=\"../Novika/Frontend.html#wait%28message%2Cio%3DSTDOUT%29-instance-method\">#wait</a></code> message <em>msg</em>, yields, then follows with an OK message <em>okmsg</em>.</p>","abstract":false,"args":[{"name":"msg","external_name":"msg","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"okmsg","external_name":"ok","restriction":""}],"args_string":"(msg, *, ok okmsg, &)","args_html":"(msg, *, ok okmsg, &)","location":{"filename":"src/common.cr","line_number":35,"url":null},"def":{"name":"wait","args":[{"name":"msg","external_name":"msg","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"okmsg","external_name":"ok","restriction":""}],"splat_index":1,"yields":0,"block_arity":0,"visibility":"Public","body":"wait(msg)\nyield\nokln(okmsg)\n"}},{"html_id":"waitln(message,io=STDOUT)-instance-method","name":"waitln","doc":"Calls `wait`, and appends a newline, both using\nwith *io*.","summary":"<p>Calls <code><a href=\"../Novika/Frontend.html#wait%28message%2Cio%3DSTDOUT%29-instance-method\">#wait</a></code>, and appends a newline, both using with <em>io</em>.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"args_string":"(message, io = STDOUT)","args_html":"(message, io = <span class=\"t\">STDOUT</span>)","location":{"filename":"src/common.cr","line_number":24,"url":null},"def":{"name":"waitln","args":[{"name":"message","external_name":"message","restriction":""},{"name":"io","default_value":"STDOUT","external_name":"io","restriction":""}],"visibility":"Public","body":"wait(message, io)\nio.puts\n"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI","path":"Novika/Frontend/CLI.html","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI","abstract":false,"locations":[{"filename":"src/cli.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/CLI","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"start(args=ARGV,cwd=Path[ENV[\"NOVIKA_CWD\"]?||Dir.current])-instance-method","name":"start","doc":"Novika command-line frontend entry point.","summary":"<p>Novika command-line frontend entry point.</p>","abstract":false,"args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_CWD\"]? || Dir.current]","external_name":"cwd","restriction":""}],"args_string":"(args = ARGV, cwd = Path[ENV[\"NOVIKA_CWD\"]? || Dir.current])","args_html":"(args = <span class=\"t\">ARGV</span>, cwd = <span class=\"t\">Path</span>[<span class=\"t\">ENV</span>[<span class=\"s\">&quot;NOVIKA_CWD&quot;</span>]? <span class=\"o\">||</span> <span class=\"t\">Dir</span>.current])","location":{"filename":"src/cli.cr","line_number":408,"url":null},"def":{"name":"start","args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_CWD\"]? || Dir.current]","external_name":"cwd","restriction":""}],"visibility":"Public","body":"begin\n  Colorize.enabled = Novika.colorful?\n  if args.any?(/^\\-{1,2}:?(?:h(?:elp)?|\\?)$/)\n    help(STDOUT)\n    exit(0)\n  end\n  profiler = nil\n  dry_list = false\n  dry_list_sm = false\n  dry_tree = false\n  help_mode = false\n  abort_on_permission_request = false\n  args.reject! do |arg|\n    case arg\n    when /^\\-:profile(?::([1-9]\\d*))?$/\n      profiler = Profiler.new($~[1]?.try(&.to_u64) || 16_u64)\n    when /^\\-:dry-list$/\n      dry_list = true\n    when /^\\-:dry-tree$/\n      dry_tree = true\n    when /^\\+:dry-list-sm$/\n      dry_list_sm = true\n    when /^\\-:abort-on-permission-request$/\n      abort_on_permission_request = true\n    when /^help$/\n      help_mode = true\n    else\n      next false\n    end\n    true\n  end\n  profiler.try do |prof|\n    Engine.trackers << prof\n  end\n  resolver = RunnableResolver.new(cwd, args)\n  resolver.on_permissions_gets do |string|\n    if abort_on_permission_request\n      abort\n    end\n    print(string, \" \")\n    gets\n  end\n  resolver.on_permissions_print do |string|\n    print(string)\n  end\n  resolver.after_container_rewritten do |container|\n    if dry_tree\n    else\n      next\n    end\n    puts(container)\n  end\n  resolver.after_response do |hook|\n    if dry_tree\n      exit(0)\n    end\n    hook.response.each_ignored_runnable do |runnable|\n      runnable.backtrace(STDERR, indent: 2) do |io|\n        Frontend.note(\"this runnable is not allowed here, and will be ignored: #{runnable}\", io)\n      end\n    end\n    if help_mode\n    else\n      next\n    end\n    first = true\n    hook.each_queried_for_preamble_with_group do |preamble, group|\n      if first\n        first = false\n      else\n        print(\"\\n\\n\")\n      end\n      puts(preamble)\n    end\n    if first\n      help(STDOUT)\n    end\n    exit(0)\n  end\n  resolver.after_program do |hook|\n    if dry_list\n    else\n      next\n    end\n    if dry_list_sm\n    else\n      puts(\"--> Showing environment designations (which environment is going to run which file).\\n--> Order matters, and is exactly the execution order.\")\n      puts\n    end\n    hook.each_designation do |designation|\n      designation.to_s(STDOUT, sm: dry_list_sm)\n      puts\n    end\n    exit(0)\n  end\n  resolver.after_permissions do |hook|\n    begin\n      hook.run\n    ensure\n      profiler.try do |prof|\n        puts(prof.to_table)\n      end\n    end\n  end\n  if resolver.resolve?\n  else\n    help(STDOUT)\n    exit(0)\n  end\nrescue e : Resolver::RunnableError\n  e.runnable.backtrace(STDERR, indent: 2) do |io|\n    Frontend.err(e.message, io)\n  end\n  exit(1)\nrescue e : Resolver::ResponseRejectedError\n  e.response.each_rejected_runnable do |runnable|\n    runnable.backtrace(STDERR, indent: 2) do |io|\n      Frontend.err(e.message, io)\n    end\n  end\n  exit(1)\nrescue e : Resolver::MoreThanOneAppError\n  e.apps.each do |app|\n    app.backtrace(STDERR, indent: 2) do |io|\n      Frontend.noteln(\"could not run this app because it's not the only one\", io)\n    end\n  end\n  Frontend.errln(e.message)\n  exit(1)\nrescue e : Resolver::ResolverError\n  Frontend.errln(e.message)\nrescue e : Error\n  e.report(STDERR)\n  exit(1)\nend"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler","path":"Novika/Frontend/CLI/Profiler.html","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/IExhaustTracker","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cli.cr","line_number":16,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/IExhaustTracker","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker"}],"namespace":{"html_id":"novika/Novika/Frontend/CLI","kind":"module","full_name":"Novika::Frontend::CLI","name":"CLI"},"doc":"A crude sample-based profiler which is triggered on every\nform the engine tries to execute.\n\nCounts the amount of times a form was attempted to be open\nby the engine.\n\nYou can use `to_table` to convert a snapshot of data to a\n`Tablo::Table` table.","summary":"<p>A crude sample-based profiler which is triggered on every form the engine tries to execute.</p>","constructors":[{"html_id":"new(period:UInt64=32_u64)-class-method","name":"new","doc":"Initializes this profiler.\n\n*period* is the period between samples, in Engine loop\nticks. The less the value, the more samples are taken\nand the more precise the results are (but the program\nmay run slower).","summary":"<p>Initializes this profiler.</p>","abstract":false,"args":[{"name":"period","default_value":"32_u64","external_name":"period","restriction":"::UInt64"}],"args_string":"(period : UInt64 = 32_u64)","args_html":"(period : UInt64 = <span class=\"n\">32_u64</span>)","location":{"filename":"src/cli.cr","line_number":48,"url":null},"def":{"name":"new","args":[{"name":"period","default_value":"32_u64","external_name":"period","restriction":"::UInt64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(period)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_form_begin(engine:Engine,form:Form)-instance-method","name":"on_form_begin","doc":"Invoked before *engine* opens the given *form*.","summary":"<p>Invoked before <em>engine</em> opens the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../../../Novika/Engine.html\">Engine</a>, form : <a href=\"../../../Novika/Form.html\">Form</a>)","location":{"filename":"src/cli.cr","line_number":64,"url":null},"def":{"name":"on_form_begin","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"if (@ticks - @start) >= @period\nelse\n  @ticks = @ticks + 1\n  return\nend\nengine.each_active_block do |block|\n  profile = @profiles[repr = encode(block)]\n  profile.sample\n  @profiles[repr] = profile\nend\n@start = @ticks\n@ticks = @ticks + 1\n"}},{"html_id":"to_table(cutoff=0.01)-instance-method","name":"to_table","doc":"Assembles and returns the data from this profiler as\na `Tablo::Table`.\n\n*cutoff* specifies the ratio [0-1] below which profiles\nshould be rejected (i.e., too insignificant).","summary":"<p>Assembles and returns the data from this profiler as a <code>Tablo::Table</code>.</p>","abstract":false,"args":[{"name":"cutoff","default_value":"0.01","external_name":"cutoff","restriction":""}],"args_string":"(cutoff = 0.01)","args_html":"(cutoff = <span class=\"n\">0.01</span>)","location":{"filename":"src/cli.cr","line_number":86,"url":null},"def":{"name":"to_table","args":[{"name":"cutoff","default_value":"0.01","external_name":"cutoff","restriction":""}],"visibility":"Public","body":"nperiods = @ticks / @period\nrows = @profiles.values.reject! do |profile|\n  (profile.ratio(nperiods)) < cutoff\nend.unstable_sort! do |a, b|\n  b <=> a\nend.compact_map(&.to_row?(nperiods))\nrows << [\"(coverage: ticks)\", @ticks]\nTablo::Table.new(rows) do |table|\n  table.add_column(\"Form (typedesc)\") do |row|\n    row[0]\n  end\n  table.add_column(\"No. of samples\") do |row|\n    row[1]\n  end\n  table.shrinkwrap!(128)\nend\n"}}],"types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler/Profile","path":"Novika/Frontend/CLI/Profiler/Profile.html","kind":"class","full_name":"Novika::Frontend::CLI::Profiler::Profile","name":"Profile","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/cli.cr","line_number":20,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Frontend/CLI/Profiler","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler"},"doc":"Represents a profile entry.","summary":"<p>Represents a profile entry.</p>","constructors":[{"html_id":"new(str:String)-class-method","name":"new","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : <a href=\"../../../../String.html\">String</a>)","location":{"filename":"src/cli.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"str","external_name":"str","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(str)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:Profile)-instance-method","name":"<=>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Profile"}],"args_string":"(other : Profile)","args_html":"(other : <a href=\"../../../../Novika/Frontend/CLI/Profiler/Profile.html\">Profile</a>)","location":{"filename":"src/cli.cr","line_number":25,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"Profile"}],"visibility":"Public","body":"@samples <=> (other.@samples)"}},{"html_id":"ratio(whole:Float64)-instance-method","name":"ratio","abstract":false,"args":[{"name":"whole","external_name":"whole","restriction":"Float64"}],"args_string":"(whole : Float64)","args_html":"(whole : Float64)","location":{"filename":"src/cli.cr","line_number":33,"url":null},"def":{"name":"ratio","args":[{"name":"whole","external_name":"whole","restriction":"Float64"}],"visibility":"Public","body":"@samples / whole"}},{"html_id":"sample-instance-method","name":"sample","abstract":false,"location":{"filename":"src/cli.cr","line_number":29,"url":null},"def":{"name":"sample","visibility":"Public","body":"@samples = @samples + 1"}},{"html_id":"to_row?(nperiods)-instance-method","name":"to_row?","abstract":false,"args":[{"name":"nperiods","external_name":"nperiods","restriction":""}],"args_string":"(nperiods)","args_html":"(nperiods)","location":{"filename":"src/cli.cr","line_number":37,"url":null},"def":{"name":"to_row?","args":[{"name":"nperiods","external_name":"nperiods","restriction":""}],"visibility":"Public","body":"[@str, @samples]"}}]}]}]},{"html_id":"novika/Novika/Frontend/Nkas","path":"Novika/Frontend/Nkas.html","kind":"module","full_name":"Novika::Frontend::Nkas","name":"Nkas","abstract":false,"locations":[{"filename":"src/nkas.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/Nkas","kind":"module","full_name":"Novika::Frontend::Nkas","name":"Nkas"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"help(io)-instance-method","name":"help","doc":"Appends information about the tool to *io*.","summary":"<p>Appends information about the tool to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/nkas.cr","line_number":8,"url":null},"def":{"name":"help","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"nkas - Novika image assembler for Novika #{Novika::VERSION}\\n\\nSyntax:\\n\\n  nkas [switches] [queries] <path/to/output/image.nki>\\n\\nSwitches:\\n\\n  -c  Compress with (default: do not compress)\\n    b:  Brotli\\n      f Compress quickly (fast)!\\n      b Compress thoroughly (best)!\\n    g:  Gzip\\n      f Compress quickly (fast)!\\n      b Compress thoroughly (best)!\\n\\nExample:\\n\\n  $ nkas -cb:b repl repl.nki\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Bundled <yours-may-differ>\\n  Ok  Wrote repl.nki\\n\\n  $ nki repl.nki\\n  [starts the repl]\\n\\nQueries:\\n\\n  In query treatment, this tool is fully compatible with\\n  the command-line frontend.\\n\\nPurpose:\\n\\n  A handy tool for packing Novika images e.g. to transfer\\n  them over the network, or distribute. Novika images can\\n  be run by the 'nki' tool which is more restricted than\\n  the command-line frontend.\\n\""}},{"html_id":"start(args=ARGV,cwd=Path[ENV[\"NOVIKA_CWD\"]?||Dir.current])-instance-method","name":"start","abstract":false,"args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_CWD\"]? || Dir.current]","external_name":"cwd","restriction":""}],"args_string":"(args = ARGV, cwd = Path[ENV[\"NOVIKA_CWD\"]? || Dir.current])","args_html":"(args = <span class=\"t\">ARGV</span>, cwd = <span class=\"t\">Path</span>[<span class=\"t\">ENV</span>[<span class=\"s\">&quot;NOVIKA_CWD&quot;</span>]? <span class=\"o\">||</span> <span class=\"t\">Dir</span>.current])","location":{"filename":"src/nkas.cr","line_number":54,"url":null},"def":{"name":"start","args":[{"name":"args","default_value":"ARGV","external_name":"args","restriction":""},{"name":"cwd","default_value":"Path[ENV[\"NOVIKA_CWD\"]? || Dir.current]","external_name":"cwd","restriction":""}],"visibility":"Public","body":"begin\n  Colorize.enabled = Novika.colorful?\n  if args.size < 2\n    help(STDOUT)\n    exit(0)\n  end\n  imagepath = nil\n  compression = Novika::Image::CompressionType::None\n  runnables = ARGV.map_with_index do |arg, index|\n    if (index == (ARGV.size - 1)) && (arg.ends_with?(\".nki\"))\n      imagepath = arg\n      next\n    end\n    if arg =~ (/-c([bg]):([fb])/)\n      case {$~[1], $~[2]}\n      when {\"b\", \"f\"}\n        compression = Novika::Image::CompressionType::BrotliFast\n      when {\"b\", \"b\"}\n        compression = Novika::Image::CompressionType::BrotliBest\n      when {\"g\", \"f\"}\n        compression = Novika::Image::CompressionType::GzipFast\n      when {\"g\", \"b\"}\n        compression = Novika::Image::CompressionType::GzipBest\n      else\n        Frontend.errln(\"invalid compression option: #{arg}\")\n        exit(1)\n      end\n      next\n    end\n    arg\n  end.compact\n  if imagepath\n  else\n    Frontend.errln(\"Please provide a 'path/to/image.nki' as the last argument.\")\n    Frontend.noteln(\"This will let me know where to save the image.\")\n    exit(1)\n  end\n  resolver = RunnableResolver.new(cwd, runnables)\n  resolver.on_permissions_gets do |string|\n    print(string, \" \")\n    gets\n  end\n  resolver.on_permissions_print do |string|\n    print(string)\n  end\n  resolver.after_permissions do |hook|\n    designations = hook.designations\n    prefix = designations.size > 1\n    designations.each do |designation|\n      mod = Novika::Block.new(designation.caps.block)\n      Frontend.wait(\"Bundling #{ARGV[-1]} (#{designation.label})...\\n\", ok: \"Bundled #{ARGV[-1]} (#{designation.label})\") do\n        designation.slurp(mod)\n      end\n      File.open(img = prefix ? \"#{Path[ARGV[-1]].stem}.#{designation.label}.nki\" : ARGV[-1], \"w\") do |file|\n        Frontend.wait(\"Writing image #{img}...\\n\", ok: \"Wrote image #{img}\") do\n          file.write_bytes(Novika::Image.new(mod, designation.caps, compression))\n        end\n      end\n    end\n  end\n  if resolver.resolve?\n  else\n    help(STDOUT)\n    exit(0)\n  end\nrescue e : Resolver::RunnableError\n  e.runnable.backtrace(STDERR, indent: 2) do |io|\n    Frontend.err(e.message, io)\n  end\n  exit(1)\nrescue e : Resolver::ResponseRejectedError\n  e.response.each_rejected_runnable do |runnable|\n    runnable.backtrace(STDERR, indent: 2) do |io|\n      Frontend.err(e.message, io)\n    end\n  end\n  exit(1)\nrescue e : Resolver::MoreThanOneAppError\n  e.apps.each do |app|\n    app.backtrace(STDERR, indent: 2) do |io|\n      Frontend.noteln(\"could not run this app because it's not the only one\", io)\n    end\n  end\n  Frontend.errln(e.message)\n  exit(1)\nrescue e : Resolver::ResolverError\n  Frontend.errln(e.message)\nend"}}]},{"html_id":"novika/Novika/Frontend/Nki","path":"Novika/Frontend/Nki.html","kind":"module","full_name":"Novika::Frontend::Nki","name":"Nki","abstract":false,"locations":[{"filename":"src/nki.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Frontend/Nki","kind":"module","full_name":"Novika::Frontend::Nki","name":"Nki"}],"namespace":{"html_id":"novika/Novika/Frontend","kind":"module","full_name":"Novika::Frontend","name":"Frontend"},"instance_methods":[{"html_id":"help(io)-instance-method","name":"help","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/nki.cr","line_number":7,"url":null},"def":{"name":"help","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"nki - Novika image interpreter for Novika #{Novika::VERSION}\\n\\nSyntax:\\n\\n  nki [switches] <path/to/image.nki>\\n\\nSwitches:\\n\\n  -c  Interpret image as that of the continuations block\\n\\nExample:\\n\\n  $ nkas -cb:b repl repl.nki\\n  [assembles the repl]\\n\\n  $ nki repl.nki\\n  [starts the repl; the following REPL session demonstates\\n   the use of the '-c' switch]\\n  >>> 100 $: x\\n  >>> 200 $: y\\n  >>> 'repl-save00.nki' disk:touch\\n  >>> conts nki:captureAll\\n  \\\"Note! It is important to write to disk in the next REPL\\n   prompt, because otherwise, nki:captureAll will capture\\n   before pushing the image byteslice, and before your\\n   write command. In short, this leaves your REPL save in\\n   an 'unexpected' state.\\\"\\n  >>> 'repl-save00.nki' disk:write\\n  <Ctrl-D>\\n  $ nki -c repl-save00.nki\\n  >>> x y + echo\\n  300\\n\\nPurpose:\\n\\n  A tool aimed for being carried along with a Novika image,\\n  to be able to run/load it.\\n\""}},{"html_id":"start-instance-method","name":"start","abstract":false,"location":{"filename":"src/nki.cr","line_number":50,"url":null},"def":{"name":"start","visibility":"Public","body":"if ARGV.size < 1\n  help(STDOUT)\n  exit(0)\nend\nconts = ARGV.delete(\"-c\")\ncaps = Novika::CapabilityCollection.with_available\nfilepath = Path[ARGV[-1]].expand\nfiledir = filepath.parent\ncaps.on_load_library? do |id|\n  paths = {filedir, filedir / \"lib\"}\n  {% if flag?(:windows) %}\n        paths = paths.flat_map { |path| [path / \"#{id}.dll\", path / \"lib#{id}.dll\"] }\n      {% else %}{% if flag?(:unix) %}\n        paths = paths.flat_map { |path| [path / \"#{id}.so\", path / \"lib#{id}.so\"] }\n      {% else %}\n        next\n      {% end %}{% end %}\n  path = paths.each do |path|\n    if File.exists?(path)\n      break path\n    end\n  end\n  if path\n    Library.new(id, path)\n  end\nend\nFile.open(filepath, \"r\") do |infile|\n  begin\n    image = infile.read_bytes(Novika::Image)\n    block = image.to_block(caps)\n    engine = Novika::Engine.push(caps)\n    if conts\n      engine.conts = block\n      engine.exhaust\n    else\n      block.parent = Block.new(caps.block)\n      block.at(Word.new(\"__path__\"), Quote.new(filedir.to_s))\n      block.at(Word.new(\"__file__\"), Quote.new(filepath.to_s))\n      block.at(Word.new(\"__runtime__\"), Quote.new(\"nki\"))\n      engine.schedule!(block, stack: Block.new)\n      engine.exhaust\n    end\n  rescue error : Novika::Error\n    error.report(STDERR)\n  rescue error : BinData::CustomException\n    Frontend.errln(\"This file doesn't seem like a valid Novika image: '#{ARGV[-1]}'\")\n    exit(1)\n  end\nend\n"}}]}]},{"html_id":"novika/Novika/FrozenBlock","path":"Novika/FrozenBlock.html","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":421,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock]","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 2, cls: Novika::FrozenBlock, onlyif: nil, verify: nil}, {type: \"basic\", name: id, cls: UInt64, onlyif: nil, verify: nil, value: nil}, {type: \"group\", name: tape, cls: Tape, onlyif: -> do\n  has_tape\nend, verify: nil, value: nil}, {type: \"group\", name: dict, cls: Dict, onlyif: -> do\n  has_dict\nend, verify: nil, value: nil}, {type: \"group\", name: friends, cls: Friends, onlyif: -> do\n  has_friends\nend, verify: nil, value: nil}, {type: \"basic\", name: parent, cls: BlockRefSnapshot | ::Nil, onlyif: -> do\n  has_parent\nend, verify: nil, value: nil}, {type: \"basic\", name: prototype, cls: BlockRefSnapshot | ::Nil, onlyif: -> do\n  is_instance\nend, verify: nil, value: nil}, {type: \"string\", name: comment, cls: String, onlyif: -> do\n  has_comment\nend, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(id,tape,dict,friends,parent,prototype,comment)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":""},{"name":"tape","external_name":"tape","restriction":""},{"name":"dict","external_name":"dict","restriction":""},{"name":"friends","external_name":"friends","restriction":""},{"name":"parent","external_name":"parent","restriction":""},{"name":"prototype","external_name":"prototype","restriction":""},{"name":"comment","external_name":"comment","restriction":""}],"args_string":"(id, tape, dict, friends, parent, prototype, comment)","args_html":"(id, tape, dict, friends, parent, prototype, comment)","location":{"filename":"src/novika/image.cr","line_number":487,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":""},{"name":"tape","external_name":"tape","restriction":""},{"name":"dict","external_name":"dict","restriction":""},{"name":"friends","external_name":"friends","restriction":""},{"name":"parent","external_name":"parent","restriction":""},{"name":"prototype","external_name":"prototype","restriction":""},{"name":"comment","external_name":"comment","restriction":""}],"visibility":"Public","body":"frozen = new\nfrozen.id = id\nfrozen.has_tape = !(!tape)\nif tape\n  frozen.tape.cursor = tape.cursor.to_u32\n  frozen.tape.substrate = [] of TypedSnapshot\n  tape.each do |form|\n    if ts = TypedSnapshot.new(form)\n      frozen.tape.substrate << ts\n    end\n  end\nend\nfrozen.has_dict = !(!dict)\nif dict\n  frozen.dict.entries = [] of FrozenEntry\n  dict.each do |key, entry|\n    frozen.dict.entries << (FrozenEntry.new(key, entry))\n  end\nend\nfrozen.has_friends = !(!friends)\nif friends\n  frozen.friends.refs = [] of BlockRefSnapshot\n  friends.each do |friend|\n    friend = friend.as(Block)\n    frozen.friends.refs << (BlockRefSnapshot.new(friend.object_id))\n  end\nend\nfrozen.has_parent = !(!parent)\nif parent\n  frozen.parent = BlockRefSnapshot.new(parent.object_id)\nend\nfrozen.is_instance = !(!prototype)\nif prototype\n  frozen.prototype = BlockRefSnapshot.new(prototype.object_id)\nend\nfrozen.has_comment = !(!comment)\nif comment\n  frozen.comment = comment\nend\nfrozen\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":422,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"comment:String-instance-method","name":"comment","doc":"Holds the string comment, if one exists.","summary":"<p>Holds the string comment, if one exists.</p>","abstract":false,"def":{"name":"comment","return_type":"String","visibility":"Public","body":"@comment"}},{"html_id":"comment=(comment:String)-instance-method","name":"comment=","doc":"Holds the string comment, if one exists.","summary":"<p>Holds the string comment, if one exists.</p>","abstract":false,"args":[{"name":"comment","external_name":"comment","restriction":"String"}],"args_string":"(comment : String)","args_html":"(comment : <a href=\"../String.html\">String</a>)","def":{"name":"comment=","args":[{"name":"comment","external_name":"comment","restriction":"String"}],"visibility":"Public","body":"@comment = comment"}},{"html_id":"dict:Novika::FrozenBlock::Dict-instance-method","name":"dict","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"def":{"name":"dict","visibility":"Public","body":"@dict"}},{"html_id":"dict=(dict:Novika::FrozenBlock::Dict)-instance-method","name":"dict=","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"dict","external_name":"dict","restriction":"::Novika::FrozenBlock::Dict"}],"args_string":"(dict : Novika::FrozenBlock::Dict)","args_html":"(dict : <a href=\"../Novika/FrozenBlock/Dict.html\">Novika::FrozenBlock::Dict</a>)","def":{"name":"dict=","args":[{"name":"dict","external_name":"dict","restriction":"::Novika::FrozenBlock::Dict"}],"visibility":"Public","body":"@dict = dict"}},{"html_id":"friends:Novika::FrozenBlock::Friends-instance-method","name":"friends","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"def":{"name":"friends","visibility":"Public","body":"@friends"}},{"html_id":"friends=(friends:Novika::FrozenBlock::Friends)-instance-method","name":"friends=","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"friends","external_name":"friends","restriction":"::Novika::FrozenBlock::Friends"}],"args_string":"(friends : Novika::FrozenBlock::Friends)","args_html":"(friends : <a href=\"../Novika/FrozenBlock/Friends.html\">Novika::FrozenBlock::Friends</a>)","def":{"name":"friends=","args":[{"name":"friends","external_name":"friends","restriction":"::Novika::FrozenBlock::Friends"}],"visibility":"Public","body":"@friends = friends"}},{"html_id":"has_comment:Bool-instance-method","name":"has_comment","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":437,"url":null},"def":{"name":"has_comment","return_type":"Bool","visibility":"Public","body":"@has_comment == 1"}},{"html_id":"has_comment=(has_comment:UInt8)-instance-method","name":"has_comment=","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"args":[{"name":"has_comment","external_name":"has_comment","restriction":"UInt8"}],"args_string":"(has_comment : UInt8)","args_html":"(has_comment : UInt8)","def":{"name":"has_comment=","args":[{"name":"has_comment","external_name":"has_comment","restriction":"UInt8"}],"visibility":"Public","body":"@has_comment = has_comment"}},{"html_id":"has_comment=(value:Bool)-instance-method","name":"has_comment=","doc":"Whether this block has a comment.","summary":"<p>Whether this block has a comment.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":437,"url":null},"def":{"name":"has_comment=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_comment = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_dict:Bool-instance-method","name":"has_dict","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":428,"url":null},"def":{"name":"has_dict","return_type":"Bool","visibility":"Public","body":"@has_dict == 1"}},{"html_id":"has_dict=(has_dict:UInt8)-instance-method","name":"has_dict=","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"args":[{"name":"has_dict","external_name":"has_dict","restriction":"UInt8"}],"args_string":"(has_dict : UInt8)","args_html":"(has_dict : UInt8)","def":{"name":"has_dict=","args":[{"name":"has_dict","external_name":"has_dict","restriction":"UInt8"}],"visibility":"Public","body":"@has_dict = has_dict"}},{"html_id":"has_dict=(value:Bool)-instance-method","name":"has_dict=","doc":"Whether this block has a dictionary.","summary":"<p>Whether this block has a dictionary.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":428,"url":null},"def":{"name":"has_dict=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_dict = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_friends:Bool-instance-method","name":"has_friends","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":430,"url":null},"def":{"name":"has_friends","return_type":"Bool","visibility":"Public","body":"@has_friends == 1"}},{"html_id":"has_friends=(has_friends:UInt8)-instance-method","name":"has_friends=","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"args":[{"name":"has_friends","external_name":"has_friends","restriction":"UInt8"}],"args_string":"(has_friends : UInt8)","args_html":"(has_friends : UInt8)","def":{"name":"has_friends=","args":[{"name":"has_friends","external_name":"has_friends","restriction":"UInt8"}],"visibility":"Public","body":"@has_friends = has_friends"}},{"html_id":"has_friends=(value:Bool)-instance-method","name":"has_friends=","doc":"Whether this block has friends.","summary":"<p>Whether this block has friends.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":430,"url":null},"def":{"name":"has_friends=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_friends = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_parent:Bool-instance-method","name":"has_parent","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":432,"url":null},"def":{"name":"has_parent","return_type":"Bool","visibility":"Public","body":"@has_parent == 1"}},{"html_id":"has_parent=(has_parent:UInt8)-instance-method","name":"has_parent=","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"args":[{"name":"has_parent","external_name":"has_parent","restriction":"UInt8"}],"args_string":"(has_parent : UInt8)","args_html":"(has_parent : UInt8)","def":{"name":"has_parent=","args":[{"name":"has_parent","external_name":"has_parent","restriction":"UInt8"}],"visibility":"Public","body":"@has_parent = has_parent"}},{"html_id":"has_parent=(value:Bool)-instance-method","name":"has_parent=","doc":"Whether this block has a parent.","summary":"<p>Whether this block has a parent.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":432,"url":null},"def":{"name":"has_parent=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_parent = UInt8.new(value ? 1 : 0)"}},{"html_id":"has_tape:Bool-instance-method","name":"has_tape","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"has_tape","return_type":"Bool","visibility":"Public","body":"@has_tape == 1"}},{"html_id":"has_tape=(has_tape:UInt8)-instance-method","name":"has_tape=","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"args":[{"name":"has_tape","external_name":"has_tape","restriction":"UInt8"}],"args_string":"(has_tape : UInt8)","args_html":"(has_tape : UInt8)","def":{"name":"has_tape=","args":[{"name":"has_tape","external_name":"has_tape","restriction":"UInt8"}],"visibility":"Public","body":"@has_tape = has_tape"}},{"html_id":"has_tape=(value:Bool)-instance-method","name":"has_tape=","doc":"Whether this block has tape.","summary":"<p>Whether this block has tape.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"has_tape=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@has_tape = UInt8.new(value ? 1 : 0)"}},{"html_id":"id:UInt64-instance-method","name":"id","doc":"Block identifier (`BlockRefSnapshot`s will refer to\nthis frozen block by this identifier).","summary":"<p>Block identifier (<code><a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a></code>s will refer to this frozen block by this identifier).</p>","abstract":false,"def":{"name":"id","return_type":"UInt64","visibility":"Public","body":"@id"}},{"html_id":"id=(id:UInt64)-instance-method","name":"id=","doc":"Block identifier (`BlockRefSnapshot`s will refer to\nthis frozen block by this identifier).","summary":"<p>Block identifier (<code><a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a></code>s will refer to this frozen block by this identifier).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"args_string":"(id : UInt64)","args_html":"(id : UInt64)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"UInt64"}],"visibility":"Public","body":"@id = id"}},{"html_id":"is_instance:Bool-instance-method","name":"is_instance","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":435,"url":null},"def":{"name":"is_instance","return_type":"Bool","visibility":"Public","body":"@is_instance == 1"}},{"html_id":"is_instance=(is_instance:UInt8)-instance-method","name":"is_instance=","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"args":[{"name":"is_instance","external_name":"is_instance","restriction":"UInt8"}],"args_string":"(is_instance : UInt8)","args_html":"(is_instance : UInt8)","def":{"name":"is_instance=","args":[{"name":"is_instance","external_name":"is_instance","restriction":"UInt8"}],"visibility":"Public","body":"@is_instance = is_instance"}},{"html_id":"is_instance=(value:Bool)-instance-method","name":"is_instance=","doc":"Whether this block is an instance (its prototype is other\nthan itself).","summary":"<p>Whether this block is an instance (its prototype is other than itself).</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":435,"url":null},"def":{"name":"is_instance=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@is_instance = UInt8.new(value ? 1 : 0)"}},{"html_id":"parent:BlockRefSnapshot|Nil-instance-method","name":"parent","doc":"Holds a ref to the parent block, in case there is a parent.","summary":"<p>Holds a ref to the parent block, in case there is a parent.</p>","abstract":false,"def":{"name":"parent","return_type":"BlockRefSnapshot | ::Nil","visibility":"Public","body":"@parent"}},{"html_id":"parent=(parent:BlockRefSnapshot|Nil)-instance-method","name":"parent=","doc":"Holds a ref to the parent block, in case there is a parent.","summary":"<p>Holds a ref to the parent block, in case there is a parent.</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"BlockRefSnapshot | ::Nil"}],"args_string":"(parent : BlockRefSnapshot | Nil)","args_html":"(parent : <a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"BlockRefSnapshot | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"prototype:BlockRefSnapshot|Nil-instance-method","name":"prototype","doc":"Holds a ref to the block's prototype, in case it is\ndifferent from the block itself.","summary":"<p>Holds a ref to the block's prototype, in case it is different from the block itself.</p>","abstract":false,"def":{"name":"prototype","return_type":"BlockRefSnapshot | ::Nil","visibility":"Public","body":"@prototype"}},{"html_id":"prototype=(prototype:BlockRefSnapshot|Nil)-instance-method","name":"prototype=","doc":"Holds a ref to the block's prototype, in case it is\ndifferent from the block itself.","summary":"<p>Holds a ref to the block's prototype, in case it is different from the block itself.</p>","abstract":false,"args":[{"name":"prototype","external_name":"prototype","restriction":"BlockRefSnapshot | ::Nil"}],"args_string":"(prototype : BlockRefSnapshot | Nil)","args_html":"(prototype : <a href=\"../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a> | Nil)","def":{"name":"prototype=","args":[{"name":"prototype","external_name":"prototype","restriction":"BlockRefSnapshot | ::Nil"}],"visibility":"Public","body":"@prototype = prototype"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"tape:Novika::FrozenBlock::Tape-instance-method","name":"tape","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"def":{"name":"tape","visibility":"Public","body":"@tape"}},{"html_id":"tape=(tape:Novika::FrozenBlock::Tape)-instance-method","name":"tape=","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"tape","external_name":"tape","restriction":"::Novika::FrozenBlock::Tape"}],"args_string":"(tape : Novika::FrozenBlock::Tape)","args_html":"(tape : <a href=\"../Novika/FrozenBlock/Tape.html\">Novika::FrozenBlock::Tape</a>)","def":{"name":"tape=","args":[{"name":"tape","external_name":"tape","restriction":"::Novika::FrozenBlock::Tape"}],"visibility":"Public","body":"@tape = tape"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds *all* information about a block.","summary":"<p>Holds <em>all</em> information about a block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":421,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/FrozenBlock/Dict","path":"Novika/FrozenBlock/Dict.html","kind":"class","full_name":"Novika::FrozenBlock::Dict","name":"Dict","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":459,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Dict]","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  entries.size\nend}, {type: \"array\", name: entries, cls: FrozenEntry, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of dictionary entries.","summary":"<p>Holds the amount of dictionary entries.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of dictionary entries.","summary":"<p>Holds the amount of dictionary entries.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"entries:Array(FrozenEntry)-instance-method","name":"entries","doc":"Holds dictionary entries.","summary":"<p>Holds dictionary entries.</p>","abstract":false,"def":{"name":"entries","return_type":"Array(FrozenEntry)","visibility":"Public","body":"@entries"}},{"html_id":"entries=(entries:Array(FrozenEntry))-instance-method","name":"entries=","doc":"Holds dictionary entries.","summary":"<p>Holds dictionary entries.</p>","abstract":false,"args":[{"name":"entries","external_name":"entries","restriction":"Array(FrozenEntry)"}],"args_string":"(entries : Array(FrozenEntry))","args_html":"(entries : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/FrozenEntry.html\">FrozenEntry</a>))","def":{"name":"entries=","args":[{"name":"entries","external_name":"entries","restriction":"Array(FrozenEntry)"}],"visibility":"Public","body":"@entries = entries"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":459,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the block's dictionary entries,\nin case it has non-empty dictionary.","summary":"<p>Holds information about the block's dictionary entries, in case it has non-empty dictionary.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/FrozenBlock/Friends","path":"Novika/FrozenBlock/Friends.html","kind":"class","full_name":"Novika::FrozenBlock::Friends","name":"Friends","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":469,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Friends]","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  refs.size\nend}, {type: \"array\", name: refs, cls: BlockRefSnapshot, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of block friends.","summary":"<p>Holds the amount of block friends.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of block friends.","summary":"<p>Holds the amount of block friends.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":469,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"refs:Array(BlockRefSnapshot)-instance-method","name":"refs","doc":"Holds references to block friends.","summary":"<p>Holds references to block friends.</p>","abstract":false,"def":{"name":"refs","return_type":"Array(BlockRefSnapshot)","visibility":"Public","body":"@refs"}},{"html_id":"refs=(refs:Array(BlockRefSnapshot))-instance-method","name":"refs=","doc":"Holds references to block friends.","summary":"<p>Holds references to block friends.</p>","abstract":false,"args":[{"name":"refs","external_name":"refs","restriction":"Array(BlockRefSnapshot)"}],"args_string":"(refs : Array(BlockRefSnapshot))","args_html":"(refs : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/BlockRefSnapshot.html\">BlockRefSnapshot</a>))","def":{"name":"refs=","args":[{"name":"refs","external_name":"refs","restriction":"Array(BlockRefSnapshot)"}],"visibility":"Public","body":"@refs = refs"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds the information about the block's friends, in case\nit has some.","summary":"<p>Holds the information about the block's friends, in case it has some.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/FrozenBlock/Tape","path":"Novika/FrozenBlock/Tape.html","kind":"class","full_name":"Novika::FrozenBlock::Tape","name":"Tape","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":448,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenBlock::Tape]","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: cursor, cls: UInt32, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  substrate.size\nend}, {type: \"array\", name: substrate, cls: TypedSnapshot, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>"}],"namespace":{"html_id":"novika/Novika/FrozenBlock","kind":"class","full_name":"Novika::FrozenBlock","name":"FrozenBlock"},"doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of items in tape's substrate.","summary":"<p>Holds the amount of items in tape's substrate.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of items in tape's substrate.","summary":"<p>Holds the amount of items in tape's substrate.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"cursor:UInt32-instance-method","name":"cursor","doc":"Holds the cursor position.","summary":"<p>Holds the cursor position.</p>","abstract":false,"def":{"name":"cursor","return_type":"UInt32","visibility":"Public","body":"@cursor"}},{"html_id":"cursor=(cursor:UInt32)-instance-method","name":"cursor=","doc":"Holds the cursor position.","summary":"<p>Holds the cursor position.</p>","abstract":false,"args":[{"name":"cursor","external_name":"cursor","restriction":"UInt32"}],"args_string":"(cursor : UInt32)","args_html":"(cursor : UInt32)","def":{"name":"cursor=","args":[{"name":"cursor","external_name":"cursor","restriction":"UInt32"}],"visibility":"Public","body":"@cursor = cursor"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":448,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::FrozenBlock|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"args_string":"(parent : Novika::FrozenBlock | Nil)","args_html":"(parent : <a href=\"../../Novika/FrozenBlock.html\">Novika::FrozenBlock</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::FrozenBlock | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"substrate:Array(TypedSnapshot)-instance-method","name":"substrate","doc":"Holds tape substrate.","summary":"<p>Holds tape substrate.</p>","abstract":false,"def":{"name":"substrate","return_type":"Array(TypedSnapshot)","visibility":"Public","body":"@substrate"}},{"html_id":"substrate=(substrate:Array(TypedSnapshot))-instance-method","name":"substrate=","doc":"Holds tape substrate.","summary":"<p>Holds tape substrate.</p>","abstract":false,"args":[{"name":"substrate","external_name":"substrate","restriction":"Array(TypedSnapshot)"}],"args_string":"(substrate : Array(TypedSnapshot))","args_html":"(substrate : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/TypedSnapshot.html\">TypedSnapshot</a>))","def":{"name":"substrate=","args":[{"name":"substrate","external_name":"substrate","restriction":"Array(TypedSnapshot)"}],"visibility":"Public","body":"@substrate = substrate"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the block's tape, in case it\nhas non-empty tape.","summary":"<p>Holds information about the block's tape, in case it has non-empty tape.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Novika/FrozenEntry","path":"Novika/FrozenEntry.html","kind":"class","full_name":"Novika::FrozenEntry","name":"FrozenEntry","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":389,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::FrozenEntry]","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"bitfield\", name: 1, cls: Novika::FrozenEntry, onlyif: nil, verify: nil}, {type: \"basic\", name: key, cls: TypedSnapshot | ::Nil, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: value, cls: TypedSnapshot | ::Nil, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(key:Form,entry:Entry)-class-method","name":"new","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(key : Form, entry : Entry)","args_html":"(key : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>)","location":{"filename":"src/novika/image.cr","line_number":411,"url":null},"def":{"name":"new","args":[{"name":"key","external_name":"key","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"visibility":"Public","body":"frozen = new\nfrozen.key = TypedSnapshot.new(key)\nfrozen.value = TypedSnapshot.new(entry.form)\nfrozen.opens = entry.is_a?(OpenEntry)\nfrozen\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":390,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"key:TypedSnapshot|Nil-instance-method","name":"key","doc":"Holds the key form.","summary":"<p>Holds the key form.</p>","abstract":false,"def":{"name":"key","return_type":"TypedSnapshot | ::Nil","visibility":"Public","body":"@key"}},{"html_id":"key=(key:TypedSnapshot|Nil)-instance-method","name":"key=","doc":"Holds the key form.","summary":"<p>Holds the key form.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"TypedSnapshot | ::Nil"}],"args_string":"(key : TypedSnapshot | Nil)","args_html":"(key : <a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a> | Nil)","def":{"name":"key=","args":[{"name":"key","external_name":"key","restriction":"TypedSnapshot | ::Nil"}],"visibility":"Public","body":"@key = key"}},{"html_id":"melt(assembler,block)-instance-method","name":"melt","doc":"Defines the corresponding entry in *block*.","summary":"<p>Defines the corresponding entry in <em>block</em>.</p>","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""},{"name":"block","external_name":"block","restriction":""}],"args_string":"(assembler, block)","args_html":"(assembler, block)","location":{"filename":"src/novika/image.cr","line_number":405,"url":null},"def":{"name":"melt","args":[{"name":"assembler","external_name":"assembler","restriction":""},{"name":"block","external_name":"block","restriction":""}],"visibility":"Public","body":"k = key.not_nil!.to_form(assembler)\nv = value.not_nil!.to_form(assembler)\nblock.at(k, (opens ? OpenEntry : Entry).new(v))\n"}},{"html_id":"opens:Bool-instance-method","name":"opens","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"opens","return_type":"Bool","visibility":"Public","body":"@opens == 1"}},{"html_id":"opens=(opens:UInt8)-instance-method","name":"opens=","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"args":[{"name":"opens","external_name":"opens","restriction":"UInt8"}],"args_string":"(opens : UInt8)","args_html":"(opens : UInt8)","def":{"name":"opens=","args":[{"name":"opens","external_name":"opens","restriction":"UInt8"}],"visibility":"Public","body":"@opens = opens"}},{"html_id":"opens=(value:Bool)-instance-method","name":"opens=","doc":"Holds whether the entry is an opener entry.","summary":"<p>Holds whether the entry is an opener entry.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","args_html":"(value : Bool)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"opens=","args":[{"name":"value","external_name":"value","restriction":"Bool"}],"visibility":"Public","body":"@opens = UInt8.new(value ? 1 : 0)"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"value:TypedSnapshot|Nil-instance-method","name":"value","doc":"Holds the value form, unless the value form is a builtin.","summary":"<p>Holds the value form, unless the value form is a builtin.</p>","abstract":false,"def":{"name":"value","return_type":"TypedSnapshot | ::Nil","visibility":"Public","body":"@value"}},{"html_id":"value=(value:TypedSnapshot|Nil)-instance-method","name":"value=","doc":"Holds the value form, unless the value form is a builtin.","summary":"<p>Holds the value form, unless the value form is a builtin.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"TypedSnapshot | ::Nil"}],"args_string":"(value : TypedSnapshot | Nil)","args_html":"(value : <a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a> | Nil)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"TypedSnapshot | ::Nil"}],"visibility":"Public","body":"@value = value"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about a block dictionary entry (a\nform-to-form pair with an is-opener flag).","summary":"<p>Holds information about a block dictionary entry (a form-to-form pair with an is-opener flag).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":389,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Hole","path":"Novika/Hole.html","kind":"struct","full_name":"Novika::Hole","name":"Hole","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":39,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holes are similar to Crystal's `uninitialized` or `out`, in that\nthey allow you to allocate memory for a type, pass a pointer to\nthat memory to e.g. a C function, and let that C function write\ninto the memory. The written value can then be retrieved by\nopening the hole.","summary":"<p>Holes are similar to Crystal's <code>uninitialized</code> or <code>out</code>, in that they allow you to allocate memory for a type, pass a pointer to that memory to e.g.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":65,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"hole\""}}],"constructors":[{"html_id":"new(type:FFI::ForeignType)-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"FFI::ForeignType"}],"args_string":"(type : FFI::ForeignType)","args_html":"(type : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":46,"url":null},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"FFI::ForeignType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(pointer:FFI::UntypedPointer)-class-method","name":"new","abstract":false,"args":[{"name":"pointer","external_name":"pointer","restriction":"FFI::UntypedPointer"}],"args_string":"(pointer : FFI::UntypedPointer)","args_html":"(pointer : <a href=\"../Novika/FFI/UntypedPointer.html\">FFI::UntypedPointer</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":50,"url":null},"def":{"name":"new","args":[{"name":"pointer","external_name":"pointer","restriction":"FFI::UntypedPointer"}],"visibility":"Public","body":"_ = allocate\n_.initialize(pointer)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the address of this hole's content in memory.","summary":"<p>Returns the address of this hole's content in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":56,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@handle.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the address of this hole's content in memory.","summary":"<p>Returns the address of this hole's content in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":56,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@handle.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":69,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"handle:Pointer(Void)-instance-method","name":"handle","doc":"Returns a pointer to this hole's content.","summary":"<p>Returns a pointer to this hole's content.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":44,"url":null},"def":{"name":"handle","return_type":"::Pointer(Void)","visibility":"Public","body":"@handle"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":58,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"form = (@type.unbox(@handle)).to_form?\nform.try(&.onto(engine.stack))\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":73,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[\") << @type) << \" hole: 0x\"\naddress.to_s(io, base: 16)\nio << \"]\"\n"}}]},{"html_id":"novika/Novika/Hook","path":"Novika/Hook.html","kind":"module","full_name":"Novika::Hook","name":"Hook","abstract":false,"locations":[{"filename":"src/novika/hook.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"novika/Novika/Hook","kind":"module","full_name":"Novika::Hook","name":"Hook"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"as_boolean-instance-method","name":"as_boolean","doc":"Returns the block-to-boolean hook name.","summary":"<p>Returns the block-to-boolean hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":70,"url":null},"def":{"name":"as_boolean","visibility":"Public","body":"Word.new(\"__boolean__\")"}},{"html_id":"as_byteslice-instance-method","name":"as_byteslice","doc":"Returns the block-to-byteslice hook name.","summary":"<p>Returns the block-to-byteslice hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":80,"url":null},"def":{"name":"as_byteslice","visibility":"Public","body":"Word.new(\"__byteslice__\")"}},{"html_id":"as_color-instance-method","name":"as_color","doc":"Returns the block-to-color hook name.","summary":"<p>Returns the block-to-color hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":55,"url":null},"def":{"name":"as_color","visibility":"Public","body":"Word.new(\"__color__\")"}},{"html_id":"as_decimal-instance-method","name":"as_decimal","doc":"Returns the block-to-decimal hook name.","summary":"<p>Returns the block-to-decimal hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":65,"url":null},"def":{"name":"as_decimal","visibility":"Public","body":"Word.new(\"__decimal__\")"}},{"html_id":"as_quote-instance-method","name":"as_quote","doc":"Returns the block-to-quote hook name.","summary":"<p>Returns the block-to-quote hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":60,"url":null},"def":{"name":"as_quote","visibility":"Public","body":"Word.new(\"__quote__\")"}},{"html_id":"as_quoted_word-instance-method","name":"as_quoted_word","doc":"Returns the block-to-quoted word hook name.","summary":"<p>Returns the block-to-quoted word hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":75,"url":null},"def":{"name":"as_quoted_word","visibility":"Public","body":"Word.new(\"__quotedWord__\")"}},{"html_id":"as_word-instance-method","name":"as_word","doc":"Returns the block-to-word hook name.","summary":"<p>Returns the block-to-word hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":50,"url":null},"def":{"name":"as_word","visibility":"Public","body":"Word.new(\"__word__\")"}},{"html_id":"died:Word-instance-method","name":"died","doc":"Returns the death hook name.\n\nDeath hooks are used to catch deaths (known as exceptions\nin other languages) in current block or in blocks below the\ncurrent block (nested blocks).\n\nBy defining a death hook, you are basically wrapping the\ncontents of your block in an uncontrained (catch-all)\n`try ... catch` or `begin ... rescue`.\n\n```novika\n[ getErrorDetails echo ] @: __died__\n\n1 0 / \"STDOUT: division by zero⏎\"\n```","summary":"<p>Returns the death hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":19,"url":null},"def":{"name":"died","return_type":"Word","visibility":"Public","body":"Word.new(\"__died__\")"}},{"html_id":"on_cherry-instance-method","name":"on_cherry","doc":"Returns the on-cherry hook name.\n\nOn-cherry hooks trigger when the user tries to *cherry*\na form out of a block. This doesn't necessarily mean using\nthe word `cherry`, since e.g. the word `drop` and its\nimplicit counterpart *pop* is defined in terms of `cherry`.\n\nDefining an on-shove hook will allow you to change how\nyour block behaves when it's used as a stack and dropped/\npopped from, and how it behaves when it is `cherry`d.\n\nOn-shove hook is complemented by `on_shove` hook. See it\nto learn more.\n\nThe \"Hello, World\" of on-shove/on-cherry is defining a\n*controlled stack*.\n\n```novika\n[\n  [ ] $: _controlledStack\n\n  [ drop _controlledStack swap bi: ['Shove ' swap ~ echo] shove ] @: __shove__\n  [ drop _controlledStack cherry dup 'Cherry ' swap ~ echo ] @: __cherry__\n\n  [ _controlledStack echo ] @: print\n] obj $: master\n\nmaster [ 1 2 + ] there\nmaster.print\n\"STDOUT: Shove 1⏎\"\n\"STDOUT: Shove 2⏎\"\n\"STDOUT: Cherry 2⏎\"\n\"STDOUT: Cherry 1⏎\"\n\"STDOUT: Shove 3⏎\"\n\"STDOUT: [ 3 ]⏎\"\n```","summary":"<p>Returns the on-cherry hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":142,"url":null},"def":{"name":"on_cherry","visibility":"Public","body":"Word.new(\"__cherry__\")"}},{"html_id":"on_shove-instance-method","name":"on_shove","doc":"Returns the on-shove hook name.\n\nOn-shove hooks trigger when the user tries to `shove` a\nform into the block the hook is attached to. Note that\nthis doesn't necessarily mean literally using `shove`.\n\nFor instance, simply typing `1 2 3` will shove 1, 2, 3\nconsequtively onto the stack. The latter is known as\n*pushing*, since *shoving* is defined for a block-and-a-\nform pair, while *pushing* is defined for a stack-and-a-\nform-pair, where the stack is implicit.\n\nDefining an on-shove hook will allow you to change how\nyour block behaves when it's used as a stack and pushed\nto, and how it behaves when it is shoved into.\n\nOn-shove hook is complemented by `on_cherry`. See it to\nlearn more.","summary":"<p>Returns the on-shove hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":102,"url":null},"def":{"name":"on_shove","visibility":"Public","body":"Word.new(\"__shove__\")"}},{"html_id":"trap-instance-method","name":"trap","doc":"Returns the word trap hook name.\n\nWord traps catch undefined words. Note that during word\nresolution, word traps run *last*. That is, all parents\nand friends of the block you're trying to resolve a word\nin are searched, and only then traps are triggered in the\nappropriate order.\n\nTraps can be nested: if one trap fails to resolve a word,\nthen an outer trap is triggered.\n\nThe words *outer*, *inner*, *nested* etc. refer to the block\nparent hierarchy. Initially, this means the hierarchy is\nAST-like, but for reparented blocks (or blocks whose parent\nhierarchy is changed otherwise), different traps will be\ntriggered in case of an undefined word.\n\n```novika\n[ 'The following word is undefined: ' swap ~ echo ] @: __trap__\n\n1 2 + frobnicate \"STDOUT: The following word is undefined: frobnicate⏎\"\n```","summary":"<p>Returns the word trap hook name.</p>","abstract":false,"location":{"filename":"src/novika/hook.cr","line_number":45,"url":null},"def":{"name":"trap","visibility":"Public","body":"Word.new(\"__trap__\")"}}]},{"html_id":"novika/Novika/ICapability","path":"Novika/ICapability.html","kind":"module","full_name":"Novika::ICapability","name":"ICapability","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":17,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Capabilities/IConsole","kind":"class","full_name":"Novika::Capabilities::IConsole","name":"IConsole"},{"html_id":"novika/Novika/Capabilities/IDisk","kind":"class","full_name":"Novika::Capabilities::IDisk","name":"IDisk"},{"html_id":"novika/Novika/Capabilities/IFrontend","kind":"class","full_name":"Novika::Capabilities::IFrontend","name":"IFrontend"},{"html_id":"novika/Novika/Capabilities/IInk","kind":"class","full_name":"Novika::Capabilities::IInk","name":"IInk"},{"html_id":"novika/Novika/Capabilities/Impl/Colors","kind":"class","full_name":"Novika::Capabilities::Impl::Colors","name":"Colors"},{"html_id":"novika/Novika/Capabilities/Impl/Essential","kind":"class","full_name":"Novika::Capabilities::Impl::Essential","name":"Essential"},{"html_id":"novika/Novika/Capabilities/Impl/FFI","kind":"class","full_name":"Novika::Capabilities::Impl::FFI","name":"FFI"},{"html_id":"novika/Novika/Capabilities/Impl/Nki","kind":"class","full_name":"Novika::Capabilities::Impl::Nki","name":"Nki"},{"html_id":"novika/Novika/Capabilities/ISystem","kind":"class","full_name":"Novika::Capabilities::ISystem","name":"ISystem"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Instance-side (`include`) interface to a Novika capability.\nAll capability instances must be compatible with this module.","summary":"<p>Instance-side (<code>include</code>) interface to a Novika capability.</p>","constructors":[{"html_id":"new(capabilities)-class-method","name":"new","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":""}],"args_string":"(capabilities)","args_html":"(capabilities)","location":{"filename":"src/novika/capability.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"capabilities","external_name":"capabilities","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(capabilities)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"capabilities:CapabilityCollection-instance-method","name":"capabilities","doc":"Returns the collection this capability is a part of.","summary":"<p>Returns the collection this capability is a part of.</p>","abstract":false,"location":{"filename":"src/novika/capability.cr","line_number":19,"url":null},"def":{"name":"capabilities","return_type":"CapabilityCollection","visibility":"Public","body":"@capabilities"}},{"html_id":"inject(intotarget:Block)-instance-method","name":"inject","doc":"Injects the vocabulary of this capability into the *target* block.","summary":"<p>Injects the vocabulary of this capability into the <em>target</em> block.</p>","abstract":true,"args":[{"name":"target","external_name":"into","restriction":"Block"}],"args_string":"(into target : Block)","args_html":"(into target : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/capability.cr","line_number":25,"url":null},"def":{"name":"inject","args":[{"name":"target","external_name":"into","restriction":"Block"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/ICapabilityClass","path":"Novika/ICapabilityClass.html","kind":"module","full_name":"Novika::ICapabilityClass","name":"ICapabilityClass","abstract":false,"locations":[{"filename":"src/novika/capability.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Class-side (`extend`) interface to a Novika capability. All\ncapability classes must be compatible with this module.","summary":"<p>Class-side (<code>extend</code>) interface to a Novika capability.</p>","instance_methods":[{"html_id":"id:String-instance-method","name":"id","doc":"Returns the frontend identifier of this capability class.","summary":"<p>Returns the frontend identifier of this capability class.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":6,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":""}},{"html_id":"on_by_default?:Bool-instance-method","name":"on_by_default?","doc":"Returns whether this capability class should be enabled automatically.","summary":"<p>Returns whether this capability class should be enabled automatically.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":12,"url":null},"def":{"name":"on_by_default?","return_type":"Bool","visibility":"Public","body":""}},{"html_id":"purpose:String-instance-method","name":"purpose","doc":"Returns a short description on what this capability class provides.","summary":"<p>Returns a short description on what this capability class provides.</p>","abstract":true,"location":{"filename":"src/novika/capability.cr","line_number":9,"url":null},"def":{"name":"purpose","return_type":"String","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/IDict","path":"Novika/IDict.html","kind":"module","full_name":"Novika::IDict","name":"IDict","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Dict","kind":"class","full_name":"Novika::Dict","name":"Dict"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Novika dictionary protocol. Objects or values that want\nto be Block dictionaries can implement this protocol to\nmake that possible.","summary":"<p>Novika dictionary protocol.</p>","instance_methods":[{"html_id":"clear-instance-method","name":"clear","doc":"Removes all entries in this dictionary.","summary":"<p>Removes all entries in this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":19,"url":null},"def":{"name":"clear","visibility":"Public","body":""}},{"html_id":"copy:IDict-instance-method","name":"copy","doc":"Returns a *shallow* copy of this dictionary.","summary":"<p>Returns a <em>shallow</em> copy of this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":35,"url":null},"def":{"name":"copy","return_type":"IDict","visibility":"Public","body":""}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of entries in this dictionary.","summary":"<p>Returns the amount of entries in this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":32,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"del(name:Form)-instance-method","name":"del","doc":"Deletes the entry corresponding to *name* form in this\ndictionary if it exists. Otherwise, does nothing.","summary":"<p>Deletes the entry corresponding to <em>name</em> form in this dictionary if it exists.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":16,"url":null},"def":{"name":"del","args":[{"name":"name","external_name":"name","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"each(&:Form,Form->)-instance-method","name":"each","doc":"Yields key, value forms in this dictionary.","summary":"<p>Yields key, value forms in this dictionary.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":38,"url":null},"def":{"name":"each","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Form, Form ->)"},"visibility":"Public","body":""}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this dictionary currently stores no entries.","summary":"<p>Returns whether this dictionary currently stores no entries.</p>","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":45,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"count.zero?"}},{"html_id":"get(name:Form,&:Form->Entry|Nil):Entry|Nil-instance-method","name":"get","doc":"Returns the entry corresponding to *name* form in this\ndictionary, or yields with *name* and returns the block\nresult.","summary":"<p>Returns the entry corresponding to <em>name</em> form in this dictionary, or yields with <em>name</em> and returns the block result.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form, & : Form -> Entry | Nil) : Entry | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, & : <a href=\"../Novika/Form.html\">Form</a> -> <a href=\"../Novika/Entry.html\">Entry</a> | Nil) : <a href=\"../Novika/Entry.html\">Entry</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":12,"url":null},"def":{"name":"get","args":[{"name":"name","external_name":"name","restriction":"Form"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Form -> Entry | ::Nil)"},"return_type":"Entry | ::Nil","visibility":"Public","body":""}},{"html_id":"has?(name:Form):Bool-instance-method","name":"has?","doc":"Returns whether this dictionary has an entry corresponding\nto *name* form.","summary":"<p>Returns whether this dictionary has an entry corresponding to <em>name</em> form.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":23,"url":null},"def":{"name":"has?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"import!(donor:IDict)-instance-method","name":"import!","doc":"Imports entries from *donor* dictionary into this dictionary.\n\nEntries whose names are preceded by one or more `_` are\nnot imported (they are considered private).","summary":"<p>Imports entries from <em>donor</em> dictionary into this dictionary.</p>","abstract":true,"args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"args_string":"(donor : IDict)","args_html":"(donor : <a href=\"../Novika/IDict.html\">IDict</a>)","location":{"filename":"src/novika/dict.cr","line_number":29,"url":null},"def":{"name":"import!","args":[{"name":"donor","external_name":"donor","restriction":"IDict"}],"visibility":"Public","body":""}},{"html_id":"set(name:Form,entry:Entry):Entry-instance-method","name":"set","doc":"Assigns *name* form to *entry* in this dictionary.","summary":"<p>Assigns <em>name</em> form to <em>entry</em> in this dictionary.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"args_string":"(name : Form, entry : Entry) : Entry","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, entry : <a href=\"../Novika/Entry.html\">Entry</a>) : <a href=\"../Novika/Entry.html\">Entry</a>","location":{"filename":"src/novika/dict.cr","line_number":7,"url":null},"def":{"name":"set","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"entry","external_name":"entry","restriction":"Entry"}],"return_type":"Entry","visibility":"Public","body":""}},{"html_id":"to_dict:Dict-instance-method","name":"to_dict","doc":"Converts this dictionary to the standard `Dict` implementation\n(used in e.g. serialization).","summary":"<p>Converts this dictionary to the standard <code><a href=\"../Novika/Dict.html\">Dict</a></code> implementation (used in e.g.</p>","abstract":true,"location":{"filename":"src/novika/dict.cr","line_number":42,"url":null},"def":{"name":"to_dict","return_type":"Dict","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/IExhaustTracker","path":"Novika/IExhaustTracker.html","kind":"module","full_name":"Novika::IExhaustTracker","name":"IExhaustTracker","abstract":false,"locations":[{"filename":"src/novika/engine.cr","line_number":2,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Frontend/CLI/Profiler","kind":"class","full_name":"Novika::Frontend::CLI::Profiler","name":"Profiler"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"instance_methods":[{"html_id":"on_form_begin(engine:Engine,form:Form)-instance-method","name":"on_form_begin","doc":"Invoked before *engine* opens the given *form*.","summary":"<p>Invoked before <em>engine</em> opens the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":4,"url":null},"def":{"name":"on_form_begin","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}},{"html_id":"on_form_end(engine:Engine,form:Form)-instance-method","name":"on_form_end","doc":"Invoked after *engine* opened the given *form*.","summary":"<p>Invoked after <em>engine</em> opened the given <em>form</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(engine : Engine, form : Form)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/engine.cr","line_number":8,"url":null},"def":{"name":"on_form_end","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Image","path":"Novika/Image.html","kind":"class","full_name":"Novika::Image","name":"Image","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":893,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::Image]","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: signature, cls: String, onlyif: nil, verify: -> do\n  signature == \"NKI\"\nend, length: -> do\n  3\nend, value: nil, encoding: nil}, {type: \"bitfield\", name: 3, cls: Novika::Image, onlyif: nil, verify: nil}] of Nil","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"},{"id":"REMAINING","name":"REMAINING","value":"[{type: \"bytes\", name: payload, onlyif: nil, verify: nil}] of Nil","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(payload:ImagePayload,compression=CompressionType::GzipFast)-class-method","name":"new","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"ImagePayload"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""}],"args_string":"(payload : ImagePayload, compression = CompressionType::GzipFast)","args_html":"(payload : <a href=\"../Novika/ImagePayload.html\">ImagePayload</a>, compression = <span class=\"t\">CompressionType</span><span class=\"t\">::</span><span class=\"t\">GzipFast</span>)","location":{"filename":"src/novika/image.cr","line_number":958,"url":null},"def":{"name":"new","args":[{"name":"payload","external_name":"payload","restriction":"ImagePayload"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""}],"visibility":"Public","body":"image = new\nimage.compression = compression\nbuffer = IO::Memory.new\nwriter = case compression\nin .none?\n  buffer\nin .gzip_fast?\n  Compress::Gzip::Writer.new(buffer, Compress::Gzip::BEST_SPEED)\nin .gzip_best?\n  Compress::Gzip::Writer.new(buffer, Compress::Gzip::BEST_COMPRESSION)\nin .brotli_fast?\n  Compress::Brotli::Writer.new(buffer, options: Compress::Brotli::WriterOptions.new(quality: 4_u32))\nin .brotli_best?\n  Compress::Brotli::Writer.new(buffer, options: Compress::Brotli::WriterOptions.new(quality: 11_u32))\nend\nwriter.write_bytes(payload)\nwriter.close\nimage.payload = buffer.to_slice\nimage\n"}},{"html_id":"new(block:Block,caps:CapabilityCollection,compression=CompressionType::GzipFast,mode=CaptureMode::CaptureAll)-class-method","name":"new","doc":"Returns the `Image` formed with this block as the pivot\nblock. Needs access to the current capability collection,\n*caps*, to read which capabilities are going to be required\nto run the image.\n\nYou can optionally specify the *compression* method\nused. For a list of available compression methods, see\nthe `CompressionType` enum.\n\nYou can optionally specify *mode*. See `BlockVisitor::VisitMode`\nfor a list of available visit modes.","summary":"<p>Returns the <code><a href=\"../Novika/Image.html\">Image</a></code> formed with this block as the pivot block.</p>","abstract":false,"args":[{"name":"block","external_name":"block","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(block : Block, caps : CapabilityCollection, compression = CompressionType::GzipFast, mode = CaptureMode::CaptureAll)","args_html":"(block : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, compression = <span class=\"t\">CompressionType</span><span class=\"t\">::</span><span class=\"t\">GzipFast</span>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":1000,"url":null},"def":{"name":"new","args":[{"name":"block","external_name":"block","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"compression","default_value":"CompressionType::GzipFast","external_name":"compression","restriction":""},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"new(ImagePayload.new(block, caps, mode), compression)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":894,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"compression:CompressionType-instance-method","name":"compression","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"compression","return_type":"CompressionType","visibility":"Public","body":"CompressionType.new(@compression.to_i)"}},{"html_id":"compression=(compression:UInt8)-instance-method","name":"compression=","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"args":[{"name":"compression","external_name":"compression","restriction":"UInt8"}],"args_string":"(compression : UInt8)","args_html":"(compression : UInt8)","def":{"name":"compression=","args":[{"name":"compression","external_name":"compression","restriction":"UInt8"}],"visibility":"Public","body":"@compression = compression"}},{"html_id":"compression=(value:CompressionType)-instance-method","name":"compression=","doc":"Holds compression method used to compress the payload.","summary":"<p>Holds compression method used to compress the payload.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"CompressionType"}],"args_string":"(value : CompressionType)","args_html":"(value : <a href=\"../Novika/Image/CompressionType.html\">CompressionType</a>)","location":{"filename":"src/novika/image.cr","line_number":6,"url":null},"def":{"name":"compression=","args":[{"name":"value","external_name":"value","restriction":"CompressionType"}],"visibility":"Public","body":"@compression = (@compression.class.new(0)) | value.to_i"}},{"html_id":"payload:Bytes-instance-method","name":"payload","doc":"Holds the payload, which may or may not be compressed.","summary":"<p>Holds the payload, which may or may not be compressed.</p>","abstract":false,"def":{"name":"payload","return_type":"Bytes","visibility":"Public","body":"@payload"}},{"html_id":"payload=(payload:Bytes)-instance-method","name":"payload=","doc":"Holds the payload, which may or may not be compressed.","summary":"<p>Holds the payload, which may or may not be compressed.</p>","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"Bytes"}],"args_string":"(payload : Bytes)","args_html":"(payload : Bytes)","def":{"name":"payload=","args":[{"name":"payload","external_name":"payload","restriction":"Bytes"}],"visibility":"Public","body":"@payload = payload"}},{"html_id":"reserved:UInt8-instance-method","name":"reserved","abstract":false,"def":{"name":"reserved","return_type":"UInt8","visibility":"Public","body":"@reserved"}},{"html_id":"reserved=(reserved:UInt8)-instance-method","name":"reserved=","abstract":false,"args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"args_string":"(reserved : UInt8)","args_html":"(reserved : UInt8)","def":{"name":"reserved=","args":[{"name":"reserved","external_name":"reserved","restriction":"UInt8"}],"visibility":"Public","body":"@reserved = reserved"}},{"html_id":"signature:String-instance-method","name":"signature","doc":"Holds Novika image signature, the string 'NKI'.","summary":"<p>Holds Novika image signature, the string 'NKI'.</p>","abstract":false,"def":{"name":"signature","return_type":"String","visibility":"Public","body":"@signature"}},{"html_id":"signature=(signature:String)-instance-method","name":"signature=","doc":"Holds Novika image signature, the string 'NKI'.","summary":"<p>Holds Novika image signature, the string 'NKI'.</p>","abstract":false,"args":[{"name":"signature","external_name":"signature","restriction":"String"}],"args_string":"(signature : String)","args_html":"(signature : <a href=\"../String.html\">String</a>)","def":{"name":"signature=","args":[{"name":"signature","external_name":"signature","restriction":"String"}],"visibility":"Public","body":"@signature = signature"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Reconstructs the pivot block and its hierarchy from this\nimage. Returns the resulting block.\n\nCapability collection *caps* is required to make sure all\nrequired capabilities are enabled/available.","summary":"<p>Reconstructs the pivot block and its hierarchy from this image.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":936,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"buffer = IO::Memory.new(payload)\nreader = case compression\nin .none?\n  buffer\nin .gzip_fast?, .gzip_best?\n  Compress::Gzip::Reader.new(buffer)\nin .brotli_fast?, .brotli_best?\n  Compress::Brotli::Reader.new(buffer)\nend\npayload = reader.read_bytes(ImagePayload)\nreader.close\npayload.to_block(caps)\n"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Image = Novika::Image.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capabilities(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capabilities","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_capabilities","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Capabilities = Novika::ImagePayload::Capabilities.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"An image consists of the 'NKI' signature, payload\ncompression type (see `Image::CompressionType`), and\nthe (optionally compressed) payload itself (see\n`ImagePayload`).","summary":"<p>An image consists of the 'NKI' signature, payload compression type (see <code><a href=\"../Novika/Image/CompressionType.html\">Image::CompressionType</a></code>), and the (optionally compressed) payload itself (see <code><a href=\"../Novika/ImagePayload.html\">ImagePayload</a></code>).</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":893,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/Image/CompressionType","path":"Novika/Image/CompressionType.html","kind":"enum","full_name":"Novika::Image::CompressionType","name":"CompressionType","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":897,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0","doc":"No compression. May yield very large files.","summary":"<p>No compression.</p>"},{"id":"GzipFast","name":"GzipFast","value":"1","doc":"Use(s) fast but not best Gzip compression.","summary":"<p>Use(s) fast but not best Gzip compression.</p>"},{"id":"GzipBest","name":"GzipBest","value":"2","doc":"Use(s) best but not fast Gzip compression.","summary":"<p>Use(s) best but not fast Gzip compression.</p>"},{"id":"BrotliFast","name":"BrotliFast","value":"3","doc":"Use(s) fast but not best Brotli compression.\nGenerally slower than `GzipFast`, but almost\ncertainly will yield better results.","summary":"<p>Use(s) fast but not best Brotli compression.</p>"},{"id":"BrotliBest","name":"BrotliBest","value":"4","doc":"Use(s) best but not fast Brotli compression.\nGenerally slower than `GzipBest`, but almost\ncertainly will yield better results.","summary":"<p>Use(s) best but not fast Brotli compression.</p>"}],"namespace":{"html_id":"novika/Novika/Image","kind":"class","full_name":"Novika::Image","name":"Image"},"doc":"Lists all available payload compression types.","summary":"<p>Lists all available payload compression types.</p>","instance_methods":[{"html_id":"brotli_best?-instance-method","name":"brotli_best?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":915,"url":null},"def":{"name":"brotli_best?","visibility":"Public","body":"self == BrotliBest"}},{"html_id":"brotli_fast?-instance-method","name":"brotli_fast?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":910,"url":null},"def":{"name":"brotli_fast?","visibility":"Public","body":"self == BrotliFast"}},{"html_id":"gzip_best?-instance-method","name":"gzip_best?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":905,"url":null},"def":{"name":"gzip_best?","visibility":"Public","body":"self == GzipBest"}},{"html_id":"gzip_fast?-instance-method","name":"gzip_fast?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":902,"url":null},"def":{"name":"gzip_fast?","visibility":"Public","body":"self == GzipFast"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":899,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}}]}]},{"html_id":"novika/Novika/ImagePayload","path":"Novika/ImagePayload.html","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":800,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload]","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"MONTHLY","name":"MONTHLY","value":"VERSION_MATCH[3].to_u8","doc":"Monthly increment of the current Novika version.","summary":"<p>Monthly increment of the current Novika version.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"group\", name: ver, cls: Ver, onlyif: nil, verify: -> do\n  (ver.rev == 10) && ({ver.subrev, ver.yearly, ver.monthly} == {SUBREV, YEARLY, MONTHLY})\nend, value: nil}, {type: \"group\", name: capabilities, cls: Capabilities, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: pool, cls: BlockPool | ::Nil, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>"},{"id":"SUBREV","name":"SUBREV","value":"VERSION_MATCH[1].to_u8","doc":"Subrevision (release) of the current Novika version.","summary":"<p>Subrevision (release) of the current Novika version.</p>"},{"id":"VERSION_MATCH","name":"VERSION_MATCH","value":"((/(\\d+)\\.(\\d+)\\.(\\d+)/).match(Novika::VERSION)).not_nil!"},{"id":"YEARLY","name":"YEARLY","value":"VERSION_MATCH[2].to_u8","doc":"Yearly increment of the current Novika version.","summary":"<p>Yearly increment of the current Novika version.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(pivot:Block,caps:CapabilityCollection,mode=CaptureMode::CaptureAll)-class-method","name":"new","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"args_string":"(pivot : Block, caps : CapabilityCollection, mode = CaptureMode::CaptureAll)","args_html":"(pivot : <a href=\"../Novika/Block.html\">Block</a>, caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>, mode = <span class=\"t\">CaptureMode</span><span class=\"t\">::</span><span class=\"t\">CaptureAll</span>)","location":{"filename":"src/novika/image.cr","line_number":881,"url":null},"def":{"name":"new","args":[{"name":"pivot","external_name":"pivot","restriction":"Block"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"},{"name":"mode","default_value":"CaptureMode::CaptureAll","external_name":"mode","restriction":""}],"visibility":"Public","body":"image = new\nimage.capabilities.required = caps.enabled.map do |fcls|\n  CapabilityId.new(fcls.id)\nend\nimage.pool = BlockPool.new(pivot, caps, mode)\nimage\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":801,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"capabilities:Novika::ImagePayload::Capabilities-instance-method","name":"capabilities","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"def":{"name":"capabilities","visibility":"Public","body":"@capabilities"}},{"html_id":"capabilities=(capabilities:Novika::ImagePayload::Capabilities)-instance-method","name":"capabilities=","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"capabilities","external_name":"capabilities","restriction":"::Novika::ImagePayload::Capabilities"}],"args_string":"(capabilities : Novika::ImagePayload::Capabilities)","args_html":"(capabilities : <a href=\"../Novika/ImagePayload/Capabilities.html\">Novika::ImagePayload::Capabilities</a>)","def":{"name":"capabilities=","args":[{"name":"capabilities","external_name":"capabilities","restriction":"::Novika::ImagePayload::Capabilities"}],"visibility":"Public","body":"@capabilities = capabilities"}},{"html_id":"pool:BlockPool|Nil-instance-method","name":"pool","doc":"Holds the block pool.","summary":"<p>Holds the block pool.</p>","abstract":false,"def":{"name":"pool","return_type":"BlockPool | ::Nil","visibility":"Public","body":"@pool"}},{"html_id":"pool=(pool:BlockPool|Nil)-instance-method","name":"pool=","doc":"Holds the block pool.","summary":"<p>Holds the block pool.</p>","abstract":false,"args":[{"name":"pool","external_name":"pool","restriction":"BlockPool | ::Nil"}],"args_string":"(pool : BlockPool | Nil)","args_html":"(pool : <a href=\"../Novika/BlockPool.html\">BlockPool</a> | Nil)","def":{"name":"pool=","args":[{"name":"pool","external_name":"pool","restriction":"BlockPool | ::Nil"}],"visibility":"Public","body":"@pool = pool"}},{"html_id":"to_block(caps:CapabilityCollection)-instance-method","name":"to_block","doc":"Converts this image payload to a block, aided by *caps*.\n\nSee `Image#to_block`.","summary":"<p>Converts this image payload to a block, aided by <em>caps</em>.</p>","abstract":false,"args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(caps : CapabilityCollection)","args_html":"(caps : <a href=\"../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/image.cr","line_number":865,"url":null},"def":{"name":"to_block","args":[{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"capabilities.required.each do |fid|\n  if caps.has_capability?(fid.id)\n  else\n    raise(Novika::Error.new(\"image requires capability '#{fid.id}', but it isn't available\"))\n  end\n  caps.enable(fid.id)\nend\npool.not_nil!.to_block(caps)\n"}},{"html_id":"ver:Novika::ImagePayload::Ver-instance-method","name":"ver","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"def":{"name":"ver","visibility":"Public","body":"@ver"}},{"html_id":"ver=(ver:Novika::ImagePayload::Ver)-instance-method","name":"ver=","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"ver","external_name":"ver","restriction":"::Novika::ImagePayload::Ver"}],"args_string":"(ver : Novika::ImagePayload::Ver)","args_html":"(ver : <a href=\"../Novika/ImagePayload/Ver.html\">Novika::ImagePayload::Ver</a>)","def":{"name":"ver=","args":[{"name":"ver","external_name":"ver","restriction":"::Novika::ImagePayload::Ver"}],"visibility":"Public","body":"@ver = ver"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Normally compressed and/or encrypted, image payload\nholds the version of Novika it was created with, a list\nof capabilities it requires, and, finally, `BlockPool`,\nwhich is used to reconstruct the hierarchy (parents,\nprototypes, friends, and so on, recursively), tape, and\ndictionary of some pivot block.\n\nNote: temporarily, backward/forward compatibility is\ndisabled. Meaning that only the version of Novika that\nwrote the image is allowed to read it.","summary":"<p>Normally compressed and/or encrypted, image payload holds the version of Novika it was created with, a list of capabilities it requires, and, finally, <code><a href=\"../Novika/BlockPool.html\">BlockPool</a></code>, which is used to reconstruct the hierarchy (parents, prototypes, friends, and so on, recursively), tape, and dictionary of some pivot block.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":800,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}],"types":[{"html_id":"novika/Novika/ImagePayload/Capabilities","path":"Novika/ImagePayload/Capabilities.html","kind":"class","full_name":"Novika::ImagePayload::Capabilities","name":"Capabilities","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":852,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload::Capabilities]","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: count, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  required.size\nend}, {type: \"array\", name: required, cls: CapabilityId, onlyif: nil, verify: nil, length: -> do\n  count\nend, value: nil}] of Nil","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>"}],"namespace":{"html_id":"novika/Novika/ImagePayload","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload"},"doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"count:UInt64-instance-method","name":"count","doc":"Holds the amount of required capabilities.","summary":"<p>Holds the amount of required capabilities.</p>","abstract":false,"def":{"name":"count","return_type":"UInt64","visibility":"Public","body":"@count"}},{"html_id":"count=(count:UInt64)-instance-method","name":"count=","doc":"Holds the amount of required capabilities.","summary":"<p>Holds the amount of required capabilities.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"args_string":"(count : UInt64)","args_html":"(count : UInt64)","def":{"name":"count=","args":[{"name":"count","external_name":"count","restriction":"UInt64"}],"visibility":"Public","body":"@count = count"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":852,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::ImagePayload|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"args_string":"(parent : Novika::ImagePayload | Nil)","args_html":"(parent : <a href=\"../../Novika/ImagePayload.html\">Novika::ImagePayload</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"required:Array(CapabilityId)-instance-method","name":"required","doc":"Holds IDs of required capabilities (namely `ICapabilityClass.id`).","summary":"<p>Holds IDs of required capabilities (namely <code><a href=\"../../Novika/ICapabilityClass.html#id%3AString-instance-method\">ICapabilityClass.id</a></code>).</p>","abstract":false,"def":{"name":"required","return_type":"Array(CapabilityId)","visibility":"Public","body":"@required"}},{"html_id":"required=(required:Array(CapabilityId))-instance-method","name":"required=","doc":"Holds IDs of required capabilities (namely `ICapabilityClass.id`).","summary":"<p>Holds IDs of required capabilities (namely <code><a href=\"../../Novika/ICapabilityClass.html#id%3AString-instance-method\">ICapabilityClass.id</a></code>).</p>","abstract":false,"args":[{"name":"required","external_name":"required","restriction":"Array(CapabilityId)"}],"args_string":"(required : Array(CapabilityId))","args_html":"(required : <a href=\"../../Array.html\">Array</a>(CapabilityId))","def":{"name":"required=","args":[{"name":"required","external_name":"required","restriction":"Array(CapabilityId)"}],"visibility":"Public","body":"@required = required"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capabilities(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capabilities","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capabilities","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Capabilities = Novika::ImagePayload::Capabilities.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about the capabilities required to run\nthis image.","summary":"<p>Holds information about the capabilities required to run this image.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/ImagePayload/Ver","path":"Novika/ImagePayload/Ver.html","kind":"class","full_name":"Novika::ImagePayload::Ver","name":"Ver","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":827,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::ImagePayload::Ver]","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: rev, cls: UInt8, onlyif: nil, verify: nil, value: nil}, {type: \"basic\", name: subrev, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  SUBREV\nend}, {type: \"basic\", name: yearly, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  YEARLY\nend}, {type: \"basic\", name: monthly, cls: UInt8, onlyif: nil, verify: nil, value: -> do\n  MONTHLY\nend}] of Nil","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>"}],"namespace":{"html_id":"novika/Novika/ImagePayload","kind":"class","full_name":"Novika::ImagePayload","name":"ImagePayload"},"doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"monthly:UInt8-instance-method","name":"monthly","doc":"Montly version increment:\n\n  0.0.5\n     ---","summary":"<p>Montly version increment:</p>","abstract":false,"def":{"name":"monthly","return_type":"UInt8","visibility":"Public","body":"@monthly"}},{"html_id":"monthly=(monthly:UInt8)-instance-method","name":"monthly=","doc":"Montly version increment:\n\n  0.0.5\n     ---","summary":"<p>Montly version increment:</p>","abstract":false,"args":[{"name":"monthly","external_name":"monthly","restriction":"UInt8"}],"args_string":"(monthly : UInt8)","args_html":"(monthly : UInt8)","def":{"name":"monthly=","args":[{"name":"monthly","external_name":"monthly","restriction":"UInt8"}],"visibility":"Public","body":"@monthly = monthly"}},{"html_id":"parent-instance-method","name":"parent","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":827,"url":null},"def":{"name":"parent","visibility":"Public","body":"@parent.not_nil!"}},{"html_id":"parent=(parent:Novika::ImagePayload|Nil)-instance-method","name":"parent=","doc":"Group fields might need access to data in the parent","summary":"<p>Group fields might need access to data in the parent</p>","abstract":false,"args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"args_string":"(parent : Novika::ImagePayload | Nil)","args_html":"(parent : <a href=\"../../Novika/ImagePayload.html\">Novika::ImagePayload</a> | Nil)","def":{"name":"parent=","args":[{"name":"parent","external_name":"parent","restriction":"Novika::ImagePayload | ::Nil"}],"visibility":"Public","body":"@parent = parent"}},{"html_id":"rev:UInt8-instance-method","name":"rev","doc":"Revision number (this is revision 10).","summary":"<p>Revision number (this is revision 10).</p>","abstract":false,"def":{"name":"rev","return_type":"UInt8","visibility":"Public","body":"@rev"}},{"html_id":"rev=(rev:UInt8)-instance-method","name":"rev=","doc":"Revision number (this is revision 10).","summary":"<p>Revision number (this is revision 10).</p>","abstract":false,"args":[{"name":"rev","external_name":"rev","restriction":"UInt8"}],"args_string":"(rev : UInt8)","args_html":"(rev : UInt8)","def":{"name":"rev=","args":[{"name":"rev","external_name":"rev","restriction":"UInt8"}],"visibility":"Public","body":"@rev = rev"}},{"html_id":"subrev:UInt8-instance-method","name":"subrev","doc":"Subrevision (release) increment:\n\n   0.0.5\n  ---","summary":"<p>Subrevision (release) increment:</p>","abstract":false,"def":{"name":"subrev","return_type":"UInt8","visibility":"Public","body":"@subrev"}},{"html_id":"subrev=(subrev:UInt8)-instance-method","name":"subrev=","doc":"Subrevision (release) increment:\n\n   0.0.5\n  ---","summary":"<p>Subrevision (release) increment:</p>","abstract":false,"args":[{"name":"subrev","external_name":"subrev","restriction":"UInt8"}],"args_string":"(subrev : UInt8)","args_html":"(subrev : UInt8)","def":{"name":"subrev=","args":[{"name":"subrev","external_name":"subrev","restriction":"UInt8"}],"visibility":"Public","body":"@subrev = subrev"}},{"html_id":"yearly:UInt8-instance-method","name":"yearly","doc":"Yearly version increment:\n\n  0.0.5\n   ---","summary":"<p>Yearly version increment:</p>","abstract":false,"def":{"name":"yearly","return_type":"UInt8","visibility":"Public","body":"@yearly"}},{"html_id":"yearly=(yearly:UInt8)-instance-method","name":"yearly=","doc":"Yearly version increment:\n\n  0.0.5\n   ---","summary":"<p>Yearly version increment:</p>","abstract":false,"args":[{"name":"yearly","external_name":"yearly","restriction":"UInt8"}],"args_string":"(yearly : UInt8)","args_html":"(yearly : UInt8)","def":{"name":"yearly=","args":[{"name":"yearly","external_name":"yearly","restriction":"UInt8"}],"visibility":"Public","body":"@yearly = yearly"}}],"macros":[{"html_id":"novika_block_pool(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_pool","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_pool","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockPool = Novika::BlockPool.new\n        \n"}},{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_frozen_block(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock = Novika::FrozenBlock.new\n        \n"}},{"html_id":"novika_frozen_block_dict(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_dict","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_dict","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Dict = Novika::FrozenBlock::Dict.new\n        \n"}},{"html_id":"novika_frozen_block_friends(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_friends","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_friends","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Friends = Novika::FrozenBlock::Friends.new\n        \n"}},{"html_id":"novika_frozen_block_tape(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_block_tape","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_block_tape","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenBlock::Tape = Novika::FrozenBlock::Tape.new\n        \n"}},{"html_id":"novika_frozen_entry(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_frozen_entry","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_frozen_entry","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::FrozenEntry = Novika::FrozenEntry.new\n        \n"}},{"html_id":"novika_image_payload(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload = Novika::ImagePayload.new\n        \n"}},{"html_id":"novika_image_payload_capability_id(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_capability_id","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_capability_id","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::CapabilityId = Novika::ImagePayload::CapabilityId.new\n        \n"}},{"html_id":"novika_image_payload_ver(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_image_payload_ver","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_image_payload_ver","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ImagePayload::Ver = Novika::ImagePayload::Ver.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Holds information about Novika version the image was\nwritten with.","summary":"<p>Holds information about Novika version the image was written with.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Novika/IReadableStore","path":"Novika/IReadableStore.html","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":212,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Implementors act like a form-to-form mapping where entry\nkind (opens/pushes) is ignored (basically, a read-only,\nrestricted subset of block methods for dictionary access).\n\nImplementors can be targets of `entry:fetch`, `entry:fetch?`,\n`entry:exists?`, `entry:opener?`.","summary":"<p>Implementors act like a form-to-form mapping where entry kind (opens/pushes) is ignored (basically, a read-only, restricted subset of block methods for dictionary access).</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":213,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"readable store\""}}],"instance_methods":[{"html_id":"form_for(name:Form):Form-instance-method","name":"form_for","doc":"Returns the value form for an entry with the given *name*, or\ndies if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or dies if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a>","location":{"filename":"src/novika/dict.cr","line_number":234,"url":null},"def":{"name":"form_for","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form","visibility":"Public","body":"(form_for?(name)) || (name.die(\"no value form for '#{name}'\"))"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/dict.cr","line_number":222,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":""}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":218,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"opener?(name:Form):Bool-instance-method","name":"opener?","doc":"Returns whether *name* opens its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this store.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":226,"url":null},"def":{"name":"opener?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"pusher?(name:Form):Bool-instance-method","name":"pusher?","doc":"Returns whether *name* pushes its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this store.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/dict.cr","line_number":230,"url":null},"def":{"name":"pusher?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/ISubmittableStore","path":"Novika/ISubmittableStore.html","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore","abstract":false,"locations":[{"filename":"src/novika/dict.cr","line_number":240,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Block","kind":"class","full_name":"Novika::Block","name":"Block"},{"html_id":"novika/Novika/StructViewForm","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Implementors can be targets of `entry:submit`.","summary":"<p>Implementors can be targets of <code>entry:submit</code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/dict.cr","line_number":241,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"submittable store\""}}],"instance_methods":[{"html_id":"submit(name:Form,form:Form)-instance-method","name":"submit","doc":"Submits value *form* to an entry with the given *name*.\nDies if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":251,"url":null},"def":{"name":"submit","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"(submit?(name, form)) || (name.die(\"no entry to submit to\"))"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":true,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/dict.cr","line_number":247,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/LargeDecimalSnapshot","path":"Novika/LargeDecimalSnapshot.html","kind":"class","full_name":"Novika::LargeDecimalSnapshot","name":"LargeDecimalSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":151,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::LargeDecimalSnapshot]","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: repr, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Decimal)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":161,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"decimal = new\ndecimal.repr = form.to_s\ndecimal\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":152,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"repr:String-instance-method","name":"repr","doc":"Holds the string representation of the decimal value.","summary":"<p>Holds the string representation of the decimal value.</p>","abstract":false,"def":{"name":"repr","return_type":"String","visibility":"Public","body":"@repr"}},{"html_id":"repr=(repr:String)-instance-method","name":"repr=","doc":"Holds the string representation of the decimal value.","summary":"<p>Holds the string representation of the decimal value.</p>","abstract":false,"args":[{"name":"repr","external_name":"repr","restriction":"String"}],"args_string":"(repr : String)","args_html":"(repr : <a href=\"../String.html\">String</a>)","def":{"name":"repr=","args":[{"name":"repr","external_name":"repr","restriction":"String"}],"visibility":"Public","body":"@repr = repr"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":157,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Decimal.new(repr)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a decimal form, which is too large to fit\ninto an i64.\n\nIts type is `SnapshotType::LargeDecimal`.","summary":"<p>Snapshot of a decimal form, which is too large to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":151,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Library","path":"Novika/Library.html","kind":"class","full_name":"Novika::Library","name":"Library","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":310,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A library is a collection of foreign functions.\n\nA library form can be opened with a block of *function declarations*\nto be exposed. Each function declaration consists of the function's\nname and type signature. Exposed functions are then defined in the\nopener block.\n\nFor more details, see Novika's `ffi:getLibrary`.\n\nInternally, library objects are created by the frontend and fed\nto the capability collection `caps`. When needed, they are\nretrieved from this capability collection.","summary":"<p>A library is a collection of foreign functions.</p>","class_methods":[{"html_id":"new?(id:String,cwd:Path,env:Resolver::RunnableEnvironment):Library|Nil-class-method","name":"new?","doc":"Tries to find the library with the given *id* in the system-\nspecific library directories, current working directory *cwd*,\nand in the runnable environment *env*.\n\nReturns nil if the library could not be found or loaded.","summary":"<p>Tries to find the library with the given <em>id</em> in the system- specific library directories, current working directory <em>cwd</em>, and in the runnable environment <em>env</em>.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"cwd","external_name":"cwd","restriction":"Path"},{"name":"env","external_name":"env","restriction":"Resolver::RunnableEnvironment"}],"args_string":"(id : String, cwd : Path, env : Resolver::RunnableEnvironment) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>, cwd : Path, env : <a href=\"../Novika/Resolver/RunnableEnvironment.html\">Resolver::RunnableEnvironment</a>) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":329,"url":null},"def":{"name":"new?","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"cwd","external_name":"cwd","restriction":"Path"},{"name":"env","external_name":"env","restriction":"Resolver::RunnableEnvironment"}],"return_type":"Library | ::Nil","visibility":"Public","body":"candidates = [] of String\n{% if flag?(:windows) %}\n        candidates << \"#{id}.dll\"\n        candidates << \"lib#{id}.dll\"\n      {% else %}{% if flag?(:darwin) %}\n        candidates << \"#{id}.dylib\"\n        candidates << \"lib#{id}.dylib\"\n      {% else %}{% if flag?(:unix) %}\n        candidates << \"#{id}.so\"\n        candidates << \"lib#{id}.so\"\n      {% else %}\n        return\n      {% end %}{% end %}{% end %}\nCrystal::Loader.default_search_paths.each do |search_path|\n  candidates.each do |candidate|\n    if library = Library.new?(id, Path[search_path] / candidate)\n    else\n      next\n    end\n    return library\n  end\nend\ncandidates.each do |candidate|\n  if path = (env.expand?(Path[candidate])) || (cwd.expand(Path[candidate]))\n  else\n    next\n  end\n  if library = Library.new?(id, path)\n  else\n    next\n  end\n  return library\nend\n"}},{"html_id":"new?(id:String,path:Path):Library|Nil-class-method","name":"new?","doc":"Initializes a library for the dynamic library at *path*,\nwith the given *id*entifier (it may be chosen arbitrarily).\n\nReturns nil if the library could not be loaded.","summary":"<p>Initializes a library for the dynamic library at <em>path</em>, with the given <em>id</em>entifier (it may be chosen arbitrarily).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(id : String, path : Path) : Library | Nil","args_html":"(id : <a href=\"../String.html\">String</a>, path : Path) : <a href=\"../Novika/Library.html\">Library</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":369,"url":null},"def":{"name":"new?","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Library | ::Nil","visibility":"Public","body":"if handle = LibDl.dlopen(path.to_s, LibDl::RTLD_NOW)\nelse\n  return\nend\nnew(id, path, handle)\n"}},{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":532,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign library\""}}],"constructors":[{"html_id":"new(id:String,path:Path):Library-class-method","name":"new","doc":"Initializes a library for the dynamic library at *path*,\nwith the given *id*entifier (may be chosen arbitrarily).\n\nMay die if LibDL fails to load the library.","summary":"<p>Initializes a library for the dynamic library at <em>path</em>, with the given <em>id</em>entifier (may be chosen arbitrarily).</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(id : String, path : Path) : Library","args_html":"(id : <a href=\"../String.html\">String</a>, path : Path) : <a href=\"../Novika/Library.html\">Library</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":379,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"String"},{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Library","visibility":"Public","body":"(new?(id, path)) || (raise(Error.new(String.new(LibDl.dlerror))))"}}],"instance_methods":[{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":536,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"finalize-instance-method","name":"finalize","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":320,"url":null},"def":{"name":"finalize","visibility":"Public","body":"LibDl.dlclose(@handle)"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the identifier of this library.","summary":"<p>Returns the identifier of this library.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":315,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_open(engine:Engine):self-instance-method","name":"on_open","doc":"Reacts to this form being opened with *engine*.","summary":"<p>Reacts to this form being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/foreign.cr","line_number":521,"url":null},"def":{"name":"on_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"this = engine.block\nfdecls = engine.stack.drop.a(Block)\nfdecls.each do |fdecl|\n  parse_fdecl(this, fdecl.a(Block))\nend\nself\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":540,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"[foreign library: \") << id) << \"]\""}}]},{"html_id":"novika/Novika/ObjectPool","path":"Novika/ObjectPool.html","kind":"struct","full_name":"Novika::ObjectPool(T)","name":"ObjectPool","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/object_pool.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A naïve object pool, inspired by:\n\nhttps://gist.github.com/floere/3121579","summary":"<p>A naïve object pool, inspired by:</p>","constructors":[{"html_id":"new(create:->T,clear:T->T)-class-method","name":"new","abstract":false,"args":[{"name":"create","external_name":"create","restriction":"(-> T)"},{"name":"clear","external_name":"clear","restriction":"(T -> T)"}],"args_string":"(create :  -> T, clear : T -> T)","args_html":"(create :  -> T, clear : T -> T)","location":{"filename":"src/novika/object_pool.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"create","external_name":"create","restriction":"(-> T)"},{"name":"clear","external_name":"clear","restriction":"(T -> T)"}],"visibility":"Public","body":"_ = ObjectPool(T).allocate\n_.initialize(create, clear)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"acquire:T-instance-method","name":"acquire","doc":"Returns a free/new instance of the object.","summary":"<p>Returns a free/new instance of the object.</p>","abstract":false,"location":{"filename":"src/novika/object_pool.cr","line_number":18,"url":null},"def":{"name":"acquire","return_type":"T","visibility":"Public","body":"if kv = @free.shift?\nelse\n  obj = @create.call\n  kv = {id(obj), obj}\nend\n@used[] = *kv\n"}},{"html_id":"release(obj:T)-instance-method","name":"release","doc":"Clears the given *instance* of the object, and releases\nit so that it can be acquired by someone else.","summary":"<p>Clears the given <em>instance</em> of the object, and releases it so that it can be acquired by someone else.</p>","abstract":false,"args":[{"name":"obj","external_name":"obj","restriction":"T"}],"args_string":"(obj : T)","args_html":"(obj : T)","location":{"filename":"src/novika/object_pool.cr","line_number":28,"url":null},"def":{"name":"release","args":[{"name":"obj","external_name":"obj","restriction":"T"}],"visibility":"Public","body":"@clear.call(obj)\nid = id(obj)\n@free[id] = obj\n@used.delete(id)\n"}}]},{"html_id":"novika/Novika/OpenEntry","path":"Novika/OpenEntry.html","kind":"class","full_name":"Novika::OpenEntry","name":"OpenEntry","abstract":false,"superclass":{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},"ancestors":[{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/dict.cr","line_number":201,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A kind of entry that, when opened, in turn opens its\nvalue form.","summary":"<p>A kind of entry that, when opened, in turn opens its value form.</p>","instance_methods":[{"html_id":"on_open(*args,**options)-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"on_open","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.on_open(*args, **options)"}},{"html_id":"on_open(*args,**options,&)-instance-method","name":"on_open","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"on_open","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.on_open(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"schedule(*args,**options)-instance-method","name":"schedule","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"schedule","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.schedule(*args, **options)"}},{"html_id":"schedule(*args,**options,&)-instance-method","name":"schedule","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"schedule","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.schedule(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"schedule!(*args,**options)-instance-method","name":"schedule!","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"schedule!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"form.schedule!(*args, **options)"}},{"html_id":"schedule!(*args,**options,&)-instance-method","name":"schedule!","doc":"See the same method in `Form`.","summary":"<p>See the same method in <code><a href=\"../Novika/Form.html\">Form</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/dict.cr","line_number":203,"url":null},"def":{"name":"schedule!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"form.schedule!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"novika/Novika/Quote","path":"Novika/Quote.html","kind":"module","full_name":"Novika::Quote","name":"Quote","abstract":false,"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":18,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EFFECT_BOUND_TAKE","name":"EFFECT_BOUND_TAKE","value":"12","doc":"Specifies how many characters to take from the left and right\nboundaries of the quote for a shorter representation in `effect`.","summary":"<p>Specifies how many characters to take from the left and right boundaries of the quote for a shorter representation in <code><a href=\"../Novika/Quote.html#effect%28io%29-instance-method\">#effect</a></code>.</p>"},{"id":"EFFECT_MAX_CHARS","name":"EFFECT_MAX_CHARS","value":"32","doc":"Specifies the maximum amount of characters to display before\nthe quote gets cut off in `effect` (see `Form#effect`).","summary":"<p>Specifies the maximum amount of characters to display before the quote gets cut off in <code><a href=\"../Novika/Quote.html#effect%28io%29-instance-method\">#effect</a></code> (see <code><a href=\"../Novika/Form.html#effect-instance-method\">Form#effect</a></code>).</p>"},{"id":"EMPTY","name":"EMPTY","value":"StringQuote.new(\"\", count: 0, ascii_only: true)","doc":"The empty quote.","summary":"<p>The empty quote.</p>"}],"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"including_types":[{"html_id":"novika/Novika/Quote/GraphemeQuote","kind":"struct","full_name":"Novika::Quote::GraphemeQuote","name":"GraphemeQuote"},{"html_id":"novika/Novika/Quote/StringQuote","kind":"struct","full_name":"Novika::Quote::StringQuote","name":"StringQuote"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Includers are Novika quotes, which are known as strings\nin most other programming languages.\n\nQuotes are optimized for the ASCII-only case. Also, they\ntreat single `String::Grapheme`s separately from strings\nof those, and cache grapheme counts here and there.\n\nThe slowest operations on quotes are `slice_at` and `at`\nover *non- ASCII* quotes. Both are currently O(N) in terms\nof iterations only; they do a lot of other work besides\niteration as well.\n\nWhen you are slow, being even slower doesn't matter that much\nanymore. This is the case with Novika.\n\nAnd yes, quotes do rely on the experimental grapheme API.","summary":"<p>Includers are Novika quotes, which are known as strings in most other programming languages.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":50,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(string:String,count=string.grapheme_size,ascii=string.ascii_only?)-class-method","name":"new","doc":"Creates a quote from *string*.\n\n*count* can be provided if the amount of graphemes in\n*string* is known.","summary":"<p>Creates a quote from <em>string</em>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"count","default_value":"string.grapheme_size","external_name":"count","restriction":""},{"name":"ascii","default_value":"string.ascii_only?","external_name":"ascii","restriction":""}],"args_string":"(string : String, count = string.grapheme_size, ascii = string.ascii_only?)","args_html":"(string : <a href=\"../String.html\">String</a>, count = string.grapheme_size, ascii = string.ascii_only?)","location":{"filename":"src/novika/forms/quote.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"count","default_value":"string.grapheme_size","external_name":"count","restriction":""},{"name":"ascii","default_value":"string.ascii_only?","external_name":"ascii","restriction":""}],"visibility":"Public","body":"if count == 1\n  string.each_grapheme do |it|\n    return GraphemeQuote.new(it)\n  end\nend\nStringQuote.new(string, count, ascii)\n"}},{"html_id":"new(grapheme:String::Grapheme)-class-method","name":"new","doc":"Creates a quote from *grapheme*.","summary":"<p>Creates a quote from <em>grapheme</em>.</p>","abstract":false,"args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"args_string":"(grapheme : String::Grapheme)","args_html":"(grapheme : String::Grapheme)","location":{"filename":"src/novika/forms/quote.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"visibility":"Public","body":"GraphemeQuote.new(grapheme)"}},{"html_id":"new(char:Char)-class-method","name":"new","doc":"Creates a quote from *char*.","summary":"<p>Creates a quote from <em>char</em>.</p>","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"Char"}],"args_string":"(char : Char)","args_html":"(char : Char)","location":{"filename":"src/novika/forms/quote.cr","line_number":42,"url":null},"def":{"name":"new","args":[{"name":"char","external_name":"char","restriction":"Char"}],"visibility":"Public","body":"new(String::Grapheme.new(char))"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":69,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":""}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":true,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":65,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"at(index:Int32):GraphemeQuote-instance-method","name":"at","doc":"Returns the grapheme at *index* as `Quote`, or dies.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../Novika/Quote.html\">Quote</a></code>, or dies.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : GraphemeQuote","args_html":"(index : Int32) : <a href=\"../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":168,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"GraphemeQuote","visibility":"Public","body":"(at?(index)) || (die(\"grapheme index out of bounds\"))"}},{"html_id":"at?(index:Int32):GraphemeQuote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":true,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : GraphemeQuote | Nil","args_html":"(index : Int32) : <a href=\"../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":58,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"GraphemeQuote | ::Nil","visibility":"Public","body":""}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached count of graphemes in this quote\nvariant. Returns nil if there is no cached count.","summary":"<p>Returns the cached count of graphemes in this quote variant.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":76,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":""}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":72,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/quote.cr","line_number":46,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"quote '\") << string) << \"'\""}},{"html_id":"each_occurrence_of(pattern:Form,&)-instance-method","name":"each_occurrence_of","doc":"Yields occurrences of the given *pattern* in this quote.","summary":"<p>Yields occurrences of the given <em>pattern</em> in this quote.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Form"}],"args_string":"(pattern : Form, &)","args_html":"(pattern : <a href=\"../Novika/Form.html\">Form</a>, &)","location":{"filename":"src/novika/forms/quote.cr","line_number":177,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"Form"}],"yields":0,"block_arity":0,"visibility":"Public","body":""}},{"html_id":"effect(io)-instance-method","name":"effect","doc":"Generates and returns a description for the stack effect\nof this form.\n\nFor blocks and builtins, tries to extract a `( ... -- ... )`\n(but see `EFFECT_PATTERN`) from their corresponding\ncomment. If could not extract or no comment, returns\n'a block' for blocks and 'native code' for builtins.","summary":"<p>Generates and returns a description for the stack effect of this form.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/quote.cr","line_number":188,"url":null},"def":{"name":"effect","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"nchars = count\nif nchars <= EFFECT_MAX_CHARS\n  return super(io)\nend\nl = at(0, EFFECT_BOUND_TAKE)\nr = at((nchars - EFFECT_BOUND_TAKE) - 1, nchars - 1)\nio << \"'\"\nl.string.dump_unquoted(io)\nio << \"…\"\nr.string.dump_unquoted(io)\nio << \"'\"\n"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.","summary":"<p>Returns whether this quote is empty.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":79,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":""}},{"html_id":"first_byte?:UInt8|Nil-instance-method","name":"first_byte?","doc":"Returns the first byte (or nil) in this quote.","summary":"<p>Returns the first byte (or nil) in this quote.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":112,"url":null},"def":{"name":"first_byte?","return_type":"UInt8 | ::Nil","visibility":"Public","body":"string.byte_at?(0)"}},{"html_id":"fit(total:Int,ellipsis:_):Quote-instance-method","name":"fit","doc":"Ensures this quote is of *total* characters or less. In case of\noverflow, truncates with *ellipsis*. If even *ellipsis* cannot\nfit, truncates ellipsis so that it is of *total* characters.\nReturns the resulting quote.","summary":"<p>Ensures this quote is of <em>total</em> characters or less.</p>","abstract":true,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"_"}],"args_string":"(total : Int, ellipsis : _) : Quote","args_html":"(total : Int, ellipsis : _) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":94,"url":null},"def":{"name":"fit","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"_"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"ord?:Int32|Nil-instance-method","name":"ord?","doc":"Returns the Unicode codepoint for the first character in\nthis quote, or nil if this quote is empty.","summary":"<p>Returns the Unicode codepoint for the first character in this quote, or nil if this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":118,"url":null},"def":{"name":"ord?","return_type":"Int32 | ::Nil","visibility":"Public","body":"if empty?\nelse\n  string[0].ord\nend"}},{"html_id":"pad(total:Int,padder:_,side:PadSide):Quote-instance-method","name":"pad","doc":"Pads this quote with *padder* until it becomes *total* perceived\ncharacters long. The side where the padding should apply is specified\nby *side*. Returns the resulting quote.","summary":"<p>Pads this quote with <em>padder</em> until it becomes <em>total</em> perceived characters long.</p>","abstract":true,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"_"},{"name":"side","external_name":"side","restriction":"PadSide"}],"args_string":"(total : Int, padder : _, side : PadSide) : Quote","args_html":"(total : Int, padder : _, side : <a href=\"../Novika/Quote/PadSide.html\">PadSide</a>) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":88,"url":null},"def":{"name":"pad","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"_"},{"name":"side","external_name":"side","restriction":"PadSide"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":true,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../Novika/Quote.html\">Quote</a>, repl : <a href=\"../Novika/Quote.html\">Quote</a>) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":83,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":""}},{"html_id":"slice_at(slicept:Int32):Tuple(Quote,Quote)-instance-method","name":"slice_at","doc":"Slices this quote into two quotes at *slicept*. Returns\nthe two resulting quotes. Dies if *slicept* is out\nof bounds.","summary":"<p>Slices this quote into two quotes at <em>slicept</em>.</p>","abstract":false,"args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"args_string":"(slicept : Int32) : Tuple(Quote, Quote)","args_html":"(slicept : Int32) : Tuple(<a href=\"../Novika/Quote.html\">Quote</a>, <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/forms/quote.cr","line_number":145,"url":null},"def":{"name":"slice_at","args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"return_type":"::Tuple(Quote, Quote)","visibility":"Public","body":"(slice_at?(slicept)) || (die(\"slicepoint is out of bounds: #{slicept}\"))"}},{"html_id":"slice_at?(slicept:Int32):Tuple(Quote,Quote)|Nil-instance-method","name":"slice_at?","doc":"Slices this quote into two quotes at *slicept*. Returns\nthe two resulting quotes. Returns nil if *slicept* is out\nof bounds.","summary":"<p>Slices this quote into two quotes at <em>slicept</em>.</p>","abstract":false,"args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"args_string":"(slicept : Int32) : Tuple(Quote, Quote) | Nil","args_html":"(slicept : Int32) : Tuple(<a href=\"../Novika/Quote.html\">Quote</a>, <a href=\"../Novika/Quote.html\">Quote</a>) | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":152,"url":null},"def":{"name":"slice_at?","args":[{"name":"slicept","external_name":"slicept","restriction":"Int32"}],"return_type":"::Tuple(Quote, Quote) | ::Nil","visibility":"Public","body":"size = count\nif size.zero?\n  return\nend\nif slicept.in?(0..size)\nelse\n  return\nend\nif slicept.zero?\n  {EMPTY, self}\nelse\n  if slicept == size\n    {self, EMPTY}\n  else\n    slice_at!(slicept, size)\n  end\nend\n"}},{"html_id":"stitch(other:Quote):Quote-instance-method","name":"stitch","doc":"Stitches (concatenates) this and *other* quote variants,\nand returns the resulting quote.","summary":"<p>Stitches (concatenates) this and <em>other</em> quote variants, and returns the resulting quote.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Quote","args_html":"(other : <a href=\"../Novika/Quote.html\">Quote</a>) : <a href=\"../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":124,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"if empty?\n  return other\nend\nif other.empty?\n  return self\nend\na = cached_count?\nb = other.cached_count?\nif a && b\n  StringQuote.new(string + other.string, count: a + b)\nelse\n  StringQuote.new(res = string + other.string, count: res.grapheme_size)\nend\n"}},{"html_id":"string:String-instance-method","name":"string","doc":"Converts this quote variant to `String`.","summary":"<p>Converts this quote variant to <code><a href=\"../String.html\">String</a></code>.</p>","abstract":true,"location":{"filename":"src/novika/forms/quote.cr","line_number":55,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":""}},{"html_id":"to_byteslice-instance-method","name":"to_byteslice","doc":"Returns an immutable  `Byteslice` representation of\nthis quote.","summary":"<p>Returns an immutable  <code><a href=\"../Novika/Byteslice.html\">Byteslice</a></code> representation of this quote.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":107,"url":null},"def":{"name":"to_byteslice","visibility":"Public","body":"Byteslice.new(string.to_slice, mutable: false)"}},{"html_id":"to_quote:Quote-instance-method","name":"to_quote","doc":"Returns this form's quote representation.","summary":"<p>Returns this form's quote representation.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":172,"url":null},"def":{"name":"to_quote","return_type":"Quote","visibility":"Public","body":"self"}}],"types":[{"html_id":"novika/Novika/Quote/GraphemeQuote","path":"Novika/Quote/GraphemeQuote.html","kind":"struct","full_name":"Novika::Quote::GraphemeQuote","name":"GraphemeQuote","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":496,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"}],"namespace":{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},"doc":"Quote type for a single grapheme (perceived character).","summary":"<p>Quote type for a single grapheme (perceived character).</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":505,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(grapheme:String::Grapheme)-class-method","name":"new","abstract":false,"args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"args_string":"(grapheme : String::Grapheme)","args_html":"(grapheme : String::Grapheme)","location":{"filename":"src/novika/forms/quote.cr","line_number":502,"url":null},"def":{"name":"new","args":[{"name":"grapheme","external_name":"grapheme","restriction":"String::Grapheme"}],"visibility":"Public","body":"_ = allocate\n_.initialize(grapheme)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":552,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"other.is_a?(GraphemeQuote) && (other.grapheme == grapheme)"}},{"html_id":"as_byte?-instance-method","name":"as_byte?","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":509,"url":null},"def":{"name":"as_byte?","visibility":"Public","body":"if char = (grapheme.@cluster).as?(Char)\nelse\n  return\nend\nif char.ascii?\nelse\n  return\nend\nchar.ord\n"}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":527,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":"b == e ? self : EMPTY"}},{"html_id":"at?(index:Int32):GraphemeQuote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : GraphemeQuote | Nil","args_html":"(index : Int32) : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":523,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"GraphemeQuote | ::Nil","visibility":"Public","body":"if index.zero?\n  self\nend"}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached count of graphemes in this quote\nvariant. Returns nil if there is no cached count.\n\nGrapheme quotes always return 1.","summary":"<p>Returns the cached count of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":541,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":"1"}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.\n\nGrapheme quotes always return 1.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":534,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":"1"}},{"html_id":"each_occurrence_of(pattern:GraphemeQuote,&)-instance-method","name":"each_occurrence_of","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"GraphemeQuote"}],"args_string":"(pattern : GraphemeQuote, &)","args_html":"(pattern : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a>, &)","location":{"filename":"src/novika/forms/quote.cr","line_number":606,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"GraphemeQuote"}],"yields":1,"block_arity":1,"visibility":"Public","body":"if grapheme == pattern.grapheme\n  yield 0\nend"}},{"html_id":"each_occurrence_of(pattern:StringQuote,&)-instance-method","name":"each_occurrence_of","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"StringQuote"}],"args_string":"(pattern : StringQuote, &)","args_html":"(pattern : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>, &)","location":{"filename":"src/novika/forms/quote.cr","line_number":612,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"StringQuote"}],"yields":0,"block_arity":0,"visibility":"Public","body":""}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.\n\nGrapheme quotes always return false.","summary":"<p>Returns whether this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":548,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"false"}},{"html_id":"fit(total:Int,ellipsis:Quote):Quote-instance-method","name":"fit","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"Quote"}],"args_string":"(total : Int, ellipsis : Quote) : Quote","args_html":"(total : Int, ellipsis : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":600,"url":null},"def":{"name":"fit","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"if total == 0\n  return StringQuote.new(\"\")\nend\nself\n"}},{"html_id":"grapheme:String::Grapheme-instance-method","name":"grapheme","doc":"Returns the grapheme.","summary":"<p>Returns the grapheme.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":500,"url":null},"def":{"name":"grapheme","return_type":"String::Grapheme","visibility":"Public","body":"@grapheme"}},{"html_id":"pad(total:Int,padder:GraphemeQuote,side:PadSide):Quote-instance-method","name":"pad","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"GraphemeQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"args_string":"(total : Int, padder : GraphemeQuote, side : PadSide) : Quote","args_html":"(total : Int, padder : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a>, side : <a href=\"../../Novika/Quote/PadSide.html\">PadSide</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":556,"url":null},"def":{"name":"pad","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"GraphemeQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"return_type":"Quote","visibility":"Public","body":"if total <= 1\n  return self\nend\nif total == 2\n  padding = padder\nelse\n  string = String.build do |io|\n    last = padder.grapheme\n    (total - 1).times do\n      io << last\n    end\n  end\n  padding = StringQuote.new(string)\nend\nside.apply(self, padding)\n"}},{"html_id":"pad(total:Int,padder:StringQuote,side:PadSide):Quote-instance-method","name":"pad","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"StringQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"args_string":"(total : Int, padder : StringQuote, side : PadSide) : Quote","args_html":"(total : Int, padder : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>, side : <a href=\"../../Novika/Quote/PadSide.html\">PadSide</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":575,"url":null},"def":{"name":"pad","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"StringQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"return_type":"Quote","visibility":"Public","body":"if padder.empty?\n  return self\nend\nif total <= 1\n  return self\nend\nif total == 2\n  padding = padder.at(0)\nelse\n  string = String.build(total) do |io|\n    needed = total - 1\n    head = padder.at(0, Math.min(padder.count - 2, needed - 1))\n    tail = (padder.at(Math.min(padder.count - 1, needed))).string\n    io << head.string\n    (needed - head.count).times do\n      io << tail\n    end\n  end\n  padding = StringQuote.new(string)\nend\nside.apply(self, padding)\n"}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../../Novika/Quote.html\">Quote</a>, repl : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":624,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"self == pattern ? repl : self"}},{"html_id":"stitch(other:StringQuote):Quote-instance-method","name":"stitch","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"args_string":"(other : StringQuote) : Quote","args_html":"(other : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":519,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"return_type":"Quote","visibility":"Public","body":"other.empty? ? self : super(other)"}},{"html_id":"string:String-instance-method","name":"string","doc":"Converts this quote variant to `String`.","summary":"<p>Converts this quote variant to <code><a href=\"../../String.html\">String</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":515,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":"grapheme.to_s"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/quote.cr","line_number":628,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"'\"\ngrapheme.to_s.dump_unquoted(io)\nio << \"'\"\n"}}]},{"html_id":"novika/Novika/Quote/PadSide","path":"Novika/Quote/PadSide.html","kind":"enum","full_name":"Novika::Quote::PadSide","name":"PadSide","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":205,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Left","name":"Left","value":"0","doc":"Apply padding to the left of the quote.","summary":"<p>Apply padding to the left of the quote.</p>"},{"id":"Right","name":"Right","value":"1","doc":"Apply padding to the right of the quote.","summary":"<p>Apply padding to the right of the quote.</p>"}],"namespace":{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},"doc":"Represents the side where padding should apply.\n\nSee `Quote#pad`.","summary":"<p>Represents the side where padding should apply.</p>","instance_methods":[{"html_id":"apply(quote:Quote,padding:Quote)-instance-method","name":"apply","doc":"Applies padding to the side specified by `self`.","summary":"<p>Applies padding to the side specified by <code>self</code>.</p>","abstract":false,"args":[{"name":"quote","external_name":"quote","restriction":"Quote"},{"name":"padding","external_name":"padding","restriction":"Quote"}],"args_string":"(quote : Quote, padding : Quote)","args_html":"(quote : <a href=\"../../Novika/Quote.html\">Quote</a>, padding : <a href=\"../../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/forms/quote.cr","line_number":213,"url":null},"def":{"name":"apply","args":[{"name":"quote","external_name":"quote","restriction":"Quote"},{"name":"padding","external_name":"padding","restriction":"Quote"}],"visibility":"Public","body":"case self\nin .left?\n  padding.stitch(quote)\nin .right?\n  quote.stitch(padding)\nend"}},{"html_id":"left?-instance-method","name":"left?","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":207,"url":null},"def":{"name":"left?","visibility":"Public","body":"self == Left"}},{"html_id":"right?-instance-method","name":"right?","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":210,"url":null},"def":{"name":"right?","visibility":"Public","body":"self == Right"}}]},{"html_id":"novika/Novika/Quote/StringQuote","path":"Novika/Quote/StringQuote.html","kind":"struct","full_name":"Novika::Quote::StringQuote","name":"StringQuote","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/quote.cr","line_number":222,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"}],"namespace":{"html_id":"novika/Novika/Quote","kind":"module","full_name":"Novika::Quote","name":"Quote"},"doc":"Quote type for multiple (two or more), or no graphemes.","summary":"<p>Quote type for multiple (two or more), or no graphemes.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":241,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quote\""}}],"constructors":[{"html_id":"new(string:String,countcached_count:Int32|Nil=nil,ascii_only:Bool=string.ascii_only?)-class-method","name":"new","doc":"Creates a string quote from the given *string*.","summary":"<p>Creates a string quote from the given <em>string</em>.</p>","abstract":false,"args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"cached_count","default_value":"nil","external_name":"count","restriction":"Int32 | ::Nil"},{"name":"ascii_only","default_value":"string.ascii_only?","external_name":"ascii_only","restriction":"::Bool"}],"args_string":"(string : String, count cached_count : Int32 | Nil = nil, ascii_only : Bool = string.ascii_only?)","args_html":"(string : <a href=\"../../String.html\">String</a>, count cached_count : Int32 | Nil = <span class=\"n\">nil</span>, ascii_only : Bool = string.ascii_only?)","location":{"filename":"src/novika/forms/quote.cr","line_number":237,"url":null},"def":{"name":"new","args":[{"name":"string","external_name":"string","restriction":"String"},{"name":"cached_count","default_value":"nil","external_name":"count","restriction":"Int32 | ::Nil"},{"name":"ascii_only","default_value":"string.ascii_only?","external_name":"ascii_only","restriction":"::Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(string, cached_count, ascii_only)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:Quote):Bool-instance-method","name":"==","doc":"Returns whether this quote variant consists of the same\ngraphemes as *other*.","summary":"<p>Returns whether this quote variant consists of the same graphemes as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Quote"}],"args_string":"(other : Quote) : Bool","args_html":"(other : <a href=\"../../Novika/Quote.html\">Quote</a>) : Bool","location":{"filename":"src/novika/forms/quote.cr","line_number":350,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"Quote"}],"return_type":"Bool","visibility":"Public","body":"other.is_a?(StringQuote) && (string == other.string)"}},{"html_id":"ascii_only?:Bool-instance-method","name":"ascii_only?","doc":"Returns whether this string quote consists of ASCII\ncharacters only.","summary":"<p>Returns whether this string quote consists of ASCII characters only.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":234,"url":null},"def":{"name":"ascii_only?","return_type":"Bool","visibility":"Public","body":"@ascii_only"}},{"html_id":"at(b:Int32,e:Int32):Quote-instance-method","name":"at","doc":"Returns a subquote from *b* to *e*. Clamps *b* and *e*\nto bounds of this quote. Returns an empty quote if this\nquote is empty without regarding *b* and *e*.\n\nBoth ends are inclusive.","summary":"<p>Returns a subquote from <em>b</em> to <em>e</em>.</p>","abstract":false,"args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"args_string":"(b : Int32, e : Int32) : Quote","args_html":"(b : Int32, e : Int32) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":298,"url":null},"def":{"name":"at","args":[{"name":"b","external_name":"b","restriction":"Int32"},{"name":"e","external_name":"e","restriction":"Int32"}],"return_type":"Quote","visibility":"Public","body":"b = Math.max(b, 0)\ne = Math.min(e, count - 1)\nif (b == 0) && (e == (count - 1))\n  return self\nend\nif b == e\n  return (at?(b)).not_nil!\nend\nif ascii_only?\n  StringQuote.new((b..e).join do |index|\n    byte = (string.byte_at?(index)).not_nil!\n    byte < 128 ? byte.unsafe_chr : Char::REPLACEMENT\n  end, count: e - b, ascii_only: true)\nelse\n  StringQuote.new(String.build do |io|\n    index = 0\n    string.each_grapheme do |grapheme|\n      if index < b\n        index = index + 1\n        next\n      end\n      if index > e\n        break\n      end\n      io << grapheme\n      index = index + 1\n    end\n  end, count: e - b, ascii_only: false)\nend\n"}},{"html_id":"at?(index:Int32):GraphemeQuote|Nil-instance-method","name":"at?","doc":"Returns the grapheme at *index* as `Quote`, or nil.","summary":"<p>Returns the grapheme at <em>index</em> as <code><a href=\"../../Novika/Quote.html\">Quote</a></code>, or nil.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : GraphemeQuote | Nil","args_html":"(index : Int32) : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a> | Nil","location":{"filename":"src/novika/forms/quote.cr","line_number":282,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"GraphemeQuote | ::Nil","visibility":"Public","body":"if index.negative?\n  return\nend\nif ascii_only?\n  if byte = string.byte_at?(index)\n  else\n    return\n  end\n  char = byte < 128 ? byte.unsafe_chr : Char::REPLACEMENT\n  return GraphemeQuote.new(String::Grapheme.new(char))\nend\nidx = 0\nstring.each_grapheme do |it|\n  if idx == index\n    return GraphemeQuote.new(it)\n  end\n  idx = idx + 1\nend\n"}},{"html_id":"cached_count?:Int32|Nil-instance-method","name":"cached_count?","doc":"Returns the cached perceived character count in this\nstring quote, or nil.","summary":"<p>Returns the cached perceived character count in this string quote, or nil.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":230,"url":null},"def":{"name":"cached_count?","return_type":"Int32 | ::Nil","visibility":"Public","body":"@cached_count"}},{"html_id":"count:Int32-instance-method","name":"count","doc":"Returns the amount of graphemes in this quote variant.","summary":"<p>Returns the amount of graphemes in this quote variant.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":342,"url":null},"def":{"name":"count","return_type":"Int32","visibility":"Public","body":"cached_count? || string.grapheme_size"}},{"html_id":"each_occurrence_of(pattern:StringQuote,&)-instance-method","name":"each_occurrence_of","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"StringQuote"}],"args_string":"(pattern : StringQuote, &)","args_html":"(pattern : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>, &)","location":{"filename":"src/novika/forms/quote.cr","line_number":431,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"StringQuote"}],"yields":1,"block_arity":1,"visibility":"Public","body":"kmp(string, pattern.string, ascii: ascii_only? && pattern.ascii_only?) do |index|\n  yield index\nend"}},{"html_id":"each_occurrence_of(pattern:GraphemeQuote,&)-instance-method","name":"each_occurrence_of","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"GraphemeQuote"}],"args_string":"(pattern : GraphemeQuote, &)","args_html":"(pattern : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a>, &)","location":{"filename":"src/novika/forms/quote.cr","line_number":409,"url":null},"def":{"name":"each_occurrence_of","args":[{"name":"pattern","external_name":"pattern","restriction":"GraphemeQuote"}],"yields":1,"block_arity":1,"visibility":"Public","body":"index = 0\nif ascii_only? && (pattern_byte = pattern.as_byte?)\n  string.each_byte do |byte|\n    if byte == pattern_byte\n      yield index\n    end\n    index = index + 1\n  end\nelse\n  string.each_grapheme do |grapheme|\n    if grapheme == pattern.grapheme\n      yield index\n    end\n    index = index + 1\n  end\nend\n"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns whether this quote is empty.","summary":"<p>Returns whether this quote is empty.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":346,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"string.empty?"}},{"html_id":"fit(total:Int,ellipsis:Quote):Quote-instance-method","name":"fit","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"Quote"}],"args_string":"(total : Int, ellipsis : Quote) : Quote","args_html":"(total : Int, ellipsis : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":397,"url":null},"def":{"name":"fit","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"ellipsis","external_name":"ellipsis","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"if total == 0\n  return StringQuote.new(\"\")\nend\nif count <= total\n  return self\nend\nnvisible = total - ellipsis.count\nif nvisible <= 0\n  return ellipsis.at(0, total - 1)\nend\n(at(0, nvisible - 1)).stitch(ellipsis)\n"}},{"html_id":"pad(total:Int,padder:StringQuote,side:PadSide):Quote-instance-method","name":"pad","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"StringQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"args_string":"(total : Int, padder : StringQuote, side : PadSide) : Quote","args_html":"(total : Int, padder : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>, side : <a href=\"../../Novika/Quote/PadSide.html\">PadSide</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":372,"url":null},"def":{"name":"pad","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"StringQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"return_type":"Quote","visibility":"Public","body":"if padder.empty?\n  return self\nend\nif total > count\nelse\n  return self\nend\nif total == (count + 1)\n  padding = padder.at(0)\nelse\n  string = String.build(total) do |io|\n    needed = total - count\n    head = padder.at(0, Math.min(padder.count - 2, needed - 1))\n    tail = (padder.at(Math.min(padder.count - 1, needed))).string\n    io << head.string\n    (needed - head.count).times do\n      io << tail\n    end\n  end\n  padding = StringQuote.new(string)\nend\nside.apply(self, padding)\n"}},{"html_id":"pad(total:Int,padder:GraphemeQuote,side:PadSide):Quote-instance-method","name":"pad","abstract":false,"args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"GraphemeQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"args_string":"(total : Int, padder : GraphemeQuote, side : PadSide) : Quote","args_html":"(total : Int, padder : <a href=\"../../Novika/Quote/GraphemeQuote.html\">GraphemeQuote</a>, side : <a href=\"../../Novika/Quote/PadSide.html\">PadSide</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":354,"url":null},"def":{"name":"pad","args":[{"name":"total","external_name":"total","restriction":"Int"},{"name":"padder","external_name":"padder","restriction":"GraphemeQuote"},{"name":"side","external_name":"side","restriction":"PadSide"}],"return_type":"Quote","visibility":"Public","body":"if total > count\nelse\n  return self\nend\nif total == (count + 1)\n  padding = padder\nelse\n  string = String.build(total) do |io|\n    (total - count).times do\n      io << padder.grapheme\n    end\n  end\n  padding = StringQuote.new(string)\nend\nside.apply(self, padding)\n"}},{"html_id":"replace_all(pattern:Quote,repl:Quote):Quote-instance-method","name":"replace_all","doc":"Replaces instances of *pattern* with *repl*. Returns\nthe resulting quote.","summary":"<p>Replaces instances of <em>pattern</em> with <em>repl</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"args_string":"(pattern : Quote, repl : Quote) : Quote","args_html":"(pattern : <a href=\"../../Novika/Quote.html\">Quote</a>, repl : <a href=\"../../Novika/Quote.html\">Quote</a>) : <a href=\"../../Novika/Quote.html\">Quote</a>","location":{"filename":"src/novika/forms/quote.cr","line_number":486,"url":null},"def":{"name":"replace_all","args":[{"name":"pattern","external_name":"pattern","restriction":"Quote"},{"name":"repl","external_name":"repl","restriction":"Quote"}],"return_type":"Quote","visibility":"Public","body":"Quote.new(string.gsub(pattern.string, repl.string))"}},{"html_id":"stitch(other:StringQuote)-instance-method","name":"stitch","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"args_string":"(other : StringQuote)","args_html":"(other : <a href=\"../../Novika/Quote/StringQuote.html\">StringQuote</a>)","location":{"filename":"src/novika/forms/quote.cr","line_number":333,"url":null},"def":{"name":"stitch","args":[{"name":"other","external_name":"other","restriction":"StringQuote"}],"visibility":"Public","body":"if ascii_only? && other.ascii_only?\nelse\n  return super(other)\nend\nStringQuote.new(res = string + other.string, count: res.bytesize, ascii_only: true)\n"}},{"html_id":"string:String-instance-method","name":"string","doc":"Returns the underlying string.","summary":"<p>Returns the underlying string.</p>","abstract":false,"location":{"filename":"src/novika/forms/quote.cr","line_number":226,"url":null},"def":{"name":"string","return_type":"String","visibility":"Public","body":"@string"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/quote.cr","line_number":490,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"'\"\nstring.dump_unquoted(io)\nio << \"'\"\n"}}]}]},{"html_id":"novika/Novika/QuotedWord","path":"Novika/QuotedWord.html","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/words.cr","line_number":79,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Quoted words are words prefixed by '#': e.g., `#foo`. It\nlets you 'coat' a word: `#foo open` is the same as `foo`,\n`##foo open` is the same as `#foo`, etc. Levels of coating\nare peeled off like in an onion.","summary":"<p>Quoted words are words prefixed by '#': e.g., <code>#foo</code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":93,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"quoted word\""}}],"constructors":[{"html_id":"new(id:String)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/words.cr","line_number":86,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/words.cr","line_number":89,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"quoted word '\") << id) << \"'\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = id.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the underlying string id.","summary":"<p>Returns the underlying string id.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":84,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine):self-instance-method","name":"on_parent_open","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":""}],"args_string":"(engine) : self","args_html":"(engine) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/words.cr","line_number":118,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":""}],"return_type":"self","visibility":"Public","body":"tap do\n  peel.onto(engine.stack)\nend"}},{"html_id":"peel-instance-method","name":"peel","doc":"\"Peels\" off a layer of quoting.\n\n```\nQuotedWord.new(\"#foo\").peel   # Word.new(\"foo\")\nQuotedWord.new(\"##foo\").peel  # QuotedWord.new(\"#foo\")\nQuotedWord.new(\"###foo\").peel # QuotedWord.new(\"##foo\")\n```","summary":"<p>&quot;Peels&quot; off a layer of quoting.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":109,"url":null},"def":{"name":"peel","visibility":"Public","body":"id.prefixed_by?('#') ? QuotedWord.new(id.lchop) : Word.new(id)"}},{"html_id":"to_quoted_word-instance-method","name":"to_quoted_word","doc":"Adds another layer of quoting. Opposite of `peel`.","summary":"<p>Adds another layer of quoting.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":98,"url":null},"def":{"name":"to_quoted_word","visibility":"Public","body":"QuotedWord.new(\"##{@id}\")"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/words.cr","line_number":122,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << '#') << id"}},{"html_id":"to_word:Word-instance-method","name":"to_word","doc":"Converts this quoted word to `Word`.","summary":"<p>Converts this quoted word to <code><a href=\"../Novika/Word.html\">Word</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":114,"url":null},"def":{"name":"to_word","return_type":"Word","visibility":"Public","body":"Word.new(id.lstrip('#'))"}}]},{"html_id":"novika/Novika/QuotedWordSnapshot","path":"Novika/QuotedWordSnapshot.html","kind":"class","full_name":"Novika::QuotedWordSnapshot","name":"QuotedWordSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":216,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::QuotedWordSnapshot]","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:QuotedWord)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"args_string":"(form : QuotedWord)","args_html":"(form : <a href=\"../Novika/QuotedWord.html\">QuotedWord</a>)","location":{"filename":"src/novika/image.cr","line_number":226,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"visibility":"Public","body":"qword = new\nqword.id = form.id\nqword\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":217,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated id (name) of the quoted block.","summary":"<p>Holds the 0-terminated id (name) of the quoted block.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated id (name) of the quoted block.","summary":"<p>Holds the 0-terminated id (name) of the quoted block.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":222,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"QuotedWord.new(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a quoted word form.\n\nIts type is `SnapshotType::QuotedWord`.","summary":"<p>Snapshot of a quoted word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":216,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/QuoteSnapshot","path":"Novika/QuoteSnapshot.html","kind":"class","full_name":"Novika::QuoteSnapshot","name":"QuoteSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":173,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::QuoteSnapshot]","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: bytesize, cls: UInt64, onlyif: nil, verify: nil, value: -> do\n  content.bytesize\nend}, {type: \"string\", name: content, cls: String, onlyif: nil, verify: nil, length: -> do\n  bytesize\nend, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Quote)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/image.cr","line_number":186,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"quote = new\nquote.content = form.string\nquote\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":174,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"bytesize:UInt64-instance-method","name":"bytesize","doc":"Holds the size of quote content, in bytes.","summary":"<p>Holds the size of quote content, in bytes.</p>","abstract":false,"def":{"name":"bytesize","return_type":"UInt64","visibility":"Public","body":"@bytesize"}},{"html_id":"bytesize=(bytesize:UInt64)-instance-method","name":"bytesize=","doc":"Holds the size of quote content, in bytes.","summary":"<p>Holds the size of quote content, in bytes.</p>","abstract":false,"args":[{"name":"bytesize","external_name":"bytesize","restriction":"UInt64"}],"args_string":"(bytesize : UInt64)","args_html":"(bytesize : UInt64)","def":{"name":"bytesize=","args":[{"name":"bytesize","external_name":"bytesize","restriction":"UInt64"}],"visibility":"Public","body":"@bytesize = bytesize"}},{"html_id":"content:String-instance-method","name":"content","doc":"Holds the content string.","summary":"<p>Holds the content string.</p>","abstract":false,"def":{"name":"content","return_type":"String","visibility":"Public","body":"@content"}},{"html_id":"content=(content:String)-instance-method","name":"content=","doc":"Holds the content string.","summary":"<p>Holds the content string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String)","args_html":"(content : <a href=\"../String.html\">String</a>)","def":{"name":"content=","args":[{"name":"content","external_name":"content","restriction":"String"}],"visibility":"Public","body":"@content = content"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":182,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Quote.new(content)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a quote form, stored as bytesize followed by\ncontent. The latter is due to the fact that `\\0` is a\nvalid content character in quotes.\n\nIts type is `SnapshotType::Quote`.","summary":"<p>Snapshot of a quote form, stored as bytesize followed by content.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":173,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Resolver","path":"Novika/Resolver.html","kind":"module","full_name":"Novika::Resolver","name":"Resolver","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENV_GLOBAL_DIRNAME","name":"ENV_GLOBAL_DIRNAME","value":"\".novika\"","doc":"Specifies the name of the global environment directory.","summary":"<p>Specifies the name of the global environment directory.</p>"},{"id":"ENV_LOCAL_DIRNAME","name":"ENV_LOCAL_DIRNAME","value":"\"env\"","doc":"Specifies the name of the local environment directory.","summary":"<p>Specifies the name of the local environment directory.</p>"},{"id":"ENV_LOCAL_PROOF_FILENAME","name":"ENV_LOCAL_PROOF_FILENAME","value":"\".nk.env\"","doc":"Specifies the name of the file that is going to be used as the\nproof that the directory at hand is not simply called 'env',\nbut is actually intended as a Novika environment directory.","summary":"<p>Specifies the name of the file that is going to be used as the proof that the directory at hand is not simply called 'env', but is actually intended as a Novika environment directory.</p>"},{"id":"PERMISSIONS_FILENAME","name":"PERMISSIONS_FILENAME","value":"\"permissions\"","doc":"Specifies the name of the file that will contain saved permissions.","summary":"<p>Specifies the name of the file that will contain saved permissions.</p>"},{"id":"PREAMBLES_ENTRY_NAME","name":"PREAMBLES_ENTRY_NAME","value":"Word.new(\"__preambles__\")","doc":"Specifies the name of the entry that holds the preambles.","summary":"<p>Specifies the name of the entry that holds the preambles.</p>"},{"id":"RESOLVER_RECURSION_LIMIT","name":"RESOLVER_RECURSION_LIMIT","value":"64","doc":"Recursion limit for the resolver. Doesn't have to be big, it's\nbasically file system depth which isn't too big most of the time.","summary":"<p>Recursion limit for the resolver.</p>"}],"including_types":[{"html_id":"novika/Novika/RunnableResolver","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"types":[{"html_id":"novika/Novika/Resolver/ChildSlot","path":"Novika/Resolver/ChildSlot.html","kind":"class","full_name":"Novika::Resolver::ChildSlot","name":"ChildSlot","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},"ancestors":[{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1423,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Slot (placeholder) that stands for \"runnables of whomever\ninherits me\".","summary":"<p>Slot (placeholder) that stands for &quot;runnables of whomever inherits me&quot;.</p>","instance_methods":[{"html_id":"replace(root:RunnableRoot,group:RunnableGroup,manifest:Manifest::Present,population:RunnableContainer,container:RunnableContainer):RunnableContainer-instance-method","name":"replace","doc":"Replaces any occurences of this slot in *container* with a\ncontainer holding the runnables this slot stands for.\n\n*manifest* is the manifest that contains this slot.\n\n*group* is the `RunnableGroup` of the manifest that contains\nthis slot.\n\nReturns the next population container.","summary":"<p>Replaces any occurences of this slot in <em>container</em> with a container holding the runnables this slot stands for.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, manifest : Manifest::Present, population : RunnableContainer, container : RunnableContainer) : RunnableContainer","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, manifest : <a href=\"../../Novika/Resolver/Manifest/Present.html\">Manifest::Present</a>, population : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":1424,"url":null},"def":{"name":"replace","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"RunnableContainer","visibility":"Public","body":"content = population.child(transparent: false, ancestor: self)\ncontainer.replace(self, content)\ncontent\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1442,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Slot[<>]\""}}]},{"html_id":"novika/Novika/Resolver/Designation","path":"Novika/Resolver/Designation.html","kind":"struct","full_name":"Novika::Resolver::Designation","name":"Designation","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":768,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Designation objects encapsulate a runnable environment and a set\nof resolutions that should be run within that environment.\n\nThe preferred way to create designations is via `RunnableEnvironment#designate`.\n\nAfter obtaining a designation, you can `run` it as many times as\nyou want.","summary":"<p>Designation objects encapsulate a runnable environment and a set of resolutions that should be run within that environment.</p>","constructors":[{"html_id":"new(root:RunnableRoot,env:RunnableEnvironment,set:ResolutionSet,caps:CapabilityCollection)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"set","external_name":"set","restriction":"ResolutionSet"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"args_string":"(root : RunnableRoot, env : RunnableEnvironment, set : ResolutionSet, caps : CapabilityCollection)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, env : <a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a>, set : <a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a>, caps : <a href=\"../../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/resolver.cr","line_number":772,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"set","external_name":"set","restriction":"ResolutionSet"},{"name":"caps","external_name":"caps","restriction":"CapabilityCollection"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, env, set, caps)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"caps:Novika::CapabilityCollection-instance-method","name":"caps","doc":"Returns this designation's own capability collection.","summary":"<p>Returns this designation's own capability collection.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":770,"url":null},"def":{"name":"caps","visibility":"Public","body":"@caps"}},{"html_id":"label:String-instance-method","name":"label","doc":"Returns the label of this designation. It is formed from the\nbasename of this designation's runnable environment.","summary":"<p>Returns the label of this designation.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":837,"url":null},"def":{"name":"label","return_type":"String","visibility":"Public","body":"if envpath = @env.abspath?\nelse\n  return \"unknown\"\nend\nenvpath.basename\n"}},{"html_id":"run-instance-method","name":"run","doc":"Runs the designated resolutions under a new common toplevel block.","summary":"<p>Runs the designated resolutions under a new common toplevel block.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":861,"url":null},"def":{"name":"run","visibility":"Public","body":"preambles = Block.new\nfill_preambles_block(preambles)\ntoplevel = Block.new(@caps.block)\ntoplevel.at(Word.new(\"__runtime__\"), Quote.new(\"novika\"))\ntoplevel.at(PREAMBLES_ENTRY_NAME, preambles)\nengine = Engine.push(@caps)\n@set.each do |resolution|\n  source = @root.disk.read(resolution.abspath)\n  script = (Block.new(toplevel)).slurp(source)\n  instance = resolution.run(engine, script_block: script)\n  toplevel.import!(from: instance)\nend\nEngine.pop(engine)\n"}},{"html_id":"slurp(target:Block)-instance-method","name":"slurp","doc":"Parses the designated resolutions and appends the parsed forms to\n*target*. Their order is kept, and matches that of the designated\nresolutions.","summary":"<p>Parses the designated resolutions and appends the parsed forms to <em>target</em>.</p>","abstract":false,"args":[{"name":"target","external_name":"target","restriction":"Block"}],"args_string":"(target : Block)","args_html":"(target : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/resolver.cr","line_number":846,"url":null},"def":{"name":"slurp","args":[{"name":"target","external_name":"target","restriction":"Block"}],"visibility":"Public","body":"preambles = (target.form_for?(PREAMBLES_ENTRY_NAME)).as?(Block)\npreambles || (preambles = Block.new)\nfill_preambles_block(preambles)\ntarget.at(PREAMBLES_ENTRY_NAME, preambles)\n@set.each do |resolution|\n  source = @root.disk.read(resolution.abspath)\n  script = (Block.new(target)).slurp(source)\n  target.paste(script)\nend\n"}},{"html_id":"to_s(io,sm=false)-instance-method","name":"to_s","doc":"Appends the string representation of this designation to *io*.\n\n*sm*, if set to true, enables SMall output mode. In this mode,\nonly relative paths of the designated resolutions are appended\nto *io*, separated by newlines.","summary":"<p>Appends the string representation of this designation to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"sm","default_value":"false","external_name":"sm","restriction":""}],"args_string":"(io, sm = false)","args_html":"(io, sm = <span class=\"n\">false</span>)","location":{"filename":"src/novika/resolver.cr","line_number":889,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""},{"name":"sm","default_value":"false","external_name":"sm","restriction":""}],"visibility":"Public","body":"envpath = @env.abspath?\nif sm && envpath\n  @set.each do |resolution|\n    io.puts((resolution.abspath.relative_to?(envpath)) || resolution.abspath)\n  end\n  return\nend\nenvpath || (envpath = \"unknown\")\n(io << envpath) << \": [\\n\"\n@set.each do |resolution|\n  ((io << \"  \") << resolution.abspath) << \",\\n\"\nend\nio << \"]\\n\"\n"}}]},{"html_id":"novika/Novika/Resolver/Disk","path":"Novika/Resolver/Disk.html","kind":"class","full_name":"Novika::Resolver::Disk","name":"Disk","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":131,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"InfoAbsent","name":"InfoAbsent","value":"InfoAbsence.new","doc":"Singleton instance of `InfoAbsence`.","summary":"<p>Singleton instance of <code><a href=\"../../Novika/Resolver/Disk/InfoAbsence.html\">InfoAbsence</a></code>.</p>"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"A caching, resolver-specific file system access abstraction on top\nof Crystal's `Dir` and `File`.","summary":"<p>A caching, resolver-specific file system access abstraction on top of Crystal's <code>Dir</code> and <code>File</code>.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":149,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"dir?(path:Path):Path|Nil-instance-method","name":"dir?","doc":"If *path* (symlink or not) points to a directory, returns the\nreal path to that directory. Otherwise, returns nil.","summary":"<p>If <em>path</em> (symlink or not) points to a directory, returns the real path to that directory.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path) : Path | Nil","args_html":"(path : Path) : Path | Nil","location":{"filename":"src/novika/resolver.cr","line_number":224,"url":null},"def":{"name":"dir?","args":[{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Path | ::Nil","visibility":"Public","body":"if presence = info?(path)\nelse\n  return\nend\nif presence.info.directory?\nelse\n  return\nend\npresence.path\n"}},{"html_id":"env?(origin:Path):Path|Nil-instance-method","name":"env?","doc":"Determines and returns the path to the environment directory,\nif any. Otherwise, returns nil.\n\nClimbs up from *origin* until encountering:\n\n- A file named '.nk.env'\n- A directory named 'env' containing a file named '.nk.env'\n- A directory named '.novika'\n\nThe result is cached, recursively, so you can call this method\nas many times as you'd like; your disk won't explode.","summary":"<p>Determines and returns the path to the environment directory, if any.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Path"}],"args_string":"(origin : Path) : Path | Nil","args_html":"(origin : Path) : Path | Nil","location":{"filename":"src/novika/resolver.cr","line_number":327,"url":null},"def":{"name":"env?","args":[{"name":"origin","external_name":"origin","restriction":"Path"}],"return_type":"Path | ::Nil","visibility":"Public","body":"env : Path | ::Nil\nif env = @envs[origin]?\n  return env\nend\nif file?(origin / ENV_LOCAL_PROOF_FILENAME)\n  return @envs[origin] = origin\nend\nif env = dir?(origin / ENV_GLOBAL_DIRNAME)\n  return @envs[origin] = env\nend\nif (env = dir?(origin / ENV_LOCAL_DIRNAME)) && (file?(env / ENV_LOCAL_PROOF_FILENAME))\n  return @envs[origin] = env\nend\nif (origin == origin.root) && (env = dir?(Path.home / ENV_GLOBAL_DIRNAME))\n  return @envs[origin] = env\nend\nif origin == origin.anchor\n  return\nend\nif env = env?(origin.parent)\nelse\n  return\nend\n@envs[origin] = env\n"}},{"html_id":"file?(path:Path):Path|Nil-instance-method","name":"file?","doc":"If *path* (symlink or not) points to a file, returns the real\npath to that file. Otherwise, returns nil.","summary":"<p>If <em>path</em> (symlink or not) points to a file, returns the real path to that file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path) : Path | Nil","args_html":"(path : Path) : Path | Nil","location":{"filename":"src/novika/resolver.cr","line_number":215,"url":null},"def":{"name":"file?","args":[{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Path | ::Nil","visibility":"Public","body":"if presence = info?(path)\nelse\n  return\nend\nif presence.info.file?\nelse\n  return\nend\npresence.path\n"}},{"html_id":"glob(origin:Path,selector:GlobSelector,&fn:Path->)-instance-method","name":"glob","doc":"A simpler, Novika- and `Disk`-specific globbing mechanism.\n\nCalls *fn* with paths in *origin* directory that match the\ngiven *selector*.","summary":"<p>A simpler, Novika- and <code><a href=\"../../Novika/Resolver/Disk.html\">Disk</a></code>-specific globbing mechanism.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Path"},{"name":"selector","external_name":"selector","restriction":"GlobSelector"}],"args_string":"(origin : Path, selector : GlobSelector, &fn : Path -> )","args_html":"(origin : Path, selector : <a href=\"../../Novika/Resolver/GlobSelector.html\">GlobSelector</a>, &fn : Path -> )","location":{"filename":"src/novika/resolver.cr","line_number":312,"url":null},"def":{"name":"glob","args":[{"name":"origin","external_name":"origin","restriction":"Path"},{"name":"selector","external_name":"selector","restriction":"GlobSelector"}],"yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Path ->)"},"visibility":"Public","body":"glob(origin, selector, fn)"}},{"html_id":"info?(path:Path):InfoPresence|Nil-instance-method","name":"info?","doc":"Reads, caches, and returns the `InfoPresence` object for the\ngiven *path*. Returns nil if there is nothing at *path*. The\nabsence is also cached.\n\n*path* is assumed to be absolute and normalized.\n\nIf *path* is a symlink, the symlink is visited. Therefore, the\nreturned `InfoPresence` will contain the real path rather than\n*path*. So prefer to use the resulting `InfoPresence#path` in\nfavor of *path* after calling this method.","summary":"<p>Reads, caches, and returns the <code><a href=\"../../Novika/Resolver/Disk/InfoPresence.html\">InfoPresence</a></code> object for the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path) : InfoPresence | Nil","args_html":"(path : Path) : <a href=\"../../Novika/Resolver/Disk/InfoPresence.html\">InfoPresence</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":176,"url":null},"def":{"name":"info?","args":[{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"InfoPresence | ::Nil","visibility":"Public","body":"presence = nil\nif presence = @info[path]?\n  return presence.as?(InfoPresence)\nend\nif info = File.info?(path, follow_symlinks: false)\nelse\n  @info[path] = InfoAbsent\n  return\nend\nif info.symlink?\nelse\n  return @info[path] = InfoPresence.new(path, info)\nend\nbegin\n  real = Path[File.realpath(path)]\nrescue File::NotFoundError\n  @info[path] = InfoAbsent\n  return\nend\ninfo = File.info?(real, follow_symlinks: false)\npresence = info ? InfoPresence.new(real, info) : InfoAbsent\n@info[real] = presence\n@info[path] = presence\npresence.as?(InfoPresence)\n"}},{"html_id":"read(path:Path):String|Nil-instance-method","name":"read","doc":"Returns the content of the file that *path* points to.\n\nRaises if *path* doesn't point to a file.","summary":"<p>Returns the content of the file that <em>path</em> points to.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path) : String | Nil","args_html":"(path : Path) : <a href=\"../../String.html\">String</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":234,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"String | ::Nil","visibility":"Public","body":"__temp_60 = path\n@content[__temp_60]? || (@content[__temp_60] = File.read(path))\n"}},{"html_id":"write(path:Path,&:IO->)-instance-method","name":"write","doc":"Yields writable `IO` for the file that *path* points to. The\nfile is created if it does not exist; its content is cleared\nif it does.","summary":"<p>Yields writable <code>IO</code> for the file that <em>path</em> points to.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path, & : IO -> )","args_html":"(path : Path, & : IO -> )","location":{"filename":"src/novika/resolver.cr","line_number":241,"url":null},"def":{"name":"write","args":[{"name":"path","external_name":"path","restriction":"Path"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(IO ->)"},"visibility":"Public","body":"File.open(path, mode: \"w\") do |io|\n  yield io\nend"}}],"types":[{"html_id":"novika/Novika/Resolver/Disk/InfoAbsence","path":"Novika/Resolver/Disk/InfoAbsence.html","kind":"struct","full_name":"Novika::Resolver::Disk::InfoAbsence","name":"InfoAbsence","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":144,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver/Disk","kind":"class","full_name":"Novika::Resolver::Disk","name":"Disk"},"doc":"Represents the absence of the requested file system entry.\n\nNo need to instantiate; use `InfoAbsent`.\n\nSee `info?`.","summary":"<p>Represents the absence of the requested file system entry.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":144,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":144,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new()"}},{"html_id":"copy_with-instance-method","name":"copy_with","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":144,"url":null},"def":{"name":"copy_with","visibility":"Public","body":"self.class.new()"}}]},{"html_id":"novika/Novika/Resolver/Disk/InfoPresence","path":"Novika/Resolver/Disk/InfoPresence.html","kind":"struct","full_name":"Novika::Resolver::Disk::InfoPresence","name":"InfoPresence","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":137,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver/Disk","kind":"class","full_name":"Novika::Resolver::Disk","name":"Disk"},"doc":"Represents the presence of the requested file system entry\n(directory, file, or symlink) at `path`. Also holds its\n`File::Info` object, `info`.\n\nSee `info?`.","summary":"<p>Represents the presence of the requested file system entry (directory, file, or symlink) at <code><a href=\"../../../Novika/Resolver/Disk/InfoPresence.html#path%3APath-instance-method\">#path</a></code>.</p>","constructors":[{"html_id":"new(path:Path,info:File::Info)-class-method","name":"new","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"info","external_name":"info","restriction":"File::Info"}],"args_string":"(path : Path, info : File::Info)","args_html":"(path : Path, info : File::Info)","location":{"filename":"src/novika/resolver.cr","line_number":137,"url":null},"def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"info","external_name":"info","restriction":"File::Info"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path, info)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":137,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@path.clone, @info.clone)"}},{"html_id":"copy_with(path_path=@path,info_info=@info)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_path","default_value":"@path","external_name":"path","restriction":""},{"name":"_info","default_value":"@info","external_name":"info","restriction":""}],"args_string":"(path _path = @path, info _info = @info)","args_html":"(path _path = @path, info _info = @info)","location":{"filename":"src/novika/resolver.cr","line_number":137,"url":null},"def":{"name":"copy_with","args":[{"name":"_path","default_value":"@path","external_name":"path","restriction":""},{"name":"_info","default_value":"@info","external_name":"info","restriction":""}],"visibility":"Public","body":"self.class.new(_path, _info)"}},{"html_id":"info:File::Info-instance-method","name":"info","abstract":false,"def":{"name":"info","return_type":"File::Info","visibility":"Public","body":"@info"}},{"html_id":"path:Path-instance-method","name":"path","abstract":false,"def":{"name":"path","return_type":"Path","visibility":"Public","body":"@path"}}]}]},{"html_id":"novika/Novika/Resolver/DoDiskLoad","path":"Novika/Resolver/DoDiskLoad.html","kind":"struct","full_name":"Novika::Resolver::DoDiskLoad","name":"DoDiskLoad","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},"ancestors":[{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":62,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Asks signal receivers to load whatever data they can\n(and should) from disk.","summary":"<p>Asks signal receivers to load whatever data they can (and should) from disk.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":62,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":62,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new()"}},{"html_id":"copy_with-instance-method","name":"copy_with","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":62,"url":null},"def":{"name":"copy_with","visibility":"Public","body":"self.class.new()"}}]},{"html_id":"novika/Novika/Resolver/DoDiskSave","path":"Novika/Resolver/DoDiskSave.html","kind":"struct","full_name":"Novika::Resolver::DoDiskSave","name":"DoDiskSave","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},"ancestors":[{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":66,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Asks signal receivers to save whatever data they can\n(and should) to disk.","summary":"<p>Asks signal receivers to save whatever data they can (and should) to disk.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":66,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":66,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new()"}},{"html_id":"copy_with-instance-method","name":"copy_with","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":66,"url":null},"def":{"name":"copy_with","visibility":"Public","body":"self.class.new()"}}]},{"html_id":"novika/Novika/Resolver/GlobSelector","path":"Novika/Resolver/GlobSelector.html","kind":"enum","full_name":"Novika::Resolver::GlobSelector","name":"GlobSelector","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":34,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Scripts","name":"Scripts","value":"0","doc":"Match all Novika scripts (glob '*.nk')","summary":"<p>Match all Novika scripts (glob '*.nk')</p>"},{"id":"Directories","name":"Directories","value":"1","doc":"Match all subdirectories (glob '*/')","summary":"<p>Match all subdirectories (glob '*/')</p>"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Selector for `Disk#glob`.","summary":"<p>Selector for <code><a href=\"../../Novika/Resolver/Disk.html#glob%28origin%3APath%2Cselector%3AGlobSelector%2C%26fn%3APath-%3E%29-instance-method\">Disk#glob</a></code>.</p>","instance_methods":[{"html_id":"directories?-instance-method","name":"directories?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":39,"url":null},"def":{"name":"directories?","visibility":"Public","body":"self == Directories"}},{"html_id":"scripts?-instance-method","name":"scripts?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":36,"url":null},"def":{"name":"scripts?","visibility":"Public","body":"self == Scripts"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":41,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"case self\nin .scripts?\n  (io << \"*\") << RunnableScript::EXTENSION\nin .directories?\n  io << \"*/\"\nend"}}]},{"html_id":"novika/Novika/Resolver/Manifest","path":"Novika/Resolver/Manifest.html","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":1452,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/Manifest/Absent","kind":"struct","full_name":"Novika::Resolver::Manifest::Absent","name":"Absent"},{"html_id":"novika/Novika/Resolver/Manifest/App","kind":"class","full_name":"Novika::Resolver::Manifest::App","name":"App"},{"html_id":"novika/Novika/Resolver/Manifest/Lib","kind":"class","full_name":"Novika::Resolver::Manifest::Lib","name":"Lib"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Includers are manifests in `RunnableGroup`s.\n\nManifests exist mainly to allow to specify alternative load\norder. They are designed to be hidden so as to not interfere\nwith/clutter the user's file tree.","summary":"<p>Includers are manifests in <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s.</p>","constructors":[{"html_id":"find(disk:Disk,path:Path,ancestor=nil):Manifest-class-method","name":"find","doc":"Creates and returns a manifest object if *path* contains\na manifest. Otherwise, returns nil.","summary":"<p>Creates and returns a manifest object if <em>path</em> contains a manifest.</p>","abstract":false,"args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(disk : Disk, path : Path, ancestor = nil) : Manifest","args_html":"(disk : <a href=\"../../Novika/Resolver/Disk.html\">Disk</a>, path : Path, ancestor = <span class=\"n\">nil</span>) : <a href=\"../../Novika/Resolver/Manifest.html\">Manifest</a>","location":{"filename":"src/novika/resolver.cr","line_number":1560,"url":null},"def":{"name":"find","args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"return_type":"Manifest","visibility":"Public","body":"((Lib.find?(disk, path, ancestor)) || (App.find?(disk, path, ancestor))) || Absent.new"}}],"instance_methods":[{"html_id":"layout(container:RunnableContainer,group:RunnableGroup)-instance-method","name":"layout","doc":"Populates *container* with runnables from *group* according\nto this manifest's default layout.\n\n* For application manifests, it's `* ** entry.nk`.\n* For library manifests and directories with no manifest, it's\n  `entry.nk * **`.","summary":"<p>Populates <em>container</em> with runnables from <em>group</em> according to this manifest's default layout.</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"args_string":"(container : RunnableContainer, group : RunnableGroup)","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1570,"url":null},"def":{"name":"layout","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"visibility":"Public","body":"entry = group.entry_name\ncontainer.append(RunnableQuery.new(group.abspath / entry, ancestor: group, else: nil))\ncontainer.append(RunnableSelector.new(GlobSelector::Scripts, reject: Set {entry}, ancestor: group))\ncontainer.append(RunnableSelector.new(GlobSelector::Directories, ancestor: group))\n"}},{"html_id":"populate(root:RunnableRoot,container:RunnableContainer,origin:RunnableGroup)-instance-method","name":"populate","doc":"Populates *container* with runnables from *origin* according\nto the content of the manifest.\n\n* If there is no explicit `*` or `**`, `**` is automatically\n  inserted at the very beginning of the manifest regardless\n  of whether it is an application manifest or a library manifest.\n\n* A directory with no manifest is laid out directly using `layout`,\n  since there is no \"manifest content\" to speak of.","summary":"<p>Populates <em>container</em> with runnables from <em>origin</em> according to the content of the manifest.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"origin","external_name":"origin","restriction":"RunnableGroup"}],"args_string":"(root : RunnableRoot, container : RunnableContainer, origin : RunnableGroup)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, origin : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1587,"url":null},"def":{"name":"populate","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"origin","external_name":"origin","restriction":"RunnableGroup"}],"visibility":"Public","body":"population = container.child(transparent: true, ancestor: origin)\npopulation.allow? do |r|\n  !(r.is_a?(RunnableGroup) && (r.app? || r.lib?))\nend\ncontainer.append(population)\nroot.assign(origin, container: population)\nlayout(population, origin)\n"}}],"types":[{"html_id":"novika/Novika/Resolver/Manifest/Absent","path":"Novika/Resolver/Manifest/Absent.html","kind":"struct","full_name":"Novika::Resolver::Manifest::Absent","name":"Absent","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1817,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"}],"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Represents the absence of a manifest.","summary":"<p>Represents the absence of a manifest.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1817,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1817,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Resolver/Manifest/App","path":"Novika/Resolver/Manifest/App.html","kind":"class","full_name":"Novika::Resolver::Manifest::App","name":"App","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest/Present","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1760,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FILENAME","name":"FILENAME","value":"\".nk.app\""}],"included_modules":[{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},{"html_id":"novika/Novika/Resolver/Manifest/Present","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present"}],"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Represents an application manifest.","summary":"<p>Represents an application manifest.</p>","class_methods":[{"html_id":"find?(disk:Disk,path:Path,ancestor=nil)-class-method","name":"find?","doc":"Creates and returns an application manifest object if\n*path* contains an application manifest. Otherwise,\nreturns nil.","summary":"<p>Creates and returns an application manifest object if <em>path</em> contains an application manifest.</p>","abstract":false,"args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(disk : Disk, path : Path, ancestor = nil)","args_html":"(disk : <a href=\"../../../Novika/Resolver/Disk.html\">Disk</a>, path : Path, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1777,"url":null},"def":{"name":"find?","args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"if datum = disk.file?(path / FILENAME)\nelse\n  return\nend\nnew(datum, ancestor)\n"}}],"constructors":[{"html_id":"new(path:Path,ancestor:Novika::Resolver::Runnable::Ancestor|Nil)-class-method","name":"new","doc":"Creates a new application manifest.\n\n*path* is a *normalized* path pointing to the manifest.","summary":"<p>Creates a new application manifest.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"::Novika::Resolver::Runnable::Ancestor | ::Nil"}],"args_string":"(path : Path, ancestor : Novika::Resolver::Runnable::Ancestor | Nil)","args_html":"(path : Path, ancestor : <a href=\"../../../Novika/Resolver/Runnable/Ancestor.html\">Novika::Resolver::Runnable::Ancestor</a> | Nil)","location":{"filename":"src/novika/resolver.cr","line_number":1771,"url":null},"def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"::Novika::Resolver::Runnable::Ancestor | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ancestor?:Runnable::Ancestor|Nil-instance-method","name":"ancestor?","doc":"Returns the ancestor of this object, or nil if there is\nno ancestor.","summary":"<p>Returns the ancestor of this object, or nil if there is no ancestor.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1766,"url":null},"def":{"name":"ancestor?","return_type":"Runnable::Ancestor | ::Nil","visibility":"Public","body":"@ancestor"}},{"html_id":"layout(container:RunnableContainer,group:RunnableGroup)-instance-method","name":"layout","doc":"Populates *container* with runnables from *group* according\nto this manifest's default layout.\n\n* For application manifests, it's `* ** entry.nk`.\n* For library manifests and directories with no manifest, it's\n  `entry.nk * **`.","summary":"<p>Populates <em>container</em> with runnables from <em>group</em> according to this manifest's default layout.</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"args_string":"(container : RunnableContainer, group : RunnableGroup)","args_html":"(container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, group : <a href=\"../../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1783,"url":null},"def":{"name":"layout","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"visibility":"Public","body":"entry = group.entry_name\ncontainer.append(RunnableSelector.new(GlobSelector::Scripts, reject: Set {entry}, ancestor: group))\ncontainer.append(RunnableSelector.new(GlobSelector::Directories, ancestor: group))\ncontainer.append(RunnableQuery.new(group.abspath / entry, ancestor: group, else: nil))\n"}}]},{"html_id":"novika/Novika/Resolver/Manifest/CommentPreprocessor","path":"Novika/Resolver/Manifest/CommentPreprocessor.html","kind":"class","full_name":"Novika::Resolver::Manifest::CommentPreprocessor","name":"CommentPreprocessor","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1520,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Strips off comments from manifest content.","summary":"<p>Strips off comments from manifest content.</p>","instance_methods":[{"html_id":"next?:Preprocessor|Nil-instance-method","name":"next?","doc":"Returns the next preprocessor in the chain, or nil if\nthis preprocessor is terminal.","summary":"<p>Returns the next preprocessor in the chain, or nil if this preprocessor is terminal.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1525,"url":null},"def":{"name":"next?","return_type":"Preprocessor | ::Nil","visibility":"Public","body":"FlagPreprocessor.new(@root, @group, @manifest)"}},{"html_id":"preprocess(content:String):String-instance-method","name":"preprocess","doc":"Returns subtractively preprocessed *content* string. That\nis, the returned string will be shorter or of the same\nlength as *content*.","summary":"<p>Returns subtractively preprocessed <em>content</em> string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : String","args_html":"(content : <a href=\"../../../String.html\">String</a>) : <a href=\"../../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1521,"url":null},"def":{"name":"preprocess","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"String","visibility":"Public","body":"content.gsub(/^\\s*#[^\\n]*/m, \"\")"}}]},{"html_id":"novika/Novika/Resolver/Manifest/FlagPreprocessor","path":"Novika/Resolver/Manifest/FlagPreprocessor.html","kind":"class","full_name":"Novika::Resolver::Manifest::FlagPreprocessor","name":"FlagPreprocessor","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1532,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Expands expressions such as `[windows, ... => dll, so]`, if found\nin manifest content: substitutes each with the appropriate value.","summary":"<p>Expands expressions such as `[windows, ...</p>","instance_methods":[{"html_id":"next?:Preprocessor|Nil-instance-method","name":"next?","doc":"Returns the next preprocessor in the chain, or nil if\nthis preprocessor is terminal.","summary":"<p>Returns the next preprocessor in the chain, or nil if this preprocessor is terminal.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1554,"url":null},"def":{"name":"next?","return_type":"Preprocessor | ::Nil","visibility":"Public","body":""}},{"html_id":"preprocess(content:String):String-instance-method","name":"preprocess","doc":"Returns subtractively preprocessed *content* string. That\nis, the returned string will be shorter or of the same\nlength as *content*.","summary":"<p>Returns subtractively preprocessed <em>content</em> string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : String","args_html":"(content : <a href=\"../../../String.html\">String</a>) : <a href=\"../../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1533,"url":null},"def":{"name":"preprocess","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"String","visibility":"Public","body":"content.gsub(/\\[([^\\]]+)\\]/) do |exp|\n  case $~[1]\n  when /^\\s*((?:\\w|\\.\\.\\.)+(?:\\s*,\\s*(?:\\w|\\.\\.\\.)+)*)\\s*\\|\\s*(\\w+(?:\\s*,\\s*\\w+)*)$/\n    flags = $~[1].split(/\\s*,\\s*/, remove_empty: true)\n    blocks = $~[2].split(/\\s*,\\s*/, remove_empty: true)\n    if flags.size == blocks.size\n    else\n      next exp\n    end\n    branches = Hash.zip(flags, blocks)\n    branch = branches[\"...\"]?\n    @root.each_set_flag do |flag|\n      if block = branches[flag]?\n      else\n        next\n      end\n      break branch = block\n    end\n    branch || \"\"\n  end\nend"}}]},{"html_id":"novika/Novika/Resolver/Manifest/Lib","path":"Novika/Resolver/Manifest/Lib.html","kind":"class","full_name":"Novika::Resolver::Manifest::Lib","name":"Lib","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest/Present","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1793,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FILENAME","name":"FILENAME","value":"\".nk.lib\""}],"included_modules":[{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},{"html_id":"novika/Novika/Resolver/Manifest/Present","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present"}],"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Represents a library manifest.","summary":"<p>Represents a library manifest.</p>","class_methods":[{"html_id":"find?(disk:Disk,path:Path,ancestor=nil)-class-method","name":"find?","doc":"Creates and returns an library manifest object if *path*\ncontains a library manifest, returns nil.","summary":"<p>Creates and returns an library manifest object if <em>path</em> contains a library manifest, returns nil.</p>","abstract":false,"args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(disk : Disk, path : Path, ancestor = nil)","args_html":"(disk : <a href=\"../../../Novika/Resolver/Disk.html\">Disk</a>, path : Path, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1809,"url":null},"def":{"name":"find?","args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"if datum = disk.file?(path / FILENAME)\nelse\n  return\nend\nnew(datum, ancestor)\n"}}],"constructors":[{"html_id":"new(path:Path,ancestor:Novika::Resolver::Runnable::Ancestor|Nil)-class-method","name":"new","doc":"Creates a new library manifest.\n\n*path* is a *normalized* path pointing to the manifest.","summary":"<p>Creates a new library manifest.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"::Novika::Resolver::Runnable::Ancestor | ::Nil"}],"args_string":"(path : Path, ancestor : Novika::Resolver::Runnable::Ancestor | Nil)","args_html":"(path : Path, ancestor : <a href=\"../../../Novika/Resolver/Runnable/Ancestor.html\">Novika::Resolver::Runnable::Ancestor</a> | Nil)","location":{"filename":"src/novika/resolver.cr","line_number":1804,"url":null},"def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"::Novika::Resolver::Runnable::Ancestor | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ancestor?:Runnable::Ancestor|Nil-instance-method","name":"ancestor?","doc":"Returns the ancestor of this object, or nil if there is\nno ancestor.","summary":"<p>Returns the ancestor of this object, or nil if there is no ancestor.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1799,"url":null},"def":{"name":"ancestor?","return_type":"Runnable::Ancestor | ::Nil","visibility":"Public","body":"@ancestor"}}]},{"html_id":"novika/Novika/Resolver/Manifest/PreamblePreprocessor","path":"Novika/Resolver/Manifest/PreamblePreprocessor.html","kind":"class","full_name":"Novika::Resolver::Manifest::PreamblePreprocessor","name":"PreamblePreprocessor","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},"ancestors":[{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1491,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Strips off manifest preamble and makes the manifest acknowledge it.","summary":"<p>Strips off manifest preamble and makes the manifest acknowledge it.</p>","instance_methods":[{"html_id":"next?:Preprocessor|Nil-instance-method","name":"next?","doc":"Returns the next preprocessor in the chain, or nil if\nthis preprocessor is terminal.","summary":"<p>Returns the next preprocessor in the chain, or nil if this preprocessor is terminal.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1514,"url":null},"def":{"name":"next?","return_type":"Preprocessor | ::Nil","visibility":"Public","body":"CommentPreprocessor.new(@root, @group, @manifest)"}},{"html_id":"preprocess(content:String):String-instance-method","name":"preprocess","doc":"Returns subtractively preprocessed *content* string. That\nis, the returned string will be shorter or of the same\nlength as *content*.","summary":"<p>Returns subtractively preprocessed <em>content</em> string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : String","args_html":"(content : <a href=\"../../../String.html\">String</a>) : <a href=\"../../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1492,"url":null},"def":{"name":"preprocess","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"String","visibility":"Public","body":"open = content.match(/^\\s*---\\s*$/m)\nif open\nelse\n  return content\nend\nclose = content.match(/^\\s*---\\s*$/m, pos: open.end)\nrange_outer = open.begin...(close ? close.end : content.size)\nrange_inner = open.end...(close ? close.begin : content.size)\npreamble = content[range_inner].strip\n@manifest.on_preamble(@root, @group, preamble)\ncontent.sub(range_outer, \"\")\n"}}]},{"html_id":"novika/Novika/Resolver/Manifest/Preprocessor","path":"Novika/Resolver/Manifest/Preprocessor.html","kind":"class","full_name":"Novika::Resolver::Manifest::Preprocessor","name":"Preprocessor","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1468,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/Resolver/Manifest/CommentPreprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::CommentPreprocessor","name":"CommentPreprocessor"},{"html_id":"novika/Novika/Resolver/Manifest/FlagPreprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::FlagPreprocessor","name":"FlagPreprocessor"},{"html_id":"novika/Novika/Resolver/Manifest/PreamblePreprocessor","kind":"class","full_name":"Novika::Resolver::Manifest::PreamblePreprocessor","name":"PreamblePreprocessor"}],"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Base class for several *subtractive preprocessors* for\nmanifest content.\n\nThey are *subtractive* because they *discard* stuff, at\nleast from the original content's point of view.\n\nAlso, one might say *subtractive preprocessors* match \"edges\"\nrather than by \"structure\". If done repeatedly and so to speak\nrecursively, one might finally arrive at \"grains\" coarse enough\nfor \"real\" content analysis. In this sense subtractive\npreprocessors are \"noise-friendly\" -- and that's just what we\nwant. Moreover, they may consider each other \"noise\", too.\n\nPreprocessors can be chained, and can programmaticaly select\nthe next preprocessor (or become the terminal one) in `next?`.","summary":"<p>Base class for several <em>subtractive preprocessors</em> for manifest content.</p>","constructors":[{"html_id":"new(root:RunnableRoot,group:RunnableGroup,manifest:Manifest::Present)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, manifest : Manifest::Present)","args_html":"(root : <a href=\"../../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, manifest : <a href=\"../../../Novika/Resolver/Manifest/Present.html\">Manifest::Present</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1469,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, group, manifest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"next?:Preprocessor|Nil-instance-method","name":"next?","doc":"Returns the next preprocessor in the chain, or nil if\nthis preprocessor is terminal.","summary":"<p>Returns the next preprocessor in the chain, or nil if this preprocessor is terminal.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1485,"url":null},"def":{"name":"next?","return_type":"Preprocessor | ::Nil","visibility":"Public","body":"PreamblePreprocessor.new(@root, @group, @manifest)"}},{"html_id":"preprocess(content:String):String-instance-method","name":"preprocess","doc":"Returns subtractively preprocessed *content* string. That\nis, the returned string will be shorter or of the same\nlength as *content*.","summary":"<p>Returns subtractively preprocessed <em>content</em> string.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : String","args_html":"(content : <a href=\"../../../String.html\">String</a>) : <a href=\"../../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1479,"url":null},"def":{"name":"preprocess","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"String","visibility":"Public","body":"content"}}]},{"html_id":"novika/Novika/Resolver/Manifest/Present","path":"Novika/Resolver/Manifest/Present.html","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present","abstract":false,"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1599,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DIRECTIVES","name":"DIRECTIVES","value":"Set {\"noinherit\", \"nolayout\"}","doc":"A set of allowed manifest directives.","summary":"<p>A set of allowed manifest directives.</p>"}],"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"}],"including_types":[{"html_id":"novika/Novika/Resolver/Manifest/App","kind":"class","full_name":"Novika::Resolver::Manifest::App","name":"App"},{"html_id":"novika/Novika/Resolver/Manifest/Lib","kind":"class","full_name":"Novika::Resolver::Manifest::Lib","name":"Lib"}],"namespace":{"html_id":"novika/Novika/Resolver/Manifest","kind":"module","full_name":"Novika::Resolver::Manifest","name":"Manifest"},"doc":"Represents the presence of a manifest.","summary":"<p>Represents the presence of a manifest.</p>","instance_methods":[{"html_id":"directory-instance-method","name":"directory","doc":"Returns a path that points to the directory where this\nmanifest is located.","summary":"<p>Returns a path that points to the directory where this manifest is located.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1607,"url":null},"def":{"name":"directory","visibility":"Public","body":"@path.parent"}},{"html_id":"on_preamble(root:RunnableRoot,group:RunnableGroup,preamble:String)-instance-method","name":"on_preamble","doc":"Invoked when a preamble is found in this manifest. *preamble*\nis the inner content of the preamble (i.e. without `---`s).","summary":"<p>Invoked when a preamble is found in this manifest.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"preamble","external_name":"preamble","restriction":"String"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, preamble : String)","args_html":"(root : <a href=\"../../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, preamble : <a href=\"../../../String.html\">String</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1613,"url":null},"def":{"name":"on_preamble","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"preamble","external_name":"preamble","restriction":"String"}],"visibility":"Public","body":"root.assign(group, preamble: preamble)"}},{"html_id":"populate(root:RunnableRoot,container:RunnableContainer,origin:RunnableGroup)-instance-method","name":"populate","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"origin","external_name":"origin","restriction":"RunnableGroup"}],"args_string":"(root : RunnableRoot, container : RunnableContainer, origin : RunnableGroup)","args_html":"(root : <a href=\"../../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, origin : <a href=\"../../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1726,"url":null},"def":{"name":"populate","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"origin","external_name":"origin","restriction":"RunnableGroup"}],"visibility":"Public","body":"population = container.child(transparent: false, ancestor: self)\ncontainer.append(population)\nroot.assign(origin, container: population)\nmanifests = [] of ::Tuple(Manifest::Present, RunnableGroup, Array(String), Array(String), Bool)\nclimb(root, origin) do |manifest, group, isself|\n  directives, fragments = ((manifest.preprocessed_content(root, group)).split(/\\s+/, remove_empty: true)).partition(&.in?(DIRECTIVES))\n  manifests << {manifest, group, directives, fragments, !isself}\n  if directives.includes?(\"noinherit\")\n    break\n  end\nend\nmanifests.reverse_each do |manifest, group, directives, fragments, inherited|\n  population = manifest.process(root, group, population, directives, fragments, inherited)\nend\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1754,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Manifest[\") << @path) << \"]\""}}]}]},{"html_id":"novika/Novika/Resolver/MoreThanOneAppError","path":"Novika/Resolver/MoreThanOneAppError.html","kind":"class","full_name":"Novika::Resolver::MoreThanOneAppError","name":"MoreThanOneAppError","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},"ancestors":[{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":119,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Raised when the user tries to run more than one app.","summary":"<p>Raised when the user tries to run more than one app.</p>","constructors":[{"html_id":"new(apps:Array(RunnableGroup))-class-method","name":"new","abstract":false,"args":[{"name":"apps","external_name":"apps","restriction":"Array(RunnableGroup)"}],"args_string":"(apps : Array(RunnableGroup))","args_html":"(apps : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>))","location":{"filename":"src/novika/resolver.cr","line_number":124,"url":null},"def":{"name":"new","args":[{"name":"apps","external_name":"apps","restriction":"Array(RunnableGroup)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(apps)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"apps:Array(Novika::Resolver::RunnableGroup)-instance-method","name":"apps","doc":"Returns the array of apps in the response; more than of\nthem there.","summary":"<p>Returns the array of apps in the response; more than of them there.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":122,"url":null},"def":{"name":"apps","visibility":"Public","body":"@apps"}}]},{"html_id":"novika/Novika/Resolver/Permission","path":"Novika/Resolver/Permission.html","kind":"enum","full_name":"Novika::Resolver::Permission","name":"Permission","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":50,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Undecided","name":"Undecided","value":"0"},{"id":"Allowed","name":"Allowed","value":"1"},{"id":"Denied","name":"Denied","value":"2"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Represents the permission state of a dependency.","summary":"<p>Represents the permission state of a dependency.</p>","instance_methods":[{"html_id":"allowed?-instance-method","name":"allowed?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":52,"url":null},"def":{"name":"allowed?","visibility":"Public","body":"self == Allowed"}},{"html_id":"denied?-instance-method","name":"denied?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":53,"url":null},"def":{"name":"denied?","visibility":"Public","body":"self == Denied"}},{"html_id":"undecided?-instance-method","name":"undecided?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":51,"url":null},"def":{"name":"undecided?","visibility":"Public","body":"self == Undecided"}}]},{"html_id":"novika/Novika/Resolver/PermissionServer","path":"Novika/Resolver/PermissionServer.html","kind":"class","full_name":"Novika::Resolver::PermissionServer","name":"PermissionServer","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Resolver/SignalReceiver","kind":"module","full_name":"Novika::Resolver::SignalReceiver","name":"SignalReceiver"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2715,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/SignalReceiver","kind":"module","full_name":"Novika::Resolver::SignalReceiver","name":"SignalReceiver"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Permission server allows to prompt the user for permissions, and\nsave the user's choices in the *permissions file*.","summary":"<p>Permission server allows to prompt the user for permissions, and save the user's choices in the <em>permissions file</em>.</p>","constructors":[{"html_id":"new(env:RunnableEnvironment,explicit:Array(RunnableQuery))-class-method","name":"new","doc":"Creates a new permission server.\n\n*resolver* is the resolver with which this server will talk about\nresolver-related things.\n\n*explicit* is a list of explicit runnable queries. An explicit\nquery is that query which was specified manually, e.g. via the\narguments. In other words, the user had to *type it* here and\nnow rather than \"acquire\" it from somewhere unknowingly. This\nlist is mainly used to be less annoying when it comes to asking\nfor permissions.","summary":"<p>Creates a new permission server.</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"explicit","external_name":"explicit","restriction":"Array(RunnableQuery)"}],"args_string":"(env : RunnableEnvironment, explicit : Array(RunnableQuery))","args_html":"(env : <a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a>, explicit : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>))","location":{"filename":"src/novika/resolver.cr","line_number":2729,"url":null},"def":{"name":"new","args":[{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"explicit","external_name":"explicit","restriction":"Array(RunnableQuery)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(env, explicit)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"answer(answer:String)-instance-method","name":"answer","doc":"Prints *answer* so that it can be seen by the user.","summary":"<p>Prints <em>answer</em> so that it can be seen by the user.</p>","abstract":false,"args":[{"name":"answer","external_name":"answer","restriction":"String"}],"args_string":"(answer : String)","args_html":"(answer : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2797,"url":null},"def":{"name":"answer","args":[{"name":"answer","external_name":"answer","restriction":"String"}],"visibility":"Public","body":"@answer.call(answer)"}},{"html_id":"ask?(question:String):String|Nil-instance-method","name":"ask?","doc":"Asks user a *question*, and returns the answer or an empty\nstring in case EOF was received.","summary":"<p>Asks user a <em>question</em>, and returns the answer or an empty string in case EOF was received.</p>","abstract":false,"args":[{"name":"question","external_name":"question","restriction":"String"}],"args_string":"(question : String) : String | Nil","args_html":"(question : <a href=\"../../String.html\">String</a>) : <a href=\"../../String.html\">String</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":2792,"url":null},"def":{"name":"ask?","args":[{"name":"question","external_name":"question","restriction":"String"}],"return_type":"String | ::Nil","visibility":"Public","body":"@ask.call(question)"}},{"html_id":"brief(dependency:RunnableCapability):String-instance-method","name":"brief","doc":"Returns a brief description of *dependency*.","summary":"<p>Returns a brief description of <em>dependency</em>.</p>","abstract":false,"args":[{"name":"dependency","external_name":"dependency","restriction":"RunnableCapability"}],"args_string":"(dependency : RunnableCapability) : String","args_html":"(dependency : <a href=\"../../Novika/Resolver/RunnableCapability.html\">RunnableCapability</a>) : <a href=\"../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":2786,"url":null},"def":{"name":"brief","args":[{"name":"dependency","external_name":"dependency","restriction":"RunnableCapability"}],"return_type":"String","visibility":"Public","body":"@env.brief(dependency)"}},{"html_id":"explicit?(dependency:Resolution::Dependency):Bool-instance-method","name":"explicit?","doc":"Returns whether *dependency* is explicit.\n\nThis is done by checking whether the *first* `RunnableQuery`\nancestor of *dependency* is in the explicit list. See `new`\nto learn what \"explicitness\" means.","summary":"<p>Returns whether <em>dependency</em> is explicit.</p>","abstract":false,"args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"args_string":"(dependency : Resolution::Dependency) : Bool","args_html":"(dependency : <a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a>) : Bool","location":{"filename":"src/novika/resolver.cr","line_number":2806,"url":null},"def":{"name":"explicit?","args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"return_type":"Bool","visibility":"Public","body":"dependency.each_ancestor do |ancestor|\n  if ancestor.is_a?(RunnableQuery)\n  else\n    next\n  end\n  return @explicit.any?(&.same?(ancestor))\nend\nfalse\n"}},{"html_id":"load-instance-method","name":"load","doc":"Fills the permissions hash with saved permissions.","summary":"<p>Fills the permissions hash with saved permissions.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2746,"url":null},"def":{"name":"load","visibility":"Public","body":"if permissions = @env.permissions?\nelse\n  return\nend\ncontent, path = permissions\nbegin\n  CSV.each_row(content.strip) do |__arg11|\n    dependent = __arg11[0]\n    dependency = __arg11[1]\n    state = __arg11[2]\n    if id = state.to_i?\n    else\n      next\n    end\n    if permission = Permission.from_value?(id)\n    else\n      next\n    end\n    @permissions[{dependent, dependency}] = permission\n  end\nrescue IndexError\n  raise(ResolverError.new(\"malformed 'permissions' file: #{path}\"))\nend\n"}},{"html_id":"query_permission?(container:RunnableContainer,dependency:Resolution::Dependency)-instance-method","name":"query_permission?","doc":"Queries (possibly prompts) and returns the permission state of\n*dependency* for the given *container*.","summary":"<p>Queries (possibly prompts) and returns the permission state of <em>dependency</em> for the given <em>container</em>.</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"args_string":"(container : RunnableContainer, dependency : Resolution::Dependency)","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, dependency : <a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2817,"url":null},"def":{"name":"query_permission?","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"visibility":"Public","body":"__temp_72 = dependency.signature(container)\n@permissions[__temp_72]? || (@permissions[__temp_72] = dependency.prompt?(self, for: container))\n"}},{"html_id":"receive(signal:Signal)-instance-method","name":"receive","doc":"Receives and reacts to a *signal* sent by `RunnableRoot`.","summary":"<p>Receives and reacts to a <em>signal</em> sent by <code><a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a></code>.</p>","abstract":false,"args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"args_string":"(signal : Signal)","args_html":"(signal : <a href=\"../../Novika/Resolver/Signal.html\">Signal</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2736,"url":null},"def":{"name":"receive","args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"visibility":"Public","body":"case signal\nwhen ToAskDo\n  @ask = signal.fn\nwhen ToAnswerDo\n  @answer = signal.fn\nwhen DoDiskLoad\n  load\nwhen DoDiskSave\n  save\nend"}},{"html_id":"save-instance-method","name":"save","doc":"Flushes the internal permissions store to disk. Can create the\npermissions file, if necessary.\n\nNote: this method does nothing in case the internal permissions\nstore is empty.","summary":"<p>Flushes the internal permissions store to disk.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2768,"url":null},"def":{"name":"save","visibility":"Public","body":"if @permissions.values.any?(&.allowed?)\nelse\n  return\nend\n@env.permissions do |io|\n  CSV.build(io) do |builder|\n    @permissions.each do |__arg13, permission|\n      dependent = __arg13[0]\n      dependency = __arg13[1]\n      if permission.undecided? || permission.denied?\n        next\n      end\n      builder.row(dependent, dependency, permission.to_i)\n    end\n  end\nend\n"}}]},{"html_id":"novika/Novika/Resolver/Query","path":"Novika/Resolver/Query.html","kind":"alias","full_name":"Novika::Resolver::Query","name":"Query","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":1047,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"(Path | String)","aliased_html":"Path | <a href=\"../../String.html\">String</a>","const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"}},{"html_id":"novika/Novika/Resolver/Resolution","path":"Novika/Resolver/Resolution.html","kind":"struct","full_name":"Novika::Resolver::Resolution","name":"Resolution","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":356,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Obtaining a set of resolution objects from an initial list of\nqueries is the central goal of the resolver.\n\nA resolution object points to a script and lists its dependencies.\nFurthermore, a resolution object also stores its so-called\nrunnable *sources*, which are `RunnableScript` objects that it\nwas derived from.","summary":"<p>Obtaining a set of resolution objects from an initial list of queries is the central goal of the resolver.</p>","constructors":[{"html_id":"new(script:RunnableScript,deps:Set(Dependency))-class-method","name":"new","doc":"Initializes a runnable resolution for the given runnable *script* and a\nset of resolution dependency objects *deps*.","summary":"<p>Initializes a runnable resolution for the given runnable <em>script</em> and a set of resolution dependency objects <em>deps</em>.</p>","abstract":false,"args":[{"name":"script","external_name":"script","restriction":"RunnableScript"},{"name":"deps","external_name":"deps","restriction":"Set(Dependency)"}],"args_string":"(script : RunnableScript, deps : Set(Dependency))","args_html":"(script : <a href=\"../../Novika/Resolver/RunnableScript.html\">RunnableScript</a>, deps : <a href=\"../../Set.html\">Set</a>(<a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Dependency</a>))","location":{"filename":"src/novika/resolver.cr","line_number":362,"url":null},"def":{"name":"new","args":[{"name":"script","external_name":"script","restriction":"RunnableScript"},{"name":"deps","external_name":"deps","restriction":"Set(Dependency)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(script, deps)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Two resolutions are considered equal when they point to the\nsame script on the disk.","summary":"<p>Two resolutions are considered equal when they point to the same script on the disk.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @abspath == (other.@abspath)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"abspath:Path-instance-method","name":"abspath","doc":"Returns the absolute path to this resolution.","summary":"<p>Returns the absolute path to this resolution.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":358,"url":null},"def":{"name":"abspath","return_type":"Path","visibility":"Public","body":"@abspath"}},{"html_id":"dump!(deps:Set(Dependency)|Nil=nil,sources:Array(RunnableScript)|Nil=nil)-instance-method","name":"dump!","doc":"Appends the dependencies of this resolution to *deps*, source scripts\nof this resolution to *sources*.","summary":"<p>Appends the dependencies of this resolution to <em>deps</em>, source scripts of this resolution to <em>sources</em>.</p>","abstract":false,"args":[{"name":"deps","default_value":"nil","external_name":"deps","restriction":"Set(Dependency) | ::Nil"},{"name":"sources","default_value":"nil","external_name":"sources","restriction":"Array(RunnableScript) | ::Nil"}],"args_string":"(deps : Set(Dependency) | Nil = nil, sources : Array(RunnableScript) | Nil = nil)","args_html":"(deps : <a href=\"../../Set.html\">Set</a>(<a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Dependency</a>) | Nil = <span class=\"n\">nil</span>, sources : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/RunnableScript.html\">RunnableScript</a>) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":369,"url":null},"def":{"name":"dump!","args":[{"name":"deps","default_value":"nil","external_name":"deps","restriction":"Set(Dependency) | ::Nil"},{"name":"sources","default_value":"nil","external_name":"sources","restriction":"Array(RunnableScript) | ::Nil"}],"visibility":"Public","body":"deps.try(&.concat(@deps))\nsources.try(&.concat(@sources))\n"}},{"html_id":"each_dependency(&:Dependency->)-instance-method","name":"each_dependency","doc":"Yields dependencies of this resolution.","summary":"<p>Yields dependencies of this resolution.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":382,"url":null},"def":{"name":"each_dependency","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Dependency ->)"},"visibility":"Public","body":"@deps.each do |dep|\n  yield dep\nend"}},{"html_id":"each_source_group(&:RunnableGroup->)-instance-method","name":"each_source_group","doc":"Yields all `RunnableGroup`s from the ancestry of source scripts of\nthis resolution. Does not yield the same group twice (sameness is\ndetermined with `==`/hash).","summary":"<p>Yields all <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s from the ancestry of source scripts of this resolution.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":389,"url":null},"def":{"name":"each_source_group","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup ->)"},"visibility":"Public","body":"visited = Set(RunnableGroup).new\n@sources.each do |source|\n  source.each_ancestor do |ancestor|\n    if ancestor.is_a?(RunnableGroup)\n    else\n      next\n    end\n    if ancestor.in?(visited)\n      next\n    end\n    yield ancestor\n    visited << ancestor\n  end\nend\n"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Two resolutions are considered equal when they point to the\nsame script on the disk.","summary":"<p>Two resolutions are considered equal when they point to the same script on the disk.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @abspath.hash(hasher)\nhasher\n"}},{"html_id":"merge!(other:Resolution):self-instance-method","name":"merge!","doc":"Mutably merges this and *other* resolutions.","summary":"<p>Mutably merges this and <em>other</em> resolutions.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Resolution"}],"args_string":"(other : Resolution) : self","args_html":"(other : <a href=\"../../Novika/Resolver/Resolution.html\">Resolution</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/resolver.cr","line_number":375,"url":null},"def":{"name":"merge!","args":[{"name":"other","external_name":"other","restriction":"Resolution"}],"return_type":"self","visibility":"Public","body":"other.dump!(@deps, @sources)\nself\n"}},{"html_id":"run(engine:Engine,script_block:Block):Block-instance-method","name":"run","doc":"Opens an instance of *script block* (aka *file block*) with *engine*.\n\nExtends *script block* itself with `__path__`, `__file__`; therefore,\nmutates *script block*.\n\nReturns the script block instance after evaluation.","summary":"<p>Opens an instance of <em>script block</em> (aka <em>file block</em>) with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"script_block","external_name":"script_block","restriction":"Block"}],"args_string":"(engine : Engine, script_block : Block) : Block","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, script_block : <a href=\"../../Novika/Block.html\">Block</a>) : <a href=\"../../Novika/Block.html\">Block</a>","location":{"filename":"src/novika/resolver.cr","line_number":408,"url":null},"def":{"name":"run","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"script_block","external_name":"script_block","restriction":"Block"}],"return_type":"Block","visibility":"Public","body":"script_block.at(Word.new(\"__path__\"), Quote.new(@abspath.parent.to_s))\nscript_block.at(Word.new(\"__file__\"), Quote.new(@abspath.to_s))\ninstance = script_block.instance\ninstance.schedule!(engine, stack: Block.new)\nengine.exhaust\ninstance\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":420,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(((((io << @abspath) << \" (\") << (@deps.join(\", \"))) << \") ← [\") << (@sources.join(\" | \"))) << \"]\""}}],"types":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency","path":"Novika/Resolver/Resolution/Dependency.html","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":430,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/RunnableCapability","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability"},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject"}],"namespace":{"html_id":"novika/Novika/Resolver/Resolution","kind":"struct","full_name":"Novika::Resolver::Resolution","name":"Resolution"},"doc":"Includers can be listed as dependencies in a `Resolution`.","summary":"<p>Includers can be listed as dependencies in a <code><a href=\"../../../Novika/Resolver/Resolution.html\">Resolution</a></code>.</p>","instance_methods":[{"html_id":"allow-instance-method","name":"allow","doc":"Sets the permission state of this dependency to \"allowed\".","summary":"<p>Sets the permission state of this dependency to &quot;allowed&quot;.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":459,"url":null},"def":{"name":"allow","visibility":"Public","body":"@permission = Permission::Allowed"}},{"html_id":"allowed?:Bool-instance-method","name":"allowed?","doc":"Returns whether this dependency is allowed. Depends on the permission\nstate of this dependency, which is normally set by `PermissionServer`.","summary":"<p>Returns whether this dependency is allowed.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":454,"url":null},"def":{"name":"allowed?","return_type":"Bool","visibility":"Public","body":"@permission.allowed?"}},{"html_id":"deny-instance-method","name":"deny","doc":"Sets the permission state of this dependency to \"denied\".","summary":"<p>Sets the permission state of this dependency to &quot;denied&quot;.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":464,"url":null},"def":{"name":"deny","visibility":"Public","body":"@permission = Permission::Denied"}},{"html_id":"enable(*,incaps:CapabilityCollection)-instance-method","name":"enable","doc":"If this dependency is `allowed?`, enables it in the given\ncapability collection *caps*.","summary":"<p>If this dependency is <code><a href=\"../../../Novika/Resolver/Resolution/Dependency.html#allowed%3F%3ABool-instance-method\">#allowed?</a></code>, enables it in the given capability collection <em>caps</em>.</p>","abstract":true,"args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"args_string":"(*, in caps : CapabilityCollection)","args_html":"(*, in caps : <a href=\"../../../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/resolver.cr","line_number":443,"url":null},"def":{"name":"enable","args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"splat_index":0,"visibility":"Public","body":""}},{"html_id":"prompt?(server:PermissionServer,*,forcontainer:RunnableContainer):Permission-instance-method","name":"prompt?","doc":"Promps the user for whether the use of this dependency should\nbe allowed in *container*'s `RunnableEnvironment`. Returns the\nresulting `Permission`.","summary":"<p>Promps the user for whether the use of this dependency should be allowed in <em>container</em>'s <code><a href=\"../../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a></code>.</p>","abstract":true,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"args_string":"(server : PermissionServer, *, for container : RunnableContainer) : Permission","args_html":"(server : <a href=\"../../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>, *, for container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../../Novika/Resolver/Permission.html\">Permission</a>","location":{"filename":"src/novika/resolver.cr","line_number":448,"url":null},"def":{"name":"prompt?","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"splat_index":1,"return_type":"Permission","visibility":"Public","body":""}},{"html_id":"request(server:PermissionServer,*,forcontainer:RunnableContainer)-instance-method","name":"request","doc":"Communicates with the given permission *server* in order to\ndetermine whether the use of this dependency should be allowed\nor denied to *container*.","summary":"<p>Communicates with the given permission <em>server</em> in order to determine whether the use of this dependency should be allowed or denied to <em>container</em>.</p>","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"args_string":"(server : PermissionServer, *, for container : RunnableContainer)","args_html":"(server : <a href=\"../../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>, *, for container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":471,"url":null},"def":{"name":"request","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"splat_index":1,"visibility":"Public","body":"if @permission.undecided?\nelse\n  return\nend\nif server.explicit?(self)\n  @permission = Permission::Allowed\n  return\nend\n@permission = server.query_permission?(container, self)\n"}},{"html_id":"signature(container:RunnableContainer):Signature-instance-method","name":"signature","doc":"Returns the signature of this dependency which can be used\nto identify it, most notably in the 'permissions' file.\n\n*container*, assumed to contain this dependency, may be used\nto derive the signature.","summary":"<p>Returns the signature of this dependency which can be used to identify it, most notably in the 'permissions' file.</p>","abstract":true,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer) : Signature","args_html":"(container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../../Novika/Resolver/Resolution/Dependency/Signature.html\">Signature</a>","location":{"filename":"src/novika/resolver.cr","line_number":439,"url":null},"def":{"name":"signature","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"Signature","visibility":"Public","body":""}}],"types":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency/DefaultPrompt","path":"Novika/Resolver/Resolution/Dependency/DefaultPrompt.html","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency::DefaultPrompt","name":"DefaultPrompt","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":488,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/RunnableCapability","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability"},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject"}],"namespace":{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},"doc":"Provides the includer with an implementation of `Dependency#prompt?`\nin turn requiring it to simply specify a `label`.","summary":"<p>Provides the includer with an implementation of <code><a href=\"../../../../Novika/Resolver/Resolution/Dependency.html#prompt%3F%28server%3APermissionServer%2C%2A%2Cforcontainer%3ARunnableContainer%29%3APermission-instance-method\">Dependency#prompt?</a></code> in turn requiring it to simply specify a <code><a href=\"../../../../Novika/Resolver/Resolution/Dependency/DefaultPrompt.html#label%28server%3APermissionServer%29%3AString-instance-method\">#label</a></code>.</p>","instance_methods":[{"html_id":"description?(server:PermissionServer):String|Nil-instance-method","name":"description?","doc":"Returns a user-friendly description of this dependency, or nil\nif none can be given. The returned description should be suitable\nfor displaying to the user in a prompt, and should read well after\n\"which\", as in \"which [exposes this and that]\", \"which [allows\nthis and that]\", etc., where words in brackets are those of\nthe description.\n\n*server* is the server that will then use the description in\none way or another, in case it is present. You may also choose\nto derive the description with *server*'s help.","summary":"<p>Returns a user-friendly description of this dependency, or nil if none can be given.</p>","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"args_string":"(server : PermissionServer) : String | Nil","args_html":"(server : <a href=\"../../../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>) : <a href=\"../../../../String.html\">String</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":513,"url":null},"def":{"name":"description?","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"return_type":"String | ::Nil","visibility":"Public","body":""}},{"html_id":"envelope(container:RunnableContainer)-instance-method","name":"envelope","doc":"Returns the string representation of this dependency's envelope\n(its container so to speak). The runtime (not specialize-time!)\n*container* is provided as a fallback option (albeit a *very bad one*).","summary":"<p>Returns the string representation of this dependency's envelope (its container so to speak).</p>","abstract":true,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer)","args_html":"(container : <a href=\"../../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":501,"url":null},"def":{"name":"envelope","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":""}},{"html_id":"label(server:PermissionServer):String-instance-method","name":"label","doc":"Returns a user-friendly string representation of this dependency.\nThe returned string should be suitable for displaying to the user\nin a prompt.\n\n*server* is the permission server that will then use the label in\none way or another. You may also choose to derive the label with\n*server*'s help.","summary":"<p>Returns a user-friendly string representation of this dependency.</p>","abstract":true,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"args_string":"(server : PermissionServer) : String","args_html":"(server : <a href=\"../../../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>) : <a href=\"../../../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":496,"url":null},"def":{"name":"label","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"return_type":"String","visibility":"Public","body":""}},{"html_id":"prompt?(server:PermissionServer,*,forcontainer:RunnableContainer):Permission-instance-method","name":"prompt?","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"args_string":"(server : PermissionServer, *, for container : RunnableContainer) : Permission","args_html":"(server : <a href=\"../../../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>, *, for container : <a href=\"../../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../../../Novika/Resolver/Permission.html\">Permission</a>","location":{"filename":"src/novika/resolver.cr","line_number":516,"url":null},"def":{"name":"prompt?","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"splat_index":1,"return_type":"Permission","visibility":"Public","body":"label = label(server)\nprompt = String.build do |io|\n  (((io << \"Allow \") << (envelope(container))) << \" to load \") << label\n  if description = description?(server)\n    (io << \", which \") << description\n  end\n  ((((io << \"? [\") << \"y\".colorize.underline) << \" yes | \") << \"?\".colorize.underline) << \" help | <other> no]\"\nend\nloop do\n  case server.ask?(prompt)\n  when .nil?\n    next\n  when /^\\s*([Yy?])\\s*$/\n    if $~[1] == \"?\"\n    else\n      return Permission::Allowed\n    end\n    answer = String.build do |io|\n      backtrace(io, indent: 2, annex: \"Showing where #{label} was referenced.\")\n      io.puts\n    end\n    server.answer(answer)\n    next\n  end\n  return Permission::Denied\nend\n"}}]},{"html_id":"novika/Novika/Resolver/Resolution/Dependency/Signature","path":"Novika/Resolver/Resolution/Dependency/Signature.html","kind":"alias","full_name":"Novika::Resolver::Resolution::Dependency::Signature","name":"Signature","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":432,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"Tuple(String, String)","aliased_html":"{<a href=\"../../../../String.html\">String</a>, <a href=\"../../../../String.html\">String</a>}","const":false,"namespace":{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},"doc":"Represents the signature of a dependency.","summary":"<p>Represents the signature of a dependency.</p>"}]}]},{"html_id":"novika/Novika/Resolver/ResolutionSet","path":"Novika/Resolver/ResolutionSet.html","kind":"struct","full_name":"Novika::Resolver::ResolutionSet","name":"ResolutionSet","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":553,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Represents an ordered set of `Resolution` objects.","summary":"<p>Represents an ordered set of <code><a href=\"../../Novika/Resolver/Resolution.html\">Resolution</a></code> objects.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":554,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"all_come_from_same?(&:RunnableGroup->Bool):Bool-instance-method","name":"all_come_from_same?","doc":"Returns whether all resolutions from this set come from the same\n`RunnableGroup`. `RunnableGroup` to match is selected by applying\nthe block to all `RunnableGroup`s in this set.","summary":"<p>Returns whether all resolutions from this set come from the same <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":614,"url":null},"def":{"name":"all_come_from_same?","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup -> Bool)"},"return_type":"Bool","visibility":"Public","body":"if empty?\n  return false\nend\nmatching = groups.select! do |group|\n  yield group\nend\nif size > matching.size\n  return false\nend\nfirst = matching.first\nif matching.all?(&.same?(first))\nelse\n  return false\nend\ntrue\n"}},{"html_id":"app?:Bool-instance-method","name":"app?","doc":"Returns whether all resolutions in this set come from the same\napplication `RunnableGroup`.","summary":"<p>Returns whether all resolutions in this set come from the same application <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":628,"url":null},"def":{"name":"app?","return_type":"Bool","visibility":"Public","body":"all_come_from_same?(&.app?)"}},{"html_id":"append(resolution:Resolution)-instance-method","name":"append","doc":"Appends a *resolution* to this set. In case this set already\ncontains a resolution for the same path, the two resolutions\nare merged using `Resolution#merge!`.","summary":"<p>Appends a <em>resolution</em> to this set.</p>","abstract":false,"args":[{"name":"resolution","external_name":"resolution","restriction":"Resolution"}],"args_string":"(resolution : Resolution)","args_html":"(resolution : <a href=\"../../Novika/Resolver/Resolution.html\">Resolution</a>)","location":{"filename":"src/novika/resolver.cr","line_number":571,"url":null},"def":{"name":"append","args":[{"name":"resolution","external_name":"resolution","restriction":"Resolution"}],"visibility":"Public","body":"if index = @resolutions.index(resolution)\n  @resolutions[index] = @resolutions[index].merge!(resolution)\n  return\nend\n@resolutions << resolution\n"}},{"html_id":"append(set:ResolutionSet)-instance-method","name":"append","doc":"Appends an entire resolution *set* at once. Essentially the same\nas appending each `Resolution` from *set*.","summary":"<p>Appends an entire resolution <em>set</em> at once.</p>","abstract":false,"args":[{"name":"set","external_name":"set","restriction":"ResolutionSet"}],"args_string":"(set : ResolutionSet)","args_html":"(set : <a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a>)","location":{"filename":"src/novika/resolver.cr","line_number":582,"url":null},"def":{"name":"append","args":[{"name":"set","external_name":"set","restriction":"ResolutionSet"}],"visibility":"Public","body":"set.each do |resolution|\n  append(resolution)\nend"}},{"html_id":"each(&:Resolution->)-instance-method","name":"each","doc":"Yields resolutions in this resolution set.","summary":"<p>Yields resolutions in this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":587,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Resolution ->)"},"visibility":"Public","body":"@resolutions.each do |resolution|\n  yield resolution\nend"}},{"html_id":"each_designation(root:RunnableRoot,&:Designation->)-instance-method","name":"each_designation","doc":"Yields environment designations for the given runnable *root*.\n\n*Environment designations* are resolution sets coupled to an\nenvironment. That is, an environment designation is a \"token\"\nstating *this* environment should handle resolutions out of\n*that* resolution set.","summary":"<p>Yields environment designations for the given runnable <em>root</em>.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"args_string":"(root : RunnableRoot, & : Designation -> )","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, & : <a href=\"../../Novika/Resolver/Designation.html\">Designation</a> -> )","location":{"filename":"src/novika/resolver.cr","line_number":713,"url":null},"def":{"name":"each_designation","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Designation ->)"},"visibility":"Public","body":"visited = Set(Resolution).new\ndesignations = {} of RunnableEnvironment => ResolutionSet\neach_group do |group, resolution|\n  if resolution.in?(visited)\n    next\n  end\n  if container = root.containerof?(group)\n  else\n    return\n  end\n  set = (  __temp_64 = container.env\n  designations[__temp_64]? || (designations[__temp_64] = ResolutionSet.new)\n)\n  set.append(resolution)\n  visited << resolution\nend\ndefault = (__temp_66 = root.default_env\ndesignations[__temp_66]? || (designations[__temp_66] = ResolutionSet.new)\n)\neach do |resolution|\n  if resolution.in?(visited)\n    next\n  end\n  default.append(resolution)\nend\ndesignations.each do |env, set|\n  yield env.designate(set)\nend\n"}},{"html_id":"each_group(&:RunnableGroup,Resolution->)-instance-method","name":"each_group","doc":"Yields all `RunnableGroup` objects that have contributed to this\nresolution set. The yielded groups can repeat.","summary":"<p>Yields all <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code> objects that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":593,"url":null},"def":{"name":"each_group","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup, Resolution ->)"},"visibility":"Public","body":"each do |resolution|\n  resolution.each_source_group do |group|\n    yield group, resolution\n  end\nend"}},{"html_id":"each_preamble_with_group(root:RunnableRoot,&:String,RunnableGroup->)-instance-method","name":"each_preamble_with_group","doc":"Yields preambles of unique application and library `RunnableGroup`s\nthat have contributed to this resolution set, as well as the\ngroups themselves.","summary":"<p>Yields preambles of unique application and library <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s that have contributed to this resolution set, as well as the groups themselves.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"args_string":"(root : RunnableRoot, & : String, RunnableGroup -> )","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, & : <a href=\"../../String.html\">String</a>, <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a> -> )","location":{"filename":"src/novika/resolver.cr","line_number":743,"url":null},"def":{"name":"each_preamble_with_group","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(String, RunnableGroup ->)"},"visibility":"Public","body":"each_unique_group do |group|\n  if group.app? || group.lib?\n  else\n    next\n  end\n  if preamble = root.preambleof?(group)\n  else\n    next\n  end\n  yield preamble, group\nend"}},{"html_id":"each_unique_app(&:RunnableGroup->)-instance-method","name":"each_unique_app","doc":"Yields unique application `RunnableGroup`s that have contributed\nto this resolution set.","summary":"<p>Yields unique application <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":652,"url":null},"def":{"name":"each_unique_app","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup ->)"},"visibility":"Public","body":"each_unique_group do |group|\n  if group.app?\n  else\n    next\n  end\n  yield group\nend"}},{"html_id":"each_unique_dependency(&:Resolution::Dependency->)-instance-method","name":"each_unique_dependency","doc":"Yields all unique `Resolution::Dependency` objects in\nthis resolution set.","summary":"<p>Yields all unique <code><a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a></code> objects in this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":680,"url":null},"def":{"name":"each_unique_dependency","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Resolution::Dependency ->)"},"visibility":"Public","body":"visited = Set(Resolution::Dependency).new\neach do |resolution|\n  resolution.each_dependency do |dependency|\n    if dependency.in?(visited)\n      next\n    end\n    yield dependency\n    visited << dependency\n  end\nend\n"}},{"html_id":"each_unique_dependency_with_dependents(&:Resolution::Dependency,ResolutionSet->)-instance-method","name":"each_unique_dependency_with_dependents","doc":"Yields each unique `Resolution::Dependency` object followed by\na `ResolutionSet` of its dependents.","summary":"<p>Yields each unique <code><a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a></code> object followed by a <code><a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a></code> of its dependents.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":694,"url":null},"def":{"name":"each_unique_dependency_with_dependents","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Resolution::Dependency, ResolutionSet ->)"},"visibility":"Public","body":"map = {} of Resolution::Dependency => ResolutionSet\neach do |resolution|\n  resolution.each_dependency do |dependency|\n    set = (    __temp_62 = dependency\n    map[__temp_62]? || (map[__temp_62] = ResolutionSet.new)\n)\n    set.append(resolution)\n  end\nend\nmap.each do |dependency, set|\n  yield dependency, set\nend\n"}},{"html_id":"each_unique_group(&:RunnableGroup->)-instance-method","name":"each_unique_group","doc":"Yields all `RunnableGroup` objects that have contributed to this\nresolution set. The yielded groups do not repeat.","summary":"<p>Yields all <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code> objects that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":640,"url":null},"def":{"name":"each_unique_group","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup ->)"},"visibility":"Public","body":"visited = Set(RunnableGroup).new\neach_group do |group|\n  if group.in?(visited)\n    next\n  end\n  yield group\n  visited << group\nend\n"}},{"html_id":"each_unique_lib(&:RunnableGroup->)-instance-method","name":"each_unique_lib","doc":"Yields unique library `RunnableGroup`s that have contributed to\nthis resolution set.","summary":"<p>Yields unique library <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":671,"url":null},"def":{"name":"each_unique_lib","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableGroup ->)"},"visibility":"Public","body":"each_unique_group do |group|\n  if group.lib?\n  else\n    next\n  end\n  yield group\nend"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns whether there are no resolutions in this resolution set.","summary":"<p>Returns whether there are no resolutions in this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":564,"url":null},"def":{"name":"empty?","visibility":"Public","body":"size.zero?"}},{"html_id":"groups:Array(RunnableGroup)-instance-method","name":"groups","doc":"Returns an array of `RunnableGroup` objects that have contributed\nto this resolution set. Objects in the array can repeat.","summary":"<p>Returns an array of <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code> objects that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":603,"url":null},"def":{"name":"groups","return_type":"Array(RunnableGroup)","visibility":"Public","body":"groups = [] of RunnableGroup\neach_group do |group|\n  groups << group\nend\ngroups\n"}},{"html_id":"lib?:Bool-instance-method","name":"lib?","doc":"Returns whether all resolutions in this set come from the same\nlibrary `RunnableGroup`.","summary":"<p>Returns whether all resolutions in this set come from the same library <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":634,"url":null},"def":{"name":"lib?","return_type":"Bool","visibility":"Public","body":"all_come_from_same?(&.lib?)"}},{"html_id":"size-instance-method","name":"size","doc":"Returns the amount of resolutions in this resolution set.","summary":"<p>Returns the amount of resolutions in this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":559,"url":null},"def":{"name":"size","visibility":"Public","body":"@resolutions.size"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":751,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io.puts(\"ResolutionSet\")\neach do |resolution|\n  (io << \" | \") << resolution\n  io.puts\nend\n"}},{"html_id":"unique_apps:Array(RunnableGroup)-instance-method","name":"unique_apps","doc":"Returns an array of unique application `RunnableGroup`s that have\ncontributed to this resolution set.","summary":"<p>Returns an array of unique application <code><a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a></code>s that have contributed to this resolution set.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":661,"url":null},"def":{"name":"unique_apps","return_type":"Array(RunnableGroup)","visibility":"Public","body":"unique_apps = [] of RunnableGroup\neach_unique_app do |app|\n  unique_apps << app\nend\nunique_apps\n"}}]},{"html_id":"novika/Novika/Resolver/ResolverError","path":"Novika/Resolver/ResolverError.html","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError","abstract":false,"superclass":{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":95,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/Resolver/MoreThanOneAppError","kind":"class","full_name":"Novika::Resolver::MoreThanOneAppError","name":"MoreThanOneAppError"},{"html_id":"novika/Novika/Resolver/ResponseRejectedError","kind":"class","full_name":"Novika::Resolver::ResponseRejectedError","name":"ResponseRejectedError"},{"html_id":"novika/Novika/Resolver/RunnableError","kind":"class","full_name":"Novika::Resolver::RunnableError","name":"RunnableError"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Base class for resolver and resolver-related exceptions.","summary":"<p>Base class for resolver and resolver-related exceptions.</p>"},{"html_id":"novika/Novika/Resolver/Response","path":"Novika/Resolver/Response.html","kind":"struct","full_name":"Novika::Resolver::Response","name":"Response","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Resolver/SignalReceiver","kind":"module","full_name":"Novika::Resolver::SignalReceiver","name":"SignalReceiver"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2825,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/SignalReceiver","kind":"module","full_name":"Novika::Resolver::SignalReceiver","name":"SignalReceiver"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"A mutable response object which is tightly coupled to `Session`,\ndesigned for reuse throughout multiple (rounds of) queries to\nthe latter.","summary":"<p>A mutable response object which is tightly coupled to <code><a href=\"../../Novika/Resolver/Session.html\">Session</a></code>, designed for reuse throughout multiple (rounds of) queries to the latter.</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2840,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"accepted_set:ResolutionSet-instance-method","name":"accepted_set","doc":"Joins all accepted resolution sets of this response into one\nlarge resolution set, and returns it. Does not distinguish between\n*queried-for* and *wished* resolution sets.\n\nSee `AcceptionRoute` to learn about the difference between\n*queried-for* and *wished* routes of set acception.","summary":"<p>Joins all accepted resolution sets of this response into one large resolution set, and returns it.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2872,"url":null},"def":{"name":"accepted_set","return_type":"ResolutionSet","visibility":"Public","body":"accepted_set = ResolutionSet.new\n@accepted.each do |__arg15|\n  set = __arg15[1]\n  accepted_set.append(set)\nend\naccepted_set\n"}},{"html_id":"drop_wish(&:RunnableQuery->)-instance-method","name":"drop_wish","doc":"Yields wishes from this response's wishlist, then clears\nthe wishlist (so that this response can perhaps be reused).","summary":"<p>Yields wishes from this response's wishlist, then clears the wishlist (so that this response can perhaps be reused).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2906,"url":null},"def":{"name":"drop_wish","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableQuery ->)"},"visibility":"Public","body":"@wishlist.each do |wish|\n  yield wish\nend\n@wishlist.clear\n"}},{"html_id":"each_ignored_runnable(&:Runnable->)-instance-method","name":"each_ignored_runnable","doc":"Yields runnables that were ignored.","summary":"<p>Yields runnables that were ignored.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2900,"url":null},"def":{"name":"each_ignored_runnable","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Runnable ->)"},"visibility":"Public","body":"@ignored.each do |runnable|\n  yield runnable\nend"}},{"html_id":"each_rejected_runnable(&:Runnable->)-instance-method","name":"each_rejected_runnable","doc":"Yields runnables that were rejected.","summary":"<p>Yields runnables that were rejected.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2895,"url":null},"def":{"name":"each_rejected_runnable","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Runnable ->)"},"visibility":"Public","body":"@rejected.each do |runnable|\n  yield runnable\nend"}},{"html_id":"queried_for_set:ResolutionSet-instance-method","name":"queried_for_set","doc":"Joins all *queried-for* accepted resolution sets of this response\ninto one large resolution set, and returns it.\n\nSee `AcceptionRoute` to learn about the difference between\n*queried-for* and *wished* routes of set acception.","summary":"<p>Joins all <em>queried-for</em> accepted resolution sets of this response into one large resolution set, and returns it.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2885,"url":null},"def":{"name":"queried_for_set","return_type":"ResolutionSet","visibility":"Public","body":"queried_for_set = ResolutionSet.new\n@accepted.each do |__arg16|\n  route = __arg16[0]\n  set = __arg16[1]\n  if route.query?\n  else\n    next\n  end\n  queried_for_set.append(set)\nend\nqueried_for_set\n"}},{"html_id":"receive(signal:Signal)-instance-method","name":"receive","doc":"Receives and reacts to a *signal* sent by `RunnableRoot`.","summary":"<p>Receives and reacts to a <em>signal</em> sent by <code><a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a></code>.</p>","abstract":false,"args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"args_string":"(signal : Signal)","args_html":"(signal : <a href=\"../../Novika/Resolver/Signal.html\">Signal</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2847,"url":null},"def":{"name":"receive","args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"visibility":"Public","body":"case signal\nwhen RunnableIgnored\n  @ignored << signal.runnable\nend"}},{"html_id":"successful?:Bool-instance-method","name":"successful?","doc":"Returns whether this response is successful, in that it has no\nrejected runnables.","summary":"<p>Returns whether this response is successful, in that it has no rejected runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2862,"url":null},"def":{"name":"successful?","return_type":"Bool","visibility":"Public","body":"@rejected.empty?"}},{"html_id":"wishless?:Bool-instance-method","name":"wishless?","doc":"Returns `true` if this response does not \"wish\" to make any more\nqueries before its accepted sets can be inspected.","summary":"<p>Returns <code>true</code> if this response does not &quot;wish&quot; to make any more queries before its accepted sets can be inspected.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2856,"url":null},"def":{"name":"wishless?","return_type":"Bool","visibility":"Public","body":"@wishlist.empty?"}}],"types":[{"html_id":"novika/Novika/Resolver/Response/AcceptionRoute","path":"Novika/Resolver/Response/AcceptionRoute.html","kind":"enum","full_name":"Novika::Resolver::Response::AcceptionRoute","name":"AcceptionRoute","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2829,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Wish","name":"Wish","value":"0","doc":"The resolution set was accepted due to a *wish*: some runnable\nout there \"wished\" that runnables from the set were there, and\nhere they are.","summary":"<p>The resolution set was accepted due to a <em>wish</em>: some runnable out there &quot;wished&quot; that runnables from the set were there, and here they are.</p>"},{"id":"Query","name":"Query","value":"1","doc":"The resolution set was explicitly mentioned by the user\nsomewhere (queried for).","summary":"<p>The resolution set was explicitly mentioned by the user somewhere (queried for).</p>"}],"namespace":{"html_id":"novika/Novika/Resolver/Response","kind":"struct","full_name":"Novika::Resolver::Response","name":"Response"},"doc":"Represents the way a resolution set was accepted.","summary":"<p>Represents the way a resolution set was accepted.</p>","instance_methods":[{"html_id":"query?-instance-method","name":"query?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2837,"url":null},"def":{"name":"query?","visibility":"Public","body":"self == Query"}},{"html_id":"wish?-instance-method","name":"wish?","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2833,"url":null},"def":{"name":"wish?","visibility":"Public","body":"self == Wish"}}]}]},{"html_id":"novika/Novika/Resolver/ResponseRejectedError","path":"Novika/Resolver/ResponseRejectedError.html","kind":"class","full_name":"Novika::Resolver::ResponseRejectedError","name":"ResponseRejectedError","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},"ancestors":[{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":109,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Raised when there are rejected runnables in a response.","summary":"<p>Raised when there are rejected runnables in a response.</p>","constructors":[{"html_id":"new(response:Response)-class-method","name":"new","abstract":false,"args":[{"name":"response","external_name":"response","restriction":"Response"}],"args_string":"(response : Response)","args_html":"(response : <a href=\"../../Novika/Resolver/Response.html\">Response</a>)","location":{"filename":"src/novika/resolver.cr","line_number":113,"url":null},"def":{"name":"new","args":[{"name":"response","external_name":"response","restriction":"Response"}],"visibility":"Public","body":"_ = allocate\n_.initialize(response)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"response:Novika::Resolver::Response-instance-method","name":"response","doc":"Returns the response which contains some rejected runnables.","summary":"<p>Returns the response which contains some rejected runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":111,"url":null},"def":{"name":"response","visibility":"Public","body":"@response"}}]},{"html_id":"novika/Novika/Resolver/Runnable","path":"Novika/Resolver/Runnable.html","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable","abstract":true,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":919,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"}],"subclasses":[{"html_id":"novika/Novika/Resolver/RunnableCapability","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability"},{"html_id":"novika/Novika/Resolver/RunnableContainer","kind":"class","full_name":"Novika::Resolver::RunnableContainer","name":"RunnableContainer"},{"html_id":"novika/Novika/Resolver/RunnableDir","kind":"class","full_name":"Novika::Resolver::RunnableDir","name":"RunnableDir"},{"html_id":"novika/Novika/Resolver/RunnableGroup","kind":"class","full_name":"Novika::Resolver::RunnableGroup","name":"RunnableGroup"},{"html_id":"novika/Novika/Resolver/RunnableQuery","kind":"class","full_name":"Novika::Resolver::RunnableQuery","name":"RunnableQuery"},{"html_id":"novika/Novika/Resolver/RunnableScript","kind":"class","full_name":"Novika::Resolver::RunnableScript","name":"RunnableScript"},{"html_id":"novika/Novika/Resolver/RunnableSelector","kind":"class","full_name":"Novika::Resolver::RunnableSelector","name":"RunnableSelector"},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject"},{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Base class of all runnables.\n\nThe main basic property of all runnables is that they can be\n*rewritten* into other runnables, oftentimes of a more specific\nkind. Additionally, runnable objects are the head of their history\nlinked list, allowing clients to observe how the runnable of\ninterest came to be.","summary":"<p>Base class of all runnables.</p>","constructors":[{"html_id":"new(ancestor:Ancestor|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"args_string":"(ancestor : Ancestor | Nil = nil)","args_html":"(ancestor : <a href=\"../../Novika/Resolver/Runnable/Ancestor.html\">Ancestor</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":959,"url":null},"def":{"name":"new","args":[{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"ancestor?:Ancestor|Nil-instance-method","name":"ancestor?","doc":"Returns the ancestor of this runnable, or nil if there is\nno ancestor.","summary":"<p>Returns the ancestor of this runnable, or nil if there is no ancestor.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":957,"url":null},"def":{"name":"ancestor?","return_type":"Ancestor | ::Nil","visibility":"Public","body":"@ancestor"}},{"html_id":"ancestors:Array(Ancestor)-instance-method","name":"ancestors","doc":"Returns an array of ancestors of this runnable, starting from\nthe most recent ancestor and ending with the oldest one.","summary":"<p>Returns an array of ancestors of this runnable, starting from the most recent ancestor and ending with the oldest one.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":976,"url":null},"def":{"name":"ancestors","return_type":"Array(Ancestor)","visibility":"Public","body":"ancestors = [] of Ancestor\neach_ancestor do |ancestor|\n  ancestors << ancestor\nend\nancestors\n"}},{"html_id":"backtrace(io:IO,indent:Int32=0,annex:String|Nil=nil)-instance-method","name":"backtrace","doc":"Appends ancestors of this runnable (its \"history\") to *io*.\n\n*indent* can be used to specify the amount of whitespace\npreceding each line.\n\n*annex* is the additional bit of text displayed below the\nbacktrace. For instance, in case of an error, it can contain\nthe error message.","summary":"<p>Appends ancestors of this runnable (its &quot;history&quot;) to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"indent","default_value":"0","external_name":"indent","restriction":"Int32"},{"name":"annex","default_value":"nil","external_name":"annex","restriction":"String | ::Nil"}],"args_string":"(io : IO, indent : Int32 = 0, annex : String | Nil = nil)","args_html":"(io : IO, indent : Int32 = <span class=\"n\">0</span>, annex : <a href=\"../../String.html\">String</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":992,"url":null},"def":{"name":"backtrace","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"indent","default_value":"0","external_name":"indent","restriction":"Int32"},{"name":"annex","default_value":"nil","external_name":"annex","restriction":"String | ::Nil"}],"visibility":"Public","body":"backtrace = ancestors.reverse\nbacktrace << self\nio << \"  ┬\\n\"\nws = \" \" * indent\nbacktrace.each do |runnable|\n  (io << ws) << \"╿ in \"\n  if runnable.is_a?(RunnableContainer)\n    content = String.build do |inner|\n      runnable.to_s(inner, lead: 0, indent: indent + 2)\n    end\n    skip = true\n    content.each_line(chomp: true) do |line|\n      if skip\n        io.puts(line)\n        skip = false\n        next\n      end\n      ((io << \"  │\") << line) << '\\n'\n    end\n  else\n    (io << runnable) << '\\n'\n  end\nend\nif annex\nelse\n  return\nend\n((io << \"  │\\n ╰┴─ \") << annex) << '\\n'\n"}},{"html_id":"backtrace(*args,**kwargs,&:IO->)-instance-method","name":"backtrace","doc":"Yields an `IO` where you can write the *annex*, otherwise the\nsame as `backtrace`.","summary":"<p>Yields an <code>IO</code> where you can write the <em>annex</em>, otherwise the same as <code><a href=\"../../Novika/Resolver/Runnable.html#backtrace%28io%3AIO%2Cindent%3AInt32%3D0%2Cannex%3AString%7CNil%3Dnil%29-instance-method\">#backtrace</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs, & : IO -> )","args_html":"(*args, **kwargs, & : IO -> )","location":{"filename":"src/novika/resolver.cr","line_number":1025,"url":null},"def":{"name":"backtrace","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","external_name":"kwargs","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(IO ->)"},"visibility":"Public","body":"annex = String.build do |io|\n  yield io\nend\nbacktrace(*args, **kwargs, annex: annex)\n"}},{"html_id":"constituents:Array(Runnable)-instance-method","name":"constituents","doc":"Returns an array with contained runnables. If none, returns an\narray with `self`.","summary":"<p>Returns an array with contained runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1033,"url":null},"def":{"name":"constituents","return_type":"Array(Runnable)","visibility":"Public","body":"[self] of Runnable"}},{"html_id":"each_ancestor(&:Ancestor->)-instance-method","name":"each_ancestor","doc":"Yields ancestors of this runnable.\n\nBy tracing the ancestry of `self`, you are effectively exploring\nhow it came to be.","summary":"<p>Yields ancestors of this runnable.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":966,"url":null},"def":{"name":"each_ancestor","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Ancestor ->)"},"visibility":"Public","body":"runnable = @ancestor\nwhile runnable\n  yield runnable\n  runnable = runnable.ancestor?\nend\n"}},{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":true,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1044,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":""}}],"types":[{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","path":"Novika/Resolver/Runnable/Ancestor.html","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":921,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/Manifest/Present","kind":"module","full_name":"Novika::Resolver::Manifest::Present","name":"Present"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"}],"namespace":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"doc":"Represents a `Runnable` ancestor.","summary":"<p>Represents a <code><a href=\"../../../Novika/Resolver/Runnable.html\">Runnable</a></code> ancestor.</p>","instance_methods":[{"html_id":"ancestor?:Ancestor|Nil-instance-method","name":"ancestor?","doc":"Returns the ancestor of this object, or nil if there is\nno ancestor.","summary":"<p>Returns the ancestor of this object, or nil if there is no ancestor.</p>","abstract":true,"location":{"filename":"src/novika/resolver.cr","line_number":924,"url":null},"def":{"name":"ancestor?","return_type":"Ancestor | ::Nil","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","path":"Novika/Resolver/Runnable/HasDatum.html","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum(T)","name":"HasDatum","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":944,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/RunnableCapability","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability"},{"html_id":"novika/Novika/Resolver/RunnableDir","kind":"class","full_name":"Novika::Resolver::RunnableDir","name":"RunnableDir"},{"html_id":"novika/Novika/Resolver/RunnableGroup","kind":"class","full_name":"Novika::Resolver::RunnableGroup","name":"RunnableGroup"},{"html_id":"novika/Novika/Resolver/RunnableQuery","kind":"class","full_name":"Novika::Resolver::RunnableQuery","name":"RunnableQuery"},{"html_id":"novika/Novika/Resolver/RunnableScript","kind":"class","full_name":"Novika::Resolver::RunnableScript","name":"RunnableScript"},{"html_id":"novika/Novika/Resolver/RunnableSelector","kind":"class","full_name":"Novika::Resolver::RunnableSelector","name":"RunnableSelector"},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject"}],"namespace":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"doc":"Represents a runnable with datum of type *T*. This module assigns\nno intrinsic meaning to the word \"datum\" or to its value; includers\nare free to choose that, as well as the type *T*.\n\nThe only real consequence of including this module is that equality\nand hash methods will be defined. These methods will delegate\ncomparison/hashing to the datum(s) at hand.","summary":"<p>Represents a runnable with datum of type <em>T</em>.</p>","instance_methods":[{"html_id":"==(other:T)-instance-method","name":"==","doc":"Returns whether the datum of this runnable is equal to *other*.","summary":"<p>Returns whether the datum of this runnable is equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"T"}],"args_string":"(other : T)","args_html":"(other : T)","location":{"filename":"src/novika/resolver.cr","line_number":948,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"T"}],"visibility":"Public","body":"@datum == other"}},{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @datum == (other.@datum)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"hash(hasher)-instance-method","name":"hash","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @datum.hash(hasher)\nhasher\n"}}]},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","path":"Novika/Resolver/Runnable/Terminal.html","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":931,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/RunnableCapability","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability"},{"html_id":"novika/Novika/Resolver/RunnableScript","kind":"class","full_name":"Novika::Resolver::RunnableScript","name":"RunnableScript"},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject"},{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"}],"namespace":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"doc":"Represents a terminal (as in *terminate*) runnable, that is,\na runnable that cannot be rewritten any further.","summary":"<p>Represents a terminal (as in <em>terminate</em>) runnable, that is, a runnable that cannot be rewritten any further.</p>","instance_methods":[{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":932,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"container.append(self)"}}]}]},{"html_id":"novika/Novika/Resolver/RunnableCapability","path":"Novika/Resolver/RunnableCapability.html","kind":"class","full_name":"Novika::Resolver::RunnableCapability","name":"RunnableCapability","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency/DefaultPrompt","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency::DefaultPrompt","name":"DefaultPrompt"},{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1116,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},{"html_id":"novika/Novika/Resolver/Resolution/Dependency/DefaultPrompt","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency::DefaultPrompt","name":"DefaultPrompt"},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Capabilities represent the requirements of a Novika script, library,\nor application, regarding language features that are needed in order\nfor that script, library, or application to properly work.","summary":"<p>Capabilities represent the requirements of a Novika script, library, or application, regarding language features that are needed in order for that script, library, or application to properly work.</p>","constructors":[{"html_id":"new(datum:String,ancestor=nil)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::String"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : String, ancestor = nil)","args_html":"(datum : <a href=\"../../String.html\">String</a>, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1122,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::String"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"description?(server:PermissionServer):String|Nil-instance-method","name":"description?","doc":"Returns a user-friendly description of this dependency, or nil\nif none can be given. The returned description should be suitable\nfor displaying to the user in a prompt, and should read well after\n\"which\", as in \"which [exposes this and that]\", \"which [allows\nthis and that]\", etc., where words in brackets are those of\nthe description.\n\n*server* is the server that will then use the description in\none way or another, in case it is present. You may also choose\nto derive the description with *server*'s help.","summary":"<p>Returns a user-friendly description of this dependency, or nil if none can be given.</p>","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"args_string":"(server : PermissionServer) : String | Nil","args_html":"(server : <a href=\"../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>) : <a href=\"../../String.html\">String</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":1144,"url":null},"def":{"name":"description?","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"return_type":"String | ::Nil","visibility":"Public","body":"server.brief(self)"}},{"html_id":"enable(*,incaps:CapabilityCollection)-instance-method","name":"enable","doc":"If this dependency is `allowed?`, enables it in the given\ncapability collection *caps*.","summary":"<p>If this dependency is <code>allowed?</code>, enables it in the given capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"args_string":"(*, in caps : CapabilityCollection)","args_html":"(*, in caps : <a href=\"../../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1158,"url":null},"def":{"name":"enable","args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"splat_index":0,"visibility":"Public","body":"if allowed?\nelse\n  return\nend\nif caps.has_capability_enabled?(@datum)\n  return\nend\ncaps.enable(@datum)\n"}},{"html_id":"envelope(container:RunnableContainer)-instance-method","name":"envelope","doc":"Returns the string representation of this dependency's envelope\n(its container so to speak). The runtime (not specialize-time!)\n*container* is provided as a fallback option (albeit a *very bad one*).","summary":"<p>Returns the string representation of this dependency's envelope (its container so to speak).</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer)","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1126,"url":null},"def":{"name":"envelope","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"if envelope = @envelope\nelse\n  return \"ancestor(#{container.abspath})\"\nend\nenvelope.abspath.to_s\n"}},{"html_id":"label(server:PermissionServer):String-instance-method","name":"label","doc":"Returns a user-friendly string representation of this dependency.\nThe returned string should be suitable for displaying to the user\nin a prompt.\n\n*server* is the permission server that will then use the label in\none way or another. You may also choose to derive the label with\n*server*'s help.","summary":"<p>Returns a user-friendly string representation of this dependency.</p>","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"args_string":"(server : PermissionServer) : String","args_html":"(server : <a href=\"../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>) : <a href=\"../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1140,"url":null},"def":{"name":"label","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"return_type":"String","visibility":"Public","body":"\"capability #{@datum.colorize.bold}\""}},{"html_id":"purpose(*,incaps:CapabilityCollection)-instance-method","name":"purpose","doc":"Returns the purpose of this capability in the given capability\ncollection *caps*.","summary":"<p>Returns the purpose of this capability in the given capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"args_string":"(*, in caps : CapabilityCollection)","args_html":"(*, in caps : <a href=\"../../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1150,"url":null},"def":{"name":"purpose","args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"splat_index":0,"visibility":"Public","body":"if cls = caps.get_capability_class?(@datum)\nelse\n  raise(\"BUG: capability runnable for which there is no capability class\")\nend\ncls.purpose\n"}},{"html_id":"signature(container:RunnableContainer):Signature-instance-method","name":"signature","doc":"Returns the signature of this dependency which can be used\nto identify it, most notably in the 'permissions' file.\n\n*container*, assumed to contain this dependency, may be used\nto derive the signature.","summary":"<p>Returns the signature of this dependency which can be used to identify it, most notably in the 'permissions' file.</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer) : Signature","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/Resolution/Dependency/Signature.html\">Signature</a>","location":{"filename":"src/novika/resolver.cr","line_number":1132,"url":null},"def":{"name":"signature","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"Signature","visibility":"Public","body":"if envelope = @envelope\nelse\n  raise(\"BUG: attempt to read the signature of an unmounted capability\")\nend\n{envelope.abspath.to_s, @datum}\n"}},{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1165,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"@envelope || (@envelope = container)\nsuper(root, container)\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1171,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Capability[\") << @datum) << \"]\""}}]},{"html_id":"novika/Novika/Resolver/RunnableContainer","path":"Novika/Resolver/RunnableContainer.html","kind":"class","full_name":"Novika::Resolver::RunnableContainer","name":"RunnableContainer","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2017,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"A runnable container is an *ordered*, arbitrarily *filtered*\ncollection of runnables - and a runnable itself. It holds and\nadvances (through rewriting) a *generation* of runnables.","summary":"<p>A runnable container is an <em>ordered</em>, arbitrarily <em>filtered</em> collection of runnables - and a runnable itself.</p>","constructors":[{"html_id":"new(root:RunnableRoot,dir:Path,env:RunnableEnvironment,parent:RunnableContainer|Nil=nil,transparent:Bool=false,ancestor=nil)-class-method","name":"new","doc":"Initializes a new runnable container for the given *dir*ectory.\n\n*parent* is the parent runnable container. You don't normally need\nto specify it. Prefer to call `child` on the parent instead.\n\n*transparent* specifies whether the container is transparent,\nsee `transparent?`.","summary":"<p>Initializes a new runnable container for the given <em>dir</em>ectory.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"dir","external_name":"dir","restriction":"Path"},{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"parent","default_value":"nil","external_name":"parent","restriction":"RunnableContainer | ::Nil"},{"name":"transparent","default_value":"false","external_name":"transparent","restriction":"::Bool"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(root : RunnableRoot, dir : Path, env : RunnableEnvironment, parent : RunnableContainer | Nil = nil, transparent : Bool = false, ancestor = nil)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, dir : Path, env : <a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a>, parent : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a> | Nil = <span class=\"n\">nil</span>, transparent : Bool = <span class=\"n\">false</span>, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":2049,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"dir","external_name":"dir","restriction":"Path"},{"name":"env","external_name":"env","restriction":"RunnableEnvironment"},{"name":"parent","default_value":"nil","external_name":"parent","restriction":"RunnableContainer | ::Nil"},{"name":"transparent","default_value":"false","external_name":"transparent","restriction":"::Bool"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, dir, env, parent, transparent, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"abspath-instance-method","name":"abspath","doc":"Returns the absolute path of the directory of this container.","summary":"<p>Returns the absolute path of the directory of this container.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2165,"url":null},"def":{"name":"abspath","visibility":"Public","body":"if @dir.absolute?\nelse\n  raise(\"BUG: container dir path is not an absolute path\")\nend\n@dir\n"}},{"html_id":"allow?(warn=false,&filter:Runnable->Bool)-instance-method","name":"allow?","doc":"Introduces a *filter* for the constituent runnables of this\ncontainer. *filter* should decide whether to accept (true)\nor reject (false) a runnable.\n\n*warn* specifies whether the `RunnableIgnored` signal should be\nsent if *filter* rejects a runnable.","summary":"<p>Introduces a <em>filter</em> for the constituent runnables of this container.</p>","abstract":false,"args":[{"name":"warn","default_value":"false","external_name":"warn","restriction":""}],"args_string":"(warn = false, &filter : Runnable -> Bool)","args_html":"(warn = <span class=\"n\">false</span>, &filter : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a> -> Bool)","location":{"filename":"src/novika/resolver.cr","line_number":2150,"url":null},"def":{"name":"allow?","args":[{"name":"warn","default_value":"false","external_name":"warn","restriction":""}],"yields":1,"block_arity":1,"block_arg":{"name":"filter","external_name":"filter","restriction":"(Runnable -> Bool)"},"visibility":"Public","body":"push_filter(Filter.new(filter, warn))"}},{"html_id":"append(runnable:Runnable)-instance-method","name":"append","doc":"Inserts *runnable* after all other runnables in this container.","summary":"<p>Inserts <em>runnable</em> after all other runnables in this container.</p>","abstract":false,"args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"args_string":"(runnable : Runnable)","args_html":"(runnable : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2108,"url":null},"def":{"name":"append","args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"visibility":"Public","body":"@runnables << runnable"}},{"html_id":"append(runnables:Array(Runnable))-instance-method","name":"append","doc":"Inserts the entire array of *runnables* after all other runnables\nin this container.","summary":"<p>Inserts the entire array of <em>runnables</em> after all other runnables in this container.</p>","abstract":false,"args":[{"name":"runnables","external_name":"runnables","restriction":"Array(Runnable)"}],"args_string":"(runnables : Array(Runnable))","args_html":"(runnables : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>))","location":{"filename":"src/novika/resolver.cr","line_number":2114,"url":null},"def":{"name":"append","args":[{"name":"runnables","external_name":"runnables","restriction":"Array(Runnable)"}],"visibility":"Public","body":"@runnables.concat(runnables)"}},{"html_id":"can_contain?(runnable:Runnable)-instance-method","name":"can_contain?","doc":"Returns whether this container's filters allow it to contain\nthe given *runnable*.","summary":"<p>Returns whether this container's filters allow it to contain the given <em>runnable</em>.</p>","abstract":false,"args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"args_string":"(runnable : Runnable)","args_html":"(runnable : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2156,"url":null},"def":{"name":"can_contain?","args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"visibility":"Public","body":"each_filter do |filter|\n  if filter.call(runnable)\n  else\n    return false\n  end\nend\ntrue\n"}},{"html_id":"child(dir=@dir,ancestor=self,*,transparent:Bool)-instance-method","name":"child","doc":"Builds and returns a child of this container.\n\nOptionally, the *dir*ectory of the child can be provided.\nOtherwise, the directory of this container will be used.\n\nAdditionally, you can specify whether the child should be\n*transparent* (see `transparent?`).","summary":"<p>Builds and returns a child of this container.</p>","abstract":false,"args":[{"name":"dir","default_value":"@dir","external_name":"dir","restriction":""},{"name":"ancestor","default_value":"self","external_name":"ancestor","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"transparent","external_name":"transparent","restriction":"Bool"}],"args_string":"(dir = @dir, ancestor = self, *, transparent : Bool)","args_html":"(dir = @dir, ancestor = <span class=\"k\">self</span>, *, transparent : Bool)","location":{"filename":"src/novika/resolver.cr","line_number":2379,"url":null},"def":{"name":"child","args":[{"name":"dir","default_value":"@dir","external_name":"dir","restriction":""},{"name":"ancestor","default_value":"self","external_name":"ancestor","restriction":""},{"name":"","external_name":"","restriction":""},{"name":"transparent","external_name":"transparent","restriction":"Bool"}],"splat_index":2,"visibility":"Public","body":"RunnableContainer.new(@root, dir, env: @root.defenv(@root.disk.env?(dir)), parent: self, ancestor: ancestor, transparent: transparent)"}},{"html_id":"classify?(datum:Path,ancestor:Ancestor|Nil):Runnable|Nil-instance-method","name":"classify?","doc":"Creates a `RunnableDir`, `RunnableScript`, or `RunnableSharedObject`\ndepending on what *datum* points to and on its extension.\n\n*ancestor* is set as the ancestor of the created runnable.\n\nReturns nil if *datum* does not exist, or if there is no\nappropriate classification.","summary":"<p>Creates a <code><a href=\"../../Novika/Resolver/RunnableDir.html\">RunnableDir</a></code>, <code><a href=\"../../Novika/Resolver/RunnableScript.html\">RunnableScript</a></code>, or <code><a href=\"../../Novika/Resolver/RunnableSharedObject.html\">RunnableSharedObject</a></code> depending on what <em>datum</em> points to and on its extension.</p>","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"args_string":"(datum : Path, ancestor : Ancestor | Nil) : Runnable | Nil","args_html":"(datum : Path, ancestor : <a href=\"../../Novika/Resolver/Runnable/Ancestor.html\">Ancestor</a> | Nil) : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":2190,"url":null},"def":{"name":"classify?","args":[{"name":"datum","external_name":"datum","restriction":"Path"},{"name":"ancestor","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"return_type":"Runnable | ::Nil","visibility":"Public","body":"if presence = @root.disk.info?(datum)\nelse\n  return\nend\ndatum = presence.path\nif presence.info.directory?\n  return RunnableDir.new(datum, ancestor)\nend\nif presence.info.file?\nelse\n  return\nend\ncase datum.extension\nwhen RunnableScript::EXTENSION\n  RunnableScript.new(datum, ancestor)\nwhen RunnableSharedObject::EXTENSION\n  RunnableSharedObject.new(datum, ancestor)\nend\n"}},{"html_id":"classify?(datum:String,ancestor:Ancestor|Nil):Runnable|Nil-instance-method","name":"classify?","doc":"If *datum* is a capability, creates and returns an appropriate\n`RunnableCapability` object. Otherwise, tries to convert *datum*\nto an absolute, normalized path, and then passes the path to\nthe other `classify?(datum : Path, ancestor : Ancestor?)`.\n\nReturns nil if nothing succeeded, deeming *datum* unclassifiable.","summary":"<p>If <em>datum</em> is a capability, creates and returns an appropriate <code><a href=\"../../Novika/Resolver/RunnableCapability.html\">RunnableCapability</a></code> object.</p>","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"String"},{"name":"ancestor","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"args_string":"(datum : String, ancestor : Ancestor | Nil) : Runnable | Nil","args_html":"(datum : <a href=\"../../String.html\">String</a>, ancestor : <a href=\"../../Novika/Resolver/Runnable/Ancestor.html\">Ancestor</a> | Nil) : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":2212,"url":null},"def":{"name":"classify?","args":[{"name":"datum","external_name":"datum","restriction":"String"},{"name":"ancestor","external_name":"ancestor","restriction":"Ancestor | ::Nil"}],"return_type":"Runnable | ::Nil","visibility":"Public","body":"if @env.capability?(datum)\n  return RunnableCapability.new(datum, ancestor)\nend\nif (datum.starts_with?('^')) && (envpath = @env.abspath?)\n  path = (envpath / datum.lchop).normalize\n  if path.in?(@env)\n  else\n    return\n  end\nend\npath || (path = Path[datum])\nif path.absolute?\nelse\n  path = (@dir / path).normalize\n  if @dir_rewrite || (!(!(path.in?(@env))))\n  else\n    return\n  end\nend\nclassify?(path, ancestor)\n"}},{"html_id":"constituents-instance-method","name":"constituents","doc":"Returns an array with contained runnables. If none, returns an\narray with `self`.","summary":"<p>Returns an array with contained runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2103,"url":null},"def":{"name":"constituents","visibility":"Public","body":"transparent? ? @runnables : super()"}},{"html_id":"each(&:Runnable->)-instance-method","name":"each","doc":"Yields constituent runnables.","summary":"<p>Yields constituent runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2135,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Runnable ->)"},"visibility":"Public","body":"@runnables.each do |runnable|\n  yield runnable\nend"}},{"html_id":"each_path(fn:Path->)-instance-method","name":"each_path","doc":"Recursively yields file and directory paths in this container.","summary":"<p>Recursively yields file and directory paths in this container.</p>","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"(Path ->)"}],"args_string":"(fn : Path -> )","args_html":"(fn : Path -> )","location":{"filename":"src/novika/resolver.cr","line_number":2238,"url":null},"def":{"name":"each_path","args":[{"name":"fn","external_name":"fn","restriction":"(Path ->)"}],"visibility":"Public","body":"@runnables.each do |runnable|\n  if runnable.is_a?(RunnableContainer)\n    fn.call(runnable.abspath)\n    runnable.each_path(fn)\n  else\n    if runnable.is_a?(RunnableScript) || runnable.is_a?(RunnableGroup)\n      fn.call(runnable.abspath)\n    end\n  end\nend"}},{"html_id":"each_path(&fn:Path->)-instance-method","name":"each_path","doc":"Recursively yields file and directory paths in this container.","summary":"<p>Recursively yields file and directory paths in this container.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2250,"url":null},"def":{"name":"each_path","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Path ->)"},"visibility":"Public","body":"each_path(fn)"}},{"html_id":"each_sorted_path(selector:GlobSelector,&:Path->)-instance-method","name":"each_sorted_path","doc":"Yields all paths matching *selector* in lexicographic order.\nThe paths are initially taken from the directory of this\ncontainer. See `Disk#glob` for details.","summary":"<p>Yields all paths matching <em>selector</em> in lexicographic order.</p>","abstract":false,"args":[{"name":"selector","external_name":"selector","restriction":"GlobSelector"}],"args_string":"(selector : GlobSelector, & : Path -> )","args_html":"(selector : <a href=\"../../Novika/Resolver/GlobSelector.html\">GlobSelector</a>, & : Path -> )","location":{"filename":"src/novika/resolver.cr","line_number":2265,"url":null},"def":{"name":"each_sorted_path","args":[{"name":"selector","external_name":"selector","restriction":"GlobSelector"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Path ->)"},"visibility":"Public","body":"paths = [] of Path\n@root.disk.glob(@dir, selector) do |path|\n  paths << path\nend\npaths.unstable_sort! do |a, b|\n  a.to_s.compare(b.to_s, case_insensitive: true)\nend\npaths.each do |path|\n  yield path\nend\n"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns whether this container is empty, i.e., holds\nhas no constituent runnables.","summary":"<p>Returns whether this container is empty, i.e., holds has no constituent runnables.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2125,"url":null},"def":{"name":"empty?","visibility":"Public","body":"@runnables.empty?"}},{"html_id":"env:Novika::Resolver::RunnableEnvironment-instance-method","name":"env","doc":"Returns the `RunnableEnvironment` assigned to this container.","summary":"<p>Returns the <code><a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a></code> assigned to this container.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2040,"url":null},"def":{"name":"env","visibility":"Public","body":"@env"}},{"html_id":"flatten!-instance-method","name":"flatten!","doc":"Recursively replaces each runnable in this container with its\n`constituents`. Most notably, rewrites transparent containers\nto their constituents.","summary":"<p>Recursively replaces each runnable in this container with its <code><a href=\"../../Novika/Resolver/RunnableContainer.html#constituents-instance-method\">#constituents</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2365,"url":null},"def":{"name":"flatten!","visibility":"Public","body":"@runnables = @runnables.flat_map do |runnable|\n  if runnable.is_a?(RunnableContainer)\n    runnable.flatten!\n  end\n  runnable.constituents\nend"}},{"html_id":"from?(env:RunnableEnvironment)-instance-method","name":"from?","doc":"Returns whether *env* is this container's environment.","summary":"<p>Returns whether <em>env</em> is this container's environment.</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":"RunnableEnvironment"}],"args_string":"(env : RunnableEnvironment)","args_html":"(env : <a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2172,"url":null},"def":{"name":"from?","args":[{"name":"env","external_name":"env","restriction":"RunnableEnvironment"}],"visibility":"Public","body":"@env == env"}},{"html_id":"includes?(other)-instance-method","name":"includes?","doc":"Returns whether this container includes the given *runnable*.","summary":"<p>Returns whether this container includes the given <em>runnable</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/resolver.cr","line_number":2130,"url":null},"def":{"name":"includes?","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"@runnables.includes?(other)"}},{"html_id":"paths-instance-method","name":"paths","doc":"Returns a set of *all* paths (file, directory, etc. paths) in\nthis container, including those in nested containers.","summary":"<p>Returns a set of <em>all</em> paths (file, directory, etc.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2256,"url":null},"def":{"name":"paths","visibility":"Public","body":"paths = Set(Path).new\neach_path do |path|\n  paths << path\nend\npaths\n"}},{"html_id":"prepend(runnable:Runnable)-instance-method","name":"prepend","doc":"Inserts *runnable* before all other runnables in this container.","summary":"<p>Inserts <em>runnable</em> before all other runnables in this container.</p>","abstract":false,"args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"args_string":"(runnable : Runnable)","args_html":"(runnable : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2119,"url":null},"def":{"name":"prepend","args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"visibility":"Public","body":"@runnables.unshift(runnable)"}},{"html_id":"recursive_nonterminal_each(fn:Runnable,RunnableContainer->)-instance-method","name":"recursive_nonterminal_each","doc":"Calls *fn* with each nonterminal and the container it's from,\nrecurses into nested `RunnableContainer`s.","summary":"<p>Calls <em>fn</em> with each nonterminal and the container it's from, recurses into nested <code><a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a></code>s.</p>","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer ->)"}],"args_string":"(fn : Runnable, RunnableContainer -> )","args_html":"(fn : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>, <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a> -> )","location":{"filename":"src/novika/resolver.cr","line_number":2344,"url":null},"def":{"name":"recursive_nonterminal_each","args":[{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer ->)"}],"visibility":"Public","body":"@runnables.each do |runnable|\n  if runnable.is_a?(Terminal)\n    next\n  end\n  if runnable.is_a?(RunnableContainer)\n    runnable.recursive_nonterminal_each(fn)\n    next\n  end\n  fn.call(runnable, self)\nend"}},{"html_id":"recursive_nonterminal_each(&fn:Runnable,RunnableContainer->)-instance-method","name":"recursive_nonterminal_each","doc":"Calls *fn* with each nonterminal and the container it's from,\nrecurses into nested `RunnableContainer`s.","summary":"<p>Calls <em>fn</em> with each nonterminal and the container it's from, recurses into nested <code><a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a></code>s.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2358,"url":null},"def":{"name":"recursive_nonterminal_each","yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer ->)"},"visibility":"Public","body":"recursive_nonterminal_each(fn)"}},{"html_id":"recursive_nonterminal_map!(fn:Runnable,RunnableContainer->Runnable)-instance-method","name":"recursive_nonterminal_map!","doc":"Replaces all non-terminal (see `Runnable::Terminal`) runnables\nwith the result of *fn*. Recurses into nested containers.","summary":"<p>Replaces all non-terminal (see <code><a href=\"../../Novika/Resolver/Runnable/Terminal.html\">Runnable::Terminal</a></code>) runnables with the result of <em>fn</em>.</p>","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer -> Runnable)"}],"args_string":"(fn : Runnable, RunnableContainer -> Runnable)","args_html":"(fn : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>, <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a> -> <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2322,"url":null},"def":{"name":"recursive_nonterminal_map!","args":[{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer -> Runnable)"}],"visibility":"Public","body":"@runnables.map! do |runnable|\n  if runnable.is_a?(Terminal)\n    next runnable\n  end\n  if runnable.is_a?(RunnableContainer)\n    runnable.recursive_nonterminal_map!(fn)\n    next runnable\n  end\n  fn.call(runnable, self)\nend\napply_filters!\n"}},{"html_id":"recursive_nonterminal_map!(&fn:Runnable,RunnableContainer->Runnable)-instance-method","name":"recursive_nonterminal_map!","doc":"Replaces all non-terminal (see `Runnable::Terminal`) runnables\nwith the result of *fn*. Recurses into nested containers.","summary":"<p>Replaces all non-terminal (see <code><a href=\"../../Novika/Resolver/Runnable/Terminal.html\">Runnable::Terminal</a></code>) runnables with the result of <em>fn</em>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2338,"url":null},"def":{"name":"recursive_nonterminal_map!","yields":2,"block_arity":2,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Runnable, RunnableContainer -> Runnable)"},"visibility":"Public","body":"recursive_nonterminal_map!(fn)"}},{"html_id":"recursive_select!(fn:Runnable->Bool)-instance-method","name":"recursive_select!","doc":"Accepts only those runnable in this container and in all nested\ncontainers for which *fn* returns true.\n\nRunnables for which *fn* returned false are mutably deleted.","summary":"<p>Accepts only those runnable in this container and in all nested containers for which <em>fn</em> returns true.</p>","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"(Runnable -> Bool)"}],"args_string":"(fn : Runnable -> Bool)","args_html":"(fn : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a> -> Bool)","location":{"filename":"src/novika/resolver.cr","line_number":2307,"url":null},"def":{"name":"recursive_select!","args":[{"name":"fn","external_name":"fn","restriction":"(Runnable -> Bool)"}],"visibility":"Public","body":"@runnables.select! do |runnable|\n  fn.call(runnable)\nend\n@runnables.each do |runnable|\n  if runnable.is_a?(RunnableContainer)\n  else\n    next\n  end\n  runnable.recursive_select!(fn)\nend\n"}},{"html_id":"recursive_select!(&fn:Runnable->Bool)-instance-method","name":"recursive_select!","doc":"Accepts only those runnable in this container and in all nested\ncontainers for which *fn* returns true.\n\nRunnables for which *fn* returned false are mutably deleted.","summary":"<p>Accepts only those runnable in this container and in all nested containers for which <em>fn</em> returns true.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2316,"url":null},"def":{"name":"recursive_select!","yields":1,"block_arity":1,"block_arg":{"name":"fn","external_name":"fn","restriction":"(Runnable -> Bool)"},"visibility":"Public","body":"recursive_select!(fn)"}},{"html_id":"replace(pattern:Runnable,replacement:Runnable)-instance-method","name":"replace","doc":"Replaces *pattern* runnable with the *replacement* runnable\nin this container only (i.e., does not recurse).","summary":"<p>Replaces <em>pattern</em> runnable with the <em>replacement</em> runnable in this container only (i.e., does not recurse).</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Runnable"},{"name":"replacement","external_name":"replacement","restriction":"Runnable"}],"args_string":"(pattern : Runnable, replacement : Runnable)","args_html":"(pattern : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>, replacement : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2281,"url":null},"def":{"name":"replace","args":[{"name":"pattern","external_name":"pattern","restriction":"Runnable"},{"name":"replacement","external_name":"replacement","restriction":"Runnable"}],"visibility":"Public","body":"if can_contain?(replacement)\nelse\n  return\nend\n@runnables.map! do |runnable|\n  pattern == runnable ? replacement : runnable\nend\n"}},{"html_id":"replace(pattern:Runnable,replacement:Array(Runnable))-instance-method","name":"replace","doc":"Replaces *pattern* runnable with multiple *replacement* runnables\nin this container only (i.e. does not recurse). Their order will\nbe the same as that in *replacement*.\n\nRunnables from *replacement* that this container cannot contain\nare left out.","summary":"<p>Replaces <em>pattern</em> runnable with multiple <em>replacement</em> runnables in this container only (i.e.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":"Runnable"},{"name":"replacement","external_name":"replacement","restriction":"Array(Runnable)"}],"args_string":"(pattern : Runnable, replacement : Array(Runnable))","args_html":"(pattern : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>, replacement : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>))","location":{"filename":"src/novika/resolver.cr","line_number":2295,"url":null},"def":{"name":"replace","args":[{"name":"pattern","external_name":"pattern","restriction":"Runnable"},{"name":"replacement","external_name":"replacement","restriction":"Array(Runnable)"}],"visibility":"Public","body":"replacement = replacement.select do |runnable|\n  can_contain?(runnable)\nend\n@runnables = @runnables.flat_map do |runnable|\n  pattern == runnable ? replacement : runnable\nend\n"}},{"html_id":"request(dependency:Resolution::Dependency)-instance-method","name":"request","doc":"Communicates with this container's environment permission\nserver in order to determine whether the use *dependency*\nshould be allowed to `self`.","summary":"<p>Communicates with this container's environment permission server in order to determine whether the use <em>dependency</em> should be allowed to <code>self</code>.</p>","abstract":false,"args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"args_string":"(dependency : Resolution::Dependency)","args_html":"(dependency : <a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2179,"url":null},"def":{"name":"request","args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"visibility":"Public","body":"@env.request(dependency, for: self)"}},{"html_id":"rewrite-instance-method","name":"rewrite","doc":"Rewrites this container until there is no point in doing so.\nThat is, until `R` (current) and `R'` (rewritten) are equal:\n`R = R'`.\n\nQuite obviously this method is susceptible to cyclic expansion\nwhen the length of the cycle is higher than, well, zero\n(e.g. `R -> R' -> R -> ...`). So please don't do that nor\ncause that!","summary":"<p>Rewrites this container until there is no point in doing so.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2430,"url":null},"def":{"name":"rewrite","visibility":"Public","body":"begin\n  @root.down(caller: (@ancestor.as?(Runnable)) || self)\n  loop do\n    previous = @runnables\n    @runnables = [] of Runnable\n    previous.each(&.specialize(@root, container: self))\n    apply_filters!\n    if previous == @runnables\n      break\n    end\n  end\nensure\n  @root.up\nend"}},{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2478,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"if empty?\n  return\nend\nrewrite\ncontainer.append(self)\n"}},{"html_id":"thorough_rewrite-instance-method","name":"thorough_rewrite","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2454,"url":null},"def":{"name":"thorough_rewrite","visibility":"Public","body":"@dir_rewrite = true\nrewrite\n@dir_rewrite = false\nif abspath = @env.abspath?\nelse\n  return\nend\nrecursive_nonterminal_map! do |nonterminal, container|\n  if container.from?(@env)\n  else\n    next nonterminal\n  end\n  child = container.child(abspath, transparent: true)\n  child.append(nonterminal)\n  child.rewrite\n  child\nend\nrewrite\n"}},{"html_id":"to_resolution_set(*,deps=Set(Resolution::Dependency).new,set=ResolutionSet.new)-instance-method","name":"to_resolution_set","doc":"Builds and returns a `ResolutionSet` with resolutions from\nthis container and all nested containers.\n\nYou must call this after `flatten!`. Otherwise, the resulting\n`ResolutionSet` will be underpopulated with dependencies due\nto transparent containers standing in the way.\n\n*deps* is a set of dependencies that *all* resolutions in the\nresulting set should have, regardless of nesting. *Beware that\nit is mutated.*","summary":"<p>Builds and returns a <code><a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a></code> with resolutions from this container and all nested containers.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"deps","default_value":"Set(Resolution::Dependency).new","external_name":"deps","restriction":""},{"name":"set","default_value":"ResolutionSet.new","external_name":"set","restriction":""}],"args_string":"(*, deps = Set(Resolution::Dependency).new, set = ResolutionSet.new)","args_html":"(*, deps = <span class=\"t\">Set</span>(<span class=\"t\">Resolution</span><span class=\"t\">::</span><span class=\"t\">Dependency</span>).new, set = <span class=\"t\">ResolutionSet</span>.new)","location":{"filename":"src/novika/resolver.cr","line_number":2398,"url":null},"def":{"name":"to_resolution_set","args":[{"name":"","external_name":"","restriction":""},{"name":"deps","default_value":"Set(Resolution::Dependency).new","external_name":"deps","restriction":""},{"name":"set","default_value":"ResolutionSet.new","external_name":"set","restriction":""}],"splat_index":0,"visibility":"Public","body":"each do |runnable|\n  if runnable.is_a?(Resolution::Dependency)\n  else\n    next\n  end\n  deps << runnable\nend\n@runnables.each do |runnable|\n  case runnable\n  when RunnableContainer\n    resolution = runnable.to_resolution_set(deps: deps.dup)\n  when RunnableScript\n    resolution = Resolution.new(runnable, deps: deps.dup)\n  else\n    next\n  end\n  set.append(resolution)\nend\nset\n"}},{"html_id":"to_s(io,indent=0,lead=indent)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""},{"name":"indent","default_value":"0","external_name":"indent","restriction":""},{"name":"lead","default_value":"indent","external_name":"lead","restriction":""}],"args_string":"(io, indent = 0, lead = indent)","args_html":"(io, indent = <span class=\"n\">0</span>, lead = indent)","location":{"filename":"src/novika/resolver.cr","line_number":2486,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""},{"name":"indent","default_value":"0","external_name":"indent","restriction":""},{"name":"lead","default_value":"indent","external_name":"lead","restriction":""}],"visibility":"Public","body":"io << (\" \" * lead)\nif transparent?\n  io << \"Transparent\"\nend\n((io << \"Container[\") << @dir) << \"]:\\n\"\nindent = indent + 2\n@runnables.join(io, '\\n') do |runnable|\n  if runnable.is_a?(RunnableContainer)\n    runnable.to_s(io, indent: indent)\n  else\n    (io << (\" \" * indent)) << runnable\n  end\nend\n"}},{"html_id":"transparent?:Bool-instance-method","name":"transparent?","doc":"Returns whether this container is transparent.\n\nTransparent containers get \"merged\" with their parent during\nflattening, for example. At the same time *opaque* continers\nremain still and unbreakable. The `constituents` of a transparent\ncontainer are plainly visible & accessible; those of an opaque\none are not.\n\nTransparent containers are transparent to filter inheritance. This\nmeans that *transparent containers can inherit filters of their parent\ncontainers*. Opaque containers are opaque to filter inheritance.\nTherefore, *transparent containers won't inherit filters of containers\nabove an opaque container, and opaque containers themselves won't\ninherit anything from parent container(s)*.","summary":"<p>Returns whether this container is transparent.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2037,"url":null},"def":{"name":"transparent?","return_type":"Bool","visibility":"Public","body":"@transparent"}}]},{"html_id":"novika/Novika/Resolver/RunnableDir","path":"Novika/Resolver/RunnableDir.html","kind":"class","full_name":"Novika::Resolver::RunnableDir","name":"RunnableDir","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1279,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Represents a directory in the file system. At this point it is still\nunknown whether the directory is a Novika library, application, or\nsimply that - a directory.\n\nRunnable directories get rewritten to `RunnableGroup`s, which are\naware of the presence or absence of manifest(s); and therefore,\nit is `RunnableGroup`s that know whether they are an app, lib,\nor simply a directory.","summary":"<p>Represents a directory in the file system.</p>","constructors":[{"html_id":"new(datum:Path,ancestor=nil)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : Path, ancestor = nil)","args_html":"(datum : Path, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1282,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1286,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"group = RunnableGroup.allocate\nmanifest = Manifest.find(root.disk, @datum, ancestor: group)\ngroup.initialize(@datum, manifest, ancestor: @ancestor)\ncontainer.append(group)\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1293,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Dir[\") << @datum) << \"]\""}}]},{"html_id":"novika/Novika/Resolver/RunnableEnvironment","path":"Novika/Resolver/RunnableEnvironment.html","kind":"class","full_name":"Novika::Resolver::RunnableEnvironment","name":"RunnableEnvironment","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1903,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Represents a Novika environment.","summary":"<p>Represents a Novika environment.</p>","constructors":[{"html_id":"new(root:RunnableRoot,abspath:Path|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"abspath","external_name":"abspath","restriction":"Path | ::Nil"}],"args_string":"(root : RunnableRoot, abspath : Path | Nil)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, abspath : Path | Nil)","location":{"filename":"src/novika/resolver.cr","line_number":1919,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"abspath","external_name":"abspath","restriction":"Path | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root, abspath)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(path:Path)-instance-method","name":"==","doc":"Returns whether *path* points to this environment's directory.","summary":"<p>Returns whether <em>path</em> points to this environment's directory.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path)","args_html":"(path : Path)","location":{"filename":"src/novika/resolver.cr","line_number":2006,"url":null},"def":{"name":"==","args":[{"name":"path","external_name":"path","restriction":"Path"}],"visibility":"Public","body":"@abspath == path"}},{"html_id":"==(other:self)-instance-method","name":"==","doc":"Two environments are equal when their directories are equal.","summary":"<p>Two environments are equal when their directories are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if same?(other)\n  return true\nend\nif @abspath == (other.@abspath)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"abspath-instance-method","name":"abspath","doc":"Returns the absolute path pointing to this environment's directory.","summary":"<p>Returns the absolute path pointing to this environment's directory.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1905,"url":null},"def":{"name":"abspath","visibility":"Public","body":"if (value = @abspath).nil?\n  ::raise(NilAssertionError.new(\"Novika::Resolver::RunnableEnvironment#abspath cannot be nil\"))\nelse\n  value\nend"}},{"html_id":"abspath?:Path?-instance-method","name":"abspath?","doc":"Returns the absolute path pointing to this environment's directory.","summary":"<p>Returns the absolute path pointing to this environment's directory.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1905,"url":null},"def":{"name":"abspath?","visibility":"Public","body":"@abspath"}},{"html_id":"brief(dependency:Resolution::Dependency)-instance-method","name":"brief","doc":"Returns a brief description of *dependency* as per this environment.","summary":"<p>Returns a brief description of <em>dependency</em> as per this environment.</p>","abstract":false,"args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"args_string":"(dependency : Resolution::Dependency)","args_html":"(dependency : <a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1988,"url":null},"def":{"name":"brief","args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"}],"visibility":"Public","body":"dependency.purpose(in: capabilities)"}},{"html_id":"capability?(datum:String):Bool-instance-method","name":"capability?","doc":"Returns whether *datum* is a capability in this environment's\ncapability collection.","summary":"<p>Returns whether <em>datum</em> is a capability in this environment's capability collection.</p>","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"String"}],"args_string":"(datum : String) : Bool","args_html":"(datum : <a href=\"../../String.html\">String</a>) : Bool","location":{"filename":"src/novika/resolver.cr","line_number":1950,"url":null},"def":{"name":"capability?","args":[{"name":"datum","external_name":"datum","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"capabilities.has_capability?(datum)"}},{"html_id":"designate(set:ResolutionSet):Designation-instance-method","name":"designate","doc":"Creates and returns a `Designation` for this environment to\nhandle the given resolution *set*.","summary":"<p>Creates and returns a <code><a href=\"../../Novika/Resolver/Designation.html\">Designation</a></code> for this environment to handle the given resolution <em>set</em>.</p>","abstract":false,"args":[{"name":"set","external_name":"set","restriction":"ResolutionSet"}],"args_string":"(set : ResolutionSet) : Designation","args_html":"(set : <a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a>) : <a href=\"../../Novika/Resolver/Designation.html\">Designation</a>","location":{"filename":"src/novika/resolver.cr","line_number":1983,"url":null},"def":{"name":"designate","args":[{"name":"set","external_name":"set","restriction":"ResolutionSet"}],"return_type":"Designation","visibility":"Public","body":"Designation.new(@root, self, set, capabilities.copy)"}},{"html_id":"expand?(datum:Path):Path|Nil-instance-method","name":"expand?","doc":"Expands *datum* in this environment's directory. Returns the\nresulting real path if *datum* points to something (a file, a\ndirectory, etc.); if *datum* points to nothing, returns nil.","summary":"<p>Expands <em>datum</em> in this environment's directory.</p>","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"Path"}],"args_string":"(datum : Path) : Path | Nil","args_html":"(datum : Path) : Path | Nil","location":{"filename":"src/novika/resolver.cr","line_number":1941,"url":null},"def":{"name":"expand?","args":[{"name":"datum","external_name":"datum","restriction":"Path"}],"return_type":"Path | ::Nil","visibility":"Public","body":"if abspath = @abspath\nelse\n  return\nend\nif info = @root.disk.info?(abspath.expand(datum))\nelse\n  return\nend\ninfo.path\n"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"Two environments are equal when their directories are equal.","summary":"<p>Two environments are equal when their directories are equal.</p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = @abspath.hash(hasher)\nhasher\n"}},{"html_id":"includes?(path:Path):Bool-instance-method","name":"includes?","doc":"Returns whether *path* is part of this environment's subtree,\ni.e. is this environment directory's direct or indirect child.","summary":"<p>Returns whether <em>path</em> is part of this environment's subtree, i.e.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path"}],"args_string":"(path : Path) : Bool","args_html":"(path : Path) : Bool","location":{"filename":"src/novika/resolver.cr","line_number":1994,"url":null},"def":{"name":"includes?","args":[{"name":"path","external_name":"path","restriction":"Path"}],"return_type":"Bool","visibility":"Public","body":"if abspath = @abspath\nelse\n  return false\nend\nif abspath == path\n  return true\nend\npath.each_parent do |parent|\n  if parent == abspath\n    return true\n  end\nend\nfalse\n"}},{"html_id":"permissions(&:IO->)-instance-method","name":"permissions","doc":"Yields writable `IO` for the content of this environment's\npermissions file. Creates the latter if necessary. Previous\ncontent of the permissions file is cleared.","summary":"<p>Yields writable <code>IO</code> for the content of this environment's permissions file.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1973,"url":null},"def":{"name":"permissions","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(IO ->)"},"visibility":"Public","body":"if abspath = @abspath\nelse\n  return\nend\n@root.disk.write(abspath / PERMISSIONS_FILENAME) do |io|\n  yield io\nend\n"}},{"html_id":"permissions?:Tuple(String,Path)|Nil-instance-method","name":"permissions?","doc":"Returns the content of the permissions file of this environment\nfollowed by the file's path; or nil if the permissions file does\nnot exist.","summary":"<p>Returns the content of the permissions file of this environment followed by the file's path; or nil if the permissions file does not exist.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1963,"url":null},"def":{"name":"permissions?","return_type":"::Tuple(String, Path) | ::Nil","visibility":"Public","body":"if abspath = @abspath\nelse\n  return\nend\nif path = @root.disk.file?(abspath / PERMISSIONS_FILENAME)\nelse\n  return\nend\n{@root.disk.read(path), path}\n"}},{"html_id":"request(dependency:Resolution::Dependency,forcontainer:RunnableContainer)-instance-method","name":"request","doc":"Emits a dependency request (see `Resolution::Dependency#request`)\nto the permission server of this environment.","summary":"<p>Emits a dependency request (see <code><a href=\"../../Novika/Resolver/Resolution/Dependency.html#request%28server%3APermissionServer%2C%2A%2Cforcontainer%3ARunnableContainer%29-instance-method\">Resolution::Dependency#request</a></code>) to the permission server of this environment.</p>","abstract":false,"args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"args_string":"(dependency : Resolution::Dependency, for container : RunnableContainer)","args_html":"(dependency : <a href=\"../../Novika/Resolver/Resolution/Dependency.html\">Resolution::Dependency</a>, for container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1956,"url":null},"def":{"name":"request","args":[{"name":"dependency","external_name":"dependency","restriction":"Resolution::Dependency"},{"name":"container","external_name":"for","restriction":"RunnableContainer"}],"visibility":"Public","body":"dependency.request(permissions, for: container)"}}]},{"html_id":"novika/Novika/Resolver/RunnableError","path":"Novika/Resolver/RunnableError.html","kind":"class","full_name":"Novika::Resolver::RunnableError","name":"RunnableError","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},"ancestors":[{"html_id":"novika/Novika/Resolver/ResolverError","kind":"class","full_name":"Novika::Resolver::ResolverError","name":"ResolverError"},{"html_id":"novika/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":99,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Raised when there is an error during runnable resolution.","summary":"<p>Raised when there is an error during runnable resolution.</p>","constructors":[{"html_id":"new(message,runnable:Runnable)-class-method","name":"new","abstract":false,"args":[{"name":"message","external_name":"message","restriction":""},{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"args_string":"(message, runnable : Runnable)","args_html":"(message, runnable : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":104,"url":null},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":""},{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, runnable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"runnable:Novika::Resolver::Runnable-instance-method","name":"runnable","doc":"Returns the runnable which is assumed to be the source of\nthis error.","summary":"<p>Returns the runnable which is assumed to be the source of this error.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":102,"url":null},"def":{"name":"runnable","visibility":"Public","body":"@runnable"}}]},{"html_id":"novika/Novika/Resolver/RunnableGroup","path":"Novika/Resolver/RunnableGroup.html","kind":"class","full_name":"Novika::Resolver::RunnableGroup","name":"RunnableGroup","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1835,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"A runnable group is a directory with or without a manifest: that is,\na directory with awareness of whether it is an application, library,\nor simply that - a directory.\n\nRunnable groups, through manifests, are directories with a specific\nrunnable *layout*.\n\nRunnable groups are rewritten to properly ordered (laid out)\n`RunnableContainer`s.\n\nNow to the important bit: since there is never a guaranteed\nlink between a runnable group and the container it was/will\nbe rewritten to, you should manually register it with\n`RunnableRoot#assign` if you ever want the container to *run*.","summary":"<p>A runnable group is a directory with or without a manifest: that is, a directory with awareness of whether it is an application, library, or simply that - a directory.</p>","constructors":[{"html_id":"new(datum:Path,manifest:Manifest,ancestor=nil)-class-method","name":"new","doc":"Creates a new runnable group.\n\n*manifest* is the manifest of this group. Manifests control\nthe order of runnables in this group.\n\n*datum* is a *normalized* path to the group (a directory).","summary":"<p>Creates a new runnable group.</p>","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"manifest","external_name":"manifest","restriction":"Manifest"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : Path, manifest : Manifest, ancestor = nil)","args_html":"(datum : Path, manifest : <a href=\"../../Novika/Resolver/Manifest.html\">Manifest</a>, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1844,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"manifest","external_name":"manifest","restriction":"Manifest"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, manifest, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"abspath-instance-method","name":"abspath","doc":"Returns an absolute path to this group.","summary":"<p>Returns an absolute path to this group.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1874,"url":null},"def":{"name":"abspath","visibility":"Public","body":"if @datum.absolute?\nelse\n  raise(\"BUG: group datum is not an absolute path\")\nend\n@datum\n"}},{"html_id":"app?:Bool-instance-method","name":"app?","doc":"Returns whether this group represents an app (is laid out\naccording to a '.nk.app' manifest).","summary":"<p>Returns whether this group represents an app (is laid out according to a '.nk.app' manifest).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1850,"url":null},"def":{"name":"app?","return_type":"Bool","visibility":"Public","body":"@manifest.is_a?(Manifest::App)"}},{"html_id":"entry_name:String-instance-method","name":"entry_name","doc":"Constructs and returns entry filename for this group.\n\nFor instance, if this group's directory is '/path/to/foo', then\nits entry filename will be 'foo.nk'.","summary":"<p>Constructs and returns entry filename for this group.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1869,"url":null},"def":{"name":"entry_name","return_type":"String","visibility":"Public","body":"\"#{name}.nk\""}},{"html_id":"lib?:Bool-instance-method","name":"lib?","doc":"Returns whether this group represents a lib (is laid out\naccording to a '.nk.lib' manifest).","summary":"<p>Returns whether this group represents a lib (is laid out according to a '.nk.lib' manifest).</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1856,"url":null},"def":{"name":"lib?","return_type":"Bool","visibility":"Public","body":"@manifest.is_a?(Manifest::Lib)"}},{"html_id":"name:String-instance-method","name":"name","doc":"Returns the name of this group.","summary":"<p>Returns the name of this group.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1861,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@datum.stem"}},{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1880,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"child = container.child(@datum, transparent: true, ancestor: self)\ncontainer.append(child)\n@manifest.populate(root, child, origin: self)\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1890,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"case\nwhen app?\n  io << \"App\"\nwhen lib?\n  io << \"Lib\"\nelse\n  io << \"Group\"\nend\n((io << \"[\") << @datum) << \"]\"\n"}}]},{"html_id":"novika/Novika/Resolver/RunnableIgnored","path":"Novika/Resolver/RunnableIgnored.html","kind":"struct","full_name":"Novika::Resolver::RunnableIgnored","name":"RunnableIgnored","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},"ancestors":[{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":69,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Lets signal receivers acknowledge that a runnable was ignored.","summary":"<p>Lets signal receivers acknowledge that a runnable was ignored.</p>","constructors":[{"html_id":"new(runnable:Runnable)-class-method","name":"new","abstract":false,"args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"args_string":"(runnable : Runnable)","args_html":"(runnable : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a>)","location":{"filename":"src/novika/resolver.cr","line_number":69,"url":null},"def":{"name":"new","args":[{"name":"runnable","external_name":"runnable","restriction":"Runnable"}],"visibility":"Public","body":"_ = allocate\n_.initialize(runnable)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":69,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@runnable.clone)"}},{"html_id":"copy_with(runnable_runnable=@runnable)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_runnable","default_value":"@runnable","external_name":"runnable","restriction":""}],"args_string":"(runnable _runnable = @runnable)","args_html":"(runnable _runnable = @runnable)","location":{"filename":"src/novika/resolver.cr","line_number":69,"url":null},"def":{"name":"copy_with","args":[{"name":"_runnable","default_value":"@runnable","external_name":"runnable","restriction":""}],"visibility":"Public","body":"self.class.new(_runnable)"}},{"html_id":"runnable:Runnable-instance-method","name":"runnable","abstract":false,"def":{"name":"runnable","return_type":"Runnable","visibility":"Public","body":"@runnable"}}]},{"html_id":"novika/Novika/Resolver/RunnableQuery","path":"Novika/Resolver/RunnableQuery.html","kind":"class","full_name":"Novika::Resolver::RunnableQuery","name":"RunnableQuery","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1051,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Runnable queries are one of the most generic kinds of runnables.\nThey specialize themselves through `RunnableContainer#classify?`.","summary":"<p>Runnable queries are one of the most generic kinds of runnables.</p>","constructors":[{"html_id":"new(datum:Path|String,ancestor=nil,else:Runnable|Nil=self)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Path | ::String"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""},{"name":"else","default_value":"self","external_name":"else","restriction":"Runnable | ::Nil"}],"args_string":"(datum : Path | String, ancestor = nil, else : Runnable | Nil = self)","args_html":"(datum : Path | <a href=\"../../String.html\">String</a>, ancestor = <span class=\"n\">nil</span>, else : <a href=\"../../Novika/Resolver/Runnable.html\">Runnable</a> | Nil = <span class=\"k\">self</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1054,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Path | ::String"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""},{"name":"else","default_value":"self","external_name":"else","restriction":"Runnable | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, ancestor, else)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1058,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"if runnable = container.classify?(@datum, ancestor: self)\n  container.append(runnable)\n  return\nend\nif alt = @else\nelse\n  return\nend\ncontainer.append(alt)\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1069,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"Query[\") << @datum) << \"]\""}}]},{"html_id":"novika/Novika/Resolver/RunnableRoot","path":"Novika/Resolver/RunnableRoot.html","kind":"class","full_name":"Novika::Resolver::RunnableRoot","name":"RunnableRoot","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2516,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Runnable root is available to all containers, and therefore allows\nany runnable to escape deep nesting if need be.\n\nRunnable root stores a pointer to the `Disk` object, used throughout\nthe resolver to cache file system requests (the resolver is quite\nample in making them). It also stores the set of flags, which help\nmaking OS-specific decisions using flag conditions in manifests.\n\nAdditionally, runnable root allows runnables to `wish` queries\nto be resolved later, as requirements, and to talk to each other\nvia `Signal`s and the `SignalReceiver` interface (see `send`).\n\nThere's a lot more, but that's the gist.","summary":"<p>Runnable root is available to all containers, and therefore allows any runnable to escape deep nesting if need be.</p>","constructors":[{"html_id":"new(disk:Disk,cwd:Path)-class-method","name":"new","abstract":false,"args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"cwd","external_name":"cwd","restriction":"Path"}],"args_string":"(disk : Disk, cwd : Path)","args_html":"(disk : <a href=\"../../Novika/Resolver/Disk.html\">Disk</a>, cwd : Path)","location":{"filename":"src/novika/resolver.cr","line_number":2525,"url":null},"def":{"name":"new","args":[{"name":"disk","external_name":"disk","restriction":"Disk"},{"name":"cwd","external_name":"cwd","restriction":"Path"}],"visibility":"Public","body":"_ = allocate\n_.initialize(disk, cwd)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign(group:RunnableGroup,*,container:RunnableContainer,overwrite=true):RunnableContainer-instance-method","name":"assign","doc":"Assigns *container* to the given *group*.\n\nThis is the only way someone from the outside can (reliably)\nget the container of a group.\n\n*overwrite* specifies whether the existing container for *group*\nshould be overwritten with *container*.\n\nReturns the container that was assigned to *group*.","summary":"<p>Assigns <em>container</em> to the given <em>group</em>.</p>","abstract":false,"args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"overwrite","default_value":"true","external_name":"overwrite","restriction":""}],"args_string":"(group : RunnableGroup, *, container : RunnableContainer, overwrite = true) : RunnableContainer","args_html":"(group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, *, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, overwrite = <span class=\"n\">true</span>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":2606,"url":null},"def":{"name":"assign","args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"","external_name":"","restriction":""},{"name":"container","external_name":"container","restriction":"RunnableContainer"},{"name":"overwrite","default_value":"true","external_name":"overwrite","restriction":""}],"splat_index":1,"return_type":"RunnableContainer","visibility":"Public","body":"if overwrite\n  @containers[group] = container\nelse\n  __temp_70 = group\n  @containers[__temp_70]? || (@containers[__temp_70] = container)\nend"}},{"html_id":"assign(group:RunnableGroup,*,preamble:String)-instance-method","name":"assign","doc":"Assigns *preamble* to the given runnable *group*.","summary":"<p>Assigns <em>preamble</em> to the given runnable <em>group</em>.</p>","abstract":false,"args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"","external_name":"","restriction":""},{"name":"preamble","external_name":"preamble","restriction":"String"}],"args_string":"(group : RunnableGroup, *, preamble : String)","args_html":"(group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, *, preamble : <a href=\"../../String.html\">String</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2615,"url":null},"def":{"name":"assign","args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"","external_name":"","restriction":""},{"name":"preamble","external_name":"preamble","restriction":"String"}],"splat_index":1,"visibility":"Public","body":"@preambles[group] = preamble"}},{"html_id":"containerof(group:RunnableGroup):RunnableContainer-instance-method","name":"containerof","doc":"Returns the container assigned to *group*.\n\nRaises if *group* is neither an application nor a library.","summary":"<p>Returns the container assigned to <em>group</em>.</p>","abstract":false,"args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"args_string":"(group : RunnableGroup) : RunnableContainer","args_html":"(group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":2622,"url":null},"def":{"name":"containerof","args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"return_type":"RunnableContainer","visibility":"Public","body":"(containerof?(group)) || (raise(\"BUG: container was not assigned to #{group}\"))"}},{"html_id":"containerof?(group:RunnableGroup):RunnableContainer|Nil-instance-method","name":"containerof?","doc":"Returns the container of an application or library *group*, or\nnil if *group* is neither an application nor a library.","summary":"<p>Returns the container of an application or library <em>group</em>, or nil if <em>group</em> is neither an application nor a library.</p>","abstract":false,"args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"args_string":"(group : RunnableGroup) : RunnableContainer | Nil","args_html":"(group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":2628,"url":null},"def":{"name":"containerof?","args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"return_type":"RunnableContainer | ::Nil","visibility":"Public","body":"@containers[group]?"}},{"html_id":"cwd:Path-instance-method","name":"cwd","doc":"Returns the user's current working directory. It is also\nsometimes referred to as the \"primary origin\", \"origin\" as\nin \"primary origin (source) of files\".","summary":"<p>Returns the user's current working directory.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2523,"url":null},"def":{"name":"cwd","visibility":"Public","body":"@cwd"}},{"html_id":"default_env:RunnableEnvironment-instance-method","name":"default_env","doc":"Returns the default runnable environment.\n\nCurrently, current working directory environment is used as the\ndefault runnable environment.\n\nNote that if the current working directory does not have an\nenvironment, a \"virtual\", pathless environment is returned\n(see `defenv`).","summary":"<p>Returns the default runnable environment.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2590,"url":null},"def":{"name":"default_env","return_type":"RunnableEnvironment","visibility":"Public","body":"@envs[nil]"}},{"html_id":"defenv(path:Path|Nil)-instance-method","name":"defenv","doc":"Returns the `RunnableEnvironment` for *path*, creating one if\nit does not exist.\n\nNote that *path* can be nil, which means the created/returned\nenvironment will be so to speak \"virtual\". The only difference\nbeing the \"virtual\" environment's response to disk-related\nquestions. Namely it'll answer does-not-exist (or something\nlike that) to any disk-related question.\n\nNote also, that only one pathless environment can ever created;\nas a consequence, all runnable containers that have no environments\nwill share one pathless runnable environment.","summary":"<p>Returns the <code><a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a></code> for <em>path</em>, creating one if it does not exist.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | ::Nil"}],"args_string":"(path : Path | Nil)","args_html":"(path : Path | Nil)","location":{"filename":"src/novika/resolver.cr","line_number":2578,"url":null},"def":{"name":"defenv","args":[{"name":"path","external_name":"path","restriction":"Path | ::Nil"}],"visibility":"Public","body":"__temp_68 = path\n@envs[__temp_68]? || (@envs[__temp_68] = RunnableEnvironment.new(self, path))\n"}},{"html_id":"defexplicit(query:RunnableQuery)-instance-method","name":"defexplicit","doc":"Marks *query* as explicit (\"hand-written\") within this\nrunnable root.","summary":"<p>Marks <em>query</em> as explicit (&quot;hand-written&quot;) within this runnable root.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"args_string":"(query : RunnableQuery)","args_html":"(query : <a href=\"../../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2558,"url":null},"def":{"name":"defexplicit","args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"visibility":"Public","body":"if query.in?(@explicit)\n  return\nend\n@explicit << query\n"}},{"html_id":"disk:Novika::Resolver::Disk-instance-method","name":"disk","doc":"Returns the disk used by this runnable root.","summary":"<p>Returns the disk used by this runnable root.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2518,"url":null},"def":{"name":"disk","visibility":"Public","body":"@disk"}},{"html_id":"each_set_flag(&:String->)-instance-method","name":"each_set_flag","doc":"Yields all set (true) flags.","summary":"<p>Yields all set (true) flags.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2708,"url":null},"def":{"name":"each_set_flag","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String ->)"},"visibility":"Public","body":"@flags.each do |flag|\n  yield flag\nend"}},{"html_id":"each_wish(&:RunnableQuery->)-instance-method","name":"each_wish","doc":"Yields queries from this runnable root's wishlist of queries.\n\nSee `wish`.","summary":"<p>Yields queries from this runnable root's wishlist of queries.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2550,"url":null},"def":{"name":"each_wish","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableQuery ->)"},"visibility":"Public","body":"@wishes.each do |wish|\n  yield wish\nend"}},{"html_id":"new_primary_container:RunnableContainer-instance-method","name":"new_primary_container","doc":"Creates and returns a new primary `RunnableContainer`.","summary":"<p>Creates and returns a new primary <code><a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2656,"url":null},"def":{"name":"new_primary_container","return_type":"RunnableContainer","visibility":"Public","body":"RunnableContainer.new(self, @cwd, defenv(@cwd))"}},{"html_id":"preambleof?(group:RunnableGroup):String|Nil-instance-method","name":"preambleof?","doc":"Returns the preamble of *group*, or nil if it has none.","summary":"<p>Returns the preamble of <em>group</em>, or nil if it has none.</p>","abstract":false,"args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"args_string":"(group : RunnableGroup) : String | Nil","args_html":"(group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>) : <a href=\"../../String.html\">String</a> | Nil","location":{"filename":"src/novika/resolver.cr","line_number":2633,"url":null},"def":{"name":"preambleof?","args":[{"name":"group","external_name":"group","restriction":"RunnableGroup"}],"return_type":"String | ::Nil","visibility":"Public","body":"@preambles[group]?"}},{"html_id":"send(signal:Signal)-instance-method","name":"send","doc":"Sends *signal* to all `SignalReceiver`s subscribed to this\nrunnable root.","summary":"<p>Sends <em>signal</em> to all <code><a href=\"../../Novika/Resolver/SignalReceiver.html\">SignalReceiver</a></code>s subscribed to this runnable root.</p>","abstract":false,"args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"args_string":"(signal : Signal)","args_html":"(signal : <a href=\"../../Novika/Resolver/Signal.html\">Signal</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2651,"url":null},"def":{"name":"send","args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"visibility":"Public","body":"@receivers.each(&.receive(signal))"}},{"html_id":"serve_permissions(toenv:RunnableEnvironment):PermissionServer-instance-method","name":"serve_permissions","doc":"Creates and returns a permission server in the given runnable\nenvironment *env* and capability collection *caps*.","summary":"<p>Creates and returns a permission server in the given runnable environment <em>env</em> and capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"env","external_name":"to","restriction":"RunnableEnvironment"}],"args_string":"(to env : RunnableEnvironment) : PermissionServer","args_html":"(to env : <a href=\"../../Novika/Resolver/RunnableEnvironment.html\">RunnableEnvironment</a>) : <a href=\"../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>","location":{"filename":"src/novika/resolver.cr","line_number":2662,"url":null},"def":{"name":"serve_permissions","args":[{"name":"env","external_name":"to","restriction":"RunnableEnvironment"}],"return_type":"PermissionServer","visibility":"Public","body":"(PermissionServer.new(env, @explicit)).tap do |server|\n  subscribe(server)\nend"}},{"html_id":"set_flag(name:String,state:Bool)-instance-method","name":"set_flag","doc":"Assigns *state* to a boolean flag with the given *name*.\n\nNote that by design, an unset flag is a false flag, and\nvice versa: if *state* is false, the flag is either not\ncreated, or removed.\n\n```\nroot.set_flag(\"happy\", true)\nroot.set_flag(\"sad\", false)\n```","summary":"<p>Assigns <em>state</em> to a boolean flag with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"state","external_name":"state","restriction":"Bool"}],"args_string":"(name : String, state : Bool)","args_html":"(name : <a href=\"../../String.html\">String</a>, state : Bool)","location":{"filename":"src/novika/resolver.cr","line_number":2694,"url":null},"def":{"name":"set_flag","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"state","external_name":"state","restriction":"Bool"}],"visibility":"Public","body":"if state\n  @flags << name\n  return\nend\nif name.in?(@flags)\n  @flags.delete(name)\nend\n"}},{"html_id":"subscribe(receiver:SignalReceiver)-instance-method","name":"subscribe","doc":"Subscribes *receiver* to this runnable root.","summary":"<p>Subscribes <em>receiver</em> to this runnable root.</p>","abstract":false,"args":[{"name":"receiver","external_name":"receiver","restriction":"SignalReceiver"}],"args_string":"(receiver : SignalReceiver)","args_html":"(receiver : <a href=\"../../Novika/Resolver/SignalReceiver.html\">SignalReceiver</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2640,"url":null},"def":{"name":"subscribe","args":[{"name":"receiver","external_name":"receiver","restriction":"SignalReceiver"}],"visibility":"Public","body":"@receivers << receiver"}},{"html_id":"unsubscribe(receiver:SignalReceiver)-instance-method","name":"unsubscribe","doc":"Unsubscribes *receiver* from this runnable root.","summary":"<p>Unsubscribes <em>receiver</em> from this runnable root.</p>","abstract":false,"args":[{"name":"receiver","external_name":"receiver","restriction":"SignalReceiver"}],"args_string":"(receiver : SignalReceiver)","args_html":"(receiver : <a href=\"../../Novika/Resolver/SignalReceiver.html\">SignalReceiver</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2645,"url":null},"def":{"name":"unsubscribe","args":[{"name":"receiver","external_name":"receiver","restriction":"SignalReceiver"}],"visibility":"Public","body":"@receivers.delete(receiver)"}},{"html_id":"wish(query:RunnableQuery)-instance-method","name":"wish","doc":"Appends *query* to the wishlist of this runnable root (the\nwishlist is like \"outbound queries\" or \"preload requests\").\n\nWishes are picked up from the wishlist by outer infrastructure\nand loaded distinctly. The only guarantee is that they will\nindeed be *pre*loaded relative to the query that made the wish,\nmeaning loaded some time before it.\n\nDoes nothing if *query* is already in the wishlist.","summary":"<p>Appends <em>query</em> to the wishlist of this runnable root (the wishlist is like &quot;outbound queries&quot; or &quot;preload requests&quot;).</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"args_string":"(query : RunnableQuery)","args_html":"(query : <a href=\"../../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2541,"url":null},"def":{"name":"wish","args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"visibility":"Public","body":"if query.in?(@wishes)\n  return\nend\n@wishes << query\n"}}]},{"html_id":"novika/Novika/Resolver/RunnableScript","path":"Novika/Resolver/RunnableScript.html","kind":"class","full_name":"Novika::Resolver::RunnableScript","name":"RunnableScript","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1245,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EXTENSION","name":"EXTENSION","value":"\".nk\""}],"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Represents a Novika script, specifically a '.nk' file.","summary":"<p>Represents a Novika script, specifically a '.nk' file.</p>","constructors":[{"html_id":"new(datum:Path,ancestor=nil)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : Path, ancestor = nil)","args_html":"(datum : Path, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1251,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"abspath-instance-method","name":"abspath","doc":"Returns the absolute path to this script.","summary":"<p>Returns the absolute path to this script.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1256,"url":null},"def":{"name":"abspath","visibility":"Public","body":"if @datum.absolute?\nelse\n  raise(\"BUG: script datum is not an absolute path\")\nend\n@datum\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1262,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"(io << \"Script[\") << @datum\neach_ancestor do |ancestor|\n  (io << \" ← \") << ancestor\nend\nio << \"]\"\n"}}]},{"html_id":"novika/Novika/Resolver/RunnableSelector","path":"Novika/Resolver/RunnableSelector.html","kind":"class","full_name":"Novika::Resolver::RunnableSelector","name":"RunnableSelector","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1076,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Selectors match, and are rewritten to, file system entries in the\ndirectory of the container that is doing the rewriting.","summary":"<p>Selectors match, and are rewritten to, file system entries in the directory of the container that is doing the rewriting.</p>","constructors":[{"html_id":"new(datum:Novika::Resolver::GlobSelector,reject:Set(String)=Set(String).new,ancestor=nil)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Novika::Resolver::GlobSelector"},{"name":"reject","default_value":"Set(String).new","external_name":"reject","restriction":"::Set(::String)"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : Novika::Resolver::GlobSelector, reject : Set(String) = Set(String).new, ancestor = nil)","args_html":"(datum : <a href=\"../../Novika/Resolver/GlobSelector.html\">Novika::Resolver::GlobSelector</a>, reject : <a href=\"../../Set.html\">Set</a>(<a href=\"../../String.html\">String</a>) = <span class=\"t\">Set</span>(<span class=\"t\">String</span>).new, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1079,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Novika::Resolver::GlobSelector"},{"name":"reject","default_value":"Set(String).new","external_name":"reject","restriction":"::Set(::String)"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, reject, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1083,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"container.each_sorted_path(@datum) do |path|\n  basename = path.basename\n  if basename.in?(@reject)\n    next\n  end\n  if basename.starts_with?('_')\n    next\n  end\n  case @datum\n  in .scripts?\n    if path.extension == RunnableScript::EXTENSION\n    else\n      next\n    end\n    runnable = RunnableScript.new(path, ancestor: self)\n  in .directories?\n    runnable = RunnableDir.new(path, ancestor: self)\n    if basename == \"core\"\n      container.prepend(runnable)\n      next\n    end\n  end\n  container.append(runnable)\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1108,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((((io << \"Forall[\") << @datum) << \" ∉ {\") << (@reject.join(','))) << \"}]\""}}]},{"html_id":"novika/Novika/Resolver/RunnableSharedObject","path":"Novika/Resolver/RunnableSharedObject.html","kind":"class","full_name":"Novika::Resolver::RunnableSharedObject","name":"RunnableSharedObject","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency/DefaultPrompt","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency::DefaultPrompt","name":"DefaultPrompt"},{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1178,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"EXTENSION","name":"EXTENSION","value":"\".so\""}],"included_modules":[{"html_id":"novika/Novika/Resolver/Resolution/Dependency","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency","name":"Dependency"},{"html_id":"novika/Novika/Resolver/Resolution/Dependency/DefaultPrompt","kind":"module","full_name":"Novika::Resolver::Resolution::Dependency::DefaultPrompt","name":"DefaultPrompt"},{"html_id":"novika/Novika/Resolver/Runnable/HasDatum","kind":"module","full_name":"Novika::Resolver::Runnable::HasDatum","name":"HasDatum"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Runnable representation of a shared object. Shared objects are\naccessed via FFI Novika-side.","summary":"<p>Runnable representation of a shared object.</p>","constructors":[{"html_id":"new(datum:Path,ancestor=nil)-class-method","name":"new","abstract":false,"args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"args_string":"(datum : Path, ancestor = nil)","args_html":"(datum : Path, ancestor = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/resolver.cr","line_number":1194,"url":null},"def":{"name":"new","args":[{"name":"datum","external_name":"datum","restriction":"::Path"},{"name":"ancestor","default_value":"nil","external_name":"ancestor","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(datum, ancestor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"enable(*,incaps:CapabilityCollection)-instance-method","name":"enable","doc":"If this dependency is `allowed?`, enables it in the given\ncapability collection *caps*.","summary":"<p>If this dependency is <code>allowed?</code>, enables it in the given capability collection <em>caps</em>.</p>","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"args_string":"(*, in caps : CapabilityCollection)","args_html":"(*, in caps : <a href=\"../../Novika/CapabilityCollection.html\">CapabilityCollection</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1226,"url":null},"def":{"name":"enable","args":[{"name":"","external_name":"","restriction":""},{"name":"caps","external_name":"in","restriction":"CapabilityCollection"}],"splat_index":0,"visibility":"Public","body":"if allowed?\nelse\n  return\nend\nif caps.has_library?(id = self.id)\n  return\nend\ncaps << (Library.new(id, @datum))\n"}},{"html_id":"envelope(container:RunnableContainer)-instance-method","name":"envelope","doc":"Returns the string representation of this dependency's envelope\n(its container so to speak). The runtime (not specialize-time!)\n*container* is provided as a fallback option (albeit a *very bad one*).","summary":"<p>Returns the string representation of this dependency's envelope (its container so to speak).</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer)","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1208,"url":null},"def":{"name":"envelope","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"if envelope = @envelope\nelse\n  return \"ancestor(#{container.abspath})\"\nend\nenvelope.abspath.to_s\n"}},{"html_id":"id-instance-method","name":"id","doc":"Returns the id of this shared object.\n\nThe id is made by taking the stem of the path to the object and\nstripping it of the lib prefix, if it has one. For example, given\n`/lib/libmath.so` or `/lib/math.so`, the id would be `math` in\nboth cases.","summary":"<p>Returns the id of this shared object.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":1204,"url":null},"def":{"name":"id","visibility":"Public","body":"@datum.stem.lchop(\"lib\")"}},{"html_id":"label(server:PermissionServer):String-instance-method","name":"label","doc":"Returns a user-friendly string representation of this dependency.\nThe returned string should be suitable for displaying to the user\nin a prompt.\n\n*server* is the permission server that will then use the label in\none way or another. You may also choose to derive the label with\n*server*'s help.","summary":"<p>Returns a user-friendly string representation of this dependency.</p>","abstract":false,"args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"args_string":"(server : PermissionServer) : String","args_html":"(server : <a href=\"../../Novika/Resolver/PermissionServer.html\">PermissionServer</a>) : <a href=\"../../String.html\">String</a>","location":{"filename":"src/novika/resolver.cr","line_number":1222,"url":null},"def":{"name":"label","args":[{"name":"server","external_name":"server","restriction":"PermissionServer"}],"return_type":"String","visibility":"Public","body":"\"shared object #{@datum.colorize.bold}\""}},{"html_id":"signature(container:RunnableContainer):Signature-instance-method","name":"signature","doc":"Returns the signature of this dependency which can be used\nto identify it, most notably in the 'permissions' file.\n\n*container*, assumed to contain this dependency, may be used\nto derive the signature.","summary":"<p>Returns the signature of this dependency which can be used to identify it, most notably in the 'permissions' file.</p>","abstract":false,"args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(container : RunnableContainer) : Signature","args_html":"(container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/Resolution/Dependency/Signature.html\">Signature</a>","location":{"filename":"src/novika/resolver.cr","line_number":1214,"url":null},"def":{"name":"signature","args":[{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"Signature","visibility":"Public","body":"if envelope = @envelope\nelse\n  raise(\"BUG: attempt to read the signature of an unmounted shared object\")\nend\n{envelope.abspath.to_s, @datum.to_s}\n"}},{"html_id":"specialize(root:RunnableRoot,container:RunnableContainer)-instance-method","name":"specialize","doc":"Further specializes this runnable. Appends the specialized runnable\nto (or interacts in some other way with) *container*. The latter is\nassumed to be incomplete (or partially complete, which is really\nthe same thing).\n\n*root* is the runnable root object. It is mainly used for flags and\nthorough rewriting.","summary":"<p>Further specializes this runnable.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, container : RunnableContainer)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>)","location":{"filename":"src/novika/resolver.cr","line_number":1233,"url":null},"def":{"name":"specialize","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"visibility":"Public","body":"@envelope || (@envelope = container)\nsuper(root, container)\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1239,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"((io << \"SharedObject[\") << @datum) << \"]\""}}]},{"html_id":"novika/Novika/Resolver/ScriptsSlot","path":"Novika/Resolver/ScriptsSlot.html","kind":"class","full_name":"Novika::Resolver::ScriptsSlot","name":"ScriptsSlot","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},"ancestors":[{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1336,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Slot (placeholder) that stands for \"all not otherwise mentioned\nNovika scripts\" in the container's directory, represented with `**`.","summary":"<p>Slot (placeholder) that stands for &quot;all not otherwise mentioned Novika scripts&quot; in the container's directory, represented with <code>**</code>.</p>","instance_methods":[{"html_id":"replace(root:RunnableRoot,group:RunnableGroup,manifest:Manifest::Present,population:RunnableContainer,container:RunnableContainer):RunnableContainer-instance-method","name":"replace","doc":"Replaces any occurences of this slot in *container* with a\ncontainer holding the runnables this slot stands for.\n\n*manifest* is the manifest that contains this slot.\n\n*group* is the `RunnableGroup` of the manifest that contains\nthis slot.\n\nReturns the next population container.","summary":"<p>Replaces any occurences of this slot in <em>container</em> with a container holding the runnables this slot stands for.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, manifest : Manifest::Present, population : RunnableContainer, container : RunnableContainer) : RunnableContainer","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, manifest : <a href=\"../../Novika/Resolver/Manifest/Present.html\">Manifest::Present</a>, population : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":1337,"url":null},"def":{"name":"replace","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"RunnableContainer","visibility":"Public","body":"mentioned = population.paths\ncontent = container.child(manifest.directory, transparent: true, ancestor: self)\nroot.disk.glob(manifest.directory, GlobSelector::Scripts) do |datum|\n  if datum.in?(mentioned)\n    next\n  end\n  content.append(RunnableScript.new(datum, ancestor: self))\nend\ncontainer.replace(self, content)\npopulation\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1361,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Slot[*]\""}}]},{"html_id":"novika/Novika/Resolver/Session","path":"Novika/Resolver/Session.html","kind":"class","full_name":"Novika::Resolver::Session","name":"Session","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":2971,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"A resolver session interacts with a `RunnableRoot` in a way that\nallows you to *query*. Querying is done by `push`ing some queries,\nand then `pop`ping them \"into\" a `Response` object which you should\ncreate beforehand, and which you own.\n\n```\nsession = Resolver::Session.new(root)\nsession.push(\"foo\")\nsession.push(\"bar\")\nsession.push(\"baz\")\n\nresponse1 = Resolver::Response.new\nsession.pop(response1)\n\n# Re-use the same session. Queries were popped, so the session\n# is clean.\nsession.push(\"xyzzy\")\nsession.push(\"byzzy\")\n\nresponse2 = Resolver::Response.new\nsession.pop(response2)\n\n# Run the accepted stuff from the responses...\nresponse1.accepted_set.each_designation(root, &.run)\nresponse2.accepted_set.each_designation(root, &.run)\n```","summary":"<p>A resolver session interacts with a <code><a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a></code> in a way that allows you to <em>query</em>.</p>","constructors":[{"html_id":"new(root:RunnableRoot)-class-method","name":"new","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"args_string":"(root : RunnableRoot)","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>)","location":{"filename":"src/novika/resolver.cr","line_number":2972,"url":null},"def":{"name":"new","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"}],"visibility":"Public","body":"_ = allocate\n_.initialize(root)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_explicit(&:RunnableQuery->)-instance-method","name":"each_explicit","doc":"Yields only those queries from the query list that were\nmarked as explicit.","summary":"<p>Yields only those queries from the query list that were marked as explicit.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2997,"url":null},"def":{"name":"each_explicit","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableQuery ->)"},"visibility":"Public","body":"@explicit.each do |query|\n  yield query\nend"}},{"html_id":"each_query(&:RunnableQuery->)-instance-method","name":"each_query","doc":"Yields all queries from the query list.","summary":"<p>Yields all queries from the query list.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3004,"url":null},"def":{"name":"each_query","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(RunnableQuery ->)"},"visibility":"Public","body":"@queries.each do |query|\n  yield query\nend"}},{"html_id":"on_container_rewritten(&callback:RunnableContainer->)-instance-method","name":"on_container_rewritten","doc":"Registers *callback* to be called when a runnable container\nis thoroughly rewritten.","summary":"<p>Registers <em>callback</em> to be called when a runnable container is thoroughly rewritten.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":2979,"url":null},"def":{"name":"on_container_rewritten","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(RunnableContainer ->)"},"visibility":"Public","body":"on_container_rewritten(callback)"}},{"html_id":"on_container_rewritten(callback:RunnableContainer->)-instance-method","name":"on_container_rewritten","doc":"Registers *callback* to be called when a runnable container\nis thoroughly rewritten.","summary":"<p>Registers <em>callback</em> to be called when a runnable container is thoroughly rewritten.</p>","abstract":false,"args":[{"name":"callback","external_name":"callback","restriction":"(RunnableContainer ->)"}],"args_string":"(callback : RunnableContainer -> )","args_html":"(callback : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a> -> )","location":{"filename":"src/novika/resolver.cr","line_number":2984,"url":null},"def":{"name":"on_container_rewritten","args":[{"name":"callback","external_name":"callback","restriction":"(RunnableContainer ->)"}],"visibility":"Public","body":"@on_container_rewritten << callback"}},{"html_id":"pop(response:Response):ResolutionSet-instance-method","name":"pop","doc":"Resolves the list of queries that were `push`ed, returns the single\nresolution set comprised of resolutions for those queries that\nwere accepted by the resolver.\n\nAlso fills *response*, see `ResolverResponse` for what you can\nget out of it.","summary":"<p>Resolves the list of queries that were <code><a href=\"../../Novika/Resolver/Session.html#push%28query%3ARunnableQuery%2Cexplicit%3Dfalse%29-instance-method\">#push</a></code>ed, returns the single resolution set comprised of resolutions for those queries that were accepted by the resolver.</p>","abstract":false,"args":[{"name":"response","external_name":"response","restriction":"Response"}],"args_string":"(response : Response) : ResolutionSet","args_html":"(response : <a href=\"../../Novika/Resolver/Response.html\">Response</a>) : <a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a>","location":{"filename":"src/novika/resolver.cr","line_number":3042,"url":null},"def":{"name":"pop","args":[{"name":"response","external_name":"response","restriction":"Response"}],"return_type":"ResolutionSet","visibility":"Public","body":"pop(response, route: Response::AcceptionRoute::Query, prepend: false)"}},{"html_id":"push(query:RunnableQuery,explicit=false)-instance-method","name":"push","doc":"Appends *query* to the list of queries to be resolved during\nthis session; allows to mark it as *explicit* (\"hand-written\")\nif necessary.","summary":"<p>Appends <em>query</em> to the list of queries to be resolved during this session; allows to mark it as <em>explicit</em> (&quot;hand-written&quot;) if necessary.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"args_string":"(query : RunnableQuery, explicit = false)","args_html":"(query : <a href=\"../../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>, explicit = <span class=\"n\">false</span>)","location":{"filename":"src/novika/resolver.cr","line_number":3011,"url":null},"def":{"name":"push","args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"visibility":"Public","body":"@queries << query\nif explicit\n  @explicit << query\nend\n"}},{"html_id":"push(query:Query,explicit=false)-instance-method","name":"push","doc":"Appends *query* to the list of queries to be resolved during\nthis session; allows to mark it as *explicit* (\"hand-written\")\nif necessary.","summary":"<p>Appends <em>query</em> to the list of queries to be resolved during this session; allows to mark it as <em>explicit</em> (&quot;hand-written&quot;) if necessary.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"Query"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"args_string":"(query : Query, explicit = false)","args_html":"(query : <a href=\"../../Novika/Resolver/Query.html\">Query</a>, explicit = <span class=\"n\">false</span>)","location":{"filename":"src/novika/resolver.cr","line_number":3017,"url":null},"def":{"name":"push","args":[{"name":"query","external_name":"query","restriction":"Query"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"visibility":"Public","body":"push(RunnableQuery.new(query), explicit)"}},{"html_id":"push(queries:Array(RunnableQuery),explicit=false)-instance-method","name":"push","doc":"Appends the entire array of *queries* to the list of queries\nto be resolved during this session; allows to mark *all* of\nthem as *explicit* (\"hand-written\") if necessary.","summary":"<p>Appends the entire array of <em>queries</em> to the list of queries to be resolved during this session; allows to mark <em>all</em> of them as <em>explicit</em> (&quot;hand-written&quot;) if necessary.</p>","abstract":false,"args":[{"name":"queries","external_name":"queries","restriction":"Array(RunnableQuery)"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"args_string":"(queries : Array(RunnableQuery), explicit = false)","args_html":"(queries : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>), explicit = <span class=\"n\">false</span>)","location":{"filename":"src/novika/resolver.cr","line_number":3024,"url":null},"def":{"name":"push","args":[{"name":"queries","external_name":"queries","restriction":"Array(RunnableQuery)"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"visibility":"Public","body":"@queries.concat(queries)\nif explicit\n  @explicit.concat(queries)\nend\n"}},{"html_id":"push(queries:Array(Query)|Array(String)|Array(Path),explicit=false)-instance-method","name":"push","doc":"Appends the entire array of *queries* to the list of queries\nto be resolved during this session; allows to mark *all* of\nthem as *explicit* (\"hand-written\") if necessary.","summary":"<p>Appends the entire array of <em>queries</em> to the list of queries to be resolved during this session; allows to mark <em>all</em> of them as <em>explicit</em> (&quot;hand-written&quot;) if necessary.</p>","abstract":false,"args":[{"name":"queries","external_name":"queries","restriction":"Array(Query) | Array(String) | Array(Path)"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"args_string":"(queries : Array(Query) | Array(String) | Array(Path), explicit = false)","args_html":"(queries : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Novika/Resolver/Query.html\">Query</a>) | <a href=\"../../Array.html\">Array</a>(<a href=\"../../String.html\">String</a>) | <a href=\"../../Array.html\">Array</a>(Path), explicit = <span class=\"n\">false</span>)","location":{"filename":"src/novika/resolver.cr","line_number":3030,"url":null},"def":{"name":"push","args":[{"name":"queries","external_name":"queries","restriction":"Array(Query) | Array(String) | Array(Path)"},{"name":"explicit","default_value":"false","external_name":"explicit","restriction":""}],"visibility":"Public","body":"push(queries.map do |query|\n  RunnableQuery.new(query)\nend, explicit)"}}]},{"html_id":"novika/Novika/Resolver/Signal","path":"Novika/Resolver/Signal.html","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal","abstract":true,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":57,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/Resolver/DoDiskLoad","kind":"struct","full_name":"Novika::Resolver::DoDiskLoad","name":"DoDiskLoad"},{"html_id":"novika/Novika/Resolver/DoDiskSave","kind":"struct","full_name":"Novika::Resolver::DoDiskSave","name":"DoDiskSave"},{"html_id":"novika/Novika/Resolver/RunnableIgnored","kind":"struct","full_name":"Novika::Resolver::RunnableIgnored","name":"RunnableIgnored"},{"html_id":"novika/Novika/Resolver/ToAnswerDo","kind":"struct","full_name":"Novika::Resolver::ToAnswerDo","name":"ToAnswerDo"},{"html_id":"novika/Novika/Resolver/ToAskDo","kind":"struct","full_name":"Novika::Resolver::ToAskDo","name":"ToAskDo"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Base class of signals received by `SignalReceiver`s","summary":"<p>Base class of signals received by <code><a href=\"../../Novika/Resolver/SignalReceiver.html\">SignalReceiver</a></code>s</p>","constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":57,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":57,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Resolver/SignalReceiver","path":"Novika/Resolver/SignalReceiver.html","kind":"module","full_name":"Novika::Resolver::SignalReceiver","name":"SignalReceiver","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":89,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Resolver/PermissionServer","kind":"class","full_name":"Novika::Resolver::PermissionServer","name":"PermissionServer"},{"html_id":"novika/Novika/Resolver/Response","kind":"struct","full_name":"Novika::Resolver::Response","name":"Response"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"`SignalReceiver`s can receive signals sent by the `RunnableRoot`.\n\nThis is basically an observer/observable system sitting on top of\nrunnable root, mainly to have a nice way to communicate, via runnable\nroot, with objects interested in communication.","summary":"<p><code><a href=\"../../Novika/Resolver/SignalReceiver.html\">SignalReceiver</a></code>s can receive signals sent by the <code><a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a></code>.</p>","instance_methods":[{"html_id":"receive(signal:Signal)-instance-method","name":"receive","doc":"Receives and reacts to a *signal* sent by `RunnableRoot`.","summary":"<p>Receives and reacts to a <em>signal</em> sent by <code><a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a></code>.</p>","abstract":true,"args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"args_string":"(signal : Signal)","args_html":"(signal : <a href=\"../../Novika/Resolver/Signal.html\">Signal</a>)","location":{"filename":"src/novika/resolver.cr","line_number":91,"url":null},"def":{"name":"receive","args":[{"name":"signal","external_name":"signal","restriction":"Signal"}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Resolver/Slot","path":"Novika/Resolver/Slot.html","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot","abstract":true,"superclass":{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},"ancestors":[{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1313,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"}],"subclasses":[{"html_id":"novika/Novika/Resolver/ChildSlot","kind":"class","full_name":"Novika::Resolver::ChildSlot","name":"ChildSlot"},{"html_id":"novika/Novika/Resolver/ScriptsSlot","kind":"class","full_name":"Novika::Resolver::ScriptsSlot","name":"ScriptsSlot"},{"html_id":"novika/Novika/Resolver/SubtreeSlot","kind":"class","full_name":"Novika::Resolver::SubtreeSlot","name":"SubtreeSlot"}],"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Base class of `ScriptsSlot` (known to the user as `*`), `SubtreeSlot`\n(known to the user as `**`), and `ChildSlot` (`<>`).\n\nSlots act as mere sentinels (or placeholders). They get `replace`d\nwith runnable containers that hold the appropriate runnables during\npostprocessing of the manifest file, provided the latter has some\nslots to begin with.\n\nThe use of slot literals `*`, `**`, and `<>` is only allowed inside\nmanifest files.\n\nEven though using several `*`s is allowed, it is pointless to do\nso because the first `*` (or `**` for that matter) will 'consume'\nall remaining file system entries, leaving none to the second,\nthird, etc. `*` or `**`.","summary":"<p>Base class of <code><a href=\"../../Novika/Resolver/ScriptsSlot.html\">ScriptsSlot</a></code> (known to the user as <code>*</code>), <code><a href=\"../../Novika/Resolver/SubtreeSlot.html\">SubtreeSlot</a></code> (known to the user as <code>**</code>), and <code><a href=\"../../Novika/Resolver/ChildSlot.html\">ChildSlot</a></code> (<code>&lt;&gt;</code>).</p>","instance_methods":[{"html_id":"replace(root:RunnableRoot,group:RunnableGroup,manifest:Manifest::Present,population:RunnableContainer,container:RunnableContainer):RunnableContainer-instance-method","name":"replace","doc":"Replaces any occurences of this slot in *container* with a\ncontainer holding the runnables this slot stands for.\n\n*manifest* is the manifest that contains this slot.\n\n*group* is the `RunnableGroup` of the manifest that contains\nthis slot.\n\nReturns the next population container.","summary":"<p>Replaces any occurences of this slot in <em>container</em> with a container holding the runnables this slot stands for.</p>","abstract":true,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, manifest : Manifest::Present, population : RunnableContainer, container : RunnableContainer) : RunnableContainer","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, manifest : <a href=\"../../Novika/Resolver/Manifest/Present.html\">Manifest::Present</a>, population : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":1325,"url":null},"def":{"name":"replace","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"RunnableContainer","visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Resolver/SubtreeSlot","path":"Novika/Resolver/SubtreeSlot.html","kind":"class","full_name":"Novika::Resolver::SubtreeSlot","name":"SubtreeSlot","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},"ancestors":[{"html_id":"novika/Novika/Resolver/Slot","kind":"class","full_name":"Novika::Resolver::Slot","name":"Slot"},{"html_id":"novika/Novika/Resolver/Runnable/Terminal","kind":"module","full_name":"Novika::Resolver::Runnable::Terminal","name":"Terminal"},{"html_id":"novika/Novika/Resolver/Runnable","kind":"class","full_name":"Novika::Resolver::Runnable","name":"Runnable"},{"html_id":"novika/Novika/Resolver/Runnable/Ancestor","kind":"module","full_name":"Novika::Resolver::Runnable::Ancestor","name":"Ancestor"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":1370,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"Slot (placeholder) that stands for \"all not otherwise mentioned\nNovika scripts and directories in the subtree (recursively),\nexcept for Novika application and library directories\",\nrepresented with `**`.","summary":"<p>Slot (placeholder) that stands for &quot;all not otherwise mentioned Novika scripts and directories in the subtree (recursively), except for Novika application and library directories&quot;, represented with <code>**</code>.</p>","instance_methods":[{"html_id":"replace(root:RunnableRoot,group:RunnableGroup,manifest:Manifest::Present,population:RunnableContainer,container:RunnableContainer):RunnableContainer-instance-method","name":"replace","doc":"Replaces any occurences of this slot in *container* with a\ncontainer holding the runnables this slot stands for.\n\n*manifest* is the manifest that contains this slot.\n\n*group* is the `RunnableGroup` of the manifest that contains\nthis slot.\n\nReturns the next population container.","summary":"<p>Replaces any occurences of this slot in <em>container</em> with a container holding the runnables this slot stands for.</p>","abstract":false,"args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"args_string":"(root : RunnableRoot, group : RunnableGroup, manifest : Manifest::Present, population : RunnableContainer, container : RunnableContainer) : RunnableContainer","args_html":"(root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, group : <a href=\"../../Novika/Resolver/RunnableGroup.html\">RunnableGroup</a>, manifest : <a href=\"../../Novika/Resolver/Manifest/Present.html\">Manifest::Present</a>, population : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>, container : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>) : <a href=\"../../Novika/Resolver/RunnableContainer.html\">RunnableContainer</a>","location":{"filename":"src/novika/resolver.cr","line_number":1371,"url":null},"def":{"name":"replace","args":[{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"group","external_name":"group","restriction":"RunnableGroup"},{"name":"manifest","external_name":"manifest","restriction":"Manifest::Present"},{"name":"population","external_name":"population","restriction":"RunnableContainer"},{"name":"container","external_name":"container","restriction":"RunnableContainer"}],"return_type":"RunnableContainer","visibility":"Public","body":"mentioned = population.paths\ncontent = container.child(manifest.directory, transparent: true, ancestor: self)\ncontent.allow? do |r|\n  !(r.is_a?(RunnableGroup) && (r.app? || r.lib?))\nend\ncontainer.replace(self, content)\nmanifest.layout(content, group)\ncontent.rewrite\ncontent.recursive_select! do |runnable|\n  if runnable.is_a?(RunnableScript) || runnable.is_a?(RunnableContainer)\n  else\n    next false\n  end\n  !(runnable.abspath.in?(mentioned))\nend\npopulation\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/resolver.cr","line_number":1416,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"Slot[**]\""}}]},{"html_id":"novika/Novika/Resolver/ToAnswerDo","path":"Novika/Resolver/ToAnswerDo.html","kind":"struct","full_name":"Novika::Resolver::ToAnswerDo","name":"ToAnswerDo","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},"ancestors":[{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":80,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"If signal receivers want to answer a question, gives them\na Proc which will allow them to do that.","summary":"<p>If signal receivers want to answer a question, gives them a Proc which will allow them to do that.</p>","constructors":[{"html_id":"new(fn:Fn)-class-method","name":"new","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"Fn"}],"args_string":"(fn : Fn)","args_html":"(fn : <a href=\"../../Novika/Resolver/ToAnswerDo/Fn.html\">Fn</a>)","location":{"filename":"src/novika/resolver.cr","line_number":80,"url":null},"def":{"name":"new","args":[{"name":"fn","external_name":"fn","restriction":"Fn"}],"visibility":"Public","body":"_ = allocate\n_.initialize(fn)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":80,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@fn.clone)"}},{"html_id":"copy_with(fn_fn=@fn)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_fn","default_value":"@fn","external_name":"fn","restriction":""}],"args_string":"(fn _fn = @fn)","args_html":"(fn _fn = @fn)","location":{"filename":"src/novika/resolver.cr","line_number":80,"url":null},"def":{"name":"copy_with","args":[{"name":"_fn","default_value":"@fn","external_name":"fn","restriction":""}],"visibility":"Public","body":"self.class.new(_fn)"}},{"html_id":"fn:Fn-instance-method","name":"fn","abstract":false,"def":{"name":"fn","return_type":"Fn","visibility":"Public","body":"@fn"}}],"types":[{"html_id":"novika/Novika/Resolver/ToAnswerDo/Fn","path":"Novika/Resolver/ToAnswerDo/Fn.html","kind":"alias","full_name":"Novika::Resolver::ToAnswerDo::Fn","name":"Fn","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":81,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"Proc(String, Nil)","aliased_html":"<a href=\"../../../String.html\">String</a> -> Nil","const":false,"namespace":{"html_id":"novika/Novika/Resolver/ToAnswerDo","kind":"struct","full_name":"Novika::Resolver::ToAnswerDo","name":"ToAnswerDo"}}]},{"html_id":"novika/Novika/Resolver/ToAskDo","path":"Novika/Resolver/ToAskDo.html","kind":"struct","full_name":"Novika::Resolver::ToAskDo","name":"ToAskDo","abstract":false,"superclass":{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},"ancestors":[{"html_id":"novika/Novika/Resolver/Signal","kind":"struct","full_name":"Novika::Resolver::Signal","name":"Signal"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":74,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},"doc":"If signal receivers want to ask a question, gives them\na Proc which will do that and return a string answer, or\nnil if the user discarded the question.","summary":"<p>If signal receivers want to ask a question, gives them a Proc which will do that and return a string answer, or nil if the user discarded the question.</p>","constructors":[{"html_id":"new(fn:Fn)-class-method","name":"new","abstract":false,"args":[{"name":"fn","external_name":"fn","restriction":"Fn"}],"args_string":"(fn : Fn)","args_html":"(fn : <a href=\"../../Novika/Resolver/ToAskDo/Fn.html\">Fn</a>)","location":{"filename":"src/novika/resolver.cr","line_number":74,"url":null},"def":{"name":"new","args":[{"name":"fn","external_name":"fn","restriction":"Fn"}],"visibility":"Public","body":"_ = allocate\n_.initialize(fn)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":74,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@fn.clone)"}},{"html_id":"copy_with(fn_fn=@fn)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_fn","default_value":"@fn","external_name":"fn","restriction":""}],"args_string":"(fn _fn = @fn)","args_html":"(fn _fn = @fn)","location":{"filename":"src/novika/resolver.cr","line_number":74,"url":null},"def":{"name":"copy_with","args":[{"name":"_fn","default_value":"@fn","external_name":"fn","restriction":""}],"visibility":"Public","body":"self.class.new(_fn)"}},{"html_id":"fn:Fn-instance-method","name":"fn","abstract":false,"def":{"name":"fn","return_type":"Fn","visibility":"Public","body":"@fn"}}],"types":[{"html_id":"novika/Novika/Resolver/ToAskDo/Fn","path":"Novika/Resolver/ToAskDo/Fn.html","kind":"alias","full_name":"Novika::Resolver::ToAskDo::Fn","name":"Fn","abstract":false,"locations":[{"filename":"src/novika/resolver.cr","line_number":75,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":true,"aliased":"Proc(String, (String | Nil))","aliased_html":"<a href=\"../../../String.html\">String</a> -> <a href=\"../../../String.html\">String</a>?","const":false,"namespace":{"html_id":"novika/Novika/Resolver/ToAskDo","kind":"struct","full_name":"Novika::Resolver::ToAskDo","name":"ToAskDo"}}]}]},{"html_id":"novika/Novika/RunnableResolver","path":"Novika/RunnableResolver.html","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":3094,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Resolver","kind":"module","full_name":"Novika::Resolver","name":"Resolver"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A very high-level interface to the Novika resolver. Designed as one-\nshot, meaning you shouldn't reuse the same object twice or call\n`resolve?` twice. In this regard, as a protection, calling `resolve?`\ntwice will raise.\n\nSee `Session` and `Response` if you want a lower-level interface.\n\n```\nresolver = Novika::RunnableResolver.new(cwd: Path[Dir.current], args: [\"repl\"])\n\n# Define 'gets' and 'print' to ask for permissions.\n\nresolver.on_permissions_gets do |string|\n  print string\n  gets\nend\n\nresolver.on_permissions_print do |string|\n  print string\nend\n\n# Run \"repl\" and everything it requested.\n\nresolver.after_permissions(&.run)\nresolver.resolve?\n```","summary":"<p>A very high-level interface to the Novika resolver.</p>","constructors":[{"html_id":"new(cwd:Path,args:Array(Query))-class-method","name":"new","doc":"Creates a new resolver for the given current working directory\n*cwd* and query arguments *args*.\n\nSee `RunnableResolver`.","summary":"<p>Creates a new resolver for the given current working directory <em>cwd</em> and query arguments <em>args</em>.</p>","abstract":false,"args":[{"name":"cwd","external_name":"cwd","restriction":"Path"},{"name":"args","external_name":"args","restriction":"Array(Query)"}],"args_string":"(cwd : Path, args : Array(Query))","args_html":"(cwd : Path, args : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Resolver/Query.html\">Query</a>))","location":{"filename":"src/novika/resolver.cr","line_number":3165,"url":null},"def":{"name":"new","args":[{"name":"cwd","external_name":"cwd","restriction":"Path"},{"name":"args","external_name":"args","restriction":"Array(Query)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(cwd, args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"after_container_rewritten(&callback:RunnableContainer->)-instance-method","name":"after_container_rewritten","doc":"Called when some container under this resolver was thoroughly rewritten.\n\nYou'll have to do additional checks to figure out where the\ncontainer came from. This is mainly an inspection method.","summary":"<p>Called when some container under this resolver was thoroughly rewritten.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3209,"url":null},"def":{"name":"after_container_rewritten","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(RunnableContainer ->)"},"visibility":"Public","body":"@session.on_container_rewritten(callback)"}},{"html_id":"after_permissions(&callback:PermissionsHook->)-instance-method","name":"after_permissions","doc":"Registers *callback* to run after a valid Novika program is formed,\nand permissions are given.","summary":"<p>Registers <em>callback</em> to run after a valid Novika program is formed, and permissions are given.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3244,"url":null},"def":{"name":"after_permissions","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(PermissionsHook ->)"},"visibility":"Public","body":"@after_permissions << callback"}},{"html_id":"after_program(&callback:ProgramHook->)-instance-method","name":"after_program","doc":"Registers *callback* to run after a valid Novika program is formed.\nSee `ProgramHook` to learn what is considered a Novika program.","summary":"<p>Registers <em>callback</em> to run after a valid Novika program is formed.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3230,"url":null},"def":{"name":"after_program","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(ProgramHook ->)"},"visibility":"Public","body":"@after_program << callback"}},{"html_id":"after_response(&callback:ResponseHook->)-instance-method","name":"after_response","doc":"Registers *callback* to run after a valid response is formed.","summary":"<p>Registers <em>callback</em> to run after a valid response is formed.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3216,"url":null},"def":{"name":"after_response","yields":1,"block_arity":1,"block_arg":{"name":"callback","external_name":"callback","restriction":"(ResponseHook ->)"},"visibility":"Public","body":"@after_response << callback"}},{"html_id":"argument?(query:RunnableQuery)-instance-method","name":"argument?","doc":"Returns whether *query* was passed as an argument to this resolver.","summary":"<p>Returns whether <em>query</em> was passed as an argument to this resolver.</p>","abstract":false,"args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"args_string":"(query : RunnableQuery)","args_html":"(query : <a href=\"../Novika/Resolver/RunnableQuery.html\">RunnableQuery</a>)","location":{"filename":"src/novika/resolver.cr","line_number":3192,"url":null},"def":{"name":"argument?","args":[{"name":"query","external_name":"query","restriction":"RunnableQuery"}],"visibility":"Public","body":"@args.any?(&.same?(query))"}},{"html_id":"on_permissions_gets(&on_permissions_gets:String->String|Nil)-instance-method","name":"on_permissions_gets","doc":"Registers a handler for permissions `gets`. Overrides the previous\nhandler, if any.","summary":"<p>Registers a handler for permissions <code>gets</code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3259,"url":null},"def":{"name":"on_permissions_gets","yields":1,"block_arity":1,"block_arg":{"name":"on_permissions_gets","external_name":"on_permissions_gets","restriction":"(String -> String | ::Nil)"},"visibility":"Public","body":"@on_permissions_gets = on_permissions_gets"}},{"html_id":"on_permissions_print(&on_permissions_print:String->)-instance-method","name":"on_permissions_print","doc":"Registers a handler for permissions `print`. Overrides the previous\nhandler, if any.","summary":"<p>Registers a handler for permissions <code>print</code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3264,"url":null},"def":{"name":"on_permissions_print","yields":1,"block_arity":1,"block_arg":{"name":"on_permissions_print","external_name":"on_permissions_print","restriction":"(String ->)"},"visibility":"Public","body":"@on_permissions_print = on_permissions_print"}},{"html_id":"resolve?:Bool-instance-method","name":"resolve?","doc":"Performs resolution. Returns `true` if resolution is successful,\n`false` if the resolver had nothing to do (not even an error).","summary":"<p>Performs resolution.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3295,"url":null},"def":{"name":"resolve?","return_type":"Bool","visibility":"Public","body":"if @resolved\n  raise(\"BUG: attempt to RunnableResolver#resolve? twice\")\nend\nif @args.empty?\n  manifest = Manifest.find(@root.disk, @cwd)\n  if resolve_cwd?(manifest)\n  else\n    return false\n  end\nelse\n  sched?(@args, explicit: true)\nend\nif @response.successful?\nelse\n  raise(ResponseRejectedError.new(@response))\nend\non_response(@response)\nprogram = @response.accepted_set\napps = program.unique_apps\nif apps.size > 1\n  raise(MoreThanOneAppError.new(apps))\nend\non_program(program)\n@root.send(DoDiskLoad.new)\n@root.send(ToAskDo.new(@on_permissions_gets))\n@root.send(ToAnswerDo.new(@on_permissions_print))\nprogram.each_unique_dependency_with_dependents do |dependency, dependents|\n  skiplist = Set(Resolution).new\n  visited = Set(RunnableGroup).new\n  dependents.each_group do |group, resolution|\n    if group.app? || group.lib?\n    else\n      next\n    end\n    if group.in?(visited)\n      skiplist << resolution\n      next\n    end\n    container = @root.containerof(group)\n    container.request(dependency)\n    visited << group\n    skiplist << resolution\n  end\n  dependents.each do |resolution|\n    if resolution.in?(skiplist)\n      next\n    end\n    resolution.each_dependency(&.allow)\n  end\nend\n@root.send(DoDiskSave.new)\non_permissions(program)\n@resolved = true\ntrue\n"}}],"types":[{"html_id":"novika/Novika/RunnableResolver/PermissionsHook","path":"Novika/RunnableResolver/PermissionsHook.html","kind":"class","full_name":"Novika::RunnableResolver::PermissionsHook","name":"PermissionsHook","abstract":false,"superclass":{"html_id":"novika/Novika/RunnableResolver/ProgramHook","kind":"class","full_name":"Novika::RunnableResolver::ProgramHook","name":"ProgramHook"},"ancestors":[{"html_id":"novika/Novika/RunnableResolver/ProgramHook","kind":"class","full_name":"Novika::RunnableResolver::ProgramHook","name":"ProgramHook"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":3142,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/RunnableResolver","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver"},"doc":"Same as `ProgramHook` but also allows you to run the program.","summary":"<p>Same as <code><a href=\"../../Novika/RunnableResolver/ProgramHook.html\">ProgramHook</a></code> but also allows you to run the program.</p>","instance_methods":[{"html_id":"designations:Array(Designation)-instance-method","name":"designations","doc":"Returns the list of designations in the program.","summary":"<p>Returns the list of designations in the program.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3144,"url":null},"def":{"name":"designations","return_type":"Array(Designation)","visibility":"Public","body":"designations = [] of Designation\n@program.each_designation(@root) do |designation|\n  designations << designation\nend\ndesignations\n"}},{"html_id":"run-instance-method","name":"run","doc":"Runs the program.","summary":"<p>Runs the program.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3153,"url":null},"def":{"name":"run","visibility":"Public","body":"@program.each_designation(@root, &.run)"}}]},{"html_id":"novika/Novika/RunnableResolver/ProgramHook","path":"Novika/RunnableResolver/ProgramHook.html","kind":"class","full_name":"Novika::RunnableResolver::ProgramHook","name":"ProgramHook","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":3126,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"novika/Novika/RunnableResolver/PermissionsHook","kind":"class","full_name":"Novika::RunnableResolver::PermissionsHook","name":"PermissionsHook"}],"namespace":{"html_id":"novika/Novika/RunnableResolver","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver"},"doc":"An object that helps you do high-level things with a `ResolutionSet`\nfor the entire *program*.\n\nA Novika program is basically a collection of properly arranged\nNovika scripts. This is represented by a single `ResolutionSet`,\nwhich is an ordered set. It being a set means that you cannot\nexecute a single script twice in one session of the resolver,\nthat is, globally.","summary":"<p>An object that helps you do high-level things with a <code><a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a></code> for the entire <em>program</em>.</p>","constructors":[{"html_id":"new(resolver:RunnableResolver,root:RunnableRoot,program:ResolutionSet)-class-method","name":"new","abstract":false,"args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"program","external_name":"program","restriction":"ResolutionSet"}],"args_string":"(resolver : RunnableResolver, root : RunnableRoot, program : ResolutionSet)","args_html":"(resolver : <a href=\"../../Novika/RunnableResolver.html\">RunnableResolver</a>, root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, program : <a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a>)","location":{"filename":"src/novika/resolver.cr","line_number":3130,"url":null},"def":{"name":"new","args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"program","external_name":"program","restriction":"ResolutionSet"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resolver, root, program)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_designation(&:Designation->)-instance-method","name":"each_designation","doc":"Makes and yields designations for the program.\n\nSee `Designation` to learn what they are.","summary":"<p>Makes and yields designations for the program.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3136,"url":null},"def":{"name":"each_designation","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Designation ->)"},"visibility":"Public","body":"@program.each_designation(@root) do |designation|\n  yield designation\nend"}},{"html_id":"program:Novika::Resolver::ResolutionSet-instance-method","name":"program","doc":"Returns the program `ResolutionSet`.","summary":"<p>Returns the program <code><a href=\"../../Novika/Resolver/ResolutionSet.html\">ResolutionSet</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3128,"url":null},"def":{"name":"program","visibility":"Public","body":"@program"}}]},{"html_id":"novika/Novika/RunnableResolver/ResponseHook","path":"Novika/RunnableResolver/ResponseHook.html","kind":"class","full_name":"Novika::RunnableResolver::ResponseHook","name":"ResponseHook","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/resolver.cr","line_number":3098,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika/RunnableResolver","kind":"class","full_name":"Novika::RunnableResolver","name":"RunnableResolver"},"doc":"An object that helps you do high-level things with a `Response`.","summary":"<p>An object that helps you do high-level things with a <code><a href=\"../../Novika/Resolver/Response.html\">Response</a></code>.</p>","constructors":[{"html_id":"new(resolver:RunnableResolver,root:RunnableRoot,response:Response)-class-method","name":"new","abstract":false,"args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"response","external_name":"response","restriction":"Response"}],"args_string":"(resolver : RunnableResolver, root : RunnableRoot, response : Response)","args_html":"(resolver : <a href=\"../../Novika/RunnableResolver.html\">RunnableResolver</a>, root : <a href=\"../../Novika/Resolver/RunnableRoot.html\">RunnableRoot</a>, response : <a href=\"../../Novika/Resolver/Response.html\">Response</a>)","location":{"filename":"src/novika/resolver.cr","line_number":3102,"url":null},"def":{"name":"new","args":[{"name":"resolver","external_name":"resolver","restriction":"RunnableResolver"},{"name":"root","external_name":"root","restriction":"RunnableRoot"},{"name":"response","external_name":"response","restriction":"Response"}],"visibility":"Public","body":"_ = allocate\n_.initialize(resolver, root, response)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_queried_for_preamble_with_group(&:String,RunnableGroup->)-instance-method","name":"each_queried_for_preamble_with_group","doc":"Yields preambles of apps and libs that were queried for in\narguments to `RunnableResolver#new` specifically, followed by\ntheir corresponding runnable groups.","summary":"<p>Yields preambles of apps and libs that were queried for in arguments to <code><a href=\"../../Novika/RunnableResolver.html#new%28cwd%3APath%2Cargs%3AArray%28Query%29%29-class-method\">RunnableResolver#new</a></code> specifically, followed by their corresponding runnable groups.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3108,"url":null},"def":{"name":"each_queried_for_preamble_with_group","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(String, RunnableGroup ->)"},"visibility":"Public","body":"@response.queried_for_set.each_preamble_with_group(@root) do |preamble, group|\n  if query = group.ancestors.find(RunnableQuery)\n  else\n    next\n  end\n  if @resolver.argument?(query)\n  else\n    next\n  end\n  yield preamble, group\nend"}},{"html_id":"response:Novika::Resolver::Response-instance-method","name":"response","doc":"Returns the `Response` object.","summary":"<p>Returns the <code><a href=\"../../Novika/Resolver/Response.html\">Response</a></code> object.</p>","abstract":false,"location":{"filename":"src/novika/resolver.cr","line_number":3100,"url":null},"def":{"name":"response","visibility":"Public","body":"@response"}}]}]},{"html_id":"novika/Novika/Schedulable","path":"Novika/Schedulable.html","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable","abstract":false,"locations":[{"filename":"src/novika/forms/form.cr","line_number":26,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Entry","kind":"class","full_name":"Novika::Entry","name":"Entry"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Marks this object as schedulable in `Engine`.","summary":"<p>Marks this object as schedulable in <code><a href=\"../Novika/Engine.html\">Engine</a></code>.</p>","instance_methods":[{"html_id":"schedule(engine:Engine,stack:Block)-instance-method","name":"schedule","doc":"Safe `schedule`. Schedules this form for opening (aka\nexecution or evaluation) in *engine*, or opens it\nimmediately (see `ShouldOpenWhenScheduled`).\n\nSee `Engine` to learn about the difference between `schedule`,\n`on_open`, and `on_parent_open`.","summary":"<p>Safe <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">#schedule</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":81,"url":null},"def":{"name":"schedule","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"schedule!(engine, stack)"}},{"html_id":"schedule!(engine:Engine,stack:Block)-instance-method","name":"schedule!","doc":"Unsafe `schedule`. Use `schedule` unless you have instantiated\nthis form yourself, or know what you're doing.\n\nOverride this if you want to implement both safe `schedule`\nand unsafe `schedule!` for your form type: safe `schedule`\nsimply delegates to `schedule!` unless it is explicitly\noverridden.\n\nBy default, simply pushes this form onto *stack*.","summary":"<p>Unsafe <code><a href=\"../Novika/Schedulable.html#schedule%28engine%3AEngine%2Cstack%3ABlock%29-instance-method\">#schedule</a></code>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>, stack : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":71,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"onto(stack)"}}],"types":[{"html_id":"novika/Novika/Schedulable/ShouldOpenWhenScheduled","path":"Novika/Schedulable/ShouldOpenWhenScheduled.html","kind":"module","full_name":"Novika::Schedulable::ShouldOpenWhenScheduled","name":"ShouldOpenWhenScheduled","abstract":false,"locations":[{"filename":"src/novika/forms/form.cr","line_number":52,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Builtin","kind":"struct","full_name":"Novika::Builtin","name":"Builtin"},{"html_id":"novika/Novika/ForeignFunction","kind":"struct","full_name":"Novika::ForeignFunction","name":"ForeignFunction"},{"html_id":"novika/Novika/Hole","kind":"struct","full_name":"Novika::Hole","name":"Hole"},{"html_id":"novika/Novika/Library","kind":"class","full_name":"Novika::Library","name":"Library"},{"html_id":"novika/Novika/QuotedWord","kind":"struct","full_name":"Novika::QuotedWord","name":"QuotedWord"}],"namespace":{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},"doc":"The includer should be a `Form`.\n\nIf the scheduled stack is the same as the active stack,\nthe includer form is simply opened (see `Form#on_open`)\nwithout any kind of scheduling or waiting for the engine\nto pick it up.\n\nHowever, if the scheduled stack is different from the\nactive stack, things get just a bit more difficult.\n\nNamely, a fictious block holding this form is created,\nand scheduled \"as normal\". Then, this form is also\nsimply opened.\n\nNote that we *do not* set the fictious block's cursor\nto 0. This handles the following two things.\n\nFirst, the engine won't try to open the includer form\nagain on the next interpreter loop cycle (remember we\nalready called `Form#on_open` on it).\n\nSecond, if *form* schedules something else, all will work\nas expected: first, this something will run, and then all\nthat's above, again, without re-running the includer form\nbecause the cursor is past it.","summary":"<p>The includer should be a <code><a href=\"../../Novika/Form.html\">Form</a></code>.</p>","instance_methods":[{"html_id":"schedule!(engine:Engine,stack:Block)-instance-method","name":"schedule!","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"args_string":"(engine : Engine, stack : Block)","args_html":"(engine : <a href=\"../../Novika/Engine.html\">Engine</a>, stack : <a href=\"../../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/forms/form.cr","line_number":53,"url":null},"def":{"name":"schedule!","args":[{"name":"engine","external_name":"engine","restriction":"Engine"},{"name":"stack","external_name":"stack","restriction":"Block"}],"visibility":"Public","body":"if stack.same?(engine.stack)\nelse\n  engine.schedule!(stack: stack, block: Block.with(self))\nend\non_open(engine)\n"}}]}]},{"html_id":"novika/Novika/Scissors","path":"Novika/Scissors.html","kind":"struct","full_name":"Novika::Scissors","name":"Scissors","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/scissors.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Scissors deal with cutting a source string into fragments,\nknown as *unclassified forms*. They are then fed to an\ninstance of `Classifier`, which determines whether an\nunclassified form is actually a decimal, quoted word,\nquote, etc. You can think of Scissors as a fancy split-\nby-whitespace.\n\n`Scissors` and `Classifier` are designed to work in tandem.\nSeparating one from the other is possible and will work, but is\nnot recommended unless you have read the source code of both.","summary":"<p>Scissors deal with cutting a source string into fragments, known as <em>unclassified forms</em>.</p>","class_methods":[{"html_id":"cut(source:String,&:Int32,Int32,Int32|Nil->)-class-method","name":"cut","doc":"Cuts *source* into a series of *unclassified forms*; yields\nstart byte index and byte length of each to the block.","summary":"<p>Cuts <em>source</em> into a series of <em>unclassified forms</em>; yields start byte index and byte length of each to the block.</p>","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String, & : Int32, Int32, Int32 | Nil -> )","args_html":"(source : <a href=\"../String.html\">String</a>, & : Int32, Int32, Int32 | Nil -> )","location":{"filename":"src/novika/scissors.cr","line_number":215,"url":null},"def":{"name":"cut","args":[{"name":"source","external_name":"source","restriction":"String"}],"yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Int32, Int32, Int32 | ::Nil ->)"},"visibility":"Public","body":"slicer = new(source)\nslicer.each do |start, count, dot|\n  yield start, count, dot\nend\n"}}],"constructors":[{"html_id":"new(source:String)-class-method","name":"new","abstract":false,"args":[{"name":"source","external_name":"source","restriction":"String"}],"args_string":"(source : String)","args_html":"(source : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/scissors.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"source","external_name":"source","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(source)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Cuts the source string into a series of *unclassified forms*;\nyields start byte index, byte length, and first dot `'.'` byte\nindex of each to the block.\n\nDot byte index is yielded to save an O(N) search, which would\nbe otherwise required since '.' is handled specially by several\nforms in Novika.","summary":"<p>Cuts the source string into a series of <em>unclassified forms</em>; yields start byte index, byte length, and first dot <code>'.'</code> byte index of each to the block.</p>","abstract":false,"location":{"filename":"src/novika/scissors.cr","line_number":128,"url":null},"def":{"name":"each","yields":3,"block_arity":3,"visibility":"Public","body":"state = String::Grapheme::Property::Start\nlast_prop = String::Grapheme::Property::Start\nwhile !at_end?\n  prop = String::Grapheme::Property.from(chr)\n  boundary, state = String::Grapheme.break?(last_prop, prop, state)\n  last_prop = prop\n  if boundary\n  else\n    thru\n    next\n  end\n  case it = chr\n  when .whitespace?\n    while chr.whitespace?\n      if length.zero?\n      else\n        yield start, length, @dot\n      end\n      advance\n      cut\n    end\n  when '\\'', '\"'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    if nthru?(it, amt: 3)\n      thru(endswith: it, amt: 3)\n      yield start + 2, length - 4, @dot\n    else\n      thru(endswith: it)\n      yield start, length, @dot\n    end\n    cut\n  when '[', ']'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    thru\n    yield start, length, @dot\n    cut\n  when '(', ')'\n    if length.zero?\n    else\n      yield start, length, @dot\n    end\n    cut\n    thru\n    cut\n  when '.'\n    @dot || (@dot = @cursor)\n    thru\n  else\n    thru\n  end\nend\nif length.zero?\nelse\n  yield start, length, @dot\nend\n"}}]},{"html_id":"novika/Novika/SmallDecimalSnapshot","path":"Novika/SmallDecimalSnapshot.html","kind":"class","full_name":"Novika::SmallDecimalSnapshot","name":"SmallDecimalSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":130,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::SmallDecimalSnapshot]","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"basic\", name: value, cls: Int64, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Decimal)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":140,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"decimal = new\ndecimal.value = form.to_i64\ndecimal\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":131,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":136,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Decimal.new(value)"}},{"html_id":"value:Int64-instance-method","name":"value","doc":"Holds the i64 value.","summary":"<p>Holds the i64 value.</p>","abstract":false,"def":{"name":"value","return_type":"Int64","visibility":"Public","body":"@value"}},{"html_id":"value=(value:Int64)-instance-method","name":"value=","doc":"Holds the i64 value.","summary":"<p>Holds the i64 value.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Int64"}],"args_string":"(value : Int64)","args_html":"(value : Int64)","def":{"name":"value=","args":[{"name":"value","external_name":"value","restriction":"Int64"}],"visibility":"Public","body":"@value = value"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a decimal form, small enough to fit into\nan i64.\n\nIts type is `SnapshotType::SmallDecimal`.","summary":"<p>Snapshot of a decimal form, small enough to fit into an i64.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":130,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/Snapshot","path":"Novika/Snapshot.html","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot","abstract":true,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":38,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"system\"]","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::Snapshot]","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"PARTS","name":"PARTS","value":"[] of Nil","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>"}],"subclasses":[{"html_id":"novika/Novika/BlockRefSnapshot","kind":"class","full_name":"Novika::BlockRefSnapshot","name":"BlockRefSnapshot"},{"html_id":"novika/Novika/BooleanSnapshot","kind":"class","full_name":"Novika::BooleanSnapshot","name":"BooleanSnapshot"},{"html_id":"novika/Novika/BuiltinSnapshot","kind":"class","full_name":"Novika::BuiltinSnapshot","name":"BuiltinSnapshot"},{"html_id":"novika/Novika/BytesliceSnapshot","kind":"class","full_name":"Novika::BytesliceSnapshot","name":"BytesliceSnapshot"},{"html_id":"novika/Novika/ColorSnapshot","kind":"class","full_name":"Novika::ColorSnapshot","name":"ColorSnapshot"},{"html_id":"novika/Novika/LargeDecimalSnapshot","kind":"class","full_name":"Novika::LargeDecimalSnapshot","name":"LargeDecimalSnapshot"},{"html_id":"novika/Novika/QuotedWordSnapshot","kind":"class","full_name":"Novika::QuotedWordSnapshot","name":"QuotedWordSnapshot"},{"html_id":"novika/Novika/QuoteSnapshot","kind":"class","full_name":"Novika::QuoteSnapshot","name":"QuoteSnapshot"},{"html_id":"novika/Novika/SmallDecimalSnapshot","kind":"class","full_name":"Novika::SmallDecimalSnapshot","name":"SmallDecimalSnapshot"},{"html_id":"novika/Novika/WordSnapshot","kind":"class","full_name":"Novika::WordSnapshot","name":"WordSnapshot"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":38,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}}],"instance_methods":[{"html_id":"to_form(assembler:BlockAssembler)-instance-method","name":"to_form","doc":"Converts this snapshot to the corresponding form.","summary":"<p>Converts this snapshot to the corresponding form.</p>","abstract":true,"args":[{"name":"assembler","external_name":"assembler","restriction":"BlockAssembler"}],"args_string":"(assembler : BlockAssembler)","args_html":"(assembler : BlockAssembler)","location":{"filename":"src/novika/image.cr","line_number":40,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":"BlockAssembler"}],"visibility":"Public","body":""}}],"macros":[{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Base class for *snapshots*.\n\nSnapshots are blobs of binary data corresponding to a\nNovika *value* form. Since `Block`s are not value\nforms, they are stored in `BlockPool` and pointed to by\n\"imaginary\" (or \"transitory\") forms that go by the name\nof *block references*.\n\nAll snapshots are big-endian-ordered.","summary":"<p>Base class for <em>snapshots</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":38,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}}]},{"html_id":"novika/Novika/SnapshotType","path":"Novika/SnapshotType.html","kind":"enum","full_name":"Novika::SnapshotType","name":"SnapshotType","abstract":false,"ancestors":[{"html_id":"novika/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":11,"url":null}],"repository_name":"novika","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Word","name":"Word","value":"0_u8"},{"id":"BlockRef","name":"BlockRef","value":"1_u8"},{"id":"SmallDecimal","name":"SmallDecimal","value":"2_u8"},{"id":"LargeDecimal","name":"LargeDecimal","value":"3_u8"},{"id":"Quote","name":"Quote","value":"4_u8"},{"id":"QuotedWord","name":"QuotedWord","value":"5_u8"},{"id":"Boolean","name":"Boolean","value":"6_u8"},{"id":"Color","name":"Color","value":"7_u8"},{"id":"Builtin","name":"Builtin","value":"8_u8"},{"id":"Byteslice","name":"Byteslice","value":"9_u8"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Holds the type of a snapshot.\n\nMembers are sorted by their frequency in code (eyeballed),\nnot to say that it matters.","summary":"<p>Holds the type of a snapshot.</p>","instance_methods":[{"html_id":"block_ref?-instance-method","name":"block_ref?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":13,"url":null},"def":{"name":"block_ref?","visibility":"Public","body":"self == BlockRef"}},{"html_id":"boolean?-instance-method","name":"boolean?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":18,"url":null},"def":{"name":"boolean?","visibility":"Public","body":"self == Boolean"}},{"html_id":"builtin?-instance-method","name":"builtin?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":20,"url":null},"def":{"name":"builtin?","visibility":"Public","body":"self == Builtin"}},{"html_id":"byteslice?-instance-method","name":"byteslice?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":21,"url":null},"def":{"name":"byteslice?","visibility":"Public","body":"self == Byteslice"}},{"html_id":"color?-instance-method","name":"color?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":19,"url":null},"def":{"name":"color?","visibility":"Public","body":"self == Color"}},{"html_id":"large_decimal?-instance-method","name":"large_decimal?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":15,"url":null},"def":{"name":"large_decimal?","visibility":"Public","body":"self == LargeDecimal"}},{"html_id":"quote?-instance-method","name":"quote?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":16,"url":null},"def":{"name":"quote?","visibility":"Public","body":"self == Quote"}},{"html_id":"quoted_word?-instance-method","name":"quoted_word?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":17,"url":null},"def":{"name":"quoted_word?","visibility":"Public","body":"self == QuotedWord"}},{"html_id":"small_decimal?-instance-method","name":"small_decimal?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":14,"url":null},"def":{"name":"small_decimal?","visibility":"Public","body":"self == SmallDecimal"}},{"html_id":"word?-instance-method","name":"word?","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":12,"url":null},"def":{"name":"word?","visibility":"Public","body":"self == Word"}}]},{"html_id":"novika/Novika/StructLayoutForm","path":"Novika/StructLayoutForm.html","kind":"struct","full_name":"Novika::StructLayoutForm","name":"StructLayoutForm","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":235,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin form wrapper around `FFI::StructLayout`. Lazily parses\na struct layout definition and keeps the corresponding\n`FFI::StructLayout` in sync.","summary":"<p>A thin form wrapper around <code><a href=\"../Novika/FFI/StructLayout.html\">FFI::StructLayout</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":283,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign struct layout\""}}],"constructors":[{"html_id":"new(this:Block,names:Array(Word),types:Array(Word),comment:Nil|String)-class-method","name":"new","doc":"Initializes a struct layout form. Names array *names* must\nbe created uniquely for this form, because it will be used\nas this struct layout form's identity during deep recursion\nchecks etc.\n\n*this* block is going to be used for lookup of user-defined\nstruct layouts (e.g. `&foobar`).","summary":"<p>Initializes a struct layout form.</p>","abstract":false,"args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"names","external_name":"names","restriction":"Array(Word)"},{"name":"types","external_name":"types","restriction":"Array(Word)"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"args_string":"(this : Block, names : Array(Word), types : Array(Word), comment : Nil | String)","args_html":"(this : <a href=\"../Novika/Block.html\">Block</a>, names : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Word.html\">Word</a>), types : <a href=\"../Array.html\">Array</a>(<a href=\"../Novika/Word.html\">Word</a>), comment : Nil | <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":250,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":"Block"},{"name":"names","external_name":"names","restriction":"Array(Word)"},{"name":"types","external_name":"types","restriction":"Array(Word)"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, names, types, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(layout:Novika::FFI::StructLayout,comment:Nil|String)-class-method","name":"new","doc":"Initializes a struct layout form from the given *layout*.\nThe layout must contain at least one field.","summary":"<p>Initializes a struct layout form from the given <em>layout</em>.</p>","abstract":false,"args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"args_string":"(layout : Novika::FFI::StructLayout, comment : Nil | String)","args_html":"(layout : <a href=\"../Novika/FFI/StructLayout.html\">Novika::FFI::StructLayout</a>, comment : Nil | <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":256,"url":null},"def":{"name":"new","args":[{"name":"layout","external_name":"layout","restriction":"::Novika::FFI::StructLayout"},{"name":"comment","external_name":"comment","restriction":"::Nil | ::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(layout, comment)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":295,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if layout == other.layout\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":287,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"@comment ? io << @comment : to_s(io)"}},{"html_id":"layout(outerset=nil)-instance-method","name":"layout","doc":"Returns the underlying layout.","summary":"<p>Returns the underlying layout.</p>","abstract":false,"args":[{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":""}],"args_string":"(outerset = nil)","args_html":"(outerset = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":268,"url":null},"def":{"name":"layout","args":[{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":""}],"visibility":"Public","body":"if @layout.field_count > 0 || outerset.try(&.includes?(object_id))\n  return @layout\nend\nif this = @this\nelse\n  return @layout\nend\nif names = @names\nelse\n  return @layout\nend\nif types = @types\nelse\n  return @layout\nend\nnames.zip(types) do |name, typename|\n  parser = StructLayoutParser.new(this, typename, name, self, outerset)\n  @layout.add(name.id, parser.parse)\nend\n@layout\n"}},{"html_id":"object_id(*args,**options)-instance-method","name":"object_id","doc":"Since `StructLayoutForm` is a struct, it doesn't have its own\nobject id, and instead borrows it from the names array, which\nis assumed to be created personally for this struct layout form.","summary":"<p>Since <code><a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a></code> is a struct, it doesn't have its own object id, and instead borrows it from the names array, which is assumed to be created personally for this struct layout form.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":265,"url":null},"def":{"name":"object_id","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"(@names || (raise(\"BUG: bad state\"))).object_id(*args, **options)"}},{"html_id":"object_id(*args,**options,&)-instance-method","name":"object_id","doc":"Since `StructLayoutForm` is a struct, it doesn't have its own\nobject id, and instead borrows it from the names array, which\nis assumed to be created personally for this struct layout form.","summary":"<p>Since <code><a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a></code> is a struct, it doesn't have its own object id, and instead borrows it from the names array, which is assumed to be created personally for this struct layout form.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":265,"url":null},"def":{"name":"object_id","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"(@names || (raise(\"BUG: bad state\"))).object_id(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":291,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << layout"}}]},{"html_id":"novika/Novika/StructLayoutParser","path":"Novika/StructLayoutParser.html","kind":"struct","full_name":"Novika::StructLayoutParser","name":"StructLayoutParser","abstract":false,"superclass":{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},"ancestors":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"},{"html_id":"novika/Novika/FFI/TypeParser","kind":"struct","full_name":"Novika::FFI::TypeParser","name":"TypeParser"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":168,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/FFI/TypeParser/ForbidsNothing","kind":"module","full_name":"Novika::FFI::TypeParser::ForbidsNothing","name":"ForbidsNothing"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Parses types in struct layouts. Similar to `FFI::ValueTypeParser`,\nbut does some bookkeeping to stay away from deep recursion/ensure\nno cycles exist for inline structs/unions.","summary":"<p>Parses types in struct layouts.</p>","constructors":[{"html_id":"new(this,typename,field:Word,current:StructLayoutForm,outerset:Set(UInt64)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"this","external_name":"this","restriction":""},{"name":"typename","external_name":"typename","restriction":""},{"name":"field","external_name":"field","restriction":"Word"},{"name":"current","external_name":"current","restriction":"StructLayoutForm"},{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":"Set(UInt64) | ::Nil"}],"args_string":"(this, typename, field : Word, current : StructLayoutForm, outerset : Set(UInt64) | Nil = nil)","args_html":"(this, typename, field : <a href=\"../Novika/Word.html\">Word</a>, current : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>, outerset : <a href=\"../Set.html\">Set</a>(UInt64) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":171,"url":null},"def":{"name":"new","args":[{"name":"this","external_name":"this","restriction":""},{"name":"typename","external_name":"typename","restriction":""},{"name":"field","external_name":"field","restriction":"Word"},{"name":"current","external_name":"current","restriction":"StructLayoutForm"},{"name":"outerset","default_value":"nil","external_name":"outerset","restriction":"Set(UInt64) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(this, typename, field, current, outerset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"on_inline_struct(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_inline_struct","doc":"Inline struct-annotated struct layout middleware.","summary":"<p>Inline struct-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":219,"url":null},"def":{"name":"on_inline_struct","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"check_cycles(form)\n(form.layout(@outerset)).inline\n"}},{"html_id":"on_struct_reference(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_struct_reference","doc":"Struct reference-annotated struct layout middleware.","summary":"<p>Struct reference-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":225,"url":null},"def":{"name":"on_struct_reference","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"add_to_outerset\n(form.layout(@outerset)).reference\n"}},{"html_id":"on_union(form:StructLayoutForm):FFI::ForeignType-instance-method","name":"on_union","doc":"Union-annotated struct layout middleware.","summary":"<p>Union-annotated struct layout middleware.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"args_string":"(form : StructLayoutForm) : FFI::ForeignType","args_html":"(form : <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>) : <a href=\"../Novika/FFI/ForeignType.html\">FFI::ForeignType</a>","location":{"filename":"src/novika/forms/foreign.cr","line_number":213,"url":null},"def":{"name":"on_union","args":[{"name":"form","external_name":"form","restriction":"StructLayoutForm"}],"return_type":"FFI::ForeignType","visibility":"Public","body":"check_cycles(form)\n(form.layout(@outerset)).union\n"}}]},{"html_id":"novika/Novika/StructViewForm","path":"Novika/StructViewForm.html","kind":"struct","full_name":"Novika::StructViewForm","name":"StructViewForm","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/foreign.cr","line_number":85,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/IReadableStore","kind":"module","full_name":"Novika::IReadableStore","name":"IReadableStore"},{"html_id":"novika/Novika/ISubmittableStore","kind":"module","full_name":"Novika::ISubmittableStore","name":"ISubmittableStore"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A thin wrapper around `FFI::StructView` and its descendants.\n\nThis form is a readable and submittable store, which means you\ncan read (e.g. `entry:fetch`) and submit (e.g. `entry:submit`)\nto exsisting entries.","summary":"<p>A thin wrapper around <code><a href=\"../Novika/FFI/StructView.html\">FFI::StructView</a></code> and its descendants.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":147,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"foreign struct view\""}}],"constructors":[{"html_id":"new(view:Novika::FFI::StructView)-class-method","name":"new","abstract":false,"args":[{"name":"view","external_name":"view","restriction":"::Novika::FFI::StructView"}],"args_string":"(view : Novika::FFI::StructView)","args_html":"(view : <a href=\"../Novika/FFI/StructView.html\">Novika::FFI::StructView</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":93,"url":null},"def":{"name":"new","args":[{"name":"view","external_name":"view","restriction":"::Novika::FFI::StructView"}],"visibility":"Public","body":"_ = allocate\n_.initialize(view)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns whether this and *other* struct views are equal.\nPerforms deep, recursive equality based on the fields'\nvalues. Supports self-reference, mutual reference, etc.","summary":"<p>Returns whether this and <em>other</em> struct views are equal.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":162,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if @view == (other.@view)\nelse\n  return false\nend\ntrue\n"}},{"html_id":"address(*args,**options)-instance-method","name":"address","doc":"Returns the address of the underlying struct in memory.","summary":"<p>Returns the address of the underlying struct in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/forms/foreign.cr","line_number":97,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"view.address(*args, **options)"}},{"html_id":"address(*args,**options,&)-instance-method","name":"address","doc":"Returns the address of the underlying struct in memory.","summary":"<p>Returns the address of the underlying struct in memory.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/forms/foreign.cr","line_number":97,"url":null},"def":{"name":"address","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"view.address(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"desc(io)-instance-method","name":"desc","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":151,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"to_s(io)"}},{"html_id":"form_for?(name:Form):Form|Nil-instance-method","name":"form_for?","doc":"Returns the value form for an entry with the given *name*, or\nnil if no such entry exists.","summary":"<p>Returns the value form for an entry with the given <em>name</em>, or nil if no such entry exists.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Form | Nil","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : <a href=\"../Novika/Form.html\">Form</a> | Nil","location":{"filename":"src/novika/forms/foreign.cr","line_number":108,"url":null},"def":{"name":"form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Form | ::Nil","visibility":"Public","body":"if name.is_a?(Word)\n  @view[name.id]?.try(&.to_form?)\nend"}},{"html_id":"has_form_for?(name:Form):Bool-instance-method","name":"has_form_for?","doc":"Returns whether this store has an entry with the given *name*.","summary":"<p>Returns whether this store has an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/foreign.cr","line_number":104,"url":null},"def":{"name":"has_form_for?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"name.is_a?(Word) ? @view.has_field?(name.id) : false"}},{"html_id":"inline?-instance-method","name":"inline?","doc":"Returns whether this view is an inline struct view.","summary":"<p>Returns whether this view is an inline struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":138,"url":null},"def":{"name":"inline?","visibility":"Public","body":"view.is_a?(FFI::InlineStructView)"}},{"html_id":"layout:StructLayoutForm-instance-method","name":"layout","doc":"Returns the struct layout of the underlying struct view.","summary":"<p>Returns the struct layout of the underlying struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":100,"url":null},"def":{"name":"layout","return_type":"StructLayoutForm","visibility":"Public","body":"StructLayoutForm.new(view.layout, comment: nil)"}},{"html_id":"opener?(name:Form):Bool-instance-method","name":"opener?","doc":"Returns whether *name* opens its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> opens its value form, as defined in this store.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/foreign.cr","line_number":120,"url":null},"def":{"name":"opener?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"form_for(name)\nfalse\n"}},{"html_id":"pusher?(name:Form):Bool-instance-method","name":"pusher?","doc":"Returns whether *name* pushes its value form, as defined in this\nstore. Dies if *name* is not defined in this store.","summary":"<p>Returns whether <em>name</em> pushes its value form, as defined in this store.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"}],"args_string":"(name : Form) : Bool","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>) : Bool","location":{"filename":"src/novika/forms/foreign.cr","line_number":126,"url":null},"def":{"name":"pusher?","args":[{"name":"name","external_name":"name","restriction":"Form"}],"return_type":"Bool","visibility":"Public","body":"form_for(name)\ntrue\n"}},{"html_id":"reference?-instance-method","name":"reference?","doc":"Returns whether this view is a struct reference view.","summary":"<p>Returns whether this view is a struct reference view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":133,"url":null},"def":{"name":"reference?","visibility":"Public","body":"view.is_a?(FFI::StructReferenceView)"}},{"html_id":"submit?(name:Form,form:Form)-instance-method","name":"submit?","doc":"Submits value *form* to an entry with the given *name*.\nReturns nil if no such entry exists.","summary":"<p>Submits value <em>form</em> to an entry with the given <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"args_string":"(name : Form, form : Form)","args_html":"(name : <a href=\"../Novika/Form.html\">Form</a>, form : <a href=\"../Novika/Form.html\">Form</a>)","location":{"filename":"src/novika/forms/foreign.cr","line_number":112,"url":null},"def":{"name":"submit?","args":[{"name":"name","external_name":"name","restriction":"Form"},{"name":"form","external_name":"form","restriction":"Form"}],"visibility":"Public","body":"if name.is_a?(Word)\nelse\n  return\nend\n(@view.layout.desc?(name.id)).try do |desc|\n  @view[name.id] = desc.type.from(form)\nend\n"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/foreign.cr","line_number":155,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << @view"}},{"html_id":"union?-instance-method","name":"union?","doc":"Returns whether this view is a union view.","summary":"<p>Returns whether this view is a union view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":143,"url":null},"def":{"name":"union?","visibility":"Public","body":"view.is_a?(FFI::UnionView)"}},{"html_id":"view:FFI::StructView-instance-method","name":"view","doc":"Returns the underlying struct view.","summary":"<p>Returns the underlying struct view.</p>","abstract":false,"location":{"filename":"src/novika/forms/foreign.cr","line_number":91,"url":null},"def":{"name":"view","return_type":"FFI::StructView","visibility":"Public","body":"@view"}}]},{"html_id":"novika/Novika/Substrate","path":"Novika/Substrate.html","kind":"module","full_name":"Novika::Substrate(T)","name":"Substrate","abstract":false,"locations":[{"filename":"src/novika/substrate.cr","line_number":17,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Substrate is a fast, low-level copy-on-write wrapper for\nan array.","summary":"<p>Substrate is a fast, low-level copy-on-write wrapper for an array.</p>","class_methods":[{"html_id":"[]-class-method","name":"[]","doc":"Initializes an empty substrate.","summary":"<p>Initializes an empty substrate.</p>","abstract":false,"location":{"filename":"src/novika/substrate.cr","line_number":19,"url":null},"def":{"name":"[]","visibility":"Public","body":"RealSubstrate(T).new"}},{"html_id":"[](*elements)-class-method","name":"[]","doc":"Initializes a substrate with *elements*.","summary":"<p>Initializes a substrate with <em>elements</em>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(*elements)","args_html":"(*elements)","location":{"filename":"src/novika/substrate.cr","line_number":24,"url":null},"def":{"name":"[]","args":[{"name":"elements","external_name":"elements","restriction":""}],"splat_index":0,"visibility":"Public","body":"for(elements.to_a)"}},{"html_id":"for(elements:Array(T))-class-method","name":"for","doc":"Initializes a substrate with *elements* as the underlying array.","summary":"<p>Initializes a substrate with <em>elements</em> as the underlying array.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"args_string":"(elements : Array(T))","args_html":"(elements : <a href=\"../Array.html\">Array</a>(T))","location":{"filename":"src/novika/substrate.cr","line_number":29,"url":null},"def":{"name":"for","args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"visibility":"Public","body":"RealSubstrate.new(elements)"}}],"instance_methods":[{"html_id":"==(other)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/substrate.cr","line_number":96,"url":null},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"other.is_a?(Substrate) && (array == other.array)"}},{"html_id":"at!(index)-instance-method","name":"at!","doc":"Unsafely fetches the element at *index*.","summary":"<p>Unsafely fetches the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":37,"url":null},"def":{"name":"at!","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"array.unsafe_fetch(index)"}},{"html_id":"at?(index)-instance-method","name":"at?","doc":"Returns the element at *index*. Returns nil if *index* is\nout of bounds, i.e., *not* in `0 <= index < count`.","summary":"<p>Returns the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":48,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"if index.in?(0...count)\n  at!(index)\nend"}},{"html_id":"copy-instance-method","name":"copy","doc":"Returns a copy of this substrate.","summary":"<p>Returns a copy of this substrate.</p>","abstract":true,"location":{"filename":"src/novika/substrate.cr","line_number":79,"url":null},"def":{"name":"copy","visibility":"Public","body":""}},{"html_id":"count-instance-method","name":"count","doc":"Returns the amount of elements in the array.","summary":"<p>Returns the amount of elements in the array.</p>","abstract":false,"location":{"filename":"src/novika/substrate.cr","line_number":42,"url":null},"def":{"name":"count","visibility":"Public","body":"array.size"}},{"html_id":"delete?(atindex)-instance-method","name":"delete?","doc":"Deletes the element at *index*. Returns nil if *index* is\nout of bounds (see `at?`).","summary":"<p>Deletes the element at <em>index</em>.</p>","abstract":true,"args":[{"name":"index","external_name":"at","restriction":""}],"args_string":"(at index)","args_html":"(at index)","location":{"filename":"src/novika/substrate.cr","line_number":73,"url":null},"def":{"name":"delete?","args":[{"name":"index","external_name":"at","restriction":""}],"visibility":"Public","body":""}},{"html_id":"each(*args,**options)-instance-method","name":"each","doc":"Same as `Array#each`.","summary":"<p>Same as <code>Array#each</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/substrate.cr","line_number":34,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"array.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","doc":"Same as `Array#each`.","summary":"<p>Same as <code>Array#each</code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/substrate.cr","line_number":34,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"array.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"insert?(atindex,element)-instance-method","name":"insert?","doc":"Adds *element* before *index*. Returns nil if *index* is\nout of bounds (see  `at?`).","summary":"<p>Adds <em>element</em> before <em>index</em>.</p>","abstract":true,"args":[{"name":"index","external_name":"at","restriction":""},{"name":"element","external_name":"element","restriction":""}],"args_string":"(at index, element)","args_html":"(at index, element)","location":{"filename":"src/novika/substrate.cr","line_number":69,"url":null},"def":{"name":"insert?","args":[{"name":"index","external_name":"at","restriction":""},{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":""}},{"html_id":"map!(&:T->T|Nil)-instance-method","name":"map!","doc":"Replaces elements of this substrate with the result of the\nblock. If the result is nil, leaves the original element.","summary":"<p>Replaces elements of this substrate with the result of the block.</p>","abstract":true,"location":{"filename":"src/novika/substrate.cr","line_number":90,"url":null},"def":{"name":"map!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> T | ::Nil)"},"visibility":"Public","body":""}},{"html_id":"slice_at!(index)-instance-method","name":"slice_at!","doc":"Splits this substrate in two at *index*. Returns the two\nresulting substrates.\n\nThis method is unsafe: it does not check whether *index*\nis in bounds.","summary":"<p>Splits this substrate in two at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":""}],"args_string":"(index)","args_html":"(index)","location":{"filename":"src/novika/substrate.cr","line_number":57,"url":null},"def":{"name":"slice_at!","args":[{"name":"index","external_name":"index","restriction":""}],"visibility":"Public","body":"lhs = Array(T).new(index) do |i|\n  at!(i)\nend\nrhs = Array(T).new(count - index) do |j|\n  at!(index + j)\nend\n{RealSubstrate.new(lhs), RealSubstrate.new(rhs)}\n"}},{"html_id":"sort_using!(cmp:T,T->Int32)-instance-method","name":"sort_using!","doc":"Sorts elements of this substrate inplace, using a *cmp*\ncomparator proc for comparing two elements.","summary":"<p>Sorts elements of this substrate inplace, using a <em>cmp</em> comparator proc for comparing two elements.</p>","abstract":true,"args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"args_string":"(cmp : T, T -> Int32)","args_html":"(cmp : T, T -> Int32)","location":{"filename":"src/novika/substrate.cr","line_number":94,"url":null},"def":{"name":"sort_using!","args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"visibility":"Public","body":""}},{"html_id":"unsafe_paste(other:Substrate(T),index,other_start,other_insert_count)-instance-method","name":"unsafe_paste","doc":"Pastes *count* elements of other starting at *b*egin, to\n*dest* index in self, without doing any checks whatsoever.\n\nA lot of undefined behavior unless you are sure all\nnumbers are good.","summary":"<p>Pastes <em>count</em> elements of other starting at <em>b</em>egin, to <em>dest</em> index in self, without doing any checks whatsoever.</p>","abstract":true,"args":[{"name":"other","external_name":"other","restriction":"Substrate(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"args_string":"(other : Substrate(T), index, other_start, other_insert_count)","args_html":"(other : <a href=\"../Novika/Substrate.html\">Substrate</a>(T), index, other_start, other_insert_count)","location":{"filename":"src/novika/substrate.cr","line_number":86,"url":null},"def":{"name":"unsafe_paste","args":[{"name":"other","external_name":"other","restriction":"Substrate(T)"},{"name":"index","external_name":"index","restriction":""},{"name":"other_start","external_name":"other_start","restriction":""},{"name":"other_insert_count","external_name":"other_insert_count","restriction":""}],"visibility":"Public","body":""}}]},{"html_id":"novika/Novika/Tape","path":"Novika/Tape.html","kind":"struct","full_name":"Novika::Tape(T)","name":"Tape","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/tape.cr","line_number":5,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A `Substrate` with an integer cursor.","summary":"<p>A <code><a href=\"../Novika/Substrate.html\">Substrate</a></code> with an integer cursor.</p>","class_methods":[{"html_id":"[](*elements)-class-method","name":"[]","doc":"Initializes a tape with *elements*.","summary":"<p>Initializes a tape with <em>elements</em>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":""}],"args_string":"(*elements)","args_html":"(*elements)","location":{"filename":"src/novika/tape.cr","line_number":23,"url":null},"def":{"name":"[]","args":[{"name":"elements","external_name":"elements","restriction":""}],"splat_index":0,"visibility":"Public","body":"Tape.new(Substrate[*elements])"}},{"html_id":"for(elements:Array(T))-class-method","name":"for","doc":"Creates a tape from an existing array of *elements*, which\nwill be used as the underlying container for `Substrate`.\nThis means that all mutations of substrate will be performed\non the *elements* array, and vice versa.","summary":"<p>Creates a tape from an existing array of <em>elements</em>, which will be used as the underlying container for <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"args_string":"(elements : Array(T))","args_html":"(elements : <a href=\"../Array.html\">Array</a>(T))","location":{"filename":"src/novika/tape.cr","line_number":18,"url":null},"def":{"name":"for","args":[{"name":"elements","external_name":"elements","restriction":"Array(T)"}],"visibility":"Public","body":"Tape.new(Substrate.for(elements))"}}],"constructors":[{"html_id":"new(substrate:Substrate(T)=Substrate(T)[],cursor:Int32=substrate.count)-class-method","name":"new","abstract":false,"args":[{"name":"substrate","default_value":"Substrate(T)[]","external_name":"substrate","restriction":"Substrate(T)"},{"name":"cursor","default_value":"substrate.count","external_name":"cursor","restriction":"::Int32"}],"args_string":"(substrate : Substrate(T) = Substrate(T)[], cursor : Int32 = substrate.count)","args_html":"(substrate : <a href=\"../Novika/Substrate.html\">Substrate</a>(T) = <span class=\"t\">Substrate</span>(<span class=\"t\">T</span>)<span class=\"o\">[]</span>, cursor : Int32 = substrate.count)","location":{"filename":"src/novika/tape.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"substrate","default_value":"Substrate(T)[]","external_name":"substrate","restriction":"Substrate(T)"},{"name":"cursor","default_value":"substrate.count","external_name":"cursor","restriction":"::Int32"}],"visibility":"Public","body":"_ = Tape(T).allocate\n_.initialize(substrate, cursor)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if substrate == other.substrate\nelse\n  return false\nend\nif cursor == other.cursor\nelse\n  return false\nend\ntrue\n"}},{"html_id":"add(element)-instance-method","name":"add","doc":"Adds *element* before the cursor, and advances the cursor.\nReturns the resulting tape.","summary":"<p>Adds <em>element</em> before the cursor, and advances the cursor.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/novika/tape.cr","line_number":57,"url":null},"def":{"name":"add","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"Tape.new((substrate.insert?(cursor, element)).not_nil!, cursor + 1)"}},{"html_id":"at!(*args,**options)-instance-method","name":"at!","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.at!(*args, **options)"}},{"html_id":"at!(*args,**options,&)-instance-method","name":"at!","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.at!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"at?(*args,**options)-instance-method","name":"at?","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.at?(*args, **options)"}},{"html_id":"at?(*args,**options,&)-instance-method","name":"at?","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"at?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.at?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"copy-instance-method","name":"copy","doc":"Returns a shallow copy of this tape.","summary":"<p>Returns a shallow copy of this tape.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":133,"url":null},"def":{"name":"copy","visibility":"Public","body":"Tape.new(substrate.copy, cursor)"}},{"html_id":"count(*args,**options)-instance-method","name":"count","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"count","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.count(*args, **options)"}},{"html_id":"count(*args,**options,&)-instance-method","name":"count","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"count","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.count(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"cursor:Int32-instance-method","name":"cursor","doc":"Returns the cursor position.","summary":"<p>Returns the cursor position.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":9,"url":null},"def":{"name":"cursor","return_type":"Int32","visibility":"Public","body":"@cursor"}},{"html_id":"drop?-instance-method","name":"drop?","doc":"Removes the element before the cursor, and moves the cursor\nback once. Returns the resulting tape.","summary":"<p>Removes the element before the cursor, and moves the cursor back once.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":82,"url":null},"def":{"name":"drop?","visibility":"Public","body":"Tape.new((substrate.delete?(cursor - 1)) || (return), cursor - 1)"}},{"html_id":"each(*args,**options)-instance-method","name":"each","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"substrate.each(*args, **options)"}},{"html_id":"each(*args,**options,&)-instance-method","name":"each","doc":"See the same method in `Substrate`.","summary":"<p>See the same method in <code><a href=\"../Novika/Substrate.html\">Substrate</a></code>.</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika/tape.cr","line_number":28,"url":null},"def":{"name":"each","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"substrate.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"eject?-instance-method","name":"eject?","doc":"Drops and returns the element after cursor.","summary":"<p>Drops and returns the element after cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":92,"url":null},"def":{"name":"eject?","visibility":"Public","body":"element = (substrate.at?(cursor)) || (return)\n{Tape.new((substrate.delete?(cursor)).not_nil!, cursor), element}\n"}},{"html_id":"empty?-instance-method","name":"empty?","doc":"Returns whether this tape is empty (has no elements).","summary":"<p>Returns whether this tape is empty (has no elements).</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":31,"url":null},"def":{"name":"empty?","visibility":"Public","body":"count.zero?"}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = substrate.hash(hasher)\nhasher = cursor.hash(hasher)\nhasher\n"}},{"html_id":"inject(element)-instance-method","name":"inject","doc":"Adds element after cursor without moving the cursor.","summary":"<p>Adds element after cursor without moving the cursor.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":""}],"args_string":"(element)","args_html":"(element)","location":{"filename":"src/novika/tape.cr","line_number":87,"url":null},"def":{"name":"inject","args":[{"name":"element","external_name":"element","restriction":""}],"visibility":"Public","body":"Tape.new((substrate.insert?(cursor, element)).not_nil!, cursor)"}},{"html_id":"map!(&)-instance-method","name":"map!","doc":"See `Substrate#map!`.","summary":"<p>See <code><a href=\"../Novika/Substrate.html#map%21%28%26%3AT-%3ET%7CNil%29-instance-method\">Substrate#map!</a></code>.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":115,"url":null},"def":{"name":"map!","yields":1,"block_arity":1,"visibility":"Public","body":"Tape.new(substrate.map! do |form|\n  yield form\nend, cursor)"}},{"html_id":"next?-instance-method","name":"next?","doc":"Fetches the top element, and advances the cursor. Returns\nthe tuple `{tape, element}`, where *tape* is the resulting\ntape. Returns nil if cursor will be out of bounds.","summary":"<p>Fetches the top element, and advances the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":51,"url":null},"def":{"name":"next?","visibility":"Public","body":"if cursor < count\n  {Tape.new(substrate, cursor + 1), substrate.at!(cursor)}\nend"}},{"html_id":"paste(elements:Tape(T))-instance-method","name":"paste","doc":"Adds elements before cursor in *elements* to this tape.\nAdvances the cursor.","summary":"<p>Adds elements before cursor in <em>elements</em> to this tape.</p>","abstract":false,"args":[{"name":"elements","external_name":"elements","restriction":"Tape(T)"}],"args_string":"(elements : Tape(T))","args_html":"(elements : <a href=\"../Novika/Tape.html\">Tape</a>(T))","location":{"filename":"src/novika/tape.cr","line_number":63,"url":null},"def":{"name":"paste","args":[{"name":"elements","external_name":"elements","restriction":"Tape(T)"}],"visibility":"Public","body":"Tape.new(substrate.unsafe_paste(elements.substrate, index: cursor, other_start: 0, other_insert_count: elements.cursor), cursor + elements.cursor)"}},{"html_id":"resub(other)-instance-method","name":"resub","doc":"Replaces this tape's substrate with other. *cursor* is\nleft where it was in self if it fits, else is moved to\nthe end.","summary":"<p>Replaces this tape's substrate with other.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/novika/tape.cr","line_number":108,"url":null},"def":{"name":"resub","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"substrate.deref\nTape.new(other.substrate.copy, Math.min(cursor, other.count))\n"}},{"html_id":"slice:Tuple(Tape(T),Tape(T))-instance-method","name":"slice","doc":"Slices this tape's substrate at cursor, returns the\ntwo resulting tape halves.","summary":"<p>Slices this tape's substrate at cursor, returns the two resulting tape halves.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":126,"url":null},"def":{"name":"slice","return_type":"::Tuple(Tape(T), Tape(T))","visibility":"Public","body":"lhs, rhs = substrate.slice_at!(cursor)\n{Tape.new(lhs), Tape.new(rhs)}\n"}},{"html_id":"sort_using!(cmp:T,T->Int32)-instance-method","name":"sort_using!","doc":"See `Substrate#sort_using!`","summary":"<p>See <code><a href=\"../Novika/Substrate.html#sort_using%21%28cmp%3AT%2CT-%3EInt32%29-instance-method\">Substrate#sort_using!</a></code></p>","abstract":false,"args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"args_string":"(cmp : T, T -> Int32)","args_html":"(cmp : T, T -> Int32)","location":{"filename":"src/novika/tape.cr","line_number":120,"url":null},"def":{"name":"sort_using!","args":[{"name":"cmp","external_name":"cmp","restriction":"(T, T -> Int32)"}],"visibility":"Public","body":"Tape.new(substrate.sort_using!(cmp), cursor)"}},{"html_id":"swap?-instance-method","name":"swap?","doc":"Swaps two elements before the cursor.","summary":"<p>Swaps two elements before the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":74,"url":null},"def":{"name":"swap?","visibility":"Public","body":"if cursor < 2\n  return\nend\nTape.new(substrate.unsafe_swap(cursor - 2, cursor - 1), cursor)\n"}},{"html_id":"thru?-instance-method","name":"thru?","doc":"Returns the element after cursor and moves the cursor forward.","summary":"<p>Returns the element after cursor and moves the cursor forward.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":99,"url":null},"def":{"name":"thru?","visibility":"Public","body":"element = (substrate.at?(cursor)) || (return)\n{Tape.new(substrate, cursor + 1), element}\n"}},{"html_id":"to?(cursorposition)-instance-method","name":"to?","doc":"Moves the cursor to *position*. Returns the resulting tape\non success, nil if position is out of bounds (see `Substrate#at?`).","summary":"<p>Moves the cursor to <em>position</em>.</p>","abstract":false,"args":[{"name":"position","external_name":"cursor","restriction":""}],"args_string":"(cursor position)","args_html":"(cursor position)","location":{"filename":"src/novika/tape.cr","line_number":44,"url":null},"def":{"name":"to?","args":[{"name":"position","external_name":"cursor","restriction":""}],"visibility":"Public","body":"if position.in?(0..count)\n  Tape.new(substrate, position)\nend"}},{"html_id":"top?-instance-method","name":"top?","doc":"Returns the element before the cursor.","summary":"<p>Returns the element before the cursor.</p>","abstract":false,"location":{"filename":"src/novika/tape.cr","line_number":36,"url":null},"def":{"name":"top?","visibility":"Public","body":"if cursor.zero?\n  return\nend\nsubstrate.at!(cursor - 1)\n"}}]},{"html_id":"novika/Novika/True","path":"Novika/True.html","kind":"struct","full_name":"Novika::True","name":"True","abstract":false,"superclass":{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},"ancestors":[{"html_id":"novika/Novika/Boolean","kind":"struct","full_name":"Novika::Boolean","name":"Boolean"},{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/boolean.cr","line_number":45,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Represents a truthy `Boolean`.","summary":"<p>Represents a truthy <code><a href=\"../Novika/Boolean.html\">Boolean</a></code>.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/boolean.cr","line_number":50,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"boolean\""}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"true"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/boolean.cr","line_number":46,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"boolean true\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/boolean.cr","line_number":54,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"io << \"true\""}}]},{"html_id":"novika/Novika/TypedSnapshot","path":"Novika/TypedSnapshot.html","kind":"class","full_name":"Novika::TypedSnapshot","name":"TypedSnapshot","abstract":false,"superclass":{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},"ancestors":[{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":287,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::TypedSnapshot]","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"enum\", name: type, cls: UInt8, onlyif: nil, verify: nil, value: nil, encoding: SnapshotType}, {type: \"basic\", name: snapshot, cls: Snapshot, onlyif: nil, verify: nil, value: nil}] of Nil","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"BinData.bit_fields.merge(@@bit_fields)"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat=IO::ByteFormat::BigEndian)-class-method","name":"from_io","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":"IO::ByteFormat::BigEndian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = IO::ByteFormat::BigEndian)","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"t\">IO</span><span class=\"t\">::</span><span class=\"t\">ByteFormat</span><span class=\"t\">::</span><span class=\"t\">BigEndian</span>)","location":{"filename":"src/novika/image.cr","line_number":304,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":"IO::ByteFormat::BigEndian","external_name":"format","restriction":"IO::ByteFormat"}],"visibility":"Public","body":"type = SnapshotType.new(io.read_bytes(UInt8, format))\nsnapshot = case type\nin .block_ref?\n  io.read_bytes(BlockRefSnapshot, format)\nin .boolean?\n  io.read_bytes(BooleanSnapshot, format)\nin .color?\n  io.read_bytes(ColorSnapshot, format)\nin .small_decimal?\n  io.read_bytes(SmallDecimalSnapshot, format)\nin .large_decimal?\n  io.read_bytes(LargeDecimalSnapshot, format)\nin .quote?\n  io.read_bytes(QuoteSnapshot, format)\nin .word?\n  io.read_bytes(WordSnapshot, format)\nin .quoted_word?\n  io.read_bytes(QuotedWordSnapshot, format)\nin .builtin?\n  io.read_bytes(BuiltinSnapshot, format)\nin .byteslice?\n  io.read_bytes(BytesliceSnapshot, format)\nend\nnew(type, snapshot)\n"}}],"constructors":[{"html_id":"new(type:Novika::SnapshotType,snapshot:Novika::Snapshot)-class-method","name":"new","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"::Novika::SnapshotType"},{"name":"snapshot","external_name":"snapshot","restriction":"::Novika::Snapshot"}],"args_string":"(type : Novika::SnapshotType, snapshot : Novika::Snapshot)","args_html":"(type : <a href=\"../Novika/SnapshotType.html\">Novika::SnapshotType</a>, snapshot : <a href=\"../Novika/Snapshot.html\">Novika::Snapshot</a>)","location":{"filename":"src/novika/image.cr","line_number":296,"url":null},"def":{"name":"new","args":[{"name":"type","external_name":"type","restriction":"::Novika::SnapshotType"},{"name":"snapshot","external_name":"snapshot","restriction":"::Novika::Snapshot"}],"visibility":"Public","body":"_ = allocate\n_.initialize(type, snapshot)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(form:Block)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Block"}],"args_string":"(form : Block)","args_html":"(form : <a href=\"../Novika/Block.html\">Block</a>)","location":{"filename":"src/novika/image.cr","line_number":325,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Block"}],"visibility":"Public","body":"new(SnapshotType::BlockRef, BlockRefSnapshot.new(form))"}},{"html_id":"new(form:Boolean)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"args_string":"(form : Boolean)","args_html":"(form : <a href=\"../Novika/Boolean.html\">Boolean</a>)","location":{"filename":"src/novika/image.cr","line_number":330,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Boolean"}],"visibility":"Public","body":"new(SnapshotType::Boolean, BooleanSnapshot.new(form))"}},{"html_id":"new(form:Color)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Color"}],"args_string":"(form : Color)","args_html":"(form : <a href=\"../Novika/Color.html\">Color</a>)","location":{"filename":"src/novika/image.cr","line_number":335,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Color"}],"visibility":"Public","body":"new(SnapshotType::Color, ColorSnapshot.new(form))"}},{"html_id":"new(form:Decimal)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"args_string":"(form : Decimal)","args_html":"(form : <a href=\"../Novika/Decimal.html\">Decimal</a>)","location":{"filename":"src/novika/image.cr","line_number":340,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Decimal"}],"visibility":"Public","body":"if form.i64?\n  new(SnapshotType::SmallDecimal, SmallDecimalSnapshot.new(form))\nelse\n  new(SnapshotType::LargeDecimal, LargeDecimalSnapshot.new(form))\nend"}},{"html_id":"new(form:Quote)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Quote"}],"args_string":"(form : Quote)","args_html":"(form : <a href=\"../Novika/Quote.html\">Quote</a>)","location":{"filename":"src/novika/image.cr","line_number":349,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Quote"}],"visibility":"Public","body":"new(SnapshotType::Quote, QuoteSnapshot.new(form))"}},{"html_id":"new(form:Word)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Word"}],"args_string":"(form : Word)","args_html":"(form : <a href=\"../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/image.cr","line_number":354,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Word"}],"visibility":"Public","body":"new(SnapshotType::Word, WordSnapshot.new(form))"}},{"html_id":"new(form:QuotedWord)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"args_string":"(form : QuotedWord)","args_html":"(form : <a href=\"../Novika/QuotedWord.html\">QuotedWord</a>)","location":{"filename":"src/novika/image.cr","line_number":359,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"QuotedWord"}],"visibility":"Public","body":"new(SnapshotType::QuotedWord, QuotedWordSnapshot.new(form))"}},{"html_id":"new(form:Builtin)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"args_string":"(form : Builtin)","args_html":"(form : <a href=\"../Novika/Builtin.html\">Builtin</a>)","location":{"filename":"src/novika/image.cr","line_number":364,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Builtin"}],"visibility":"Public","body":"new(SnapshotType::Builtin, BuiltinSnapshot.new(form))"}},{"html_id":"new(form:Byteslice)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"args_string":"(form : Byteslice)","args_html":"(form : <a href=\"../Novika/Byteslice.html\">Byteslice</a>)","location":{"filename":"src/novika/image.cr","line_number":369,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Byteslice"}],"visibility":"Public","body":"new(SnapshotType::Byteslice, BytesliceSnapshot.new(form))"}},{"html_id":"new(form:Library|ForeignFunction|StructViewForm|StructLayoutForm)-class-method","name":"new","doc":"Creates the corresponding `TypedSnapshot` for *form*.","summary":"<p>Creates the corresponding <code><a href=\"../Novika/TypedSnapshot.html\">TypedSnapshot</a></code> for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Library | ForeignFunction | StructViewForm | StructLayoutForm"}],"args_string":"(form : Library | ForeignFunction | StructViewForm | StructLayoutForm)","args_html":"(form : <a href=\"../Novika/Library.html\">Library</a> | <a href=\"../Novika/ForeignFunction.html\">ForeignFunction</a> | <a href=\"../Novika/StructViewForm.html\">StructViewForm</a> | <a href=\"../Novika/StructLayoutForm.html\">StructLayoutForm</a>)","location":{"filename":"src/novika/image.cr","line_number":374,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Library | ForeignFunction | StructViewForm | StructLayoutForm"}],"visibility":"Public","body":"raise(Error.new(\"serialization of ffi capabilities is unsafe and disabled anyway. Try searializing 'how' you create FFI objects rather than 'what' objects you create\"))"}},{"html_id":"new(form)-class-method","name":"new","doc":"Raises: no overload for *form*.","summary":"<p>Raises: no overload for <em>form</em>.</p>","abstract":false,"args":[{"name":"form","external_name":"form","restriction":""}],"args_string":"(form)","args_html":"(form)","location":{"filename":"src/novika/image.cr","line_number":382,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":""}],"visibility":"Public","body":"raise(\"no overload for #{form.class}\")"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":288,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"snapshot:Snapshot-instance-method","name":"snapshot","doc":"Holds the `Snapshot` object.","summary":"<p>Holds the <code><a href=\"../Novika/Snapshot.html\">Snapshot</a></code> object.</p>","abstract":false,"def":{"name":"snapshot","return_type":"Snapshot","visibility":"Public","body":"@snapshot"}},{"html_id":"snapshot=(snapshot:Snapshot)-instance-method","name":"snapshot=","doc":"Holds the `Snapshot` object.","summary":"<p>Holds the <code><a href=\"../Novika/Snapshot.html\">Snapshot</a></code> object.</p>","abstract":false,"args":[{"name":"snapshot","external_name":"snapshot","restriction":"Snapshot"}],"args_string":"(snapshot : Snapshot)","args_html":"(snapshot : <a href=\"../Novika/Snapshot.html\">Snapshot</a>)","def":{"name":"snapshot=","args":[{"name":"snapshot","external_name":"snapshot","restriction":"Snapshot"}],"visibility":"Public","body":"@snapshot = snapshot"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","doc":"See `Snapshot#to_form`.","summary":"<p>See <code><a href=\"../Novika/Snapshot.html#to_form%28assembler%3ABlockAssembler%29-instance-method\">Snapshot#to_form</a></code>.</p>","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":300,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"@snapshot.to_form(assembler)"}},{"html_id":"type:SnapshotType-instance-method","name":"type","doc":"Holds the type of the `snapshot`.","summary":"<p>Holds the type of the <code><a href=\"../Novika/TypedSnapshot.html#snapshot%3ASnapshot-instance-method\">#snapshot</a></code>.</p>","abstract":false,"def":{"name":"type","return_type":"SnapshotType","visibility":"Public","body":"@type"}},{"html_id":"type=(type:SnapshotType)-instance-method","name":"type=","doc":"Holds the type of the `snapshot`.","summary":"<p>Holds the type of the <code><a href=\"../Novika/TypedSnapshot.html#snapshot%3ASnapshot-instance-method\">#snapshot</a></code>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"SnapshotType"}],"args_string":"(type : SnapshotType)","args_html":"(type : <a href=\"../Novika/SnapshotType.html\">SnapshotType</a>)","def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"SnapshotType"}],"visibility":"Public","body":"@type = type"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_builtin_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_builtin_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_builtin_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BuiltinSnapshot = Novika::BuiltinSnapshot.new\n        \n"}},{"html_id":"novika_byteslice_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_byteslice_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_byteslice_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BytesliceSnapshot = Novika::BytesliceSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_quoted_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quoted_word_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_quoted_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuotedWordSnapshot = Novika::QuotedWordSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_typed_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_typed_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_typed_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::TypedSnapshot = Novika::TypedSnapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"A snapshot with a type, basis for (de)serializing value\nforms to/from binary data.","summary":"<p>A snapshot with a type, basis for (de)serializing value forms to/from binary data.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":287,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]},{"html_id":"novika/Novika/ValueForm","path":"Novika/ValueForm.html","kind":"module","full_name":"Novika::ValueForm","name":"ValueForm","abstract":false,"locations":[{"filename":"src/novika/forms/form.cr","line_number":88,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"novika/Novika/Decimal","kind":"class","full_name":"Novika::Decimal","name":"Decimal"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Includers are classes (that is, reference types) that want\nto pretend they're value forms, i.e., value types.","summary":"<p>Includers are classes (that is, reference types) that want to pretend they're value forms, i.e., value types.</p>"},{"html_id":"novika/Novika/Word","path":"Novika/Word.html","kind":"struct","full_name":"Novika::Word","name":"Word","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"},{"html_id":"novika/Novika/Schedulable","kind":"module","full_name":"Novika::Schedulable","name":"Schedulable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/words.cr","line_number":4,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Novika/Form","kind":"module","full_name":"Novika::Form","name":"Form"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Words open entries they're assigned to in the dictionary\nof their enclosing block.","summary":"<p>Words open entries they're assigned to in the dictionary of their enclosing block.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":17,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"\"word\""}}],"constructors":[{"html_id":"new(id:String)-class-method","name":"new","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"::String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","location":{"filename":"src/novika/forms/words.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"id","external_name":"id","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":"self"}],"visibility":"Public","body":"if id == other.id\nelse\n  return false\nend\ntrue\n"}},{"html_id":"desc(io:IO)-instance-method","name":"desc","doc":"Appends a string description of this form to *io*.","summary":"<p>Appends a string description of this form to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/novika/forms/words.cr","line_number":13,"url":null},"def":{"name":"desc","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << \"word named '\") << id) << \"'\""}},{"html_id":"hash(hasher)-instance-method","name":"hash","doc":"See `Object#hash(hasher)`","summary":"<p>See <code>Object#hash(hasher)</code></p>","abstract":false,"args":[{"name":"hasher","external_name":"hasher","restriction":""}],"args_string":"(hasher)","args_html":"(hasher)","def":{"name":"hash","args":[{"name":"hasher","external_name":"hasher","restriction":""}],"visibility":"Public","body":"hasher = id.hash(hasher)\nhasher\n"}},{"html_id":"id:String-instance-method","name":"id","doc":"Returns the underlying string id.","summary":"<p>Returns the underlying string id.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":8,"url":null},"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"on_parent_open(engine:Engine):self-instance-method","name":"on_parent_open","doc":"Reacts to this form's enclosing block being opened with *engine*.","summary":"<p>Reacts to this form's enclosing block being opened with <em>engine</em>.</p>","abstract":false,"args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"args_string":"(engine : Engine) : self","args_html":"(engine : <a href=\"../Novika/Engine.html\">Engine</a>) : <span class=\"k\">self</span>","location":{"filename":"src/novika/forms/words.cr","line_number":31,"url":null},"def":{"name":"on_parent_open","args":[{"name":"engine","external_name":"engine","restriction":"Engine"}],"return_type":"self","visibility":"Public","body":"if entry = engine.block.entry_for?(self)\n  entry.on_open(engine)\n  return self\nend\nblock = current = engine.block\nwhile block && (trap = block.entry_for?(Hook.trap))\n  form = trap.form\n  if form.is_a?(Block) && (form.prototype.same?(current.prototype))\n    block = block.parent?\n    next\n  end\n  engine.stack.add(Word.new(id))\n  trap.on_open(engine)\n  return self\nend\ndie(\"definition for #{self} not found in the enclosing block(s)\")\nself\n"}},{"html_id":"private?-instance-method","name":"private?","doc":"Returns whether this word is private (by convention).","summary":"<p>Returns whether this word is private (by convention).</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":22,"url":null},"def":{"name":"private?","visibility":"Public","body":"(id.prefixed_by?('_')) && (!(id.ends_with?('_')))"}},{"html_id":"to_quoted_word-instance-method","name":"to_quoted_word","doc":"Adds a level of quoting so this word becomes a quoted word.","summary":"<p>Adds a level of quoting so this word becomes a quoted word.</p>","abstract":false,"location":{"filename":"src/novika/forms/words.cr","line_number":27,"url":null},"def":{"name":"to_quoted_word","visibility":"Public","body":"QuotedWord.new(@id)"}},{"html_id":"to_s(io)-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":""}],"args_string":"(io)","args_html":"(io)","location":{"filename":"src/novika/forms/words.cr","line_number":67,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":""}],"visibility":"Public","body":"if id.in?(\"true\", \"false\")\n  io << \"#\"\nend\nio << id\n"}}]},{"html_id":"novika/Novika/WordSnapshot","path":"Novika/WordSnapshot.html","kind":"class","full_name":"Novika::WordSnapshot","name":"WordSnapshot","abstract":false,"superclass":{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},"ancestors":[{"html_id":"novika/Novika/Snapshot","kind":"class","full_name":"Novika::Snapshot","name":"Snapshot"},{"html_id":"novika/BinData","kind":"class","full_name":"BinData","name":"BinData"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/image.cr","line_number":196,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ENDIAN","name":"ENDIAN","value":"[\"big\"]","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"KLASS_NAME","name":"KLASS_NAME","value":"[Novika::WordSnapshot]","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"PARTS","name":"PARTS","value":"[{type: \"string\", name: id, cls: String, onlyif: nil, verify: nil, length: nil, value: nil, encoding: nil}] of Nil","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"},{"id":"REMAINING","name":"REMAINING","value":"[] of Nil","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>"}],"namespace":{"html_id":"novika/Novika","kind":"module","full_name":"Novika","name":"Novika"},"doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","class_methods":[{"html_id":"bit_fields-class-method","name":"bit_fields","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"bit_fields","visibility":"Public","body":"Novika::Snapshot.bit_fields.merge(@@bit_fields)"}}],"constructors":[{"html_id":"new(form:Word)-class-method","name":"new","abstract":false,"args":[{"name":"form","external_name":"form","restriction":"Word"}],"args_string":"(form : Word)","args_html":"(form : <a href=\"../Novika/Word.html\">Word</a>)","location":{"filename":"src/novika/image.cr","line_number":206,"url":null},"def":{"name":"new","args":[{"name":"form","external_name":"form","restriction":"Word"}],"visibility":"Public","body":"word = new\nword.id = form.id\nword\n"}}],"instance_methods":[{"html_id":"__format__:IO::ByteFormat-instance-method","name":"__format__","abstract":false,"location":{"filename":"src/novika/image.cr","line_number":197,"url":null},"def":{"name":"__format__","return_type":"IO::ByteFormat","visibility":"Public","body":"IO::ByteFormat::BigEndian"}},{"html_id":"id:String-instance-method","name":"id","doc":"Holds the 0-terminated id (name) of the word.","summary":"<p>Holds the 0-terminated id (name) of the word.</p>","abstract":false,"def":{"name":"id","return_type":"String","visibility":"Public","body":"@id"}},{"html_id":"id=(id:String)-instance-method","name":"id=","doc":"Holds the 0-terminated id (name) of the word.","summary":"<p>Holds the 0-terminated id (name) of the word.</p>","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"String"}],"args_string":"(id : String)","args_html":"(id : <a href=\"../String.html\">String</a>)","def":{"name":"id=","args":[{"name":"id","external_name":"id","restriction":"String"}],"visibility":"Public","body":"@id = id"}},{"html_id":"to_form(assembler)-instance-method","name":"to_form","abstract":false,"args":[{"name":"assembler","external_name":"assembler","restriction":""}],"args_string":"(assembler)","args_html":"(assembler)","location":{"filename":"src/novika/image.cr","line_number":202,"url":null},"def":{"name":"to_form","args":[{"name":"assembler","external_name":"assembler","restriction":""}],"visibility":"Public","body":"Word.new(id)"}}],"macros":[{"html_id":"novika_block_ref_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_block_ref_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_block_ref_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BlockRefSnapshot = Novika::BlockRefSnapshot.new\n        \n"}},{"html_id":"novika_boolean_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_boolean_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_boolean_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::BooleanSnapshot = Novika::BooleanSnapshot.new\n        \n"}},{"html_id":"novika_color_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_color_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_color_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::ColorSnapshot = Novika::ColorSnapshot.new\n        \n"}},{"html_id":"novika_large_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_large_decimal_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_large_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::LargeDecimalSnapshot = Novika::LargeDecimalSnapshot.new\n        \n"}},{"html_id":"novika_quote_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_quote_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_quote_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::QuoteSnapshot = Novika::QuoteSnapshot.new\n        \n"}},{"html_id":"novika_small_decimal_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_small_decimal_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_small_decimal_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::SmallDecimalSnapshot = Novika::SmallDecimalSnapshot.new\n        \n"}},{"html_id":"novika_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::Snapshot = Novika::Snapshot.new\n        \n"}},{"html_id":"novika_word_snapshot(name,onlyif=nil,verify=nil,value=nil)-macro","name":"novika_word_snapshot","doc":"Snapshot of a word form.\n\nIts type is `SnapshotType::Word`.","summary":"<p>Snapshot of a word form.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"args_string":"(name, onlyif = nil, verify = nil, value = nil)","args_html":"(name, onlyif = <span class=\"n\">nil</span>, verify = <span class=\"n\">nil</span>, value = <span class=\"n\">nil</span>)","location":{"filename":"src/novika/image.cr","line_number":196,"url":null},"def":{"name":"novika_word_snapshot","args":[{"name":"name","external_name":"name","restriction":""},{"name":"onlyif","default_value":"nil","external_name":"onlyif","restriction":""},{"name":"verify","default_value":"nil","external_name":"verify","restriction":""},{"name":"value","default_value":"nil","external_name":"value","restriction":""}],"visibility":"Public","body":"          custom \n{{ name.id }}\n : Novika::WordSnapshot = Novika::WordSnapshot.new\n        \n"}}]}]},{"html_id":"novika/Set","path":"Set.html","kind":"struct","full_name":"Set(T)","name":"Set","abstract":false,"superclass":{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika.cr","line_number":19,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"novika/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"`Set` implements a collection of unordered values with no duplicates.\n\nAn `Enumerable` object can be converted to `Set` using the `#to_set` method.\n\n`Set` uses `Hash` as storage, so you must note the following points:\n\n* Equality of elements is determined according to `Object#==` and `Object#hash`.\n* `Set` assumes that the identity of each element does not change while it is stored. Modifying an element of a set will render the set to an unreliable state.\n\n### Example\n\n```\ns1 = Set{1, 2}\ns2 = [1, 2].to_set\ns3 = Set.new [1, 2]\ns1 == s2 # => true\ns1 == s3 # => true\ns1.add(2)\ns1.concat([6, 8])\ns1.subset_of? s2 # => false\ns2.subset_of? s1 # => true\n```","summary":"<p><code><a href=\"Set.html\">Set</a></code> implements a collection of unordered values with no duplicates.</p>","instance_methods":[{"html_id":"reject!(*args,**options)-instance-method","name":"reject!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/novika.cr","line_number":20,"url":null},"def":{"name":"reject!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@hash.reject!(*args, **options)"}},{"html_id":"reject!(*args,**options,&)-instance-method","name":"reject!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/novika.cr","line_number":20,"url":null},"def":{"name":"reject!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@hash.reject!(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"novika/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"novika/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika.cr","line_number":6,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"novika/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nSee [`String` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/string.html) in the language reference.\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nA string might end up being composed of bytes which form an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but every\nbyte that doesn't start a valid UTF-8 byte sequence is interpreted as though\nit encodes the Unicode replacement character (U+FFFD) by itself. For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.\n\nNote that this interpretation only applies to methods inside Crystal; calling\n`#to_slice` or `#to_unsafe`, e.g. when passing a string to a C library, will\nexpose the invalid UTF-8 byte sequences. In particular, `Regex`'s underlying\nengine may reject strings that are not valid UTF-8, or it may invoke undefined\nbehavior on invalid strings. If this is undesired, `#scrub` could be used to\nremove the offending byte sequences first.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","instance_methods":[{"html_id":"prefixed_by?(prefix:String):Bool-instance-method","name":"prefixed_by?","doc":"Returns whether this string starts with *prefix* but also\nhas other characters after it.","summary":"<p>Returns whether this string starts with <em>prefix</em> but also has other characters after it.</p>","abstract":false,"args":[{"name":"prefix","external_name":"prefix","restriction":"String"}],"args_string":"(prefix : String) : Bool","args_html":"(prefix : <a href=\"String.html\">String</a>) : Bool","location":{"filename":"src/novika.cr","line_number":9,"url":null},"def":{"name":"prefixed_by?","args":[{"name":"prefix","external_name":"prefix","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"bytesize > prefix.bytesize && (starts_with?(prefix))"}},{"html_id":"prefixed_by?(prefix:Char):Bool-instance-method","name":"prefixed_by?","doc":"Returns whether this string starts with *prefix* but also\nhas other characters after it.","summary":"<p>Returns whether this string starts with <em>prefix</em> but also has other characters after it.</p>","abstract":false,"args":[{"name":"prefix","external_name":"prefix","restriction":"Char"}],"args_string":"(prefix : Char) : Bool","args_html":"(prefix : Char) : Bool","location":{"filename":"src/novika.cr","line_number":14,"url":null},"def":{"name":"prefixed_by?","args":[{"name":"prefix","external_name":"prefix","restriction":"Char"}],"return_type":"Bool","visibility":"Public","body":"bytesize > 1 && (starts_with?(prefix))"}}]},{"html_id":"novika/Union","path":"Union.html","kind":"struct","full_name":"Union(*T)","name":"Union","abstract":false,"superclass":{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"novika/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"novika/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/novika/forms/form.cr","line_number":1,"url":null}],"repository_name":"novika","program":false,"enum":false,"alias":false,"const":false,"doc":"A union type represents the possibility of a variable or an expression\nhaving more than one possible type at compile time.\n\nWhen invoking a method on a union type, the language checks that the\nmethod exists and can be resolved (typed) for each type in the union.\nFor this reason, adding instance methods to `Union` makes no sense and\nhas no effect. However, adding class method to `Union` is possible\nand can be useful. One example is parsing `JSON` into one of many\npossible types.\n\nUnion is special in that it is a generic type but instantiating it\nmight not return a union type:\n\n```\nUnion(Int32 | String)      # => (Int32 | String)\nUnion(Int32)               # => Int32\nUnion(Int32, Int32, Int32) # => Int32\n```","summary":"<p>A union type represents the possibility of a variable or an expression having more than one possible type at compile time.</p>","class_methods":[{"html_id":"typedesc-class-method","name":"typedesc","doc":"Joins union members' `Form#typedesc`.","summary":"<p>Joins union members' <code>Form#typedesc</code>.</p>","abstract":false,"location":{"filename":"src/novika/forms/form.cr","line_number":3,"url":null},"def":{"name":"typedesc","visibility":"Public","body":"String.build do |io|\n  {% if true %}\n        {% for member, index in T %}\n          io << {{ member }}.typedesc\n          {% if index == (T.size - 1) %}\n          {% else %}{% if index == (T.size - 2) %}\n            {% if T.size == 2 %}\n              io << \" or \"\n            {% else %}\n              io << \", or \"\n            {% end %}\n          {% else %}\n            io << \", \"\n          {% end %}{% end %}\n        {% end %}\n      {% end %}\nend"}}]}]}})